
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20000750 	.word	0x20000750
 8000004:	08003d01 	.word	0x08003d01
 8000008:	08005a95 	.word	0x08005a95
 800000c:	08003c6d 	.word	0x08003c6d
 8000010:	08003c6d 	.word	0x08003c6d
 8000014:	08003c6d 	.word	0x08003c6d
 8000018:	08003c6d 	.word	0x08003c6d
 800001c:	08003c6d 	.word	0x08003c6d
 8000020:	08003c6d 	.word	0x08003c6d
 8000024:	08003c6d 	.word	0x08003c6d
 8000028:	08003c6d 	.word	0x08003c6d
 800002c:	08003b49 	.word	0x08003b49
 8000030:	08003c6d 	.word	0x08003c6d
 8000034:	08003c6d 	.word	0x08003c6d
 8000038:	08003a99 	.word	0x08003a99
 800003c:	080038b5 	.word	0x080038b5

08000040 <_irq_vector_table>:
 8000040:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000050:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000060:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000070:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000080:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000090:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80000a0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80000b0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80000c0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80000d0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80000e0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80000f0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000100:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000110:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000120:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000130:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000140:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000150:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000160:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000170:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000180:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 8000190:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80001a0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80001b0:	08003cd9 08003cd9 08003cd9 08003cd9     .<...<...<...<..
 80001c0:	08003cd9                                .<..

Disassembly of section _TEXT_SECTION_NAME_2:

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <quorem>:
 8000270:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	6903      	ldr	r3, [r0, #16]
 8000276:	690c      	ldr	r4, [r1, #16]
 8000278:	42a3      	cmp	r3, r4
 800027a:	4680      	mov	r8, r0
 800027c:	db7f      	blt.n	800037e <quorem+0x10e>
 800027e:	3c01      	subs	r4, #1
 8000280:	f101 0714 	add.w	r7, r1, #20
 8000284:	00a0      	lsls	r0, r4, #2
 8000286:	f108 0514 	add.w	r5, r8, #20
 800028a:	182b      	adds	r3, r5, r0
 800028c:	9301      	str	r3, [sp, #4]
 800028e:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 8000292:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8000296:	3301      	adds	r3, #1
 8000298:	429a      	cmp	r2, r3
 800029a:	eb07 0900 	add.w	r9, r7, r0
 800029e:	fbb2 f6f3 	udiv	r6, r2, r3
 80002a2:	d331      	bcc.n	8000308 <quorem+0x98>
 80002a4:	f04f 0a00 	mov.w	sl, #0
 80002a8:	46bc      	mov	ip, r7
 80002aa:	46ae      	mov	lr, r5
 80002ac:	46d3      	mov	fp, sl
 80002ae:	f85c 2b04 	ldr.w	r2, [ip], #4
 80002b2:	b293      	uxth	r3, r2
 80002b4:	fb06 a303 	mla	r3, r6, r3, sl
 80002b8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80002bc:	b29b      	uxth	r3, r3
 80002be:	ebab 0303 	sub.w	r3, fp, r3
 80002c2:	0c12      	lsrs	r2, r2, #16
 80002c4:	f8de b000 	ldr.w	fp, [lr]
 80002c8:	fb06 a202 	mla	r2, r6, r2, sl
 80002cc:	fa13 f38b 	uxtah	r3, r3, fp
 80002d0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80002d4:	fa1f fb82 	uxth.w	fp, r2
 80002d8:	f8de 2000 	ldr.w	r2, [lr]
 80002dc:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80002e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80002e4:	b29b      	uxth	r3, r3
 80002e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ea:	45e1      	cmp	r9, ip
 80002ec:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80002f0:	f84e 3b04 	str.w	r3, [lr], #4
 80002f4:	d2db      	bcs.n	80002ae <quorem+0x3e>
 80002f6:	582b      	ldr	r3, [r5, r0]
 80002f8:	b933      	cbnz	r3, 8000308 <quorem+0x98>
 80002fa:	9b01      	ldr	r3, [sp, #4]
 80002fc:	3b04      	subs	r3, #4
 80002fe:	429d      	cmp	r5, r3
 8000300:	461a      	mov	r2, r3
 8000302:	d330      	bcc.n	8000366 <quorem+0xf6>
 8000304:	f8c8 4010 	str.w	r4, [r8, #16]
 8000308:	4640      	mov	r0, r8
 800030a:	f002 f8c2 	bl	8002492 <__mcmp>
 800030e:	2800      	cmp	r0, #0
 8000310:	db25      	blt.n	800035e <quorem+0xee>
 8000312:	3601      	adds	r6, #1
 8000314:	4628      	mov	r0, r5
 8000316:	f04f 0c00 	mov.w	ip, #0
 800031a:	f857 2b04 	ldr.w	r2, [r7], #4
 800031e:	f8d0 e000 	ldr.w	lr, [r0]
 8000322:	b293      	uxth	r3, r2
 8000324:	ebac 0303 	sub.w	r3, ip, r3
 8000328:	0c12      	lsrs	r2, r2, #16
 800032a:	fa13 f38e 	uxtah	r3, r3, lr
 800032e:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8000332:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8000336:	b29b      	uxth	r3, r3
 8000338:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800033c:	45b9      	cmp	r9, r7
 800033e:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8000342:	f840 3b04 	str.w	r3, [r0], #4
 8000346:	d2e8      	bcs.n	800031a <quorem+0xaa>
 8000348:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800034c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8000350:	b92a      	cbnz	r2, 800035e <quorem+0xee>
 8000352:	3b04      	subs	r3, #4
 8000354:	429d      	cmp	r5, r3
 8000356:	461a      	mov	r2, r3
 8000358:	d30b      	bcc.n	8000372 <quorem+0x102>
 800035a:	f8c8 4010 	str.w	r4, [r8, #16]
 800035e:	4630      	mov	r0, r6
 8000360:	b003      	add	sp, #12
 8000362:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000366:	6812      	ldr	r2, [r2, #0]
 8000368:	3b04      	subs	r3, #4
 800036a:	2a00      	cmp	r2, #0
 800036c:	d1ca      	bne.n	8000304 <quorem+0x94>
 800036e:	3c01      	subs	r4, #1
 8000370:	e7c5      	b.n	80002fe <quorem+0x8e>
 8000372:	6812      	ldr	r2, [r2, #0]
 8000374:	3b04      	subs	r3, #4
 8000376:	2a00      	cmp	r2, #0
 8000378:	d1ef      	bne.n	800035a <quorem+0xea>
 800037a:	3c01      	subs	r4, #1
 800037c:	e7ea      	b.n	8000354 <quorem+0xe4>
 800037e:	2000      	movs	r0, #0
 8000380:	e7ee      	b.n	8000360 <quorem+0xf0>

08000382 <_dtoa_r>:
 8000382:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000386:	b099      	sub	sp, #100	; 0x64
 8000388:	ec55 4b10 	vmov	r4, r5, d0
 800038c:	9108      	str	r1, [sp, #32]
 800038e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8000390:	920d      	str	r2, [sp, #52]	; 0x34
 8000392:	4683      	mov	fp, r0
 8000394:	9314      	str	r3, [sp, #80]	; 0x50
 8000396:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8000398:	e9cd 4500 	strd	r4, r5, [sp]
 800039c:	b149      	cbz	r1, 80003b2 <_dtoa_r+0x30>
 800039e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80003a0:	604a      	str	r2, [r1, #4]
 80003a2:	2301      	movs	r3, #1
 80003a4:	4093      	lsls	r3, r2
 80003a6:	608b      	str	r3, [r1, #8]
 80003a8:	f001 fe75 	bl	8002096 <_Bfree>
 80003ac:	2300      	movs	r3, #0
 80003ae:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 80003b2:	1e2b      	subs	r3, r5, #0
 80003b4:	bfb9      	ittee	lt
 80003b6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80003ba:	9301      	strlt	r3, [sp, #4]
 80003bc:	2300      	movge	r3, #0
 80003be:	6033      	strge	r3, [r6, #0]
 80003c0:	9c01      	ldr	r4, [sp, #4]
 80003c2:	4bb3      	ldr	r3, [pc, #716]	; (8000690 <_dtoa_r+0x30e>)
 80003c4:	bfbc      	itt	lt
 80003c6:	2201      	movlt	r2, #1
 80003c8:	6032      	strlt	r2, [r6, #0]
 80003ca:	43a3      	bics	r3, r4
 80003cc:	d11a      	bne.n	8000404 <_dtoa_r+0x82>
 80003ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80003d0:	f242 730f 	movw	r3, #9999	; 0x270f
 80003d4:	6013      	str	r3, [r2, #0]
 80003d6:	9a00      	ldr	r2, [sp, #0]
 80003d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80003dc:	4313      	orrs	r3, r2
 80003de:	f000 854e 	beq.w	8000e7e <_dtoa_r+0xafc>
 80003e2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80003e4:	b90b      	cbnz	r3, 80003ea <_dtoa_r+0x68>
 80003e6:	4bab      	ldr	r3, [pc, #684]	; (8000694 <_dtoa_r+0x312>)
 80003e8:	e023      	b.n	8000432 <_dtoa_r+0xb0>
 80003ea:	4baa      	ldr	r3, [pc, #680]	; (8000694 <_dtoa_r+0x312>)
 80003ec:	9303      	str	r3, [sp, #12]
 80003ee:	3303      	adds	r3, #3
 80003f0:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80003f2:	6013      	str	r3, [r2, #0]
 80003f4:	9803      	ldr	r0, [sp, #12]
 80003f6:	b019      	add	sp, #100	; 0x64
 80003f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003fc:	4ba6      	ldr	r3, [pc, #664]	; (8000698 <_dtoa_r+0x316>)
 80003fe:	9303      	str	r3, [sp, #12]
 8000400:	3308      	adds	r3, #8
 8000402:	e7f5      	b.n	80003f0 <_dtoa_r+0x6e>
 8000404:	ed9d 7b00 	vldr	d7, [sp]
 8000408:	2200      	movs	r2, #0
 800040a:	2300      	movs	r3, #0
 800040c:	ec51 0b17 	vmov	r0, r1, d7
 8000410:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8000414:	f001 f980 	bl	8001718 <__aeabi_dcmpeq>
 8000418:	4607      	mov	r7, r0
 800041a:	b160      	cbz	r0, 8000436 <_dtoa_r+0xb4>
 800041c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800041e:	2301      	movs	r3, #1
 8000420:	6013      	str	r3, [r2, #0]
 8000422:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000424:	2b00      	cmp	r3, #0
 8000426:	f000 8527 	beq.w	8000e78 <_dtoa_r+0xaf6>
 800042a:	4b9c      	ldr	r3, [pc, #624]	; (800069c <_dtoa_r+0x31a>)
 800042c:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800042e:	6013      	str	r3, [r2, #0]
 8000430:	3b01      	subs	r3, #1
 8000432:	9303      	str	r3, [sp, #12]
 8000434:	e7de      	b.n	80003f4 <_dtoa_r+0x72>
 8000436:	aa16      	add	r2, sp, #88	; 0x58
 8000438:	a917      	add	r1, sp, #92	; 0x5c
 800043a:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 800043e:	4658      	mov	r0, fp
 8000440:	f002 f914 	bl	800266c <__d2b>
 8000444:	f3c4 560a 	ubfx	r6, r4, #20, #11
 8000448:	4680      	mov	r8, r0
 800044a:	2e00      	cmp	r6, #0
 800044c:	d07f      	beq.n	800054e <_dtoa_r+0x1cc>
 800044e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000450:	9715      	str	r7, [sp, #84]	; 0x54
 8000452:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000456:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 800045a:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800045e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8000462:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8000466:	2200      	movs	r2, #0
 8000468:	4b8d      	ldr	r3, [pc, #564]	; (80006a0 <_dtoa_r+0x31e>)
 800046a:	4620      	mov	r0, r4
 800046c:	4629      	mov	r1, r5
 800046e:	f000 fd33 	bl	8000ed8 <__aeabi_dsub>
 8000472:	a381      	add	r3, pc, #516	; (adr r3, 8000678 <_dtoa_r+0x2f6>)
 8000474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000478:	f000 fee6 	bl	8001248 <__aeabi_dmul>
 800047c:	a380      	add	r3, pc, #512	; (adr r3, 8000680 <_dtoa_r+0x2fe>)
 800047e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000482:	f000 fd2b 	bl	8000edc <__adddf3>
 8000486:	4604      	mov	r4, r0
 8000488:	4630      	mov	r0, r6
 800048a:	460d      	mov	r5, r1
 800048c:	f000 fe72 	bl	8001174 <__aeabi_i2d>
 8000490:	a37d      	add	r3, pc, #500	; (adr r3, 8000688 <_dtoa_r+0x306>)
 8000492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000496:	f000 fed7 	bl	8001248 <__aeabi_dmul>
 800049a:	4602      	mov	r2, r0
 800049c:	460b      	mov	r3, r1
 800049e:	4620      	mov	r0, r4
 80004a0:	4629      	mov	r1, r5
 80004a2:	f000 fd1b 	bl	8000edc <__adddf3>
 80004a6:	4604      	mov	r4, r0
 80004a8:	460d      	mov	r5, r1
 80004aa:	f002 fa69 	bl	8002980 <__aeabi_d2iz>
 80004ae:	2200      	movs	r2, #0
 80004b0:	4682      	mov	sl, r0
 80004b2:	2300      	movs	r3, #0
 80004b4:	4620      	mov	r0, r4
 80004b6:	4629      	mov	r1, r5
 80004b8:	f001 f938 	bl	800172c <__aeabi_dcmplt>
 80004bc:	b148      	cbz	r0, 80004d2 <_dtoa_r+0x150>
 80004be:	4650      	mov	r0, sl
 80004c0:	f000 fe58 	bl	8001174 <__aeabi_i2d>
 80004c4:	4622      	mov	r2, r4
 80004c6:	462b      	mov	r3, r5
 80004c8:	f001 f926 	bl	8001718 <__aeabi_dcmpeq>
 80004cc:	b908      	cbnz	r0, 80004d2 <_dtoa_r+0x150>
 80004ce:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80004d2:	f1ba 0f16 	cmp.w	sl, #22
 80004d6:	d859      	bhi.n	800058c <_dtoa_r+0x20a>
 80004d8:	4b72      	ldr	r3, [pc, #456]	; (80006a4 <_dtoa_r+0x322>)
 80004da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80004de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004e2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80004e6:	f001 f921 	bl	800172c <__aeabi_dcmplt>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	d050      	beq.n	8000590 <_dtoa_r+0x20e>
 80004ee:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80004f2:	2300      	movs	r3, #0
 80004f4:	9311      	str	r3, [sp, #68]	; 0x44
 80004f6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80004f8:	1b9e      	subs	r6, r3, r6
 80004fa:	1e73      	subs	r3, r6, #1
 80004fc:	9307      	str	r3, [sp, #28]
 80004fe:	bf45      	ittet	mi
 8000500:	f1c6 0301 	rsbmi	r3, r6, #1
 8000504:	9306      	strmi	r3, [sp, #24]
 8000506:	2300      	movpl	r3, #0
 8000508:	2300      	movmi	r3, #0
 800050a:	bf4c      	ite	mi
 800050c:	9307      	strmi	r3, [sp, #28]
 800050e:	9306      	strpl	r3, [sp, #24]
 8000510:	f1ba 0f00 	cmp.w	sl, #0
 8000514:	db3e      	blt.n	8000594 <_dtoa_r+0x212>
 8000516:	9b07      	ldr	r3, [sp, #28]
 8000518:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 800051c:	4453      	add	r3, sl
 800051e:	9307      	str	r3, [sp, #28]
 8000520:	2300      	movs	r3, #0
 8000522:	9309      	str	r3, [sp, #36]	; 0x24
 8000524:	9b08      	ldr	r3, [sp, #32]
 8000526:	2b09      	cmp	r3, #9
 8000528:	f200 808d 	bhi.w	8000646 <_dtoa_r+0x2c4>
 800052c:	2b05      	cmp	r3, #5
 800052e:	bfc4      	itt	gt
 8000530:	3b04      	subgt	r3, #4
 8000532:	9308      	strgt	r3, [sp, #32]
 8000534:	9b08      	ldr	r3, [sp, #32]
 8000536:	f1a3 0302 	sub.w	r3, r3, #2
 800053a:	bfcc      	ite	gt
 800053c:	2400      	movgt	r4, #0
 800053e:	2401      	movle	r4, #1
 8000540:	2b03      	cmp	r3, #3
 8000542:	f200 808b 	bhi.w	800065c <_dtoa_r+0x2da>
 8000546:	e8df f003 	tbb	[pc, r3]
 800054a:	3c2f      	.short	0x3c2f
 800054c:	7c3a      	.short	0x7c3a
 800054e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
 8000552:	441e      	add	r6, r3
 8000554:	f206 4032 	addw	r0, r6, #1074	; 0x432
 8000558:	2820      	cmp	r0, #32
 800055a:	dd11      	ble.n	8000580 <_dtoa_r+0x1fe>
 800055c:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8000560:	9b00      	ldr	r3, [sp, #0]
 8000562:	4084      	lsls	r4, r0
 8000564:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8000568:	fa23 f000 	lsr.w	r0, r3, r0
 800056c:	4320      	orrs	r0, r4
 800056e:	f000 fdf1 	bl	8001154 <__aeabi_ui2d>
 8000572:	2301      	movs	r3, #1
 8000574:	4604      	mov	r4, r0
 8000576:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
 800057a:	3e01      	subs	r6, #1
 800057c:	9315      	str	r3, [sp, #84]	; 0x54
 800057e:	e772      	b.n	8000466 <_dtoa_r+0xe4>
 8000580:	9b00      	ldr	r3, [sp, #0]
 8000582:	f1c0 0020 	rsb	r0, r0, #32
 8000586:	fa03 f000 	lsl.w	r0, r3, r0
 800058a:	e7f0      	b.n	800056e <_dtoa_r+0x1ec>
 800058c:	2301      	movs	r3, #1
 800058e:	e7b1      	b.n	80004f4 <_dtoa_r+0x172>
 8000590:	9011      	str	r0, [sp, #68]	; 0x44
 8000592:	e7b0      	b.n	80004f6 <_dtoa_r+0x174>
 8000594:	9b06      	ldr	r3, [sp, #24]
 8000596:	eba3 030a 	sub.w	r3, r3, sl
 800059a:	9306      	str	r3, [sp, #24]
 800059c:	f1ca 0300 	rsb	r3, sl, #0
 80005a0:	9309      	str	r3, [sp, #36]	; 0x24
 80005a2:	2300      	movs	r3, #0
 80005a4:	9310      	str	r3, [sp, #64]	; 0x40
 80005a6:	e7bd      	b.n	8000524 <_dtoa_r+0x1a2>
 80005a8:	2300      	movs	r3, #0
 80005aa:	930c      	str	r3, [sp, #48]	; 0x30
 80005ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	dc57      	bgt.n	8000662 <_dtoa_r+0x2e0>
 80005b2:	2301      	movs	r3, #1
 80005b4:	9304      	str	r3, [sp, #16]
 80005b6:	4699      	mov	r9, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	920d      	str	r2, [sp, #52]	; 0x34
 80005bc:	e00c      	b.n	80005d8 <_dtoa_r+0x256>
 80005be:	2301      	movs	r3, #1
 80005c0:	e7f3      	b.n	80005aa <_dtoa_r+0x228>
 80005c2:	2300      	movs	r3, #0
 80005c4:	930c      	str	r3, [sp, #48]	; 0x30
 80005c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80005c8:	4453      	add	r3, sl
 80005ca:	f103 0901 	add.w	r9, r3, #1
 80005ce:	9304      	str	r3, [sp, #16]
 80005d0:	464b      	mov	r3, r9
 80005d2:	2b01      	cmp	r3, #1
 80005d4:	bfb8      	it	lt
 80005d6:	2301      	movlt	r3, #1
 80005d8:	2200      	movs	r2, #0
 80005da:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 80005de:	2204      	movs	r2, #4
 80005e0:	f102 0014 	add.w	r0, r2, #20
 80005e4:	4298      	cmp	r0, r3
 80005e6:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 80005ea:	d93e      	bls.n	800066a <_dtoa_r+0x2e8>
 80005ec:	4658      	mov	r0, fp
 80005ee:	f001 fd2d 	bl	800204c <_Balloc>
 80005f2:	f1b9 0f0e 	cmp.w	r9, #14
 80005f6:	9003      	str	r0, [sp, #12]
 80005f8:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80005fc:	f200 80d7 	bhi.w	80007ae <_dtoa_r+0x42c>
 8000600:	2c00      	cmp	r4, #0
 8000602:	f000 80d4 	beq.w	80007ae <_dtoa_r+0x42c>
 8000606:	f1ba 0f00 	cmp.w	sl, #0
 800060a:	dd69      	ble.n	80006e0 <_dtoa_r+0x35e>
 800060c:	4a25      	ldr	r2, [pc, #148]	; (80006a4 <_dtoa_r+0x322>)
 800060e:	f00a 030f 	and.w	r3, sl, #15
 8000612:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8000616:	ed93 7b00 	vldr	d7, [r3]
 800061a:	ea4f 142a 	mov.w	r4, sl, asr #4
 800061e:	06e2      	lsls	r2, r4, #27
 8000620:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8000624:	d55a      	bpl.n	80006dc <_dtoa_r+0x35a>
 8000626:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <_dtoa_r+0x326>)
 8000628:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800062c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000630:	f000 ff34 	bl	800149c <__aeabi_ddiv>
 8000634:	e9cd 0100 	strd	r0, r1, [sp]
 8000638:	f004 040f 	and.w	r4, r4, #15
 800063c:	2603      	movs	r6, #3
 800063e:	4d1a      	ldr	r5, [pc, #104]	; (80006a8 <_dtoa_r+0x326>)
 8000640:	e041      	b.n	80006c6 <_dtoa_r+0x344>
 8000642:	2301      	movs	r3, #1
 8000644:	e7be      	b.n	80005c4 <_dtoa_r+0x242>
 8000646:	2401      	movs	r4, #1
 8000648:	2300      	movs	r3, #0
 800064a:	9308      	str	r3, [sp, #32]
 800064c:	940c      	str	r4, [sp, #48]	; 0x30
 800064e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000652:	9304      	str	r3, [sp, #16]
 8000654:	4699      	mov	r9, r3
 8000656:	2200      	movs	r2, #0
 8000658:	2312      	movs	r3, #18
 800065a:	e7ae      	b.n	80005ba <_dtoa_r+0x238>
 800065c:	2301      	movs	r3, #1
 800065e:	930c      	str	r3, [sp, #48]	; 0x30
 8000660:	e7f5      	b.n	800064e <_dtoa_r+0x2cc>
 8000662:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000664:	9304      	str	r3, [sp, #16]
 8000666:	4699      	mov	r9, r3
 8000668:	e7b6      	b.n	80005d8 <_dtoa_r+0x256>
 800066a:	3101      	adds	r1, #1
 800066c:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8000670:	0052      	lsls	r2, r2, #1
 8000672:	e7b5      	b.n	80005e0 <_dtoa_r+0x25e>
 8000674:	f3af 8000 	nop.w
 8000678:	636f4361 	.word	0x636f4361
 800067c:	3fd287a7 	.word	0x3fd287a7
 8000680:	8b60c8b3 	.word	0x8b60c8b3
 8000684:	3fc68a28 	.word	0x3fc68a28
 8000688:	509f79fb 	.word	0x509f79fb
 800068c:	3fd34413 	.word	0x3fd34413
 8000690:	7ff00000 	.word	0x7ff00000
 8000694:	08006ab5 	.word	0x08006ab5
 8000698:	08006ab9 	.word	0x08006ab9
 800069c:	080069d8 	.word	0x080069d8
 80006a0:	3ff80000 	.word	0x3ff80000
 80006a4:	08006648 	.word	0x08006648
 80006a8:	08006738 	.word	0x08006738
 80006ac:	07e3      	lsls	r3, r4, #31
 80006ae:	d508      	bpl.n	80006c2 <_dtoa_r+0x340>
 80006b0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80006b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80006b8:	f000 fdc6 	bl	8001248 <__aeabi_dmul>
 80006bc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80006c0:	3601      	adds	r6, #1
 80006c2:	1064      	asrs	r4, r4, #1
 80006c4:	3508      	adds	r5, #8
 80006c6:	2c00      	cmp	r4, #0
 80006c8:	d1f0      	bne.n	80006ac <_dtoa_r+0x32a>
 80006ca:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80006ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80006d2:	f000 fee3 	bl	800149c <__aeabi_ddiv>
 80006d6:	e9cd 0100 	strd	r0, r1, [sp]
 80006da:	e01a      	b.n	8000712 <_dtoa_r+0x390>
 80006dc:	2602      	movs	r6, #2
 80006de:	e7ae      	b.n	800063e <_dtoa_r+0x2bc>
 80006e0:	f000 809f 	beq.w	8000822 <_dtoa_r+0x4a0>
 80006e4:	f1ca 0400 	rsb	r4, sl, #0
 80006e8:	4b9e      	ldr	r3, [pc, #632]	; (8000964 <_dtoa_r+0x5e2>)
 80006ea:	4d9f      	ldr	r5, [pc, #636]	; (8000968 <_dtoa_r+0x5e6>)
 80006ec:	f004 020f 	and.w	r2, r4, #15
 80006f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80006f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80006f8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80006fc:	f000 fda4 	bl	8001248 <__aeabi_dmul>
 8000700:	e9cd 0100 	strd	r0, r1, [sp]
 8000704:	1124      	asrs	r4, r4, #4
 8000706:	2300      	movs	r3, #0
 8000708:	2602      	movs	r6, #2
 800070a:	2c00      	cmp	r4, #0
 800070c:	d17e      	bne.n	800080c <_dtoa_r+0x48a>
 800070e:	2b00      	cmp	r3, #0
 8000710:	d1e1      	bne.n	80006d6 <_dtoa_r+0x354>
 8000712:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000714:	2b00      	cmp	r3, #0
 8000716:	f000 8086 	beq.w	8000826 <_dtoa_r+0x4a4>
 800071a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800071e:	2200      	movs	r2, #0
 8000720:	4b92      	ldr	r3, [pc, #584]	; (800096c <_dtoa_r+0x5ea>)
 8000722:	4620      	mov	r0, r4
 8000724:	4629      	mov	r1, r5
 8000726:	f001 f801 	bl	800172c <__aeabi_dcmplt>
 800072a:	2800      	cmp	r0, #0
 800072c:	d07b      	beq.n	8000826 <_dtoa_r+0x4a4>
 800072e:	f1b9 0f00 	cmp.w	r9, #0
 8000732:	d078      	beq.n	8000826 <_dtoa_r+0x4a4>
 8000734:	9b04      	ldr	r3, [sp, #16]
 8000736:	2b00      	cmp	r3, #0
 8000738:	dd35      	ble.n	80007a6 <_dtoa_r+0x424>
 800073a:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800073e:	930a      	str	r3, [sp, #40]	; 0x28
 8000740:	4620      	mov	r0, r4
 8000742:	2200      	movs	r2, #0
 8000744:	4b8a      	ldr	r3, [pc, #552]	; (8000970 <_dtoa_r+0x5ee>)
 8000746:	4629      	mov	r1, r5
 8000748:	f000 fd7e 	bl	8001248 <__aeabi_dmul>
 800074c:	e9cd 0100 	strd	r0, r1, [sp]
 8000750:	9c04      	ldr	r4, [sp, #16]
 8000752:	3601      	adds	r6, #1
 8000754:	4630      	mov	r0, r6
 8000756:	f000 fd0d 	bl	8001174 <__aeabi_i2d>
 800075a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800075e:	f000 fd73 	bl	8001248 <__aeabi_dmul>
 8000762:	2200      	movs	r2, #0
 8000764:	4b83      	ldr	r3, [pc, #524]	; (8000974 <_dtoa_r+0x5f2>)
 8000766:	f000 fbb9 	bl	8000edc <__adddf3>
 800076a:	4606      	mov	r6, r0
 800076c:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8000770:	2c00      	cmp	r4, #0
 8000772:	d15c      	bne.n	800082e <_dtoa_r+0x4ac>
 8000774:	2200      	movs	r2, #0
 8000776:	4b80      	ldr	r3, [pc, #512]	; (8000978 <_dtoa_r+0x5f6>)
 8000778:	e9dd 0100 	ldrd	r0, r1, [sp]
 800077c:	f000 fbac 	bl	8000ed8 <__aeabi_dsub>
 8000780:	4632      	mov	r2, r6
 8000782:	463b      	mov	r3, r7
 8000784:	e9cd 0100 	strd	r0, r1, [sp]
 8000788:	f000 ffee 	bl	8001768 <__aeabi_dcmpgt>
 800078c:	2800      	cmp	r0, #0
 800078e:	f040 828a 	bne.w	8000ca6 <_dtoa_r+0x924>
 8000792:	4632      	mov	r2, r6
 8000794:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8000798:	e9dd 0100 	ldrd	r0, r1, [sp]
 800079c:	f000 ffc6 	bl	800172c <__aeabi_dcmplt>
 80007a0:	2800      	cmp	r0, #0
 80007a2:	f040 827e 	bne.w	8000ca2 <_dtoa_r+0x920>
 80007a6:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 80007aa:	e9cd 3400 	strd	r3, r4, [sp]
 80007ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	f2c0 814d 	blt.w	8000a50 <_dtoa_r+0x6ce>
 80007b6:	f1ba 0f0e 	cmp.w	sl, #14
 80007ba:	f300 8149 	bgt.w	8000a50 <_dtoa_r+0x6ce>
 80007be:	4b69      	ldr	r3, [pc, #420]	; (8000964 <_dtoa_r+0x5e2>)
 80007c0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80007c4:	ed93 7b00 	vldr	d7, [r3]
 80007c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80007d0:	f280 80d6 	bge.w	8000980 <_dtoa_r+0x5fe>
 80007d4:	f1b9 0f00 	cmp.w	r9, #0
 80007d8:	f300 80d2 	bgt.w	8000980 <_dtoa_r+0x5fe>
 80007dc:	f040 8260 	bne.w	8000ca0 <_dtoa_r+0x91e>
 80007e0:	2200      	movs	r2, #0
 80007e2:	4b65      	ldr	r3, [pc, #404]	; (8000978 <_dtoa_r+0x5f6>)
 80007e4:	ec51 0b17 	vmov	r0, r1, d7
 80007e8:	f000 fd2e 	bl	8001248 <__aeabi_dmul>
 80007ec:	e9dd 2300 	ldrd	r2, r3, [sp]
 80007f0:	f000 ffb0 	bl	8001754 <__aeabi_dcmpge>
 80007f4:	464c      	mov	r4, r9
 80007f6:	464e      	mov	r6, r9
 80007f8:	2800      	cmp	r0, #0
 80007fa:	f040 8239 	bne.w	8000c70 <_dtoa_r+0x8ee>
 80007fe:	9d03      	ldr	r5, [sp, #12]
 8000800:	2331      	movs	r3, #49	; 0x31
 8000802:	f805 3b01 	strb.w	r3, [r5], #1
 8000806:	f10a 0a01 	add.w	sl, sl, #1
 800080a:	e235      	b.n	8000c78 <_dtoa_r+0x8f6>
 800080c:	07e7      	lsls	r7, r4, #31
 800080e:	d505      	bpl.n	800081c <_dtoa_r+0x49a>
 8000810:	e9d5 2300 	ldrd	r2, r3, [r5]
 8000814:	f000 fd18 	bl	8001248 <__aeabi_dmul>
 8000818:	3601      	adds	r6, #1
 800081a:	2301      	movs	r3, #1
 800081c:	1064      	asrs	r4, r4, #1
 800081e:	3508      	adds	r5, #8
 8000820:	e773      	b.n	800070a <_dtoa_r+0x388>
 8000822:	2602      	movs	r6, #2
 8000824:	e775      	b.n	8000712 <_dtoa_r+0x390>
 8000826:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 800082a:	464c      	mov	r4, r9
 800082c:	e792      	b.n	8000754 <_dtoa_r+0x3d2>
 800082e:	9903      	ldr	r1, [sp, #12]
 8000830:	4b4c      	ldr	r3, [pc, #304]	; (8000964 <_dtoa_r+0x5e2>)
 8000832:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000836:	440c      	add	r4, r1
 8000838:	990c      	ldr	r1, [sp, #48]	; 0x30
 800083a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800083e:	2900      	cmp	r1, #0
 8000840:	d044      	beq.n	80008cc <_dtoa_r+0x54a>
 8000842:	2000      	movs	r0, #0
 8000844:	494d      	ldr	r1, [pc, #308]	; (800097c <_dtoa_r+0x5fa>)
 8000846:	f000 fe29 	bl	800149c <__aeabi_ddiv>
 800084a:	4632      	mov	r2, r6
 800084c:	463b      	mov	r3, r7
 800084e:	f000 fb43 	bl	8000ed8 <__aeabi_dsub>
 8000852:	9d03      	ldr	r5, [sp, #12]
 8000854:	4606      	mov	r6, r0
 8000856:	460f      	mov	r7, r1
 8000858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800085c:	f002 f890 	bl	8002980 <__aeabi_d2iz>
 8000860:	9012      	str	r0, [sp, #72]	; 0x48
 8000862:	f000 fc87 	bl	8001174 <__aeabi_i2d>
 8000866:	4602      	mov	r2, r0
 8000868:	460b      	mov	r3, r1
 800086a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800086e:	f000 fb33 	bl	8000ed8 <__aeabi_dsub>
 8000872:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000874:	3330      	adds	r3, #48	; 0x30
 8000876:	f805 3b01 	strb.w	r3, [r5], #1
 800087a:	4632      	mov	r2, r6
 800087c:	463b      	mov	r3, r7
 800087e:	e9cd 0100 	strd	r0, r1, [sp]
 8000882:	f000 ff53 	bl	800172c <__aeabi_dcmplt>
 8000886:	2800      	cmp	r0, #0
 8000888:	d160      	bne.n	800094c <_dtoa_r+0x5ca>
 800088a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800088e:	2000      	movs	r0, #0
 8000890:	4936      	ldr	r1, [pc, #216]	; (800096c <_dtoa_r+0x5ea>)
 8000892:	f000 fb21 	bl	8000ed8 <__aeabi_dsub>
 8000896:	4632      	mov	r2, r6
 8000898:	463b      	mov	r3, r7
 800089a:	f000 ff47 	bl	800172c <__aeabi_dcmplt>
 800089e:	2800      	cmp	r0, #0
 80008a0:	f040 80b4 	bne.w	8000a0c <_dtoa_r+0x68a>
 80008a4:	42a5      	cmp	r5, r4
 80008a6:	f43f af7e 	beq.w	80007a6 <_dtoa_r+0x424>
 80008aa:	2200      	movs	r2, #0
 80008ac:	4b30      	ldr	r3, [pc, #192]	; (8000970 <_dtoa_r+0x5ee>)
 80008ae:	4630      	mov	r0, r6
 80008b0:	4639      	mov	r1, r7
 80008b2:	f000 fcc9 	bl	8001248 <__aeabi_dmul>
 80008b6:	2200      	movs	r2, #0
 80008b8:	4606      	mov	r6, r0
 80008ba:	460f      	mov	r7, r1
 80008bc:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <_dtoa_r+0x5ee>)
 80008be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80008c2:	f000 fcc1 	bl	8001248 <__aeabi_dmul>
 80008c6:	e9cd 0100 	strd	r0, r1, [sp]
 80008ca:	e7c5      	b.n	8000858 <_dtoa_r+0x4d6>
 80008cc:	4630      	mov	r0, r6
 80008ce:	4639      	mov	r1, r7
 80008d0:	f000 fcba 	bl	8001248 <__aeabi_dmul>
 80008d4:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 80008d8:	9e03      	ldr	r6, [sp, #12]
 80008da:	4625      	mov	r5, r4
 80008dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80008e0:	f002 f84e 	bl	8002980 <__aeabi_d2iz>
 80008e4:	4607      	mov	r7, r0
 80008e6:	f000 fc45 	bl	8001174 <__aeabi_i2d>
 80008ea:	3730      	adds	r7, #48	; 0x30
 80008ec:	4602      	mov	r2, r0
 80008ee:	460b      	mov	r3, r1
 80008f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80008f4:	f000 faf0 	bl	8000ed8 <__aeabi_dsub>
 80008f8:	f806 7b01 	strb.w	r7, [r6], #1
 80008fc:	42a6      	cmp	r6, r4
 80008fe:	e9cd 0100 	strd	r0, r1, [sp]
 8000902:	f04f 0200 	mov.w	r2, #0
 8000906:	d126      	bne.n	8000956 <_dtoa_r+0x5d4>
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <_dtoa_r+0x5fa>)
 800090a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 800090e:	f000 fae5 	bl	8000edc <__adddf3>
 8000912:	4602      	mov	r2, r0
 8000914:	460b      	mov	r3, r1
 8000916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800091a:	f000 ff25 	bl	8001768 <__aeabi_dcmpgt>
 800091e:	2800      	cmp	r0, #0
 8000920:	d174      	bne.n	8000a0c <_dtoa_r+0x68a>
 8000922:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8000926:	2000      	movs	r0, #0
 8000928:	4914      	ldr	r1, [pc, #80]	; (800097c <_dtoa_r+0x5fa>)
 800092a:	f000 fad5 	bl	8000ed8 <__aeabi_dsub>
 800092e:	4602      	mov	r2, r0
 8000930:	460b      	mov	r3, r1
 8000932:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000936:	f000 fef9 	bl	800172c <__aeabi_dcmplt>
 800093a:	2800      	cmp	r0, #0
 800093c:	f43f af33 	beq.w	80007a6 <_dtoa_r+0x424>
 8000940:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8000944:	2b30      	cmp	r3, #48	; 0x30
 8000946:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800094a:	d002      	beq.n	8000952 <_dtoa_r+0x5d0>
 800094c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000950:	e04a      	b.n	80009e8 <_dtoa_r+0x666>
 8000952:	4615      	mov	r5, r2
 8000954:	e7f4      	b.n	8000940 <_dtoa_r+0x5be>
 8000956:	4b06      	ldr	r3, [pc, #24]	; (8000970 <_dtoa_r+0x5ee>)
 8000958:	f000 fc76 	bl	8001248 <__aeabi_dmul>
 800095c:	e9cd 0100 	strd	r0, r1, [sp]
 8000960:	e7bc      	b.n	80008dc <_dtoa_r+0x55a>
 8000962:	bf00      	nop
 8000964:	08006648 	.word	0x08006648
 8000968:	08006738 	.word	0x08006738
 800096c:	3ff00000 	.word	0x3ff00000
 8000970:	40240000 	.word	0x40240000
 8000974:	401c0000 	.word	0x401c0000
 8000978:	40140000 	.word	0x40140000
 800097c:	3fe00000 	.word	0x3fe00000
 8000980:	e9dd 6700 	ldrd	r6, r7, [sp]
 8000984:	9d03      	ldr	r5, [sp, #12]
 8000986:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800098a:	4630      	mov	r0, r6
 800098c:	4639      	mov	r1, r7
 800098e:	f000 fd85 	bl	800149c <__aeabi_ddiv>
 8000992:	f001 fff5 	bl	8002980 <__aeabi_d2iz>
 8000996:	4604      	mov	r4, r0
 8000998:	f000 fbec 	bl	8001174 <__aeabi_i2d>
 800099c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80009a0:	f000 fc52 	bl	8001248 <__aeabi_dmul>
 80009a4:	4602      	mov	r2, r0
 80009a6:	460b      	mov	r3, r1
 80009a8:	4630      	mov	r0, r6
 80009aa:	4639      	mov	r1, r7
 80009ac:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80009b0:	f000 fa92 	bl	8000ed8 <__aeabi_dsub>
 80009b4:	f805 6b01 	strb.w	r6, [r5], #1
 80009b8:	9e03      	ldr	r6, [sp, #12]
 80009ba:	1bae      	subs	r6, r5, r6
 80009bc:	45b1      	cmp	r9, r6
 80009be:	4602      	mov	r2, r0
 80009c0:	460b      	mov	r3, r1
 80009c2:	d138      	bne.n	8000a36 <_dtoa_r+0x6b4>
 80009c4:	f000 fa8a 	bl	8000edc <__adddf3>
 80009c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80009cc:	4606      	mov	r6, r0
 80009ce:	460f      	mov	r7, r1
 80009d0:	f000 feca 	bl	8001768 <__aeabi_dcmpgt>
 80009d4:	b9c0      	cbnz	r0, 8000a08 <_dtoa_r+0x686>
 80009d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80009da:	4630      	mov	r0, r6
 80009dc:	4639      	mov	r1, r7
 80009de:	f000 fe9b 	bl	8001718 <__aeabi_dcmpeq>
 80009e2:	b108      	cbz	r0, 80009e8 <_dtoa_r+0x666>
 80009e4:	07e1      	lsls	r1, r4, #31
 80009e6:	d40f      	bmi.n	8000a08 <_dtoa_r+0x686>
 80009e8:	4641      	mov	r1, r8
 80009ea:	4658      	mov	r0, fp
 80009ec:	f001 fb53 	bl	8002096 <_Bfree>
 80009f0:	2300      	movs	r3, #0
 80009f2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80009f4:	702b      	strb	r3, [r5, #0]
 80009f6:	f10a 0301 	add.w	r3, sl, #1
 80009fa:	6013      	str	r3, [r2, #0]
 80009fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	f43f acf8 	beq.w	80003f4 <_dtoa_r+0x72>
 8000a04:	601d      	str	r5, [r3, #0]
 8000a06:	e4f5      	b.n	80003f4 <_dtoa_r+0x72>
 8000a08:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8000a0c:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8000a10:	2a39      	cmp	r2, #57	; 0x39
 8000a12:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8000a16:	d108      	bne.n	8000a2a <_dtoa_r+0x6a8>
 8000a18:	9a03      	ldr	r2, [sp, #12]
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	d109      	bne.n	8000a32 <_dtoa_r+0x6b0>
 8000a1e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000a20:	9903      	ldr	r1, [sp, #12]
 8000a22:	3201      	adds	r2, #1
 8000a24:	920a      	str	r2, [sp, #40]	; 0x28
 8000a26:	2230      	movs	r2, #48	; 0x30
 8000a28:	700a      	strb	r2, [r1, #0]
 8000a2a:	781a      	ldrb	r2, [r3, #0]
 8000a2c:	3201      	adds	r2, #1
 8000a2e:	701a      	strb	r2, [r3, #0]
 8000a30:	e78c      	b.n	800094c <_dtoa_r+0x5ca>
 8000a32:	461d      	mov	r5, r3
 8000a34:	e7ea      	b.n	8000a0c <_dtoa_r+0x68a>
 8000a36:	2200      	movs	r2, #0
 8000a38:	4b9d      	ldr	r3, [pc, #628]	; (8000cb0 <_dtoa_r+0x92e>)
 8000a3a:	f000 fc05 	bl	8001248 <__aeabi_dmul>
 8000a3e:	2200      	movs	r2, #0
 8000a40:	2300      	movs	r3, #0
 8000a42:	4606      	mov	r6, r0
 8000a44:	460f      	mov	r7, r1
 8000a46:	f000 fe67 	bl	8001718 <__aeabi_dcmpeq>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d09b      	beq.n	8000986 <_dtoa_r+0x604>
 8000a4e:	e7cb      	b.n	80009e8 <_dtoa_r+0x666>
 8000a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000a52:	2a00      	cmp	r2, #0
 8000a54:	f000 80cb 	beq.w	8000bee <_dtoa_r+0x86c>
 8000a58:	9a08      	ldr	r2, [sp, #32]
 8000a5a:	2a01      	cmp	r2, #1
 8000a5c:	f300 80ae 	bgt.w	8000bbc <_dtoa_r+0x83a>
 8000a60:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	f000 80a6 	beq.w	8000bb4 <_dtoa_r+0x832>
 8000a68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8000a6c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8000a6e:	9d06      	ldr	r5, [sp, #24]
 8000a70:	9a06      	ldr	r2, [sp, #24]
 8000a72:	441a      	add	r2, r3
 8000a74:	9206      	str	r2, [sp, #24]
 8000a76:	9a07      	ldr	r2, [sp, #28]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	441a      	add	r2, r3
 8000a7c:	4658      	mov	r0, fp
 8000a7e:	9207      	str	r2, [sp, #28]
 8000a80:	f001 fbdb 	bl	800223a <__i2b>
 8000a84:	4606      	mov	r6, r0
 8000a86:	2d00      	cmp	r5, #0
 8000a88:	dd0c      	ble.n	8000aa4 <_dtoa_r+0x722>
 8000a8a:	9b07      	ldr	r3, [sp, #28]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	dd09      	ble.n	8000aa4 <_dtoa_r+0x722>
 8000a90:	42ab      	cmp	r3, r5
 8000a92:	9a06      	ldr	r2, [sp, #24]
 8000a94:	bfa8      	it	ge
 8000a96:	462b      	movge	r3, r5
 8000a98:	1ad2      	subs	r2, r2, r3
 8000a9a:	9206      	str	r2, [sp, #24]
 8000a9c:	9a07      	ldr	r2, [sp, #28]
 8000a9e:	1aed      	subs	r5, r5, r3
 8000aa0:	1ad3      	subs	r3, r2, r3
 8000aa2:	9307      	str	r3, [sp, #28]
 8000aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000aa6:	b1f3      	cbz	r3, 8000ae6 <_dtoa_r+0x764>
 8000aa8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f000 80a3 	beq.w	8000bf6 <_dtoa_r+0x874>
 8000ab0:	2c00      	cmp	r4, #0
 8000ab2:	dd10      	ble.n	8000ad6 <_dtoa_r+0x754>
 8000ab4:	4631      	mov	r1, r6
 8000ab6:	4622      	mov	r2, r4
 8000ab8:	4658      	mov	r0, fp
 8000aba:	f001 fc57 	bl	800236c <__pow5mult>
 8000abe:	4642      	mov	r2, r8
 8000ac0:	4601      	mov	r1, r0
 8000ac2:	4606      	mov	r6, r0
 8000ac4:	4658      	mov	r0, fp
 8000ac6:	f001 fbc1 	bl	800224c <__multiply>
 8000aca:	4641      	mov	r1, r8
 8000acc:	4607      	mov	r7, r0
 8000ace:	4658      	mov	r0, fp
 8000ad0:	f001 fae1 	bl	8002096 <_Bfree>
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000ad8:	1b1a      	subs	r2, r3, r4
 8000ada:	d004      	beq.n	8000ae6 <_dtoa_r+0x764>
 8000adc:	4641      	mov	r1, r8
 8000ade:	4658      	mov	r0, fp
 8000ae0:	f001 fc44 	bl	800236c <__pow5mult>
 8000ae4:	4680      	mov	r8, r0
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4658      	mov	r0, fp
 8000aea:	f001 fba6 	bl	800223a <__i2b>
 8000aee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	4604      	mov	r4, r0
 8000af4:	f340 8081 	ble.w	8000bfa <_dtoa_r+0x878>
 8000af8:	461a      	mov	r2, r3
 8000afa:	4601      	mov	r1, r0
 8000afc:	4658      	mov	r0, fp
 8000afe:	f001 fc35 	bl	800236c <__pow5mult>
 8000b02:	9b08      	ldr	r3, [sp, #32]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	4604      	mov	r4, r0
 8000b08:	dd7a      	ble.n	8000c00 <_dtoa_r+0x87e>
 8000b0a:	2700      	movs	r7, #0
 8000b0c:	6923      	ldr	r3, [r4, #16]
 8000b0e:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8000b12:	6918      	ldr	r0, [r3, #16]
 8000b14:	f001 fb41 	bl	800219a <__hi0bits>
 8000b18:	f1c0 0020 	rsb	r0, r0, #32
 8000b1c:	9b07      	ldr	r3, [sp, #28]
 8000b1e:	4418      	add	r0, r3
 8000b20:	f010 001f 	ands.w	r0, r0, #31
 8000b24:	f000 808b 	beq.w	8000c3e <_dtoa_r+0x8bc>
 8000b28:	f1c0 0320 	rsb	r3, r0, #32
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	f340 8084 	ble.w	8000c3a <_dtoa_r+0x8b8>
 8000b32:	f1c0 001c 	rsb	r0, r0, #28
 8000b36:	9b06      	ldr	r3, [sp, #24]
 8000b38:	4403      	add	r3, r0
 8000b3a:	9306      	str	r3, [sp, #24]
 8000b3c:	9b07      	ldr	r3, [sp, #28]
 8000b3e:	4403      	add	r3, r0
 8000b40:	4405      	add	r5, r0
 8000b42:	9307      	str	r3, [sp, #28]
 8000b44:	9b06      	ldr	r3, [sp, #24]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	dd05      	ble.n	8000b56 <_dtoa_r+0x7d4>
 8000b4a:	4641      	mov	r1, r8
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4658      	mov	r0, fp
 8000b50:	f001 fc4c 	bl	80023ec <__lshift>
 8000b54:	4680      	mov	r8, r0
 8000b56:	9b07      	ldr	r3, [sp, #28]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	dd05      	ble.n	8000b68 <_dtoa_r+0x7e6>
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	461a      	mov	r2, r3
 8000b60:	4658      	mov	r0, fp
 8000b62:	f001 fc43 	bl	80023ec <__lshift>
 8000b66:	4604      	mov	r4, r0
 8000b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d069      	beq.n	8000c42 <_dtoa_r+0x8c0>
 8000b6e:	4621      	mov	r1, r4
 8000b70:	4640      	mov	r0, r8
 8000b72:	f001 fc8e 	bl	8002492 <__mcmp>
 8000b76:	2800      	cmp	r0, #0
 8000b78:	da63      	bge.n	8000c42 <_dtoa_r+0x8c0>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	4641      	mov	r1, r8
 8000b7e:	220a      	movs	r2, #10
 8000b80:	4658      	mov	r0, fp
 8000b82:	f001 fa91 	bl	80020a8 <__multadd>
 8000b86:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000b88:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000b8c:	4680      	mov	r8, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f000 817c 	beq.w	8000e8c <_dtoa_r+0xb0a>
 8000b94:	2300      	movs	r3, #0
 8000b96:	4631      	mov	r1, r6
 8000b98:	220a      	movs	r2, #10
 8000b9a:	4658      	mov	r0, fp
 8000b9c:	f001 fa84 	bl	80020a8 <__multadd>
 8000ba0:	9b04      	ldr	r3, [sp, #16]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	4606      	mov	r6, r0
 8000ba6:	f300 808b 	bgt.w	8000cc0 <_dtoa_r+0x93e>
 8000baa:	9b08      	ldr	r3, [sp, #32]
 8000bac:	2b02      	cmp	r3, #2
 8000bae:	f340 8087 	ble.w	8000cc0 <_dtoa_r+0x93e>
 8000bb2:	e04e      	b.n	8000c52 <_dtoa_r+0x8d0>
 8000bb4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8000bb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8000bba:	e757      	b.n	8000a6c <_dtoa_r+0x6ea>
 8000bbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000bbe:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8000bc2:	42a3      	cmp	r3, r4
 8000bc4:	bfbf      	itttt	lt
 8000bc6:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8000bc8:	9409      	strlt	r4, [sp, #36]	; 0x24
 8000bca:	1ae2      	sublt	r2, r4, r3
 8000bcc:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8000bce:	bfbb      	ittet	lt
 8000bd0:	189b      	addlt	r3, r3, r2
 8000bd2:	9310      	strlt	r3, [sp, #64]	; 0x40
 8000bd4:	1b1c      	subge	r4, r3, r4
 8000bd6:	2400      	movlt	r4, #0
 8000bd8:	f1b9 0f00 	cmp.w	r9, #0
 8000bdc:	bfb5      	itete	lt
 8000bde:	9b06      	ldrlt	r3, [sp, #24]
 8000be0:	9d06      	ldrge	r5, [sp, #24]
 8000be2:	eba3 0509 	sublt.w	r5, r3, r9
 8000be6:	464b      	movge	r3, r9
 8000be8:	bfb8      	it	lt
 8000bea:	2300      	movlt	r3, #0
 8000bec:	e740      	b.n	8000a70 <_dtoa_r+0x6ee>
 8000bee:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8000bf0:	9d06      	ldr	r5, [sp, #24]
 8000bf2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8000bf4:	e747      	b.n	8000a86 <_dtoa_r+0x704>
 8000bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000bf8:	e770      	b.n	8000adc <_dtoa_r+0x75a>
 8000bfa:	9b08      	ldr	r3, [sp, #32]
 8000bfc:	2b01      	cmp	r3, #1
 8000bfe:	dc18      	bgt.n	8000c32 <_dtoa_r+0x8b0>
 8000c00:	9b00      	ldr	r3, [sp, #0]
 8000c02:	b9b3      	cbnz	r3, 8000c32 <_dtoa_r+0x8b0>
 8000c04:	9b01      	ldr	r3, [sp, #4]
 8000c06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000c0a:	b9a3      	cbnz	r3, 8000c36 <_dtoa_r+0x8b4>
 8000c0c:	9b01      	ldr	r3, [sp, #4]
 8000c0e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8000c12:	0d3f      	lsrs	r7, r7, #20
 8000c14:	053f      	lsls	r7, r7, #20
 8000c16:	b137      	cbz	r7, 8000c26 <_dtoa_r+0x8a4>
 8000c18:	9b06      	ldr	r3, [sp, #24]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	9306      	str	r3, [sp, #24]
 8000c1e:	9b07      	ldr	r3, [sp, #28]
 8000c20:	3301      	adds	r3, #1
 8000c22:	9307      	str	r3, [sp, #28]
 8000c24:	2701      	movs	r7, #1
 8000c26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	f47f af6f 	bne.w	8000b0c <_dtoa_r+0x78a>
 8000c2e:	2001      	movs	r0, #1
 8000c30:	e774      	b.n	8000b1c <_dtoa_r+0x79a>
 8000c32:	2700      	movs	r7, #0
 8000c34:	e7f7      	b.n	8000c26 <_dtoa_r+0x8a4>
 8000c36:	9f00      	ldr	r7, [sp, #0]
 8000c38:	e7f5      	b.n	8000c26 <_dtoa_r+0x8a4>
 8000c3a:	d083      	beq.n	8000b44 <_dtoa_r+0x7c2>
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	301c      	adds	r0, #28
 8000c40:	e779      	b.n	8000b36 <_dtoa_r+0x7b4>
 8000c42:	f1b9 0f00 	cmp.w	r9, #0
 8000c46:	dc35      	bgt.n	8000cb4 <_dtoa_r+0x932>
 8000c48:	9b08      	ldr	r3, [sp, #32]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	dd32      	ble.n	8000cb4 <_dtoa_r+0x932>
 8000c4e:	f8cd 9010 	str.w	r9, [sp, #16]
 8000c52:	9b04      	ldr	r3, [sp, #16]
 8000c54:	b963      	cbnz	r3, 8000c70 <_dtoa_r+0x8ee>
 8000c56:	4621      	mov	r1, r4
 8000c58:	2205      	movs	r2, #5
 8000c5a:	4658      	mov	r0, fp
 8000c5c:	f001 fa24 	bl	80020a8 <__multadd>
 8000c60:	4601      	mov	r1, r0
 8000c62:	4604      	mov	r4, r0
 8000c64:	4640      	mov	r0, r8
 8000c66:	f001 fc14 	bl	8002492 <__mcmp>
 8000c6a:	2800      	cmp	r0, #0
 8000c6c:	f73f adc7 	bgt.w	80007fe <_dtoa_r+0x47c>
 8000c70:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000c72:	9d03      	ldr	r5, [sp, #12]
 8000c74:	ea6f 0a03 	mvn.w	sl, r3
 8000c78:	2700      	movs	r7, #0
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	4658      	mov	r0, fp
 8000c7e:	f001 fa0a 	bl	8002096 <_Bfree>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f43f aeb0 	beq.w	80009e8 <_dtoa_r+0x666>
 8000c88:	b12f      	cbz	r7, 8000c96 <_dtoa_r+0x914>
 8000c8a:	42b7      	cmp	r7, r6
 8000c8c:	d003      	beq.n	8000c96 <_dtoa_r+0x914>
 8000c8e:	4639      	mov	r1, r7
 8000c90:	4658      	mov	r0, fp
 8000c92:	f001 fa00 	bl	8002096 <_Bfree>
 8000c96:	4631      	mov	r1, r6
 8000c98:	4658      	mov	r0, fp
 8000c9a:	f001 f9fc 	bl	8002096 <_Bfree>
 8000c9e:	e6a3      	b.n	80009e8 <_dtoa_r+0x666>
 8000ca0:	2400      	movs	r4, #0
 8000ca2:	4626      	mov	r6, r4
 8000ca4:	e7e4      	b.n	8000c70 <_dtoa_r+0x8ee>
 8000ca6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8000caa:	4626      	mov	r6, r4
 8000cac:	e5a7      	b.n	80007fe <_dtoa_r+0x47c>
 8000cae:	bf00      	nop
 8000cb0:	40240000 	.word	0x40240000
 8000cb4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000cb6:	f8cd 9010 	str.w	r9, [sp, #16]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	f000 80ed 	beq.w	8000e9a <_dtoa_r+0xb18>
 8000cc0:	2d00      	cmp	r5, #0
 8000cc2:	dd05      	ble.n	8000cd0 <_dtoa_r+0x94e>
 8000cc4:	4631      	mov	r1, r6
 8000cc6:	462a      	mov	r2, r5
 8000cc8:	4658      	mov	r0, fp
 8000cca:	f001 fb8f 	bl	80023ec <__lshift>
 8000cce:	4606      	mov	r6, r0
 8000cd0:	2f00      	cmp	r7, #0
 8000cd2:	d056      	beq.n	8000d82 <_dtoa_r+0xa00>
 8000cd4:	6871      	ldr	r1, [r6, #4]
 8000cd6:	4658      	mov	r0, fp
 8000cd8:	f001 f9b8 	bl	800204c <_Balloc>
 8000cdc:	6932      	ldr	r2, [r6, #16]
 8000cde:	3202      	adds	r2, #2
 8000ce0:	4605      	mov	r5, r0
 8000ce2:	0092      	lsls	r2, r2, #2
 8000ce4:	f106 010c 	add.w	r1, r6, #12
 8000ce8:	300c      	adds	r0, #12
 8000cea:	f001 ffcb 	bl	8002c84 <memcpy>
 8000cee:	2201      	movs	r2, #1
 8000cf0:	4629      	mov	r1, r5
 8000cf2:	4658      	mov	r0, fp
 8000cf4:	f001 fb7a 	bl	80023ec <__lshift>
 8000cf8:	9b03      	ldr	r3, [sp, #12]
 8000cfa:	f103 0901 	add.w	r9, r3, #1
 8000cfe:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8000d02:	4413      	add	r3, r2
 8000d04:	9309      	str	r3, [sp, #36]	; 0x24
 8000d06:	9b00      	ldr	r3, [sp, #0]
 8000d08:	f003 0301 	and.w	r3, r3, #1
 8000d0c:	4637      	mov	r7, r6
 8000d0e:	9307      	str	r3, [sp, #28]
 8000d10:	4606      	mov	r6, r0
 8000d12:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8000d16:	4621      	mov	r1, r4
 8000d18:	4640      	mov	r0, r8
 8000d1a:	9300      	str	r3, [sp, #0]
 8000d1c:	f7ff faa8 	bl	8000270 <quorem>
 8000d20:	4603      	mov	r3, r0
 8000d22:	3330      	adds	r3, #48	; 0x30
 8000d24:	9004      	str	r0, [sp, #16]
 8000d26:	4639      	mov	r1, r7
 8000d28:	4640      	mov	r0, r8
 8000d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8000d2c:	f001 fbb1 	bl	8002492 <__mcmp>
 8000d30:	4632      	mov	r2, r6
 8000d32:	9006      	str	r0, [sp, #24]
 8000d34:	4621      	mov	r1, r4
 8000d36:	4658      	mov	r0, fp
 8000d38:	f001 fbc5 	bl	80024c6 <__mdiff>
 8000d3c:	68c2      	ldr	r2, [r0, #12]
 8000d3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d40:	4605      	mov	r5, r0
 8000d42:	bb02      	cbnz	r2, 8000d86 <_dtoa_r+0xa04>
 8000d44:	4601      	mov	r1, r0
 8000d46:	4640      	mov	r0, r8
 8000d48:	f001 fba3 	bl	8002492 <__mcmp>
 8000d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d4e:	4602      	mov	r2, r0
 8000d50:	4629      	mov	r1, r5
 8000d52:	4658      	mov	r0, fp
 8000d54:	920c      	str	r2, [sp, #48]	; 0x30
 8000d56:	930a      	str	r3, [sp, #40]	; 0x28
 8000d58:	f001 f99d 	bl	8002096 <_Bfree>
 8000d5c:	9b08      	ldr	r3, [sp, #32]
 8000d5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000d60:	ea43 0102 	orr.w	r1, r3, r2
 8000d64:	9b07      	ldr	r3, [sp, #28]
 8000d66:	430b      	orrs	r3, r1
 8000d68:	464d      	mov	r5, r9
 8000d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d6c:	d10d      	bne.n	8000d8a <_dtoa_r+0xa08>
 8000d6e:	2b39      	cmp	r3, #57	; 0x39
 8000d70:	d027      	beq.n	8000dc2 <_dtoa_r+0xa40>
 8000d72:	9a06      	ldr	r2, [sp, #24]
 8000d74:	2a00      	cmp	r2, #0
 8000d76:	dd01      	ble.n	8000d7c <_dtoa_r+0x9fa>
 8000d78:	9b04      	ldr	r3, [sp, #16]
 8000d7a:	3331      	adds	r3, #49	; 0x31
 8000d7c:	9a00      	ldr	r2, [sp, #0]
 8000d7e:	7013      	strb	r3, [r2, #0]
 8000d80:	e77b      	b.n	8000c7a <_dtoa_r+0x8f8>
 8000d82:	4630      	mov	r0, r6
 8000d84:	e7b8      	b.n	8000cf8 <_dtoa_r+0x976>
 8000d86:	2201      	movs	r2, #1
 8000d88:	e7e2      	b.n	8000d50 <_dtoa_r+0x9ce>
 8000d8a:	9906      	ldr	r1, [sp, #24]
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	db04      	blt.n	8000d9a <_dtoa_r+0xa18>
 8000d90:	9808      	ldr	r0, [sp, #32]
 8000d92:	4301      	orrs	r1, r0
 8000d94:	9807      	ldr	r0, [sp, #28]
 8000d96:	4301      	orrs	r1, r0
 8000d98:	d11e      	bne.n	8000dd8 <_dtoa_r+0xa56>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	ddee      	ble.n	8000d7c <_dtoa_r+0x9fa>
 8000d9e:	4641      	mov	r1, r8
 8000da0:	2201      	movs	r2, #1
 8000da2:	4658      	mov	r0, fp
 8000da4:	9306      	str	r3, [sp, #24]
 8000da6:	f001 fb21 	bl	80023ec <__lshift>
 8000daa:	4621      	mov	r1, r4
 8000dac:	4680      	mov	r8, r0
 8000dae:	f001 fb70 	bl	8002492 <__mcmp>
 8000db2:	2800      	cmp	r0, #0
 8000db4:	9b06      	ldr	r3, [sp, #24]
 8000db6:	dc02      	bgt.n	8000dbe <_dtoa_r+0xa3c>
 8000db8:	d1e0      	bne.n	8000d7c <_dtoa_r+0x9fa>
 8000dba:	07da      	lsls	r2, r3, #31
 8000dbc:	d5de      	bpl.n	8000d7c <_dtoa_r+0x9fa>
 8000dbe:	2b39      	cmp	r3, #57	; 0x39
 8000dc0:	d1da      	bne.n	8000d78 <_dtoa_r+0x9f6>
 8000dc2:	9a00      	ldr	r2, [sp, #0]
 8000dc4:	2339      	movs	r3, #57	; 0x39
 8000dc6:	7013      	strb	r3, [r2, #0]
 8000dc8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8000dcc:	2b39      	cmp	r3, #57	; 0x39
 8000dce:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8000dd2:	d047      	beq.n	8000e64 <_dtoa_r+0xae2>
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	e7d2      	b.n	8000d7e <_dtoa_r+0x9fc>
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	dd03      	ble.n	8000de4 <_dtoa_r+0xa62>
 8000ddc:	2b39      	cmp	r3, #57	; 0x39
 8000dde:	d0f0      	beq.n	8000dc2 <_dtoa_r+0xa40>
 8000de0:	3301      	adds	r3, #1
 8000de2:	e7cb      	b.n	8000d7c <_dtoa_r+0x9fa>
 8000de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000de6:	f809 3c01 	strb.w	r3, [r9, #-1]
 8000dea:	4591      	cmp	r9, r2
 8000dec:	d021      	beq.n	8000e32 <_dtoa_r+0xab0>
 8000dee:	4641      	mov	r1, r8
 8000df0:	2300      	movs	r3, #0
 8000df2:	220a      	movs	r2, #10
 8000df4:	4658      	mov	r0, fp
 8000df6:	f001 f957 	bl	80020a8 <__multadd>
 8000dfa:	42b7      	cmp	r7, r6
 8000dfc:	4680      	mov	r8, r0
 8000dfe:	f04f 0300 	mov.w	r3, #0
 8000e02:	f04f 020a 	mov.w	r2, #10
 8000e06:	4639      	mov	r1, r7
 8000e08:	4658      	mov	r0, fp
 8000e0a:	d106      	bne.n	8000e1a <_dtoa_r+0xa98>
 8000e0c:	f001 f94c 	bl	80020a8 <__multadd>
 8000e10:	4607      	mov	r7, r0
 8000e12:	4606      	mov	r6, r0
 8000e14:	f109 0901 	add.w	r9, r9, #1
 8000e18:	e77b      	b.n	8000d12 <_dtoa_r+0x990>
 8000e1a:	f001 f945 	bl	80020a8 <__multadd>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4607      	mov	r7, r0
 8000e22:	2300      	movs	r3, #0
 8000e24:	220a      	movs	r2, #10
 8000e26:	4658      	mov	r0, fp
 8000e28:	f001 f93e 	bl	80020a8 <__multadd>
 8000e2c:	4606      	mov	r6, r0
 8000e2e:	e7f1      	b.n	8000e14 <_dtoa_r+0xa92>
 8000e30:	2700      	movs	r7, #0
 8000e32:	4641      	mov	r1, r8
 8000e34:	2201      	movs	r2, #1
 8000e36:	4658      	mov	r0, fp
 8000e38:	9300      	str	r3, [sp, #0]
 8000e3a:	f001 fad7 	bl	80023ec <__lshift>
 8000e3e:	4621      	mov	r1, r4
 8000e40:	4680      	mov	r8, r0
 8000e42:	f001 fb26 	bl	8002492 <__mcmp>
 8000e46:	2800      	cmp	r0, #0
 8000e48:	dcbe      	bgt.n	8000dc8 <_dtoa_r+0xa46>
 8000e4a:	d102      	bne.n	8000e52 <_dtoa_r+0xad0>
 8000e4c:	9b00      	ldr	r3, [sp, #0]
 8000e4e:	07db      	lsls	r3, r3, #31
 8000e50:	d4ba      	bmi.n	8000dc8 <_dtoa_r+0xa46>
 8000e52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8000e56:	2b30      	cmp	r3, #48	; 0x30
 8000e58:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8000e5c:	f47f af0d 	bne.w	8000c7a <_dtoa_r+0x8f8>
 8000e60:	4615      	mov	r5, r2
 8000e62:	e7f6      	b.n	8000e52 <_dtoa_r+0xad0>
 8000e64:	9b03      	ldr	r3, [sp, #12]
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d104      	bne.n	8000e74 <_dtoa_r+0xaf2>
 8000e6a:	f10a 0a01 	add.w	sl, sl, #1
 8000e6e:	2331      	movs	r3, #49	; 0x31
 8000e70:	9a03      	ldr	r2, [sp, #12]
 8000e72:	e784      	b.n	8000d7e <_dtoa_r+0x9fc>
 8000e74:	4615      	mov	r5, r2
 8000e76:	e7a7      	b.n	8000dc8 <_dtoa_r+0xa46>
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <_dtoa_r+0xb46>)
 8000e7a:	f7ff bada 	b.w	8000432 <_dtoa_r+0xb0>
 8000e7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f47f aabb 	bne.w	80003fc <_dtoa_r+0x7a>
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <_dtoa_r+0xb4a>)
 8000e88:	f7ff bad3 	b.w	8000432 <_dtoa_r+0xb0>
 8000e8c:	9b04      	ldr	r3, [sp, #16]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	dc03      	bgt.n	8000e9a <_dtoa_r+0xb18>
 8000e92:	9b08      	ldr	r3, [sp, #32]
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	f73f aedc 	bgt.w	8000c52 <_dtoa_r+0x8d0>
 8000e9a:	9d03      	ldr	r5, [sp, #12]
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	4640      	mov	r0, r8
 8000ea0:	f7ff f9e6 	bl	8000270 <quorem>
 8000ea4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8000ea8:	f805 3b01 	strb.w	r3, [r5], #1
 8000eac:	9a03      	ldr	r2, [sp, #12]
 8000eae:	9904      	ldr	r1, [sp, #16]
 8000eb0:	1aaa      	subs	r2, r5, r2
 8000eb2:	4291      	cmp	r1, r2
 8000eb4:	ddbc      	ble.n	8000e30 <_dtoa_r+0xaae>
 8000eb6:	4641      	mov	r1, r8
 8000eb8:	2300      	movs	r3, #0
 8000eba:	220a      	movs	r2, #10
 8000ebc:	4658      	mov	r0, fp
 8000ebe:	f001 f8f3 	bl	80020a8 <__multadd>
 8000ec2:	4680      	mov	r8, r0
 8000ec4:	e7ea      	b.n	8000e9c <_dtoa_r+0xb1a>
 8000ec6:	bf00      	nop
 8000ec8:	080069d7 	.word	0x080069d7
 8000ecc:	08006ab9 	.word	0x08006ab9

08000ed0 <__aeabi_drsub>:
 8000ed0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000ed4:	e002      	b.n	8000edc <__adddf3>
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_dsub>:
 8000ed8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000edc <__adddf3>:
 8000edc:	b530      	push	{r4, r5, lr}
 8000ede:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000ee2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000ee6:	ea94 0f05 	teq	r4, r5
 8000eea:	bf08      	it	eq
 8000eec:	ea90 0f02 	teqeq	r0, r2
 8000ef0:	bf1f      	itttt	ne
 8000ef2:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000ef6:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000efa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000efe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000f02:	f000 80e2 	beq.w	80010ca <__adddf3+0x1ee>
 8000f06:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000f0a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000f0e:	bfb8      	it	lt
 8000f10:	426d      	neglt	r5, r5
 8000f12:	dd0c      	ble.n	8000f2e <__adddf3+0x52>
 8000f14:	442c      	add	r4, r5
 8000f16:	ea80 0202 	eor.w	r2, r0, r2
 8000f1a:	ea81 0303 	eor.w	r3, r1, r3
 8000f1e:	ea82 0000 	eor.w	r0, r2, r0
 8000f22:	ea83 0101 	eor.w	r1, r3, r1
 8000f26:	ea80 0202 	eor.w	r2, r0, r2
 8000f2a:	ea81 0303 	eor.w	r3, r1, r3
 8000f2e:	2d36      	cmp	r5, #54	; 0x36
 8000f30:	bf88      	it	hi
 8000f32:	bd30      	pophi	{r4, r5, pc}
 8000f34:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000f38:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000f3c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000f40:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000f44:	d002      	beq.n	8000f4c <__adddf3+0x70>
 8000f46:	4240      	negs	r0, r0
 8000f48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f4c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000f50:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000f54:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000f58:	d002      	beq.n	8000f60 <__adddf3+0x84>
 8000f5a:	4252      	negs	r2, r2
 8000f5c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f60:	ea94 0f05 	teq	r4, r5
 8000f64:	f000 80a7 	beq.w	80010b6 <__adddf3+0x1da>
 8000f68:	f1a4 0401 	sub.w	r4, r4, #1
 8000f6c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000f70:	db0d      	blt.n	8000f8e <__adddf3+0xb2>
 8000f72:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000f76:	fa22 f205 	lsr.w	r2, r2, r5
 8000f7a:	1880      	adds	r0, r0, r2
 8000f7c:	f141 0100 	adc.w	r1, r1, #0
 8000f80:	fa03 f20e 	lsl.w	r2, r3, lr
 8000f84:	1880      	adds	r0, r0, r2
 8000f86:	fa43 f305 	asr.w	r3, r3, r5
 8000f8a:	4159      	adcs	r1, r3
 8000f8c:	e00e      	b.n	8000fac <__adddf3+0xd0>
 8000f8e:	f1a5 0520 	sub.w	r5, r5, #32
 8000f92:	f10e 0e20 	add.w	lr, lr, #32
 8000f96:	2a01      	cmp	r2, #1
 8000f98:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000f9c:	bf28      	it	cs
 8000f9e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000fa2:	fa43 f305 	asr.w	r3, r3, r5
 8000fa6:	18c0      	adds	r0, r0, r3
 8000fa8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000fac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000fb0:	d507      	bpl.n	8000fc2 <__adddf3+0xe6>
 8000fb2:	f04f 0e00 	mov.w	lr, #0
 8000fb6:	f1dc 0c00 	rsbs	ip, ip, #0
 8000fba:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000fbe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000fc2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000fc6:	d31b      	bcc.n	8001000 <__adddf3+0x124>
 8000fc8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000fcc:	d30c      	bcc.n	8000fe8 <__adddf3+0x10c>
 8000fce:	0849      	lsrs	r1, r1, #1
 8000fd0:	ea5f 0030 	movs.w	r0, r0, rrx
 8000fd4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000fd8:	f104 0401 	add.w	r4, r4, #1
 8000fdc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000fe0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000fe4:	f080 809a 	bcs.w	800111c <__adddf3+0x240>
 8000fe8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000fec:	bf08      	it	eq
 8000fee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000ff2:	f150 0000 	adcs.w	r0, r0, #0
 8000ff6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000ffa:	ea41 0105 	orr.w	r1, r1, r5
 8000ffe:	bd30      	pop	{r4, r5, pc}
 8001000:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8001004:	4140      	adcs	r0, r0
 8001006:	eb41 0101 	adc.w	r1, r1, r1
 800100a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800100e:	f1a4 0401 	sub.w	r4, r4, #1
 8001012:	d1e9      	bne.n	8000fe8 <__adddf3+0x10c>
 8001014:	f091 0f00 	teq	r1, #0
 8001018:	bf04      	itt	eq
 800101a:	4601      	moveq	r1, r0
 800101c:	2000      	moveq	r0, #0
 800101e:	fab1 f381 	clz	r3, r1
 8001022:	bf08      	it	eq
 8001024:	3320      	addeq	r3, #32
 8001026:	f1a3 030b 	sub.w	r3, r3, #11
 800102a:	f1b3 0220 	subs.w	r2, r3, #32
 800102e:	da0c      	bge.n	800104a <__adddf3+0x16e>
 8001030:	320c      	adds	r2, #12
 8001032:	dd08      	ble.n	8001046 <__adddf3+0x16a>
 8001034:	f102 0c14 	add.w	ip, r2, #20
 8001038:	f1c2 020c 	rsb	r2, r2, #12
 800103c:	fa01 f00c 	lsl.w	r0, r1, ip
 8001040:	fa21 f102 	lsr.w	r1, r1, r2
 8001044:	e00c      	b.n	8001060 <__adddf3+0x184>
 8001046:	f102 0214 	add.w	r2, r2, #20
 800104a:	bfd8      	it	le
 800104c:	f1c2 0c20 	rsble	ip, r2, #32
 8001050:	fa01 f102 	lsl.w	r1, r1, r2
 8001054:	fa20 fc0c 	lsr.w	ip, r0, ip
 8001058:	bfdc      	itt	le
 800105a:	ea41 010c 	orrle.w	r1, r1, ip
 800105e:	4090      	lslle	r0, r2
 8001060:	1ae4      	subs	r4, r4, r3
 8001062:	bfa2      	ittt	ge
 8001064:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8001068:	4329      	orrge	r1, r5
 800106a:	bd30      	popge	{r4, r5, pc}
 800106c:	ea6f 0404 	mvn.w	r4, r4
 8001070:	3c1f      	subs	r4, #31
 8001072:	da1c      	bge.n	80010ae <__adddf3+0x1d2>
 8001074:	340c      	adds	r4, #12
 8001076:	dc0e      	bgt.n	8001096 <__adddf3+0x1ba>
 8001078:	f104 0414 	add.w	r4, r4, #20
 800107c:	f1c4 0220 	rsb	r2, r4, #32
 8001080:	fa20 f004 	lsr.w	r0, r0, r4
 8001084:	fa01 f302 	lsl.w	r3, r1, r2
 8001088:	ea40 0003 	orr.w	r0, r0, r3
 800108c:	fa21 f304 	lsr.w	r3, r1, r4
 8001090:	ea45 0103 	orr.w	r1, r5, r3
 8001094:	bd30      	pop	{r4, r5, pc}
 8001096:	f1c4 040c 	rsb	r4, r4, #12
 800109a:	f1c4 0220 	rsb	r2, r4, #32
 800109e:	fa20 f002 	lsr.w	r0, r0, r2
 80010a2:	fa01 f304 	lsl.w	r3, r1, r4
 80010a6:	ea40 0003 	orr.w	r0, r0, r3
 80010aa:	4629      	mov	r1, r5
 80010ac:	bd30      	pop	{r4, r5, pc}
 80010ae:	fa21 f004 	lsr.w	r0, r1, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	bd30      	pop	{r4, r5, pc}
 80010b6:	f094 0f00 	teq	r4, #0
 80010ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80010be:	bf06      	itte	eq
 80010c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80010c4:	3401      	addeq	r4, #1
 80010c6:	3d01      	subne	r5, #1
 80010c8:	e74e      	b.n	8000f68 <__adddf3+0x8c>
 80010ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80010ce:	bf18      	it	ne
 80010d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80010d4:	d029      	beq.n	800112a <__adddf3+0x24e>
 80010d6:	ea94 0f05 	teq	r4, r5
 80010da:	bf08      	it	eq
 80010dc:	ea90 0f02 	teqeq	r0, r2
 80010e0:	d005      	beq.n	80010ee <__adddf3+0x212>
 80010e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80010e6:	bf04      	itt	eq
 80010e8:	4619      	moveq	r1, r3
 80010ea:	4610      	moveq	r0, r2
 80010ec:	bd30      	pop	{r4, r5, pc}
 80010ee:	ea91 0f03 	teq	r1, r3
 80010f2:	bf1e      	ittt	ne
 80010f4:	2100      	movne	r1, #0
 80010f6:	2000      	movne	r0, #0
 80010f8:	bd30      	popne	{r4, r5, pc}
 80010fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80010fe:	d105      	bne.n	800110c <__adddf3+0x230>
 8001100:	0040      	lsls	r0, r0, #1
 8001102:	4149      	adcs	r1, r1
 8001104:	bf28      	it	cs
 8001106:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800110a:	bd30      	pop	{r4, r5, pc}
 800110c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8001110:	bf3c      	itt	cc
 8001112:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8001116:	bd30      	popcc	{r4, r5, pc}
 8001118:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800111c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8001120:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8001124:	f04f 0000 	mov.w	r0, #0
 8001128:	bd30      	pop	{r4, r5, pc}
 800112a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800112e:	bf1a      	itte	ne
 8001130:	4619      	movne	r1, r3
 8001132:	4610      	movne	r0, r2
 8001134:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8001138:	bf1c      	itt	ne
 800113a:	460b      	movne	r3, r1
 800113c:	4602      	movne	r2, r0
 800113e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001142:	bf06      	itte	eq
 8001144:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8001148:	ea91 0f03 	teqeq	r1, r3
 800114c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8001150:	bd30      	pop	{r4, r5, pc}
 8001152:	bf00      	nop

08001154 <__aeabi_ui2d>:
 8001154:	f090 0f00 	teq	r0, #0
 8001158:	bf04      	itt	eq
 800115a:	2100      	moveq	r1, #0
 800115c:	4770      	bxeq	lr
 800115e:	b530      	push	{r4, r5, lr}
 8001160:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001164:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001168:	f04f 0500 	mov.w	r5, #0
 800116c:	f04f 0100 	mov.w	r1, #0
 8001170:	e750      	b.n	8001014 <__adddf3+0x138>
 8001172:	bf00      	nop

08001174 <__aeabi_i2d>:
 8001174:	f090 0f00 	teq	r0, #0
 8001178:	bf04      	itt	eq
 800117a:	2100      	moveq	r1, #0
 800117c:	4770      	bxeq	lr
 800117e:	b530      	push	{r4, r5, lr}
 8001180:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001184:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8001188:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800118c:	bf48      	it	mi
 800118e:	4240      	negmi	r0, r0
 8001190:	f04f 0100 	mov.w	r1, #0
 8001194:	e73e      	b.n	8001014 <__adddf3+0x138>
 8001196:	bf00      	nop

08001198 <__aeabi_f2d>:
 8001198:	0042      	lsls	r2, r0, #1
 800119a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800119e:	ea4f 0131 	mov.w	r1, r1, rrx
 80011a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80011a6:	bf1f      	itttt	ne
 80011a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80011ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80011b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80011b4:	4770      	bxne	lr
 80011b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80011ba:	bf08      	it	eq
 80011bc:	4770      	bxeq	lr
 80011be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80011c2:	bf04      	itt	eq
 80011c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80011c8:	4770      	bxeq	lr
 80011ca:	b530      	push	{r4, r5, lr}
 80011cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80011d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80011d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80011d8:	e71c      	b.n	8001014 <__adddf3+0x138>
 80011da:	bf00      	nop

080011dc <__aeabi_ul2d>:
 80011dc:	ea50 0201 	orrs.w	r2, r0, r1
 80011e0:	bf08      	it	eq
 80011e2:	4770      	bxeq	lr
 80011e4:	b530      	push	{r4, r5, lr}
 80011e6:	f04f 0500 	mov.w	r5, #0
 80011ea:	e00a      	b.n	8001202 <__aeabi_l2d+0x16>

080011ec <__aeabi_l2d>:
 80011ec:	ea50 0201 	orrs.w	r2, r0, r1
 80011f0:	bf08      	it	eq
 80011f2:	4770      	bxeq	lr
 80011f4:	b530      	push	{r4, r5, lr}
 80011f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80011fa:	d502      	bpl.n	8001202 <__aeabi_l2d+0x16>
 80011fc:	4240      	negs	r0, r0
 80011fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001202:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8001206:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800120a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800120e:	f43f aed8 	beq.w	8000fc2 <__adddf3+0xe6>
 8001212:	f04f 0203 	mov.w	r2, #3
 8001216:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800121a:	bf18      	it	ne
 800121c:	3203      	addne	r2, #3
 800121e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8001222:	bf18      	it	ne
 8001224:	3203      	addne	r2, #3
 8001226:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800122a:	f1c2 0320 	rsb	r3, r2, #32
 800122e:	fa00 fc03 	lsl.w	ip, r0, r3
 8001232:	fa20 f002 	lsr.w	r0, r0, r2
 8001236:	fa01 fe03 	lsl.w	lr, r1, r3
 800123a:	ea40 000e 	orr.w	r0, r0, lr
 800123e:	fa21 f102 	lsr.w	r1, r1, r2
 8001242:	4414      	add	r4, r2
 8001244:	e6bd      	b.n	8000fc2 <__adddf3+0xe6>
 8001246:	bf00      	nop

08001248 <__aeabi_dmul>:
 8001248:	b570      	push	{r4, r5, r6, lr}
 800124a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800124e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001252:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001256:	bf1d      	ittte	ne
 8001258:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800125c:	ea94 0f0c 	teqne	r4, ip
 8001260:	ea95 0f0c 	teqne	r5, ip
 8001264:	f000 f8de 	bleq	8001424 <__aeabi_dmul+0x1dc>
 8001268:	442c      	add	r4, r5
 800126a:	ea81 0603 	eor.w	r6, r1, r3
 800126e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001272:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001276:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800127a:	bf18      	it	ne
 800127c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001280:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001284:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001288:	d038      	beq.n	80012fc <__aeabi_dmul+0xb4>
 800128a:	fba0 ce02 	umull	ip, lr, r0, r2
 800128e:	f04f 0500 	mov.w	r5, #0
 8001292:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001296:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800129a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800129e:	f04f 0600 	mov.w	r6, #0
 80012a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80012a6:	f09c 0f00 	teq	ip, #0
 80012aa:	bf18      	it	ne
 80012ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80012b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80012b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80012b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80012bc:	d204      	bcs.n	80012c8 <__aeabi_dmul+0x80>
 80012be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80012c2:	416d      	adcs	r5, r5
 80012c4:	eb46 0606 	adc.w	r6, r6, r6
 80012c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80012cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80012d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80012d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80012d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80012dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80012e0:	bf88      	it	hi
 80012e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80012e6:	d81e      	bhi.n	8001326 <__aeabi_dmul+0xde>
 80012e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80012ec:	bf08      	it	eq
 80012ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80012f2:	f150 0000 	adcs.w	r0, r0, #0
 80012f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80012fa:	bd70      	pop	{r4, r5, r6, pc}
 80012fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001300:	ea46 0101 	orr.w	r1, r6, r1
 8001304:	ea40 0002 	orr.w	r0, r0, r2
 8001308:	ea81 0103 	eor.w	r1, r1, r3
 800130c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001310:	bfc2      	ittt	gt
 8001312:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001316:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800131a:	bd70      	popgt	{r4, r5, r6, pc}
 800131c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001320:	f04f 0e00 	mov.w	lr, #0
 8001324:	3c01      	subs	r4, #1
 8001326:	f300 80ab 	bgt.w	8001480 <__aeabi_dmul+0x238>
 800132a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800132e:	bfde      	ittt	le
 8001330:	2000      	movle	r0, #0
 8001332:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001336:	bd70      	pople	{r4, r5, r6, pc}
 8001338:	f1c4 0400 	rsb	r4, r4, #0
 800133c:	3c20      	subs	r4, #32
 800133e:	da35      	bge.n	80013ac <__aeabi_dmul+0x164>
 8001340:	340c      	adds	r4, #12
 8001342:	dc1b      	bgt.n	800137c <__aeabi_dmul+0x134>
 8001344:	f104 0414 	add.w	r4, r4, #20
 8001348:	f1c4 0520 	rsb	r5, r4, #32
 800134c:	fa00 f305 	lsl.w	r3, r0, r5
 8001350:	fa20 f004 	lsr.w	r0, r0, r4
 8001354:	fa01 f205 	lsl.w	r2, r1, r5
 8001358:	ea40 0002 	orr.w	r0, r0, r2
 800135c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001360:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8001364:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8001368:	fa21 f604 	lsr.w	r6, r1, r4
 800136c:	eb42 0106 	adc.w	r1, r2, r6
 8001370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8001374:	bf08      	it	eq
 8001376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800137a:	bd70      	pop	{r4, r5, r6, pc}
 800137c:	f1c4 040c 	rsb	r4, r4, #12
 8001380:	f1c4 0520 	rsb	r5, r4, #32
 8001384:	fa00 f304 	lsl.w	r3, r0, r4
 8001388:	fa20 f005 	lsr.w	r0, r0, r5
 800138c:	fa01 f204 	lsl.w	r2, r1, r4
 8001390:	ea40 0002 	orr.w	r0, r0, r2
 8001394:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001398:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800139c:	f141 0100 	adc.w	r1, r1, #0
 80013a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80013a4:	bf08      	it	eq
 80013a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80013aa:	bd70      	pop	{r4, r5, r6, pc}
 80013ac:	f1c4 0520 	rsb	r5, r4, #32
 80013b0:	fa00 f205 	lsl.w	r2, r0, r5
 80013b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80013b8:	fa20 f304 	lsr.w	r3, r0, r4
 80013bc:	fa01 f205 	lsl.w	r2, r1, r5
 80013c0:	ea43 0302 	orr.w	r3, r3, r2
 80013c4:	fa21 f004 	lsr.w	r0, r1, r4
 80013c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80013cc:	fa21 f204 	lsr.w	r2, r1, r4
 80013d0:	ea20 0002 	bic.w	r0, r0, r2
 80013d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80013d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80013dc:	bf08      	it	eq
 80013de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80013e2:	bd70      	pop	{r4, r5, r6, pc}
 80013e4:	f094 0f00 	teq	r4, #0
 80013e8:	d10f      	bne.n	800140a <__aeabi_dmul+0x1c2>
 80013ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80013ee:	0040      	lsls	r0, r0, #1
 80013f0:	eb41 0101 	adc.w	r1, r1, r1
 80013f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80013f8:	bf08      	it	eq
 80013fa:	3c01      	subeq	r4, #1
 80013fc:	d0f7      	beq.n	80013ee <__aeabi_dmul+0x1a6>
 80013fe:	ea41 0106 	orr.w	r1, r1, r6
 8001402:	f095 0f00 	teq	r5, #0
 8001406:	bf18      	it	ne
 8001408:	4770      	bxne	lr
 800140a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800140e:	0052      	lsls	r2, r2, #1
 8001410:	eb43 0303 	adc.w	r3, r3, r3
 8001414:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001418:	bf08      	it	eq
 800141a:	3d01      	subeq	r5, #1
 800141c:	d0f7      	beq.n	800140e <__aeabi_dmul+0x1c6>
 800141e:	ea43 0306 	orr.w	r3, r3, r6
 8001422:	4770      	bx	lr
 8001424:	ea94 0f0c 	teq	r4, ip
 8001428:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800142c:	bf18      	it	ne
 800142e:	ea95 0f0c 	teqne	r5, ip
 8001432:	d00c      	beq.n	800144e <__aeabi_dmul+0x206>
 8001434:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001438:	bf18      	it	ne
 800143a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800143e:	d1d1      	bne.n	80013e4 <__aeabi_dmul+0x19c>
 8001440:	ea81 0103 	eor.w	r1, r1, r3
 8001444:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001448:	f04f 0000 	mov.w	r0, #0
 800144c:	bd70      	pop	{r4, r5, r6, pc}
 800144e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001452:	bf06      	itte	eq
 8001454:	4610      	moveq	r0, r2
 8001456:	4619      	moveq	r1, r3
 8001458:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800145c:	d019      	beq.n	8001492 <__aeabi_dmul+0x24a>
 800145e:	ea94 0f0c 	teq	r4, ip
 8001462:	d102      	bne.n	800146a <__aeabi_dmul+0x222>
 8001464:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8001468:	d113      	bne.n	8001492 <__aeabi_dmul+0x24a>
 800146a:	ea95 0f0c 	teq	r5, ip
 800146e:	d105      	bne.n	800147c <__aeabi_dmul+0x234>
 8001470:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8001474:	bf1c      	itt	ne
 8001476:	4610      	movne	r0, r2
 8001478:	4619      	movne	r1, r3
 800147a:	d10a      	bne.n	8001492 <__aeabi_dmul+0x24a>
 800147c:	ea81 0103 	eor.w	r1, r1, r3
 8001480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8001484:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800148c:	f04f 0000 	mov.w	r0, #0
 8001490:	bd70      	pop	{r4, r5, r6, pc}
 8001492:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8001496:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800149a:	bd70      	pop	{r4, r5, r6, pc}

0800149c <__aeabi_ddiv>:
 800149c:	b570      	push	{r4, r5, r6, lr}
 800149e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80014a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80014a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80014aa:	bf1d      	ittte	ne
 80014ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80014b0:	ea94 0f0c 	teqne	r4, ip
 80014b4:	ea95 0f0c 	teqne	r5, ip
 80014b8:	f000 f8a7 	bleq	800160a <__aeabi_ddiv+0x16e>
 80014bc:	eba4 0405 	sub.w	r4, r4, r5
 80014c0:	ea81 0e03 	eor.w	lr, r1, r3
 80014c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80014c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80014cc:	f000 8088 	beq.w	80015e0 <__aeabi_ddiv+0x144>
 80014d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80014d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80014d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80014dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80014e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80014e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80014e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80014ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80014f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80014f4:	429d      	cmp	r5, r3
 80014f6:	bf08      	it	eq
 80014f8:	4296      	cmpeq	r6, r2
 80014fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80014fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8001502:	d202      	bcs.n	800150a <__aeabi_ddiv+0x6e>
 8001504:	085b      	lsrs	r3, r3, #1
 8001506:	ea4f 0232 	mov.w	r2, r2, rrx
 800150a:	1ab6      	subs	r6, r6, r2
 800150c:	eb65 0503 	sbc.w	r5, r5, r3
 8001510:	085b      	lsrs	r3, r3, #1
 8001512:	ea4f 0232 	mov.w	r2, r2, rrx
 8001516:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800151a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800151e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001522:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001526:	bf22      	ittt	cs
 8001528:	1ab6      	subcs	r6, r6, r2
 800152a:	4675      	movcs	r5, lr
 800152c:	ea40 000c 	orrcs.w	r0, r0, ip
 8001530:	085b      	lsrs	r3, r3, #1
 8001532:	ea4f 0232 	mov.w	r2, r2, rrx
 8001536:	ebb6 0e02 	subs.w	lr, r6, r2
 800153a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800153e:	bf22      	ittt	cs
 8001540:	1ab6      	subcs	r6, r6, r2
 8001542:	4675      	movcs	r5, lr
 8001544:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	ea4f 0232 	mov.w	r2, r2, rrx
 800154e:	ebb6 0e02 	subs.w	lr, r6, r2
 8001552:	eb75 0e03 	sbcs.w	lr, r5, r3
 8001556:	bf22      	ittt	cs
 8001558:	1ab6      	subcs	r6, r6, r2
 800155a:	4675      	movcs	r5, lr
 800155c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8001560:	085b      	lsrs	r3, r3, #1
 8001562:	ea4f 0232 	mov.w	r2, r2, rrx
 8001566:	ebb6 0e02 	subs.w	lr, r6, r2
 800156a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800156e:	bf22      	ittt	cs
 8001570:	1ab6      	subcs	r6, r6, r2
 8001572:	4675      	movcs	r5, lr
 8001574:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8001578:	ea55 0e06 	orrs.w	lr, r5, r6
 800157c:	d018      	beq.n	80015b0 <__aeabi_ddiv+0x114>
 800157e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8001582:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8001586:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800158a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800158e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8001592:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8001596:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800159a:	d1c0      	bne.n	800151e <__aeabi_ddiv+0x82>
 800159c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80015a0:	d10b      	bne.n	80015ba <__aeabi_ddiv+0x11e>
 80015a2:	ea41 0100 	orr.w	r1, r1, r0
 80015a6:	f04f 0000 	mov.w	r0, #0
 80015aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80015ae:	e7b6      	b.n	800151e <__aeabi_ddiv+0x82>
 80015b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80015b4:	bf04      	itt	eq
 80015b6:	4301      	orreq	r1, r0
 80015b8:	2000      	moveq	r0, #0
 80015ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80015be:	bf88      	it	hi
 80015c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80015c4:	f63f aeaf 	bhi.w	8001326 <__aeabi_dmul+0xde>
 80015c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80015cc:	bf04      	itt	eq
 80015ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80015d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80015d6:	f150 0000 	adcs.w	r0, r0, #0
 80015da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80015e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80015e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80015ec:	bfc2      	ittt	gt
 80015ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80015f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80015f6:	bd70      	popgt	{r4, r5, r6, pc}
 80015f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80015fc:	f04f 0e00 	mov.w	lr, #0
 8001600:	3c01      	subs	r4, #1
 8001602:	e690      	b.n	8001326 <__aeabi_dmul+0xde>
 8001604:	ea45 0e06 	orr.w	lr, r5, r6
 8001608:	e68d      	b.n	8001326 <__aeabi_dmul+0xde>
 800160a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800160e:	ea94 0f0c 	teq	r4, ip
 8001612:	bf08      	it	eq
 8001614:	ea95 0f0c 	teqeq	r5, ip
 8001618:	f43f af3b 	beq.w	8001492 <__aeabi_dmul+0x24a>
 800161c:	ea94 0f0c 	teq	r4, ip
 8001620:	d10a      	bne.n	8001638 <__aeabi_ddiv+0x19c>
 8001622:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8001626:	f47f af34 	bne.w	8001492 <__aeabi_dmul+0x24a>
 800162a:	ea95 0f0c 	teq	r5, ip
 800162e:	f47f af25 	bne.w	800147c <__aeabi_dmul+0x234>
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	e72c      	b.n	8001492 <__aeabi_dmul+0x24a>
 8001638:	ea95 0f0c 	teq	r5, ip
 800163c:	d106      	bne.n	800164c <__aeabi_ddiv+0x1b0>
 800163e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8001642:	f43f aefd 	beq.w	8001440 <__aeabi_dmul+0x1f8>
 8001646:	4610      	mov	r0, r2
 8001648:	4619      	mov	r1, r3
 800164a:	e722      	b.n	8001492 <__aeabi_dmul+0x24a>
 800164c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8001650:	bf18      	it	ne
 8001652:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8001656:	f47f aec5 	bne.w	80013e4 <__aeabi_dmul+0x19c>
 800165a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800165e:	f47f af0d 	bne.w	800147c <__aeabi_dmul+0x234>
 8001662:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8001666:	f47f aeeb 	bne.w	8001440 <__aeabi_dmul+0x1f8>
 800166a:	e712      	b.n	8001492 <__aeabi_dmul+0x24a>

0800166c <__gedf2>:
 800166c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8001670:	e006      	b.n	8001680 <__cmpdf2+0x4>
 8001672:	bf00      	nop

08001674 <__ledf2>:
 8001674:	f04f 0c01 	mov.w	ip, #1
 8001678:	e002      	b.n	8001680 <__cmpdf2+0x4>
 800167a:	bf00      	nop

0800167c <__cmpdf2>:
 800167c:	f04f 0c01 	mov.w	ip, #1
 8001680:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001684:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8001688:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800168c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8001690:	bf18      	it	ne
 8001692:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8001696:	d01b      	beq.n	80016d0 <__cmpdf2+0x54>
 8001698:	b001      	add	sp, #4
 800169a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800169e:	bf0c      	ite	eq
 80016a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80016a4:	ea91 0f03 	teqne	r1, r3
 80016a8:	bf02      	ittt	eq
 80016aa:	ea90 0f02 	teqeq	r0, r2
 80016ae:	2000      	moveq	r0, #0
 80016b0:	4770      	bxeq	lr
 80016b2:	f110 0f00 	cmn.w	r0, #0
 80016b6:	ea91 0f03 	teq	r1, r3
 80016ba:	bf58      	it	pl
 80016bc:	4299      	cmppl	r1, r3
 80016be:	bf08      	it	eq
 80016c0:	4290      	cmpeq	r0, r2
 80016c2:	bf2c      	ite	cs
 80016c4:	17d8      	asrcs	r0, r3, #31
 80016c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80016ca:	f040 0001 	orr.w	r0, r0, #1
 80016ce:	4770      	bx	lr
 80016d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80016d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80016d8:	d102      	bne.n	80016e0 <__cmpdf2+0x64>
 80016da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80016de:	d107      	bne.n	80016f0 <__cmpdf2+0x74>
 80016e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80016e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80016e8:	d1d6      	bne.n	8001698 <__cmpdf2+0x1c>
 80016ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80016ee:	d0d3      	beq.n	8001698 <__cmpdf2+0x1c>
 80016f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <__aeabi_cdrcmple>:
 80016f8:	4684      	mov	ip, r0
 80016fa:	4610      	mov	r0, r2
 80016fc:	4662      	mov	r2, ip
 80016fe:	468c      	mov	ip, r1
 8001700:	4619      	mov	r1, r3
 8001702:	4663      	mov	r3, ip
 8001704:	e000      	b.n	8001708 <__aeabi_cdcmpeq>
 8001706:	bf00      	nop

08001708 <__aeabi_cdcmpeq>:
 8001708:	b501      	push	{r0, lr}
 800170a:	f7ff ffb7 	bl	800167c <__cmpdf2>
 800170e:	2800      	cmp	r0, #0
 8001710:	bf48      	it	mi
 8001712:	f110 0f00 	cmnmi.w	r0, #0
 8001716:	bd01      	pop	{r0, pc}

08001718 <__aeabi_dcmpeq>:
 8001718:	f84d ed08 	str.w	lr, [sp, #-8]!
 800171c:	f7ff fff4 	bl	8001708 <__aeabi_cdcmpeq>
 8001720:	bf0c      	ite	eq
 8001722:	2001      	moveq	r0, #1
 8001724:	2000      	movne	r0, #0
 8001726:	f85d fb08 	ldr.w	pc, [sp], #8
 800172a:	bf00      	nop

0800172c <__aeabi_dcmplt>:
 800172c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001730:	f7ff ffea 	bl	8001708 <__aeabi_cdcmpeq>
 8001734:	bf34      	ite	cc
 8001736:	2001      	movcc	r0, #1
 8001738:	2000      	movcs	r0, #0
 800173a:	f85d fb08 	ldr.w	pc, [sp], #8
 800173e:	bf00      	nop

08001740 <__aeabi_dcmple>:
 8001740:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001744:	f7ff ffe0 	bl	8001708 <__aeabi_cdcmpeq>
 8001748:	bf94      	ite	ls
 800174a:	2001      	movls	r0, #1
 800174c:	2000      	movhi	r0, #0
 800174e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001752:	bf00      	nop

08001754 <__aeabi_dcmpge>:
 8001754:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001758:	f7ff ffce 	bl	80016f8 <__aeabi_cdrcmple>
 800175c:	bf94      	ite	ls
 800175e:	2001      	movls	r0, #1
 8001760:	2000      	movhi	r0, #0
 8001762:	f85d fb08 	ldr.w	pc, [sp], #8
 8001766:	bf00      	nop

08001768 <__aeabi_dcmpgt>:
 8001768:	f84d ed08 	str.w	lr, [sp, #-8]!
 800176c:	f7ff ffc4 	bl	80016f8 <__aeabi_cdrcmple>
 8001770:	bf34      	ite	cc
 8001772:	2001      	movcc	r0, #1
 8001774:	2000      	movcs	r0, #0
 8001776:	f85d fb08 	ldr.w	pc, [sp], #8
 800177a:	bf00      	nop

0800177c <__aeabi_uldivmod>:
 800177c:	b953      	cbnz	r3, 8001794 <__aeabi_uldivmod+0x18>
 800177e:	b94a      	cbnz	r2, 8001794 <__aeabi_uldivmod+0x18>
 8001780:	2900      	cmp	r1, #0
 8001782:	bf08      	it	eq
 8001784:	2800      	cmpeq	r0, #0
 8001786:	bf1c      	itt	ne
 8001788:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800178c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8001790:	f000 b80c 	b.w	80017ac <__aeabi_idiv0>
 8001794:	f1ad 0c08 	sub.w	ip, sp, #8
 8001798:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800179c:	f001 f918 	bl	80029d0 <__udivmoddi4>
 80017a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80017a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80017a8:	b004      	add	sp, #16
 80017aa:	4770      	bx	lr

080017ac <__aeabi_idiv0>:
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop

080017b0 <__cvt>:
 80017b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80017b4:	ec55 4b10 	vmov	r4, r5, d0
 80017b8:	2d00      	cmp	r5, #0
 80017ba:	460e      	mov	r6, r1
 80017bc:	4691      	mov	r9, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	da03      	bge.n	80017d2 <__cvt+0x22>
 80017ca:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80017ce:	461d      	mov	r5, r3
 80017d0:	222d      	movs	r2, #45	; 0x2d
 80017d2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80017d4:	700a      	strb	r2, [r1, #0]
 80017d6:	f027 0720 	bic.w	r7, r7, #32
 80017da:	2f46      	cmp	r7, #70	; 0x46
 80017dc:	d004      	beq.n	80017e8 <__cvt+0x38>
 80017de:	2f45      	cmp	r7, #69	; 0x45
 80017e0:	d100      	bne.n	80017e4 <__cvt+0x34>
 80017e2:	3601      	adds	r6, #1
 80017e4:	2102      	movs	r1, #2
 80017e6:	e000      	b.n	80017ea <__cvt+0x3a>
 80017e8:	2103      	movs	r1, #3
 80017ea:	ab03      	add	r3, sp, #12
 80017ec:	9301      	str	r3, [sp, #4]
 80017ee:	ab02      	add	r3, sp, #8
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	4632      	mov	r2, r6
 80017f4:	4653      	mov	r3, sl
 80017f6:	ec45 4b10 	vmov	d0, r4, r5
 80017fa:	f7fe fdc2 	bl	8000382 <_dtoa_r>
 80017fe:	2f47      	cmp	r7, #71	; 0x47
 8001800:	4680      	mov	r8, r0
 8001802:	d102      	bne.n	800180a <__cvt+0x5a>
 8001804:	f019 0f01 	tst.w	r9, #1
 8001808:	d022      	beq.n	8001850 <__cvt+0xa0>
 800180a:	2f46      	cmp	r7, #70	; 0x46
 800180c:	eb08 0906 	add.w	r9, r8, r6
 8001810:	d111      	bne.n	8001836 <__cvt+0x86>
 8001812:	f898 3000 	ldrb.w	r3, [r8]
 8001816:	2b30      	cmp	r3, #48	; 0x30
 8001818:	d10a      	bne.n	8001830 <__cvt+0x80>
 800181a:	2200      	movs	r2, #0
 800181c:	2300      	movs	r3, #0
 800181e:	4620      	mov	r0, r4
 8001820:	4629      	mov	r1, r5
 8001822:	f7ff ff79 	bl	8001718 <__aeabi_dcmpeq>
 8001826:	b918      	cbnz	r0, 8001830 <__cvt+0x80>
 8001828:	f1c6 0601 	rsb	r6, r6, #1
 800182c:	f8ca 6000 	str.w	r6, [sl]
 8001830:	f8da 3000 	ldr.w	r3, [sl]
 8001834:	4499      	add	r9, r3
 8001836:	2200      	movs	r2, #0
 8001838:	2300      	movs	r3, #0
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7ff ff6b 	bl	8001718 <__aeabi_dcmpeq>
 8001842:	b108      	cbz	r0, 8001848 <__cvt+0x98>
 8001844:	f8cd 900c 	str.w	r9, [sp, #12]
 8001848:	2230      	movs	r2, #48	; 0x30
 800184a:	9b03      	ldr	r3, [sp, #12]
 800184c:	454b      	cmp	r3, r9
 800184e:	d308      	bcc.n	8001862 <__cvt+0xb2>
 8001850:	9b03      	ldr	r3, [sp, #12]
 8001852:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001854:	eba3 0308 	sub.w	r3, r3, r8
 8001858:	4640      	mov	r0, r8
 800185a:	6013      	str	r3, [r2, #0]
 800185c:	b004      	add	sp, #16
 800185e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001862:	1c59      	adds	r1, r3, #1
 8001864:	9103      	str	r1, [sp, #12]
 8001866:	701a      	strb	r2, [r3, #0]
 8001868:	e7ef      	b.n	800184a <__cvt+0x9a>

0800186a <__exponent>:
 800186a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800186c:	2900      	cmp	r1, #0
 800186e:	bfba      	itte	lt
 8001870:	4249      	neglt	r1, r1
 8001872:	232d      	movlt	r3, #45	; 0x2d
 8001874:	232b      	movge	r3, #43	; 0x2b
 8001876:	2909      	cmp	r1, #9
 8001878:	7002      	strb	r2, [r0, #0]
 800187a:	7043      	strb	r3, [r0, #1]
 800187c:	dd21      	ble.n	80018c2 <__exponent+0x58>
 800187e:	f10d 0307 	add.w	r3, sp, #7
 8001882:	461f      	mov	r7, r3
 8001884:	260a      	movs	r6, #10
 8001886:	fb91 f2f6 	sdiv	r2, r1, r6
 800188a:	fb06 1412 	mls	r4, r6, r2, r1
 800188e:	3430      	adds	r4, #48	; 0x30
 8001890:	2963      	cmp	r1, #99	; 0x63
 8001892:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8001896:	f803 4c01 	strb.w	r4, [r3, #-1]
 800189a:	dc0a      	bgt.n	80018b2 <__exponent+0x48>
 800189c:	3230      	adds	r2, #48	; 0x30
 800189e:	f805 2c01 	strb.w	r2, [r5, #-1]
 80018a2:	3b02      	subs	r3, #2
 80018a4:	1c82      	adds	r2, r0, #2
 80018a6:	42bb      	cmp	r3, r7
 80018a8:	4614      	mov	r4, r2
 80018aa:	d305      	bcc.n	80018b8 <__exponent+0x4e>
 80018ac:	1a20      	subs	r0, r4, r0
 80018ae:	b003      	add	sp, #12
 80018b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018b2:	462b      	mov	r3, r5
 80018b4:	4611      	mov	r1, r2
 80018b6:	e7e6      	b.n	8001886 <__exponent+0x1c>
 80018b8:	f813 1b01 	ldrb.w	r1, [r3], #1
 80018bc:	f802 1b01 	strb.w	r1, [r2], #1
 80018c0:	e7f1      	b.n	80018a6 <__exponent+0x3c>
 80018c2:	2330      	movs	r3, #48	; 0x30
 80018c4:	4419      	add	r1, r3
 80018c6:	7083      	strb	r3, [r0, #2]
 80018c8:	1d04      	adds	r4, r0, #4
 80018ca:	70c1      	strb	r1, [r0, #3]
 80018cc:	e7ee      	b.n	80018ac <__exponent+0x42>

080018ce <_printf_float>:
 80018ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018d2:	b08d      	sub	sp, #52	; 0x34
 80018d4:	460c      	mov	r4, r1
 80018d6:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80018da:	4616      	mov	r6, r2
 80018dc:	461f      	mov	r7, r3
 80018de:	4605      	mov	r5, r0
 80018e0:	f000 fbac 	bl	800203c <_localeconv_r>
 80018e4:	6803      	ldr	r3, [r0, #0]
 80018e6:	9306      	str	r3, [sp, #24]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f001 f9eb 	bl	8002cc4 <strlen>
 80018ee:	2300      	movs	r3, #0
 80018f0:	930a      	str	r3, [sp, #40]	; 0x28
 80018f2:	f8d8 3000 	ldr.w	r3, [r8]
 80018f6:	9007      	str	r0, [sp, #28]
 80018f8:	3307      	adds	r3, #7
 80018fa:	f023 0307 	bic.w	r3, r3, #7
 80018fe:	f103 0208 	add.w	r2, r3, #8
 8001902:	f894 a018 	ldrb.w	sl, [r4, #24]
 8001906:	f8d4 b000 	ldr.w	fp, [r4]
 800190a:	f8c8 2000 	str.w	r2, [r8]
 800190e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001912:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8001916:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800191a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800191e:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 8001922:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8001926:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <_printf_float+0x2fa>)
 800192c:	4640      	mov	r0, r8
 800192e:	4649      	mov	r1, r9
 8001930:	f001 f810 	bl	8002954 <__aeabi_dcmpun>
 8001934:	bb70      	cbnz	r0, 8001994 <_printf_float+0xc6>
 8001936:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800193a:	4ba3      	ldr	r3, [pc, #652]	; (8001bc8 <_printf_float+0x2fa>)
 800193c:	4640      	mov	r0, r8
 800193e:	4649      	mov	r1, r9
 8001940:	f7ff fefe 	bl	8001740 <__aeabi_dcmple>
 8001944:	bb30      	cbnz	r0, 8001994 <_printf_float+0xc6>
 8001946:	2200      	movs	r2, #0
 8001948:	2300      	movs	r3, #0
 800194a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800194e:	f7ff feed 	bl	800172c <__aeabi_dcmplt>
 8001952:	b110      	cbz	r0, 800195a <_printf_float+0x8c>
 8001954:	232d      	movs	r3, #45	; 0x2d
 8001956:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800195a:	4a9c      	ldr	r2, [pc, #624]	; (8001bcc <_printf_float+0x2fe>)
 800195c:	4b9c      	ldr	r3, [pc, #624]	; (8001bd0 <_printf_float+0x302>)
 800195e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8001962:	bf94      	ite	ls
 8001964:	4690      	movls	r8, r2
 8001966:	4698      	movhi	r8, r3
 8001968:	2303      	movs	r3, #3
 800196a:	f02b 0204 	bic.w	r2, fp, #4
 800196e:	6123      	str	r3, [r4, #16]
 8001970:	6022      	str	r2, [r4, #0]
 8001972:	f04f 0900 	mov.w	r9, #0
 8001976:	9700      	str	r7, [sp, #0]
 8001978:	4633      	mov	r3, r6
 800197a:	aa0b      	add	r2, sp, #44	; 0x2c
 800197c:	4621      	mov	r1, r4
 800197e:	4628      	mov	r0, r5
 8001980:	f000 f9d0 	bl	8001d24 <_printf_common>
 8001984:	3001      	adds	r0, #1
 8001986:	f040 808c 	bne.w	8001aa2 <_printf_float+0x1d4>
 800198a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800198e:	b00d      	add	sp, #52	; 0x34
 8001990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001994:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f000 ffda 	bl	8002954 <__aeabi_dcmpun>
 80019a0:	b140      	cbz	r0, 80019b4 <_printf_float+0xe6>
 80019a2:	9b05      	ldr	r3, [sp, #20]
 80019a4:	4a8b      	ldr	r2, [pc, #556]	; (8001bd4 <_printf_float+0x306>)
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	bfbc      	itt	lt
 80019aa:	232d      	movlt	r3, #45	; 0x2d
 80019ac:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80019b0:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <_printf_float+0x30a>)
 80019b2:	e7d4      	b.n	800195e <_printf_float+0x90>
 80019b4:	6863      	ldr	r3, [r4, #4]
 80019b6:	1c5a      	adds	r2, r3, #1
 80019b8:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
 80019bc:	d13e      	bne.n	8001a3c <_printf_float+0x16e>
 80019be:	2306      	movs	r3, #6
 80019c0:	6063      	str	r3, [r4, #4]
 80019c2:	2300      	movs	r3, #0
 80019c4:	9303      	str	r3, [sp, #12]
 80019c6:	ab0a      	add	r3, sp, #40	; 0x28
 80019c8:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80019cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 80019d0:	ab09      	add	r3, sp, #36	; 0x24
 80019d2:	9300      	str	r3, [sp, #0]
 80019d4:	6861      	ldr	r1, [r4, #4]
 80019d6:	6022      	str	r2, [r4, #0]
 80019d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80019dc:	ed9d 0b04 	vldr	d0, [sp, #16]
 80019e0:	4628      	mov	r0, r5
 80019e2:	f7ff fee5 	bl	80017b0 <__cvt>
 80019e6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80019ea:	4680      	mov	r8, r0
 80019ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80019ee:	d108      	bne.n	8001a02 <_printf_float+0x134>
 80019f0:	1cc8      	adds	r0, r1, #3
 80019f2:	db02      	blt.n	80019fa <_printf_float+0x12c>
 80019f4:	6863      	ldr	r3, [r4, #4]
 80019f6:	4299      	cmp	r1, r3
 80019f8:	dd41      	ble.n	8001a7e <_printf_float+0x1b0>
 80019fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80019fe:	fa5f fa8a 	uxtb.w	sl, sl
 8001a02:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8001a06:	d820      	bhi.n	8001a4a <_printf_float+0x17c>
 8001a08:	3901      	subs	r1, #1
 8001a0a:	4652      	mov	r2, sl
 8001a0c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8001a10:	9109      	str	r1, [sp, #36]	; 0x24
 8001a12:	f7ff ff2a 	bl	800186a <__exponent>
 8001a16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001a18:	1813      	adds	r3, r2, r0
 8001a1a:	2a01      	cmp	r2, #1
 8001a1c:	4681      	mov	r9, r0
 8001a1e:	6123      	str	r3, [r4, #16]
 8001a20:	dc02      	bgt.n	8001a28 <_printf_float+0x15a>
 8001a22:	6822      	ldr	r2, [r4, #0]
 8001a24:	07d2      	lsls	r2, r2, #31
 8001a26:	d501      	bpl.n	8001a2c <_printf_float+0x15e>
 8001a28:	3301      	adds	r3, #1
 8001a2a:	6123      	str	r3, [r4, #16]
 8001a2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0a0      	beq.n	8001976 <_printf_float+0xa8>
 8001a34:	232d      	movs	r3, #45	; 0x2d
 8001a36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a3a:	e79c      	b.n	8001976 <_printf_float+0xa8>
 8001a3c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8001a40:	d1bf      	bne.n	80019c2 <_printf_float+0xf4>
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1bd      	bne.n	80019c2 <_printf_float+0xf4>
 8001a46:	2301      	movs	r3, #1
 8001a48:	e7ba      	b.n	80019c0 <_printf_float+0xf2>
 8001a4a:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8001a4e:	d118      	bne.n	8001a82 <_printf_float+0x1b4>
 8001a50:	2900      	cmp	r1, #0
 8001a52:	6863      	ldr	r3, [r4, #4]
 8001a54:	dd0b      	ble.n	8001a6e <_printf_float+0x1a0>
 8001a56:	6121      	str	r1, [r4, #16]
 8001a58:	b913      	cbnz	r3, 8001a60 <_printf_float+0x192>
 8001a5a:	6822      	ldr	r2, [r4, #0]
 8001a5c:	07d0      	lsls	r0, r2, #31
 8001a5e:	d502      	bpl.n	8001a66 <_printf_float+0x198>
 8001a60:	3301      	adds	r3, #1
 8001a62:	440b      	add	r3, r1
 8001a64:	6123      	str	r3, [r4, #16]
 8001a66:	65a1      	str	r1, [r4, #88]	; 0x58
 8001a68:	f04f 0900 	mov.w	r9, #0
 8001a6c:	e7de      	b.n	8001a2c <_printf_float+0x15e>
 8001a6e:	b913      	cbnz	r3, 8001a76 <_printf_float+0x1a8>
 8001a70:	6822      	ldr	r2, [r4, #0]
 8001a72:	07d2      	lsls	r2, r2, #31
 8001a74:	d501      	bpl.n	8001a7a <_printf_float+0x1ac>
 8001a76:	3302      	adds	r3, #2
 8001a78:	e7f4      	b.n	8001a64 <_printf_float+0x196>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e7f2      	b.n	8001a64 <_printf_float+0x196>
 8001a7e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8001a82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001a84:	4299      	cmp	r1, r3
 8001a86:	db05      	blt.n	8001a94 <_printf_float+0x1c6>
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	6121      	str	r1, [r4, #16]
 8001a8c:	07d8      	lsls	r0, r3, #31
 8001a8e:	d5ea      	bpl.n	8001a66 <_printf_float+0x198>
 8001a90:	1c4b      	adds	r3, r1, #1
 8001a92:	e7e7      	b.n	8001a64 <_printf_float+0x196>
 8001a94:	2900      	cmp	r1, #0
 8001a96:	bfd4      	ite	le
 8001a98:	f1c1 0202 	rsble	r2, r1, #2
 8001a9c:	2201      	movgt	r2, #1
 8001a9e:	4413      	add	r3, r2
 8001aa0:	e7e0      	b.n	8001a64 <_printf_float+0x196>
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	055a      	lsls	r2, r3, #21
 8001aa6:	d407      	bmi.n	8001ab8 <_printf_float+0x1ea>
 8001aa8:	6923      	ldr	r3, [r4, #16]
 8001aaa:	4642      	mov	r2, r8
 8001aac:	4631      	mov	r1, r6
 8001aae:	4628      	mov	r0, r5
 8001ab0:	47b8      	blx	r7
 8001ab2:	3001      	adds	r0, #1
 8001ab4:	d12b      	bne.n	8001b0e <_printf_float+0x240>
 8001ab6:	e768      	b.n	800198a <_printf_float+0xbc>
 8001ab8:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8001abc:	f240 80dd 	bls.w	8001c7a <_printf_float+0x3ac>
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001ac8:	f7ff fe26 	bl	8001718 <__aeabi_dcmpeq>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d033      	beq.n	8001b38 <_printf_float+0x26a>
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	4a42      	ldr	r2, [pc, #264]	; (8001bdc <_printf_float+0x30e>)
 8001ad4:	4631      	mov	r1, r6
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	47b8      	blx	r7
 8001ada:	3001      	adds	r0, #1
 8001adc:	f43f af55 	beq.w	800198a <_printf_float+0xbc>
 8001ae0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	db02      	blt.n	8001aee <_printf_float+0x220>
 8001ae8:	6823      	ldr	r3, [r4, #0]
 8001aea:	07d8      	lsls	r0, r3, #31
 8001aec:	d50f      	bpl.n	8001b0e <_printf_float+0x240>
 8001aee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001af2:	4631      	mov	r1, r6
 8001af4:	4628      	mov	r0, r5
 8001af6:	47b8      	blx	r7
 8001af8:	3001      	adds	r0, #1
 8001afa:	f43f af46 	beq.w	800198a <_printf_float+0xbc>
 8001afe:	f04f 0800 	mov.w	r8, #0
 8001b02:	f104 091a 	add.w	r9, r4, #26
 8001b06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	4543      	cmp	r3, r8
 8001b0c:	dc09      	bgt.n	8001b22 <_printf_float+0x254>
 8001b0e:	6823      	ldr	r3, [r4, #0]
 8001b10:	079b      	lsls	r3, r3, #30
 8001b12:	f100 8102 	bmi.w	8001d1a <_printf_float+0x44c>
 8001b16:	68e0      	ldr	r0, [r4, #12]
 8001b18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001b1a:	4298      	cmp	r0, r3
 8001b1c:	bfb8      	it	lt
 8001b1e:	4618      	movlt	r0, r3
 8001b20:	e735      	b.n	800198e <_printf_float+0xc0>
 8001b22:	2301      	movs	r3, #1
 8001b24:	464a      	mov	r2, r9
 8001b26:	4631      	mov	r1, r6
 8001b28:	4628      	mov	r0, r5
 8001b2a:	47b8      	blx	r7
 8001b2c:	3001      	adds	r0, #1
 8001b2e:	f43f af2c 	beq.w	800198a <_printf_float+0xbc>
 8001b32:	f108 0801 	add.w	r8, r8, #1
 8001b36:	e7e6      	b.n	8001b06 <_printf_float+0x238>
 8001b38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	dc2b      	bgt.n	8001b96 <_printf_float+0x2c8>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	4a26      	ldr	r2, [pc, #152]	; (8001bdc <_printf_float+0x30e>)
 8001b42:	4631      	mov	r1, r6
 8001b44:	4628      	mov	r0, r5
 8001b46:	47b8      	blx	r7
 8001b48:	3001      	adds	r0, #1
 8001b4a:	f43f af1e 	beq.w	800198a <_printf_float+0xbc>
 8001b4e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001b52:	4313      	orrs	r3, r2
 8001b54:	d102      	bne.n	8001b5c <_printf_float+0x28e>
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	07d9      	lsls	r1, r3, #31
 8001b5a:	d5d8      	bpl.n	8001b0e <_printf_float+0x240>
 8001b5c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001b60:	4631      	mov	r1, r6
 8001b62:	4628      	mov	r0, r5
 8001b64:	47b8      	blx	r7
 8001b66:	3001      	adds	r0, #1
 8001b68:	f43f af0f 	beq.w	800198a <_printf_float+0xbc>
 8001b6c:	f04f 0900 	mov.w	r9, #0
 8001b70:	f104 0a1a 	add.w	sl, r4, #26
 8001b74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b76:	425b      	negs	r3, r3
 8001b78:	454b      	cmp	r3, r9
 8001b7a:	dc01      	bgt.n	8001b80 <_printf_float+0x2b2>
 8001b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001b7e:	e794      	b.n	8001aaa <_printf_float+0x1dc>
 8001b80:	2301      	movs	r3, #1
 8001b82:	4652      	mov	r2, sl
 8001b84:	4631      	mov	r1, r6
 8001b86:	4628      	mov	r0, r5
 8001b88:	47b8      	blx	r7
 8001b8a:	3001      	adds	r0, #1
 8001b8c:	f43f aefd 	beq.w	800198a <_printf_float+0xbc>
 8001b90:	f109 0901 	add.w	r9, r9, #1
 8001b94:	e7ee      	b.n	8001b74 <_printf_float+0x2a6>
 8001b96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001b98:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	bfa8      	it	ge
 8001b9e:	461a      	movge	r2, r3
 8001ba0:	2a00      	cmp	r2, #0
 8001ba2:	4691      	mov	r9, r2
 8001ba4:	dd07      	ble.n	8001bb6 <_printf_float+0x2e8>
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	4631      	mov	r1, r6
 8001baa:	4642      	mov	r2, r8
 8001bac:	4628      	mov	r0, r5
 8001bae:	47b8      	blx	r7
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	f43f aeea 	beq.w	800198a <_printf_float+0xbc>
 8001bb6:	f104 031a 	add.w	r3, r4, #26
 8001bba:	f04f 0b00 	mov.w	fp, #0
 8001bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001bc2:	9304      	str	r3, [sp, #16]
 8001bc4:	e016      	b.n	8001bf4 <_printf_float+0x326>
 8001bc6:	bf00      	nop
 8001bc8:	7fefffff 	.word	0x7fefffff
 8001bcc:	08006a83 	.word	0x08006a83
 8001bd0:	08006a87 	.word	0x08006a87
 8001bd4:	08006a8b 	.word	0x08006a8b
 8001bd8:	08006a8f 	.word	0x08006a8f
 8001bdc:	080069d7 	.word	0x080069d7
 8001be0:	2301      	movs	r3, #1
 8001be2:	9a04      	ldr	r2, [sp, #16]
 8001be4:	4631      	mov	r1, r6
 8001be6:	4628      	mov	r0, r5
 8001be8:	47b8      	blx	r7
 8001bea:	3001      	adds	r0, #1
 8001bec:	f43f aecd 	beq.w	800198a <_printf_float+0xbc>
 8001bf0:	f10b 0b01 	add.w	fp, fp, #1
 8001bf4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8001bf8:	ebaa 0309 	sub.w	r3, sl, r9
 8001bfc:	455b      	cmp	r3, fp
 8001bfe:	dcef      	bgt.n	8001be0 <_printf_float+0x312>
 8001c00:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001c04:	429a      	cmp	r2, r3
 8001c06:	db1b      	blt.n	8001c40 <_printf_float+0x372>
 8001c08:	6823      	ldr	r3, [r4, #0]
 8001c0a:	07da      	lsls	r2, r3, #31
 8001c0c:	d418      	bmi.n	8001c40 <_printf_float+0x372>
 8001c0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001c12:	4592      	cmp	sl, r2
 8001c14:	db1c      	blt.n	8001c50 <_printf_float+0x382>
 8001c16:	eba3 090a 	sub.w	r9, r3, sl
 8001c1a:	f1b9 0f00 	cmp.w	r9, #0
 8001c1e:	dd08      	ble.n	8001c32 <_printf_float+0x364>
 8001c20:	464b      	mov	r3, r9
 8001c22:	eb08 020a 	add.w	r2, r8, sl
 8001c26:	4631      	mov	r1, r6
 8001c28:	4628      	mov	r0, r5
 8001c2a:	47b8      	blx	r7
 8001c2c:	3001      	adds	r0, #1
 8001c2e:	f43f aeac 	beq.w	800198a <_printf_float+0xbc>
 8001c32:	f04f 0800 	mov.w	r8, #0
 8001c36:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8001c3a:	f104 0a1a 	add.w	sl, r4, #26
 8001c3e:	e014      	b.n	8001c6a <_printf_float+0x39c>
 8001c40:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001c44:	4631      	mov	r1, r6
 8001c46:	4628      	mov	r0, r5
 8001c48:	47b8      	blx	r7
 8001c4a:	3001      	adds	r0, #1
 8001c4c:	d1df      	bne.n	8001c0e <_printf_float+0x340>
 8001c4e:	e69c      	b.n	800198a <_printf_float+0xbc>
 8001c50:	eba3 0902 	sub.w	r9, r3, r2
 8001c54:	e7e1      	b.n	8001c1a <_printf_float+0x34c>
 8001c56:	2301      	movs	r3, #1
 8001c58:	4652      	mov	r2, sl
 8001c5a:	4631      	mov	r1, r6
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	47b8      	blx	r7
 8001c60:	3001      	adds	r0, #1
 8001c62:	f43f ae92 	beq.w	800198a <_printf_float+0xbc>
 8001c66:	f108 0801 	add.w	r8, r8, #1
 8001c6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8001c6e:	1a9b      	subs	r3, r3, r2
 8001c70:	eba3 0309 	sub.w	r3, r3, r9
 8001c74:	4543      	cmp	r3, r8
 8001c76:	dcee      	bgt.n	8001c56 <_printf_float+0x388>
 8001c78:	e749      	b.n	8001b0e <_printf_float+0x240>
 8001c7a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c7c:	2a01      	cmp	r2, #1
 8001c7e:	dc01      	bgt.n	8001c84 <_printf_float+0x3b6>
 8001c80:	07db      	lsls	r3, r3, #31
 8001c82:	d537      	bpl.n	8001cf4 <_printf_float+0x426>
 8001c84:	2301      	movs	r3, #1
 8001c86:	4642      	mov	r2, r8
 8001c88:	4631      	mov	r1, r6
 8001c8a:	4628      	mov	r0, r5
 8001c8c:	47b8      	blx	r7
 8001c8e:	3001      	adds	r0, #1
 8001c90:	f43f ae7b 	beq.w	800198a <_printf_float+0xbc>
 8001c94:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8001c98:	4631      	mov	r1, r6
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	47b8      	blx	r7
 8001c9e:	3001      	adds	r0, #1
 8001ca0:	f43f ae73 	beq.w	800198a <_printf_float+0xbc>
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8001cac:	f7ff fd34 	bl	8001718 <__aeabi_dcmpeq>
 8001cb0:	b9d8      	cbnz	r0, 8001cea <_printf_float+0x41c>
 8001cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cb4:	f108 0201 	add.w	r2, r8, #1
 8001cb8:	3b01      	subs	r3, #1
 8001cba:	4631      	mov	r1, r6
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	47b8      	blx	r7
 8001cc0:	3001      	adds	r0, #1
 8001cc2:	d10e      	bne.n	8001ce2 <_printf_float+0x414>
 8001cc4:	e661      	b.n	800198a <_printf_float+0xbc>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	4652      	mov	r2, sl
 8001cca:	4631      	mov	r1, r6
 8001ccc:	4628      	mov	r0, r5
 8001cce:	47b8      	blx	r7
 8001cd0:	3001      	adds	r0, #1
 8001cd2:	f43f ae5a 	beq.w	800198a <_printf_float+0xbc>
 8001cd6:	f108 0801 	add.w	r8, r8, #1
 8001cda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	4543      	cmp	r3, r8
 8001ce0:	dcf1      	bgt.n	8001cc6 <_printf_float+0x3f8>
 8001ce2:	464b      	mov	r3, r9
 8001ce4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8001ce8:	e6e0      	b.n	8001aac <_printf_float+0x1de>
 8001cea:	f04f 0800 	mov.w	r8, #0
 8001cee:	f104 0a1a 	add.w	sl, r4, #26
 8001cf2:	e7f2      	b.n	8001cda <_printf_float+0x40c>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	4642      	mov	r2, r8
 8001cf8:	e7df      	b.n	8001cba <_printf_float+0x3ec>
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	464a      	mov	r2, r9
 8001cfe:	4631      	mov	r1, r6
 8001d00:	4628      	mov	r0, r5
 8001d02:	47b8      	blx	r7
 8001d04:	3001      	adds	r0, #1
 8001d06:	f43f ae40 	beq.w	800198a <_printf_float+0xbc>
 8001d0a:	f108 0801 	add.w	r8, r8, #1
 8001d0e:	68e3      	ldr	r3, [r4, #12]
 8001d10:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	4543      	cmp	r3, r8
 8001d16:	dcf0      	bgt.n	8001cfa <_printf_float+0x42c>
 8001d18:	e6fd      	b.n	8001b16 <_printf_float+0x248>
 8001d1a:	f04f 0800 	mov.w	r8, #0
 8001d1e:	f104 0919 	add.w	r9, r4, #25
 8001d22:	e7f4      	b.n	8001d0e <_printf_float+0x440>

08001d24 <_printf_common>:
 8001d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d28:	4691      	mov	r9, r2
 8001d2a:	461f      	mov	r7, r3
 8001d2c:	688a      	ldr	r2, [r1, #8]
 8001d2e:	690b      	ldr	r3, [r1, #16]
 8001d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001d34:	4293      	cmp	r3, r2
 8001d36:	bfb8      	it	lt
 8001d38:	4613      	movlt	r3, r2
 8001d3a:	f8c9 3000 	str.w	r3, [r9]
 8001d3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001d42:	4606      	mov	r6, r0
 8001d44:	460c      	mov	r4, r1
 8001d46:	b112      	cbz	r2, 8001d4e <_printf_common+0x2a>
 8001d48:	3301      	adds	r3, #1
 8001d4a:	f8c9 3000 	str.w	r3, [r9]
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	0699      	lsls	r1, r3, #26
 8001d52:	bf42      	ittt	mi
 8001d54:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001d58:	3302      	addmi	r3, #2
 8001d5a:	f8c9 3000 	strmi.w	r3, [r9]
 8001d5e:	6825      	ldr	r5, [r4, #0]
 8001d60:	f015 0506 	ands.w	r5, r5, #6
 8001d64:	d107      	bne.n	8001d76 <_printf_common+0x52>
 8001d66:	f104 0a19 	add.w	sl, r4, #25
 8001d6a:	68e3      	ldr	r3, [r4, #12]
 8001d6c:	f8d9 2000 	ldr.w	r2, [r9]
 8001d70:	1a9b      	subs	r3, r3, r2
 8001d72:	42ab      	cmp	r3, r5
 8001d74:	dc28      	bgt.n	8001dc8 <_printf_common+0xa4>
 8001d76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001d7a:	6822      	ldr	r2, [r4, #0]
 8001d7c:	3300      	adds	r3, #0
 8001d7e:	bf18      	it	ne
 8001d80:	2301      	movne	r3, #1
 8001d82:	0692      	lsls	r2, r2, #26
 8001d84:	d42d      	bmi.n	8001de2 <_printf_common+0xbe>
 8001d86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001d8a:	4639      	mov	r1, r7
 8001d8c:	4630      	mov	r0, r6
 8001d8e:	47c0      	blx	r8
 8001d90:	3001      	adds	r0, #1
 8001d92:	d020      	beq.n	8001dd6 <_printf_common+0xb2>
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	68e5      	ldr	r5, [r4, #12]
 8001d98:	f8d9 2000 	ldr.w	r2, [r9]
 8001d9c:	f003 0306 	and.w	r3, r3, #6
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	bf08      	it	eq
 8001da4:	1aad      	subeq	r5, r5, r2
 8001da6:	68a3      	ldr	r3, [r4, #8]
 8001da8:	6922      	ldr	r2, [r4, #16]
 8001daa:	bf0c      	ite	eq
 8001dac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001db0:	2500      	movne	r5, #0
 8001db2:	4293      	cmp	r3, r2
 8001db4:	bfc4      	itt	gt
 8001db6:	1a9b      	subgt	r3, r3, r2
 8001db8:	18ed      	addgt	r5, r5, r3
 8001dba:	f04f 0900 	mov.w	r9, #0
 8001dbe:	341a      	adds	r4, #26
 8001dc0:	454d      	cmp	r5, r9
 8001dc2:	d11a      	bne.n	8001dfa <_printf_common+0xd6>
 8001dc4:	2000      	movs	r0, #0
 8001dc6:	e008      	b.n	8001dda <_printf_common+0xb6>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	4652      	mov	r2, sl
 8001dcc:	4639      	mov	r1, r7
 8001dce:	4630      	mov	r0, r6
 8001dd0:	47c0      	blx	r8
 8001dd2:	3001      	adds	r0, #1
 8001dd4:	d103      	bne.n	8001dde <_printf_common+0xba>
 8001dd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dde:	3501      	adds	r5, #1
 8001de0:	e7c3      	b.n	8001d6a <_printf_common+0x46>
 8001de2:	18e1      	adds	r1, r4, r3
 8001de4:	1c5a      	adds	r2, r3, #1
 8001de6:	2030      	movs	r0, #48	; 0x30
 8001de8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001dec:	4422      	add	r2, r4
 8001dee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001df2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001df6:	3302      	adds	r3, #2
 8001df8:	e7c5      	b.n	8001d86 <_printf_common+0x62>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	4639      	mov	r1, r7
 8001e00:	4630      	mov	r0, r6
 8001e02:	47c0      	blx	r8
 8001e04:	3001      	adds	r0, #1
 8001e06:	d0e6      	beq.n	8001dd6 <_printf_common+0xb2>
 8001e08:	f109 0901 	add.w	r9, r9, #1
 8001e0c:	e7d8      	b.n	8001dc0 <_printf_common+0x9c>

08001e0e <_printf_i>:
 8001e0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e12:	4606      	mov	r6, r0
 8001e14:	460c      	mov	r4, r1
 8001e16:	f101 0043 	add.w	r0, r1, #67	; 0x43
 8001e1a:	7e09      	ldrb	r1, [r1, #24]
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	296e      	cmp	r1, #110	; 0x6e
 8001e20:	4698      	mov	r8, r3
 8001e22:	4617      	mov	r7, r2
 8001e24:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001e26:	f000 80ba 	beq.w	8001f9e <_printf_i+0x190>
 8001e2a:	d824      	bhi.n	8001e76 <_printf_i+0x68>
 8001e2c:	2963      	cmp	r1, #99	; 0x63
 8001e2e:	d039      	beq.n	8001ea4 <_printf_i+0x96>
 8001e30:	d80a      	bhi.n	8001e48 <_printf_i+0x3a>
 8001e32:	2900      	cmp	r1, #0
 8001e34:	f000 80c3 	beq.w	8001fbe <_printf_i+0x1b0>
 8001e38:	2958      	cmp	r1, #88	; 0x58
 8001e3a:	f000 8091 	beq.w	8001f60 <_printf_i+0x152>
 8001e3e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001e42:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8001e46:	e035      	b.n	8001eb4 <_printf_i+0xa6>
 8001e48:	2964      	cmp	r1, #100	; 0x64
 8001e4a:	d001      	beq.n	8001e50 <_printf_i+0x42>
 8001e4c:	2969      	cmp	r1, #105	; 0x69
 8001e4e:	d1f6      	bne.n	8001e3e <_printf_i+0x30>
 8001e50:	6825      	ldr	r5, [r4, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	f015 0f80 	tst.w	r5, #128	; 0x80
 8001e58:	f102 0104 	add.w	r1, r2, #4
 8001e5c:	d02c      	beq.n	8001eb8 <_printf_i+0xaa>
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	6019      	str	r1, [r3, #0]
 8001e62:	2a00      	cmp	r2, #0
 8001e64:	da03      	bge.n	8001e6e <_printf_i+0x60>
 8001e66:	232d      	movs	r3, #45	; 0x2d
 8001e68:	4252      	negs	r2, r2
 8001e6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001e6e:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8002030 <_printf_i+0x222>
 8001e72:	230a      	movs	r3, #10
 8001e74:	e03f      	b.n	8001ef6 <_printf_i+0xe8>
 8001e76:	2973      	cmp	r1, #115	; 0x73
 8001e78:	f000 80a5 	beq.w	8001fc6 <_printf_i+0x1b8>
 8001e7c:	d808      	bhi.n	8001e90 <_printf_i+0x82>
 8001e7e:	296f      	cmp	r1, #111	; 0x6f
 8001e80:	d021      	beq.n	8001ec6 <_printf_i+0xb8>
 8001e82:	2970      	cmp	r1, #112	; 0x70
 8001e84:	d1db      	bne.n	8001e3e <_printf_i+0x30>
 8001e86:	6822      	ldr	r2, [r4, #0]
 8001e88:	f042 0220 	orr.w	r2, r2, #32
 8001e8c:	6022      	str	r2, [r4, #0]
 8001e8e:	e003      	b.n	8001e98 <_printf_i+0x8a>
 8001e90:	2975      	cmp	r1, #117	; 0x75
 8001e92:	d018      	beq.n	8001ec6 <_printf_i+0xb8>
 8001e94:	2978      	cmp	r1, #120	; 0x78
 8001e96:	d1d2      	bne.n	8001e3e <_printf_i+0x30>
 8001e98:	2278      	movs	r2, #120	; 0x78
 8001e9a:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001e9e:	f8df c194 	ldr.w	ip, [pc, #404]	; 8002034 <_printf_i+0x226>
 8001ea2:	e061      	b.n	8001f68 <_printf_i+0x15a>
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	1d11      	adds	r1, r2, #4
 8001ea8:	6019      	str	r1, [r3, #0]
 8001eaa:	6813      	ldr	r3, [r2, #0]
 8001eac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001eb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e093      	b.n	8001fe0 <_printf_i+0x1d2>
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	6019      	str	r1, [r3, #0]
 8001ebc:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001ec0:	bf18      	it	ne
 8001ec2:	b212      	sxthne	r2, r2
 8001ec4:	e7cd      	b.n	8001e62 <_printf_i+0x54>
 8001ec6:	f8d4 c000 	ldr.w	ip, [r4]
 8001eca:	681a      	ldr	r2, [r3, #0]
 8001ecc:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8001ed0:	f102 0504 	add.w	r5, r2, #4
 8001ed4:	601d      	str	r5, [r3, #0]
 8001ed6:	d001      	beq.n	8001edc <_printf_i+0xce>
 8001ed8:	6812      	ldr	r2, [r2, #0]
 8001eda:	e003      	b.n	8001ee4 <_printf_i+0xd6>
 8001edc:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8001ee0:	d0fa      	beq.n	8001ed8 <_printf_i+0xca>
 8001ee2:	8812      	ldrh	r2, [r2, #0]
 8001ee4:	f8df c148 	ldr.w	ip, [pc, #328]	; 8002030 <_printf_i+0x222>
 8001ee8:	296f      	cmp	r1, #111	; 0x6f
 8001eea:	bf0c      	ite	eq
 8001eec:	2308      	moveq	r3, #8
 8001eee:	230a      	movne	r3, #10
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ef6:	6865      	ldr	r5, [r4, #4]
 8001ef8:	60a5      	str	r5, [r4, #8]
 8001efa:	2d00      	cmp	r5, #0
 8001efc:	bfa2      	ittt	ge
 8001efe:	6821      	ldrge	r1, [r4, #0]
 8001f00:	f021 0104 	bicge.w	r1, r1, #4
 8001f04:	6021      	strge	r1, [r4, #0]
 8001f06:	b90a      	cbnz	r2, 8001f0c <_printf_i+0xfe>
 8001f08:	2d00      	cmp	r5, #0
 8001f0a:	d046      	beq.n	8001f9a <_printf_i+0x18c>
 8001f0c:	4605      	mov	r5, r0
 8001f0e:	fbb2 f1f3 	udiv	r1, r2, r3
 8001f12:	fb03 2e11 	mls	lr, r3, r1, r2
 8001f16:	4293      	cmp	r3, r2
 8001f18:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8001f1c:	f805 ed01 	strb.w	lr, [r5, #-1]!
 8001f20:	d939      	bls.n	8001f96 <_printf_i+0x188>
 8001f22:	2b08      	cmp	r3, #8
 8001f24:	d10b      	bne.n	8001f3e <_printf_i+0x130>
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	07da      	lsls	r2, r3, #31
 8001f2a:	d508      	bpl.n	8001f3e <_printf_i+0x130>
 8001f2c:	6923      	ldr	r3, [r4, #16]
 8001f2e:	6862      	ldr	r2, [r4, #4]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	bfde      	ittt	le
 8001f34:	2330      	movle	r3, #48	; 0x30
 8001f36:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001f3a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001f3e:	1b40      	subs	r0, r0, r5
 8001f40:	6120      	str	r0, [r4, #16]
 8001f42:	f8cd 8000 	str.w	r8, [sp]
 8001f46:	463b      	mov	r3, r7
 8001f48:	aa03      	add	r2, sp, #12
 8001f4a:	4621      	mov	r1, r4
 8001f4c:	4630      	mov	r0, r6
 8001f4e:	f7ff fee9 	bl	8001d24 <_printf_common>
 8001f52:	3001      	adds	r0, #1
 8001f54:	d149      	bne.n	8001fea <_printf_i+0x1dc>
 8001f56:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f5a:	b005      	add	sp, #20
 8001f5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f60:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8002030 <_printf_i+0x222>
 8001f64:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8001f68:	681d      	ldr	r5, [r3, #0]
 8001f6a:	6821      	ldr	r1, [r4, #0]
 8001f6c:	f855 2b04 	ldr.w	r2, [r5], #4
 8001f70:	601d      	str	r5, [r3, #0]
 8001f72:	060d      	lsls	r5, r1, #24
 8001f74:	d50b      	bpl.n	8001f8e <_printf_i+0x180>
 8001f76:	07cd      	lsls	r5, r1, #31
 8001f78:	bf44      	itt	mi
 8001f7a:	f041 0120 	orrmi.w	r1, r1, #32
 8001f7e:	6021      	strmi	r1, [r4, #0]
 8001f80:	b91a      	cbnz	r2, 8001f8a <_printf_i+0x17c>
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	f023 0320 	bic.w	r3, r3, #32
 8001f88:	6023      	str	r3, [r4, #0]
 8001f8a:	2310      	movs	r3, #16
 8001f8c:	e7b0      	b.n	8001ef0 <_printf_i+0xe2>
 8001f8e:	064b      	lsls	r3, r1, #25
 8001f90:	bf48      	it	mi
 8001f92:	b292      	uxthmi	r2, r2
 8001f94:	e7ef      	b.n	8001f76 <_printf_i+0x168>
 8001f96:	460a      	mov	r2, r1
 8001f98:	e7b9      	b.n	8001f0e <_printf_i+0x100>
 8001f9a:	4605      	mov	r5, r0
 8001f9c:	e7c1      	b.n	8001f22 <_printf_i+0x114>
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	f8d4 c000 	ldr.w	ip, [r4]
 8001fa4:	6961      	ldr	r1, [r4, #20]
 8001fa6:	1d15      	adds	r5, r2, #4
 8001fa8:	601d      	str	r5, [r3, #0]
 8001faa:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8001fae:	6813      	ldr	r3, [r2, #0]
 8001fb0:	d001      	beq.n	8001fb6 <_printf_i+0x1a8>
 8001fb2:	6019      	str	r1, [r3, #0]
 8001fb4:	e003      	b.n	8001fbe <_printf_i+0x1b0>
 8001fb6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8001fba:	d0fa      	beq.n	8001fb2 <_printf_i+0x1a4>
 8001fbc:	8019      	strh	r1, [r3, #0]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	6123      	str	r3, [r4, #16]
 8001fc2:	4605      	mov	r5, r0
 8001fc4:	e7bd      	b.n	8001f42 <_printf_i+0x134>
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	1d11      	adds	r1, r2, #4
 8001fca:	6019      	str	r1, [r3, #0]
 8001fcc:	6815      	ldr	r5, [r2, #0]
 8001fce:	6862      	ldr	r2, [r4, #4]
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	4628      	mov	r0, r5
 8001fd4:	f7fe f8fc 	bl	80001d0 <memchr>
 8001fd8:	b108      	cbz	r0, 8001fde <_printf_i+0x1d0>
 8001fda:	1b40      	subs	r0, r0, r5
 8001fdc:	6060      	str	r0, [r4, #4]
 8001fde:	6863      	ldr	r3, [r4, #4]
 8001fe0:	6123      	str	r3, [r4, #16]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001fe8:	e7ab      	b.n	8001f42 <_printf_i+0x134>
 8001fea:	6923      	ldr	r3, [r4, #16]
 8001fec:	462a      	mov	r2, r5
 8001fee:	4639      	mov	r1, r7
 8001ff0:	4630      	mov	r0, r6
 8001ff2:	47c0      	blx	r8
 8001ff4:	3001      	adds	r0, #1
 8001ff6:	d0ae      	beq.n	8001f56 <_printf_i+0x148>
 8001ff8:	6823      	ldr	r3, [r4, #0]
 8001ffa:	079b      	lsls	r3, r3, #30
 8001ffc:	d413      	bmi.n	8002026 <_printf_i+0x218>
 8001ffe:	68e0      	ldr	r0, [r4, #12]
 8002000:	9b03      	ldr	r3, [sp, #12]
 8002002:	4298      	cmp	r0, r3
 8002004:	bfb8      	it	lt
 8002006:	4618      	movlt	r0, r3
 8002008:	e7a7      	b.n	8001f5a <_printf_i+0x14c>
 800200a:	2301      	movs	r3, #1
 800200c:	464a      	mov	r2, r9
 800200e:	4639      	mov	r1, r7
 8002010:	4630      	mov	r0, r6
 8002012:	47c0      	blx	r8
 8002014:	3001      	adds	r0, #1
 8002016:	d09e      	beq.n	8001f56 <_printf_i+0x148>
 8002018:	3501      	adds	r5, #1
 800201a:	68e3      	ldr	r3, [r4, #12]
 800201c:	9a03      	ldr	r2, [sp, #12]
 800201e:	1a9b      	subs	r3, r3, r2
 8002020:	42ab      	cmp	r3, r5
 8002022:	dcf2      	bgt.n	800200a <_printf_i+0x1fc>
 8002024:	e7eb      	b.n	8001ffe <_printf_i+0x1f0>
 8002026:	2500      	movs	r5, #0
 8002028:	f104 0919 	add.w	r9, r4, #25
 800202c:	e7f5      	b.n	800201a <_printf_i+0x20c>
 800202e:	bf00      	nop
 8002030:	08006a93 	.word	0x08006a93
 8002034:	08006aa4 	.word	0x08006aa4

08002038 <__localeconv_l>:
 8002038:	30f0      	adds	r0, #240	; 0xf0
 800203a:	4770      	bx	lr

0800203c <_localeconv_r>:
 800203c:	4800      	ldr	r0, [pc, #0]	; (8002040 <_localeconv_r+0x4>)
 800203e:	4770      	bx	lr
 8002040:	20001180 	.word	0x20001180

08002044 <localeconv>:
 8002044:	4800      	ldr	r0, [pc, #0]	; (8002048 <localeconv+0x4>)
 8002046:	4770      	bx	lr
 8002048:	20001180 	.word	0x20001180

0800204c <_Balloc>:
 800204c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800204e:	b570      	push	{r4, r5, r6, lr}
 8002050:	4605      	mov	r5, r0
 8002052:	460c      	mov	r4, r1
 8002054:	b17b      	cbz	r3, 8002076 <_Balloc+0x2a>
 8002056:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8002058:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800205c:	b9a0      	cbnz	r0, 8002088 <_Balloc+0x3c>
 800205e:	2101      	movs	r1, #1
 8002060:	fa01 f604 	lsl.w	r6, r1, r4
 8002064:	1d72      	adds	r2, r6, #5
 8002066:	0092      	lsls	r2, r2, #2
 8002068:	4628      	mov	r0, r5
 800206a:	f000 fe33 	bl	8002cd4 <_calloc_r>
 800206e:	b148      	cbz	r0, 8002084 <_Balloc+0x38>
 8002070:	e9c0 4601 	strd	r4, r6, [r0, #4]
 8002074:	e00b      	b.n	800208e <_Balloc+0x42>
 8002076:	2221      	movs	r2, #33	; 0x21
 8002078:	2104      	movs	r1, #4
 800207a:	f000 fe2b 	bl	8002cd4 <_calloc_r>
 800207e:	64e8      	str	r0, [r5, #76]	; 0x4c
 8002080:	2800      	cmp	r0, #0
 8002082:	d1e8      	bne.n	8002056 <_Balloc+0xa>
 8002084:	2000      	movs	r0, #0
 8002086:	bd70      	pop	{r4, r5, r6, pc}
 8002088:	6802      	ldr	r2, [r0, #0]
 800208a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800208e:	2300      	movs	r3, #0
 8002090:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8002094:	e7f7      	b.n	8002086 <_Balloc+0x3a>

08002096 <_Bfree>:
 8002096:	b131      	cbz	r1, 80020a6 <_Bfree+0x10>
 8002098:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800209a:	684a      	ldr	r2, [r1, #4]
 800209c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80020a0:	6008      	str	r0, [r1, #0]
 80020a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80020a6:	4770      	bx	lr

080020a8 <__multadd>:
 80020a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020ac:	690d      	ldr	r5, [r1, #16]
 80020ae:	461f      	mov	r7, r3
 80020b0:	4606      	mov	r6, r0
 80020b2:	460c      	mov	r4, r1
 80020b4:	f101 0c14 	add.w	ip, r1, #20
 80020b8:	2300      	movs	r3, #0
 80020ba:	f8dc 0000 	ldr.w	r0, [ip]
 80020be:	b281      	uxth	r1, r0
 80020c0:	fb02 7101 	mla	r1, r2, r1, r7
 80020c4:	0c0f      	lsrs	r7, r1, #16
 80020c6:	0c00      	lsrs	r0, r0, #16
 80020c8:	fb02 7000 	mla	r0, r2, r0, r7
 80020cc:	b289      	uxth	r1, r1
 80020ce:	3301      	adds	r3, #1
 80020d0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80020d4:	429d      	cmp	r5, r3
 80020d6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80020da:	f84c 1b04 	str.w	r1, [ip], #4
 80020de:	dcec      	bgt.n	80020ba <__multadd+0x12>
 80020e0:	b1d7      	cbz	r7, 8002118 <__multadd+0x70>
 80020e2:	68a3      	ldr	r3, [r4, #8]
 80020e4:	42ab      	cmp	r3, r5
 80020e6:	dc12      	bgt.n	800210e <__multadd+0x66>
 80020e8:	6861      	ldr	r1, [r4, #4]
 80020ea:	4630      	mov	r0, r6
 80020ec:	3101      	adds	r1, #1
 80020ee:	f7ff ffad 	bl	800204c <_Balloc>
 80020f2:	6922      	ldr	r2, [r4, #16]
 80020f4:	3202      	adds	r2, #2
 80020f6:	f104 010c 	add.w	r1, r4, #12
 80020fa:	4680      	mov	r8, r0
 80020fc:	0092      	lsls	r2, r2, #2
 80020fe:	300c      	adds	r0, #12
 8002100:	f000 fdc0 	bl	8002c84 <memcpy>
 8002104:	4621      	mov	r1, r4
 8002106:	4630      	mov	r0, r6
 8002108:	f7ff ffc5 	bl	8002096 <_Bfree>
 800210c:	4644      	mov	r4, r8
 800210e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8002112:	3501      	adds	r5, #1
 8002114:	615f      	str	r7, [r3, #20]
 8002116:	6125      	str	r5, [r4, #16]
 8002118:	4620      	mov	r0, r4
 800211a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800211e <__s2b>:
 800211e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002122:	460c      	mov	r4, r1
 8002124:	4615      	mov	r5, r2
 8002126:	461f      	mov	r7, r3
 8002128:	2209      	movs	r2, #9
 800212a:	3308      	adds	r3, #8
 800212c:	4606      	mov	r6, r0
 800212e:	fb93 f3f2 	sdiv	r3, r3, r2
 8002132:	2100      	movs	r1, #0
 8002134:	2201      	movs	r2, #1
 8002136:	429a      	cmp	r2, r3
 8002138:	db20      	blt.n	800217c <__s2b+0x5e>
 800213a:	4630      	mov	r0, r6
 800213c:	f7ff ff86 	bl	800204c <_Balloc>
 8002140:	9b08      	ldr	r3, [sp, #32]
 8002142:	6143      	str	r3, [r0, #20]
 8002144:	2d09      	cmp	r5, #9
 8002146:	f04f 0301 	mov.w	r3, #1
 800214a:	6103      	str	r3, [r0, #16]
 800214c:	dd19      	ble.n	8002182 <__s2b+0x64>
 800214e:	f104 0909 	add.w	r9, r4, #9
 8002152:	46c8      	mov	r8, r9
 8002154:	442c      	add	r4, r5
 8002156:	f818 3b01 	ldrb.w	r3, [r8], #1
 800215a:	4601      	mov	r1, r0
 800215c:	3b30      	subs	r3, #48	; 0x30
 800215e:	220a      	movs	r2, #10
 8002160:	4630      	mov	r0, r6
 8002162:	f7ff ffa1 	bl	80020a8 <__multadd>
 8002166:	45a0      	cmp	r8, r4
 8002168:	d1f5      	bne.n	8002156 <__s2b+0x38>
 800216a:	f1a5 0408 	sub.w	r4, r5, #8
 800216e:	444c      	add	r4, r9
 8002170:	1b2d      	subs	r5, r5, r4
 8002172:	1963      	adds	r3, r4, r5
 8002174:	42bb      	cmp	r3, r7
 8002176:	db07      	blt.n	8002188 <__s2b+0x6a>
 8002178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800217c:	0052      	lsls	r2, r2, #1
 800217e:	3101      	adds	r1, #1
 8002180:	e7d9      	b.n	8002136 <__s2b+0x18>
 8002182:	340a      	adds	r4, #10
 8002184:	2509      	movs	r5, #9
 8002186:	e7f3      	b.n	8002170 <__s2b+0x52>
 8002188:	f814 3b01 	ldrb.w	r3, [r4], #1
 800218c:	4601      	mov	r1, r0
 800218e:	3b30      	subs	r3, #48	; 0x30
 8002190:	220a      	movs	r2, #10
 8002192:	4630      	mov	r0, r6
 8002194:	f7ff ff88 	bl	80020a8 <__multadd>
 8002198:	e7eb      	b.n	8002172 <__s2b+0x54>

0800219a <__hi0bits>:
 800219a:	0c02      	lsrs	r2, r0, #16
 800219c:	0412      	lsls	r2, r2, #16
 800219e:	4603      	mov	r3, r0
 80021a0:	b9ca      	cbnz	r2, 80021d6 <__hi0bits+0x3c>
 80021a2:	0403      	lsls	r3, r0, #16
 80021a4:	2010      	movs	r0, #16
 80021a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80021aa:	bf04      	itt	eq
 80021ac:	021b      	lsleq	r3, r3, #8
 80021ae:	3008      	addeq	r0, #8
 80021b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80021b4:	bf04      	itt	eq
 80021b6:	011b      	lsleq	r3, r3, #4
 80021b8:	3004      	addeq	r0, #4
 80021ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80021be:	bf04      	itt	eq
 80021c0:	009b      	lsleq	r3, r3, #2
 80021c2:	3002      	addeq	r0, #2
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db05      	blt.n	80021d4 <__hi0bits+0x3a>
 80021c8:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80021cc:	f100 0001 	add.w	r0, r0, #1
 80021d0:	bf08      	it	eq
 80021d2:	2020      	moveq	r0, #32
 80021d4:	4770      	bx	lr
 80021d6:	2000      	movs	r0, #0
 80021d8:	e7e5      	b.n	80021a6 <__hi0bits+0xc>

080021da <__lo0bits>:
 80021da:	6803      	ldr	r3, [r0, #0]
 80021dc:	f013 0207 	ands.w	r2, r3, #7
 80021e0:	4601      	mov	r1, r0
 80021e2:	d00b      	beq.n	80021fc <__lo0bits+0x22>
 80021e4:	07da      	lsls	r2, r3, #31
 80021e6:	d424      	bmi.n	8002232 <__lo0bits+0x58>
 80021e8:	0798      	lsls	r0, r3, #30
 80021ea:	bf49      	itett	mi
 80021ec:	085b      	lsrmi	r3, r3, #1
 80021ee:	089b      	lsrpl	r3, r3, #2
 80021f0:	2001      	movmi	r0, #1
 80021f2:	600b      	strmi	r3, [r1, #0]
 80021f4:	bf5c      	itt	pl
 80021f6:	600b      	strpl	r3, [r1, #0]
 80021f8:	2002      	movpl	r0, #2
 80021fa:	4770      	bx	lr
 80021fc:	b298      	uxth	r0, r3
 80021fe:	b9b0      	cbnz	r0, 800222e <__lo0bits+0x54>
 8002200:	0c1b      	lsrs	r3, r3, #16
 8002202:	2010      	movs	r0, #16
 8002204:	f013 0fff 	tst.w	r3, #255	; 0xff
 8002208:	bf04      	itt	eq
 800220a:	0a1b      	lsreq	r3, r3, #8
 800220c:	3008      	addeq	r0, #8
 800220e:	071a      	lsls	r2, r3, #28
 8002210:	bf04      	itt	eq
 8002212:	091b      	lsreq	r3, r3, #4
 8002214:	3004      	addeq	r0, #4
 8002216:	079a      	lsls	r2, r3, #30
 8002218:	bf04      	itt	eq
 800221a:	089b      	lsreq	r3, r3, #2
 800221c:	3002      	addeq	r0, #2
 800221e:	07da      	lsls	r2, r3, #31
 8002220:	d403      	bmi.n	800222a <__lo0bits+0x50>
 8002222:	085b      	lsrs	r3, r3, #1
 8002224:	f100 0001 	add.w	r0, r0, #1
 8002228:	d005      	beq.n	8002236 <__lo0bits+0x5c>
 800222a:	600b      	str	r3, [r1, #0]
 800222c:	4770      	bx	lr
 800222e:	4610      	mov	r0, r2
 8002230:	e7e8      	b.n	8002204 <__lo0bits+0x2a>
 8002232:	2000      	movs	r0, #0
 8002234:	4770      	bx	lr
 8002236:	2020      	movs	r0, #32
 8002238:	4770      	bx	lr

0800223a <__i2b>:
 800223a:	b510      	push	{r4, lr}
 800223c:	460c      	mov	r4, r1
 800223e:	2101      	movs	r1, #1
 8002240:	f7ff ff04 	bl	800204c <_Balloc>
 8002244:	2201      	movs	r2, #1
 8002246:	6144      	str	r4, [r0, #20]
 8002248:	6102      	str	r2, [r0, #16]
 800224a:	bd10      	pop	{r4, pc}

0800224c <__multiply>:
 800224c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002250:	4690      	mov	r8, r2
 8002252:	690a      	ldr	r2, [r1, #16]
 8002254:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	bfb8      	it	lt
 800225c:	460b      	movlt	r3, r1
 800225e:	460c      	mov	r4, r1
 8002260:	bfbc      	itt	lt
 8002262:	4644      	movlt	r4, r8
 8002264:	4698      	movlt	r8, r3
 8002266:	6927      	ldr	r7, [r4, #16]
 8002268:	f8d8 9010 	ldr.w	r9, [r8, #16]
 800226c:	68a3      	ldr	r3, [r4, #8]
 800226e:	6861      	ldr	r1, [r4, #4]
 8002270:	eb07 0609 	add.w	r6, r7, r9
 8002274:	42b3      	cmp	r3, r6
 8002276:	bfb8      	it	lt
 8002278:	3101      	addlt	r1, #1
 800227a:	f7ff fee7 	bl	800204c <_Balloc>
 800227e:	f100 0514 	add.w	r5, r0, #20
 8002282:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8002286:	462b      	mov	r3, r5
 8002288:	2200      	movs	r2, #0
 800228a:	4573      	cmp	r3, lr
 800228c:	d316      	bcc.n	80022bc <__multiply+0x70>
 800228e:	f104 0314 	add.w	r3, r4, #20
 8002292:	f108 0214 	add.w	r2, r8, #20
 8002296:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800229a:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	9b00      	ldr	r3, [sp, #0]
 80022a2:	9201      	str	r2, [sp, #4]
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d80c      	bhi.n	80022c2 <__multiply+0x76>
 80022a8:	2e00      	cmp	r6, #0
 80022aa:	dd03      	ble.n	80022b4 <__multiply+0x68>
 80022ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d059      	beq.n	8002368 <__multiply+0x11c>
 80022b4:	6106      	str	r6, [r0, #16]
 80022b6:	b003      	add	sp, #12
 80022b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80022bc:	f843 2b04 	str.w	r2, [r3], #4
 80022c0:	e7e3      	b.n	800228a <__multiply+0x3e>
 80022c2:	f8b2 a000 	ldrh.w	sl, [r2]
 80022c6:	f1ba 0f00 	cmp.w	sl, #0
 80022ca:	d023      	beq.n	8002314 <__multiply+0xc8>
 80022cc:	f104 0914 	add.w	r9, r4, #20
 80022d0:	46ac      	mov	ip, r5
 80022d2:	f04f 0800 	mov.w	r8, #0
 80022d6:	f859 1b04 	ldr.w	r1, [r9], #4
 80022da:	f8dc b000 	ldr.w	fp, [ip]
 80022de:	b28b      	uxth	r3, r1
 80022e0:	fa1f fb8b 	uxth.w	fp, fp
 80022e4:	fb0a b303 	mla	r3, sl, r3, fp
 80022e8:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 80022ec:	f8dc 1000 	ldr.w	r1, [ip]
 80022f0:	4443      	add	r3, r8
 80022f2:	ea4f 4811 	mov.w	r8, r1, lsr #16
 80022f6:	fb0a 810b 	mla	r1, sl, fp, r8
 80022fa:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 80022fe:	b29b      	uxth	r3, r3
 8002300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8002304:	454f      	cmp	r7, r9
 8002306:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800230a:	f84c 3b04 	str.w	r3, [ip], #4
 800230e:	d8e2      	bhi.n	80022d6 <__multiply+0x8a>
 8002310:	f8cc 8000 	str.w	r8, [ip]
 8002314:	9b01      	ldr	r3, [sp, #4]
 8002316:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800231a:	3204      	adds	r2, #4
 800231c:	f1b9 0f00 	cmp.w	r9, #0
 8002320:	d020      	beq.n	8002364 <__multiply+0x118>
 8002322:	682b      	ldr	r3, [r5, #0]
 8002324:	f104 0814 	add.w	r8, r4, #20
 8002328:	46ac      	mov	ip, r5
 800232a:	f04f 0a00 	mov.w	sl, #0
 800232e:	f8b8 1000 	ldrh.w	r1, [r8]
 8002332:	f8bc b002 	ldrh.w	fp, [ip, #2]
 8002336:	fb09 b101 	mla	r1, r9, r1, fp
 800233a:	448a      	add	sl, r1
 800233c:	b29b      	uxth	r3, r3
 800233e:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 8002342:	f84c 3b04 	str.w	r3, [ip], #4
 8002346:	f858 3b04 	ldr.w	r3, [r8], #4
 800234a:	f8bc 1000 	ldrh.w	r1, [ip]
 800234e:	0c1b      	lsrs	r3, r3, #16
 8002350:	fb09 1303 	mla	r3, r9, r3, r1
 8002354:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 8002358:	4547      	cmp	r7, r8
 800235a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800235e:	d8e6      	bhi.n	800232e <__multiply+0xe2>
 8002360:	f8cc 3000 	str.w	r3, [ip]
 8002364:	3504      	adds	r5, #4
 8002366:	e79b      	b.n	80022a0 <__multiply+0x54>
 8002368:	3e01      	subs	r6, #1
 800236a:	e79d      	b.n	80022a8 <__multiply+0x5c>

0800236c <__pow5mult>:
 800236c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002370:	4615      	mov	r5, r2
 8002372:	f012 0203 	ands.w	r2, r2, #3
 8002376:	4606      	mov	r6, r0
 8002378:	460f      	mov	r7, r1
 800237a:	d007      	beq.n	800238c <__pow5mult+0x20>
 800237c:	3a01      	subs	r2, #1
 800237e:	4c1a      	ldr	r4, [pc, #104]	; (80023e8 <__pow5mult+0x7c>)
 8002380:	2300      	movs	r3, #0
 8002382:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8002386:	f7ff fe8f 	bl	80020a8 <__multadd>
 800238a:	4607      	mov	r7, r0
 800238c:	10ad      	asrs	r5, r5, #2
 800238e:	d027      	beq.n	80023e0 <__pow5mult+0x74>
 8002390:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 8002392:	b944      	cbnz	r4, 80023a6 <__pow5mult+0x3a>
 8002394:	f240 2171 	movw	r1, #625	; 0x271
 8002398:	4630      	mov	r0, r6
 800239a:	f7ff ff4e 	bl	800223a <__i2b>
 800239e:	2300      	movs	r3, #0
 80023a0:	64b0      	str	r0, [r6, #72]	; 0x48
 80023a2:	4604      	mov	r4, r0
 80023a4:	6003      	str	r3, [r0, #0]
 80023a6:	f04f 0800 	mov.w	r8, #0
 80023aa:	07eb      	lsls	r3, r5, #31
 80023ac:	d50a      	bpl.n	80023c4 <__pow5mult+0x58>
 80023ae:	4639      	mov	r1, r7
 80023b0:	4622      	mov	r2, r4
 80023b2:	4630      	mov	r0, r6
 80023b4:	f7ff ff4a 	bl	800224c <__multiply>
 80023b8:	4639      	mov	r1, r7
 80023ba:	4681      	mov	r9, r0
 80023bc:	4630      	mov	r0, r6
 80023be:	f7ff fe6a 	bl	8002096 <_Bfree>
 80023c2:	464f      	mov	r7, r9
 80023c4:	106d      	asrs	r5, r5, #1
 80023c6:	d00b      	beq.n	80023e0 <__pow5mult+0x74>
 80023c8:	6820      	ldr	r0, [r4, #0]
 80023ca:	b938      	cbnz	r0, 80023dc <__pow5mult+0x70>
 80023cc:	4622      	mov	r2, r4
 80023ce:	4621      	mov	r1, r4
 80023d0:	4630      	mov	r0, r6
 80023d2:	f7ff ff3b 	bl	800224c <__multiply>
 80023d6:	6020      	str	r0, [r4, #0]
 80023d8:	f8c0 8000 	str.w	r8, [r0]
 80023dc:	4604      	mov	r4, r0
 80023de:	e7e4      	b.n	80023aa <__pow5mult+0x3e>
 80023e0:	4638      	mov	r0, r7
 80023e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80023e6:	bf00      	nop
 80023e8:	08006638 	.word	0x08006638

080023ec <__lshift>:
 80023ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80023f0:	460c      	mov	r4, r1
 80023f2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80023f6:	6923      	ldr	r3, [r4, #16]
 80023f8:	6849      	ldr	r1, [r1, #4]
 80023fa:	eb0a 0903 	add.w	r9, sl, r3
 80023fe:	68a3      	ldr	r3, [r4, #8]
 8002400:	4607      	mov	r7, r0
 8002402:	4616      	mov	r6, r2
 8002404:	f109 0501 	add.w	r5, r9, #1
 8002408:	42ab      	cmp	r3, r5
 800240a:	db33      	blt.n	8002474 <__lshift+0x88>
 800240c:	4638      	mov	r0, r7
 800240e:	f7ff fe1d 	bl	800204c <_Balloc>
 8002412:	2300      	movs	r3, #0
 8002414:	4680      	mov	r8, r0
 8002416:	f100 0114 	add.w	r1, r0, #20
 800241a:	f100 0210 	add.w	r2, r0, #16
 800241e:	4618      	mov	r0, r3
 8002420:	4553      	cmp	r3, sl
 8002422:	db2a      	blt.n	800247a <__lshift+0x8e>
 8002424:	6920      	ldr	r0, [r4, #16]
 8002426:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800242a:	f104 0314 	add.w	r3, r4, #20
 800242e:	f016 021f 	ands.w	r2, r6, #31
 8002432:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8002436:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800243a:	d022      	beq.n	8002482 <__lshift+0x96>
 800243c:	f1c2 0e20 	rsb	lr, r2, #32
 8002440:	2000      	movs	r0, #0
 8002442:	681e      	ldr	r6, [r3, #0]
 8002444:	4096      	lsls	r6, r2
 8002446:	4330      	orrs	r0, r6
 8002448:	f841 0b04 	str.w	r0, [r1], #4
 800244c:	f853 0b04 	ldr.w	r0, [r3], #4
 8002450:	459c      	cmp	ip, r3
 8002452:	fa20 f00e 	lsr.w	r0, r0, lr
 8002456:	d8f4      	bhi.n	8002442 <__lshift+0x56>
 8002458:	6008      	str	r0, [r1, #0]
 800245a:	b108      	cbz	r0, 8002460 <__lshift+0x74>
 800245c:	f109 0502 	add.w	r5, r9, #2
 8002460:	3d01      	subs	r5, #1
 8002462:	4638      	mov	r0, r7
 8002464:	f8c8 5010 	str.w	r5, [r8, #16]
 8002468:	4621      	mov	r1, r4
 800246a:	f7ff fe14 	bl	8002096 <_Bfree>
 800246e:	4640      	mov	r0, r8
 8002470:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002474:	3101      	adds	r1, #1
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	e7c6      	b.n	8002408 <__lshift+0x1c>
 800247a:	f842 0f04 	str.w	r0, [r2, #4]!
 800247e:	3301      	adds	r3, #1
 8002480:	e7ce      	b.n	8002420 <__lshift+0x34>
 8002482:	3904      	subs	r1, #4
 8002484:	f853 2b04 	ldr.w	r2, [r3], #4
 8002488:	f841 2f04 	str.w	r2, [r1, #4]!
 800248c:	459c      	cmp	ip, r3
 800248e:	d8f9      	bhi.n	8002484 <__lshift+0x98>
 8002490:	e7e6      	b.n	8002460 <__lshift+0x74>

08002492 <__mcmp>:
 8002492:	6903      	ldr	r3, [r0, #16]
 8002494:	690a      	ldr	r2, [r1, #16]
 8002496:	1a9b      	subs	r3, r3, r2
 8002498:	b530      	push	{r4, r5, lr}
 800249a:	d10c      	bne.n	80024b6 <__mcmp+0x24>
 800249c:	0092      	lsls	r2, r2, #2
 800249e:	3014      	adds	r0, #20
 80024a0:	3114      	adds	r1, #20
 80024a2:	1884      	adds	r4, r0, r2
 80024a4:	4411      	add	r1, r2
 80024a6:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80024aa:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80024ae:	4295      	cmp	r5, r2
 80024b0:	d003      	beq.n	80024ba <__mcmp+0x28>
 80024b2:	d305      	bcc.n	80024c0 <__mcmp+0x2e>
 80024b4:	2301      	movs	r3, #1
 80024b6:	4618      	mov	r0, r3
 80024b8:	bd30      	pop	{r4, r5, pc}
 80024ba:	42a0      	cmp	r0, r4
 80024bc:	d3f3      	bcc.n	80024a6 <__mcmp+0x14>
 80024be:	e7fa      	b.n	80024b6 <__mcmp+0x24>
 80024c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80024c4:	e7f7      	b.n	80024b6 <__mcmp+0x24>

080024c6 <__mdiff>:
 80024c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024ca:	460d      	mov	r5, r1
 80024cc:	4607      	mov	r7, r0
 80024ce:	4611      	mov	r1, r2
 80024d0:	4628      	mov	r0, r5
 80024d2:	4614      	mov	r4, r2
 80024d4:	f7ff ffdd 	bl	8002492 <__mcmp>
 80024d8:	1e06      	subs	r6, r0, #0
 80024da:	d108      	bne.n	80024ee <__mdiff+0x28>
 80024dc:	4631      	mov	r1, r6
 80024de:	4638      	mov	r0, r7
 80024e0:	f7ff fdb4 	bl	800204c <_Balloc>
 80024e4:	2301      	movs	r3, #1
 80024e6:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80024ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80024ee:	bfa4      	itt	ge
 80024f0:	4623      	movge	r3, r4
 80024f2:	462c      	movge	r4, r5
 80024f4:	4638      	mov	r0, r7
 80024f6:	6861      	ldr	r1, [r4, #4]
 80024f8:	bfa6      	itte	ge
 80024fa:	461d      	movge	r5, r3
 80024fc:	2600      	movge	r6, #0
 80024fe:	2601      	movlt	r6, #1
 8002500:	f7ff fda4 	bl	800204c <_Balloc>
 8002504:	692b      	ldr	r3, [r5, #16]
 8002506:	60c6      	str	r6, [r0, #12]
 8002508:	6926      	ldr	r6, [r4, #16]
 800250a:	f105 0914 	add.w	r9, r5, #20
 800250e:	f104 0214 	add.w	r2, r4, #20
 8002512:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8002516:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800251a:	f100 0514 	add.w	r5, r0, #20
 800251e:	f04f 0e00 	mov.w	lr, #0
 8002522:	f852 ab04 	ldr.w	sl, [r2], #4
 8002526:	f859 4b04 	ldr.w	r4, [r9], #4
 800252a:	fa1e f18a 	uxtah	r1, lr, sl
 800252e:	b2a3      	uxth	r3, r4
 8002530:	1ac9      	subs	r1, r1, r3
 8002532:	0c23      	lsrs	r3, r4, #16
 8002534:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8002538:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800253c:	b289      	uxth	r1, r1
 800253e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8002542:	45c8      	cmp	r8, r9
 8002544:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002548:	4694      	mov	ip, r2
 800254a:	f845 3b04 	str.w	r3, [r5], #4
 800254e:	d8e8      	bhi.n	8002522 <__mdiff+0x5c>
 8002550:	45bc      	cmp	ip, r7
 8002552:	d304      	bcc.n	800255e <__mdiff+0x98>
 8002554:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8002558:	b183      	cbz	r3, 800257c <__mdiff+0xb6>
 800255a:	6106      	str	r6, [r0, #16]
 800255c:	e7c5      	b.n	80024ea <__mdiff+0x24>
 800255e:	f85c 1b04 	ldr.w	r1, [ip], #4
 8002562:	fa1e f381 	uxtah	r3, lr, r1
 8002566:	141a      	asrs	r2, r3, #16
 8002568:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800256c:	b29b      	uxth	r3, r3
 800256e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002572:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8002576:	f845 3b04 	str.w	r3, [r5], #4
 800257a:	e7e9      	b.n	8002550 <__mdiff+0x8a>
 800257c:	3e01      	subs	r6, #1
 800257e:	e7e9      	b.n	8002554 <__mdiff+0x8e>

08002580 <__ulp>:
 8002580:	4b11      	ldr	r3, [pc, #68]	; (80025c8 <__ulp+0x48>)
 8002582:	ee10 2a90 	vmov	r2, s1
 8002586:	401a      	ands	r2, r3
 8002588:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800258c:	2b00      	cmp	r3, #0
 800258e:	dd04      	ble.n	800259a <__ulp+0x1a>
 8002590:	2000      	movs	r0, #0
 8002592:	4619      	mov	r1, r3
 8002594:	ec41 0b10 	vmov	d0, r0, r1
 8002598:	4770      	bx	lr
 800259a:	425b      	negs	r3, r3
 800259c:	151b      	asrs	r3, r3, #20
 800259e:	2b13      	cmp	r3, #19
 80025a0:	f04f 0000 	mov.w	r0, #0
 80025a4:	f04f 0100 	mov.w	r1, #0
 80025a8:	dc04      	bgt.n	80025b4 <__ulp+0x34>
 80025aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80025ae:	fa42 f103 	asr.w	r1, r2, r3
 80025b2:	e7ef      	b.n	8002594 <__ulp+0x14>
 80025b4:	3b14      	subs	r3, #20
 80025b6:	2b1e      	cmp	r3, #30
 80025b8:	bfda      	itte	le
 80025ba:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80025be:	fa22 f303 	lsrle.w	r3, r2, r3
 80025c2:	2301      	movgt	r3, #1
 80025c4:	4618      	mov	r0, r3
 80025c6:	e7e5      	b.n	8002594 <__ulp+0x14>
 80025c8:	7ff00000 	.word	0x7ff00000

080025cc <__b2d>:
 80025cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ce:	6905      	ldr	r5, [r0, #16]
 80025d0:	f100 0714 	add.w	r7, r0, #20
 80025d4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80025d8:	1f2e      	subs	r6, r5, #4
 80025da:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80025de:	4620      	mov	r0, r4
 80025e0:	f7ff fddb 	bl	800219a <__hi0bits>
 80025e4:	f1c0 0320 	rsb	r3, r0, #32
 80025e8:	280a      	cmp	r0, #10
 80025ea:	600b      	str	r3, [r1, #0]
 80025ec:	f8df c078 	ldr.w	ip, [pc, #120]	; 8002668 <__b2d+0x9c>
 80025f0:	dc14      	bgt.n	800261c <__b2d+0x50>
 80025f2:	f1c0 0e0b 	rsb	lr, r0, #11
 80025f6:	fa24 f10e 	lsr.w	r1, r4, lr
 80025fa:	42b7      	cmp	r7, r6
 80025fc:	ea41 030c 	orr.w	r3, r1, ip
 8002600:	bf34      	ite	cc
 8002602:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8002606:	2100      	movcs	r1, #0
 8002608:	3015      	adds	r0, #21
 800260a:	fa04 f000 	lsl.w	r0, r4, r0
 800260e:	fa21 f10e 	lsr.w	r1, r1, lr
 8002612:	ea40 0201 	orr.w	r2, r0, r1
 8002616:	ec43 2b10 	vmov	d0, r2, r3
 800261a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800261c:	42b7      	cmp	r7, r6
 800261e:	bf3a      	itte	cc
 8002620:	f1a5 0608 	subcc.w	r6, r5, #8
 8002624:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8002628:	2100      	movcs	r1, #0
 800262a:	380b      	subs	r0, #11
 800262c:	d017      	beq.n	800265e <__b2d+0x92>
 800262e:	f1c0 0c20 	rsb	ip, r0, #32
 8002632:	fa04 f500 	lsl.w	r5, r4, r0
 8002636:	42be      	cmp	r6, r7
 8002638:	fa21 f40c 	lsr.w	r4, r1, ip
 800263c:	ea45 0504 	orr.w	r5, r5, r4
 8002640:	bf8c      	ite	hi
 8002642:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8002646:	2400      	movls	r4, #0
 8002648:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800264c:	fa01 f000 	lsl.w	r0, r1, r0
 8002650:	fa24 f40c 	lsr.w	r4, r4, ip
 8002654:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8002658:	ea40 0204 	orr.w	r2, r0, r4
 800265c:	e7db      	b.n	8002616 <__b2d+0x4a>
 800265e:	ea44 030c 	orr.w	r3, r4, ip
 8002662:	460a      	mov	r2, r1
 8002664:	e7d7      	b.n	8002616 <__b2d+0x4a>
 8002666:	bf00      	nop
 8002668:	3ff00000 	.word	0x3ff00000

0800266c <__d2b>:
 800266c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002670:	460e      	mov	r6, r1
 8002672:	2101      	movs	r1, #1
 8002674:	ec59 8b10 	vmov	r8, r9, d0
 8002678:	4615      	mov	r5, r2
 800267a:	f7ff fce7 	bl	800204c <_Balloc>
 800267e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8002682:	4607      	mov	r7, r0
 8002684:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8002688:	bb2c      	cbnz	r4, 80026d6 <__d2b+0x6a>
 800268a:	9301      	str	r3, [sp, #4]
 800268c:	f1b8 0300 	subs.w	r3, r8, #0
 8002690:	d026      	beq.n	80026e0 <__d2b+0x74>
 8002692:	4668      	mov	r0, sp
 8002694:	9300      	str	r3, [sp, #0]
 8002696:	f7ff fda0 	bl	80021da <__lo0bits>
 800269a:	9900      	ldr	r1, [sp, #0]
 800269c:	b1f0      	cbz	r0, 80026dc <__d2b+0x70>
 800269e:	9a01      	ldr	r2, [sp, #4]
 80026a0:	f1c0 0320 	rsb	r3, r0, #32
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	430b      	orrs	r3, r1
 80026aa:	40c2      	lsrs	r2, r0
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	9201      	str	r2, [sp, #4]
 80026b0:	9b01      	ldr	r3, [sp, #4]
 80026b2:	61bb      	str	r3, [r7, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	bf14      	ite	ne
 80026b8:	2102      	movne	r1, #2
 80026ba:	2101      	moveq	r1, #1
 80026bc:	6139      	str	r1, [r7, #16]
 80026be:	b1c4      	cbz	r4, 80026f2 <__d2b+0x86>
 80026c0:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80026c4:	4404      	add	r4, r0
 80026c6:	6034      	str	r4, [r6, #0]
 80026c8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80026cc:	6028      	str	r0, [r5, #0]
 80026ce:	4638      	mov	r0, r7
 80026d0:	b003      	add	sp, #12
 80026d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026da:	e7d6      	b.n	800268a <__d2b+0x1e>
 80026dc:	6179      	str	r1, [r7, #20]
 80026de:	e7e7      	b.n	80026b0 <__d2b+0x44>
 80026e0:	a801      	add	r0, sp, #4
 80026e2:	f7ff fd7a 	bl	80021da <__lo0bits>
 80026e6:	9b01      	ldr	r3, [sp, #4]
 80026e8:	617b      	str	r3, [r7, #20]
 80026ea:	2101      	movs	r1, #1
 80026ec:	6139      	str	r1, [r7, #16]
 80026ee:	3020      	adds	r0, #32
 80026f0:	e7e5      	b.n	80026be <__d2b+0x52>
 80026f2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80026f6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80026fa:	6030      	str	r0, [r6, #0]
 80026fc:	6918      	ldr	r0, [r3, #16]
 80026fe:	f7ff fd4c 	bl	800219a <__hi0bits>
 8002702:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8002706:	e7e1      	b.n	80026cc <__d2b+0x60>

08002708 <__ratio>:
 8002708:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800270c:	4688      	mov	r8, r1
 800270e:	4669      	mov	r1, sp
 8002710:	4681      	mov	r9, r0
 8002712:	f7ff ff5b 	bl	80025cc <__b2d>
 8002716:	a901      	add	r1, sp, #4
 8002718:	4640      	mov	r0, r8
 800271a:	ec57 6b10 	vmov	r6, r7, d0
 800271e:	f7ff ff55 	bl	80025cc <__b2d>
 8002722:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8002726:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800272a:	eba3 0c02 	sub.w	ip, r3, r2
 800272e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8002738:	ec5b ab10 	vmov	sl, fp, d0
 800273c:	2b00      	cmp	r3, #0
 800273e:	bfce      	itee	gt
 8002740:	463a      	movgt	r2, r7
 8002742:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8002746:	465a      	movle	r2, fp
 8002748:	4659      	mov	r1, fp
 800274a:	463d      	mov	r5, r7
 800274c:	bfd4      	ite	le
 800274e:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8002752:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 8002756:	4630      	mov	r0, r6
 8002758:	ee10 2a10 	vmov	r2, s0
 800275c:	460b      	mov	r3, r1
 800275e:	4629      	mov	r1, r5
 8002760:	f7fe fe9c 	bl	800149c <__aeabi_ddiv>
 8002764:	ec41 0b10 	vmov	d0, r0, r1
 8002768:	b003      	add	sp, #12
 800276a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800276e <_mprec_log10>:
 800276e:	2817      	cmp	r0, #23
 8002770:	b5d0      	push	{r4, r6, r7, lr}
 8002772:	4604      	mov	r4, r0
 8002774:	dc07      	bgt.n	8002786 <_mprec_log10+0x18>
 8002776:	4b09      	ldr	r3, [pc, #36]	; (800279c <_mprec_log10+0x2e>)
 8002778:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 800277c:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002780:	ec41 0b10 	vmov	d0, r0, r1
 8002784:	bdd0      	pop	{r4, r6, r7, pc}
 8002786:	4906      	ldr	r1, [pc, #24]	; (80027a0 <_mprec_log10+0x32>)
 8002788:	4f06      	ldr	r7, [pc, #24]	; (80027a4 <_mprec_log10+0x36>)
 800278a:	2000      	movs	r0, #0
 800278c:	2600      	movs	r6, #0
 800278e:	4632      	mov	r2, r6
 8002790:	463b      	mov	r3, r7
 8002792:	f7fe fd59 	bl	8001248 <__aeabi_dmul>
 8002796:	3c01      	subs	r4, #1
 8002798:	d1f9      	bne.n	800278e <_mprec_log10+0x20>
 800279a:	e7f1      	b.n	8002780 <_mprec_log10+0x12>
 800279c:	08006638 	.word	0x08006638
 80027a0:	3ff00000 	.word	0x3ff00000
 80027a4:	40240000 	.word	0x40240000

080027a8 <__copybits>:
 80027a8:	3901      	subs	r1, #1
 80027aa:	b510      	push	{r4, lr}
 80027ac:	1149      	asrs	r1, r1, #5
 80027ae:	6914      	ldr	r4, [r2, #16]
 80027b0:	3101      	adds	r1, #1
 80027b2:	f102 0314 	add.w	r3, r2, #20
 80027b6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80027ba:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80027be:	42a3      	cmp	r3, r4
 80027c0:	4602      	mov	r2, r0
 80027c2:	d303      	bcc.n	80027cc <__copybits+0x24>
 80027c4:	2300      	movs	r3, #0
 80027c6:	428a      	cmp	r2, r1
 80027c8:	d305      	bcc.n	80027d6 <__copybits+0x2e>
 80027ca:	bd10      	pop	{r4, pc}
 80027cc:	f853 2b04 	ldr.w	r2, [r3], #4
 80027d0:	f840 2b04 	str.w	r2, [r0], #4
 80027d4:	e7f3      	b.n	80027be <__copybits+0x16>
 80027d6:	f842 3b04 	str.w	r3, [r2], #4
 80027da:	e7f4      	b.n	80027c6 <__copybits+0x1e>

080027dc <__any_on>:
 80027dc:	f100 0214 	add.w	r2, r0, #20
 80027e0:	6900      	ldr	r0, [r0, #16]
 80027e2:	114b      	asrs	r3, r1, #5
 80027e4:	4298      	cmp	r0, r3
 80027e6:	b510      	push	{r4, lr}
 80027e8:	db11      	blt.n	800280e <__any_on+0x32>
 80027ea:	dd0a      	ble.n	8002802 <__any_on+0x26>
 80027ec:	f011 011f 	ands.w	r1, r1, #31
 80027f0:	d007      	beq.n	8002802 <__any_on+0x26>
 80027f2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80027f6:	fa24 f001 	lsr.w	r0, r4, r1
 80027fa:	fa00 f101 	lsl.w	r1, r0, r1
 80027fe:	428c      	cmp	r4, r1
 8002800:	d10b      	bne.n	800281a <__any_on+0x3e>
 8002802:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002806:	4293      	cmp	r3, r2
 8002808:	d803      	bhi.n	8002812 <__any_on+0x36>
 800280a:	2000      	movs	r0, #0
 800280c:	bd10      	pop	{r4, pc}
 800280e:	4603      	mov	r3, r0
 8002810:	e7f7      	b.n	8002802 <__any_on+0x26>
 8002812:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8002816:	2900      	cmp	r1, #0
 8002818:	d0f5      	beq.n	8002806 <__any_on+0x2a>
 800281a:	2001      	movs	r0, #1
 800281c:	e7f6      	b.n	800280c <__any_on+0x30>
 800281e:	bf00      	nop

08002820 <_malloc_r>:
 8002820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002822:	1cce      	adds	r6, r1, #3
 8002824:	f026 0603 	bic.w	r6, r6, #3
 8002828:	3608      	adds	r6, #8
 800282a:	2e0c      	cmp	r6, #12
 800282c:	bf38      	it	cc
 800282e:	260c      	movcc	r6, #12
 8002830:	2e00      	cmp	r6, #0
 8002832:	4607      	mov	r7, r0
 8002834:	db01      	blt.n	800283a <_malloc_r+0x1a>
 8002836:	42b1      	cmp	r1, r6
 8002838:	d903      	bls.n	8002842 <_malloc_r+0x22>
 800283a:	230c      	movs	r3, #12
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	2000      	movs	r0, #0
 8002840:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002842:	4d21      	ldr	r5, [pc, #132]	; (80028c8 <_malloc_r+0xa8>)
 8002844:	f000 fa54 	bl	8002cf0 <__malloc_lock>
 8002848:	682a      	ldr	r2, [r5, #0]
 800284a:	4614      	mov	r4, r2
 800284c:	b994      	cbnz	r4, 8002874 <_malloc_r+0x54>
 800284e:	686b      	ldr	r3, [r5, #4]
 8002850:	b923      	cbnz	r3, 800285c <_malloc_r+0x3c>
 8002852:	4621      	mov	r1, r4
 8002854:	4638      	mov	r0, r7
 8002856:	f000 f839 	bl	80028cc <_sbrk_r>
 800285a:	6068      	str	r0, [r5, #4]
 800285c:	4631      	mov	r1, r6
 800285e:	4638      	mov	r0, r7
 8002860:	f000 f834 	bl	80028cc <_sbrk_r>
 8002864:	1c43      	adds	r3, r0, #1
 8002866:	d123      	bne.n	80028b0 <_malloc_r+0x90>
 8002868:	230c      	movs	r3, #12
 800286a:	603b      	str	r3, [r7, #0]
 800286c:	4638      	mov	r0, r7
 800286e:	f000 fa40 	bl	8002cf2 <__malloc_unlock>
 8002872:	e7e4      	b.n	800283e <_malloc_r+0x1e>
 8002874:	6823      	ldr	r3, [r4, #0]
 8002876:	1b9b      	subs	r3, r3, r6
 8002878:	d417      	bmi.n	80028aa <_malloc_r+0x8a>
 800287a:	2b0b      	cmp	r3, #11
 800287c:	d903      	bls.n	8002886 <_malloc_r+0x66>
 800287e:	6023      	str	r3, [r4, #0]
 8002880:	441c      	add	r4, r3
 8002882:	6026      	str	r6, [r4, #0]
 8002884:	e004      	b.n	8002890 <_malloc_r+0x70>
 8002886:	6863      	ldr	r3, [r4, #4]
 8002888:	42a2      	cmp	r2, r4
 800288a:	bf0c      	ite	eq
 800288c:	602b      	streq	r3, [r5, #0]
 800288e:	6053      	strne	r3, [r2, #4]
 8002890:	4638      	mov	r0, r7
 8002892:	f000 fa2e 	bl	8002cf2 <__malloc_unlock>
 8002896:	f104 000b 	add.w	r0, r4, #11
 800289a:	1d23      	adds	r3, r4, #4
 800289c:	f020 0007 	bic.w	r0, r0, #7
 80028a0:	1ac2      	subs	r2, r0, r3
 80028a2:	d0cd      	beq.n	8002840 <_malloc_r+0x20>
 80028a4:	1a1b      	subs	r3, r3, r0
 80028a6:	50a3      	str	r3, [r4, r2]
 80028a8:	e7ca      	b.n	8002840 <_malloc_r+0x20>
 80028aa:	4622      	mov	r2, r4
 80028ac:	6864      	ldr	r4, [r4, #4]
 80028ae:	e7cd      	b.n	800284c <_malloc_r+0x2c>
 80028b0:	1cc4      	adds	r4, r0, #3
 80028b2:	f024 0403 	bic.w	r4, r4, #3
 80028b6:	42a0      	cmp	r0, r4
 80028b8:	d0e3      	beq.n	8002882 <_malloc_r+0x62>
 80028ba:	1a21      	subs	r1, r4, r0
 80028bc:	4638      	mov	r0, r7
 80028be:	f000 f805 	bl	80028cc <_sbrk_r>
 80028c2:	3001      	adds	r0, #1
 80028c4:	d1dd      	bne.n	8002882 <_malloc_r+0x62>
 80028c6:	e7cf      	b.n	8002868 <_malloc_r+0x48>
 80028c8:	20000000 	.word	0x20000000

080028cc <_sbrk_r>:
 80028cc:	b538      	push	{r3, r4, r5, lr}
 80028ce:	4c06      	ldr	r4, [pc, #24]	; (80028e8 <_sbrk_r+0x1c>)
 80028d0:	2300      	movs	r3, #0
 80028d2:	4605      	mov	r5, r0
 80028d4:	4608      	mov	r0, r1
 80028d6:	6023      	str	r3, [r4, #0]
 80028d8:	f001 fbe8 	bl	80040ac <_sbrk>
 80028dc:	1c43      	adds	r3, r0, #1
 80028de:	d102      	bne.n	80028e6 <_sbrk_r+0x1a>
 80028e0:	6823      	ldr	r3, [r4, #0]
 80028e2:	b103      	cbz	r3, 80028e6 <_sbrk_r+0x1a>
 80028e4:	602b      	str	r3, [r5, #0]
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
 80028e8:	2000034c 	.word	0x2000034c

080028ec <_mbtowc_r>:
 80028ec:	b410      	push	{r4}
 80028ee:	4c03      	ldr	r4, [pc, #12]	; (80028fc <_mbtowc_r+0x10>)
 80028f0:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 80028f4:	46a4      	mov	ip, r4
 80028f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80028fa:	4760      	bx	ip
 80028fc:	20001090 	.word	0x20001090

08002900 <__ascii_mbtowc>:
 8002900:	b082      	sub	sp, #8
 8002902:	b901      	cbnz	r1, 8002906 <__ascii_mbtowc+0x6>
 8002904:	a901      	add	r1, sp, #4
 8002906:	b142      	cbz	r2, 800291a <__ascii_mbtowc+0x1a>
 8002908:	b14b      	cbz	r3, 800291e <__ascii_mbtowc+0x1e>
 800290a:	7813      	ldrb	r3, [r2, #0]
 800290c:	600b      	str	r3, [r1, #0]
 800290e:	7812      	ldrb	r2, [r2, #0]
 8002910:	1c10      	adds	r0, r2, #0
 8002912:	bf18      	it	ne
 8002914:	2001      	movne	r0, #1
 8002916:	b002      	add	sp, #8
 8002918:	4770      	bx	lr
 800291a:	4610      	mov	r0, r2
 800291c:	e7fb      	b.n	8002916 <__ascii_mbtowc+0x16>
 800291e:	f06f 0001 	mvn.w	r0, #1
 8002922:	e7f8      	b.n	8002916 <__ascii_mbtowc+0x16>

08002924 <_wctomb_r>:
 8002924:	b410      	push	{r4}
 8002926:	4c03      	ldr	r4, [pc, #12]	; (8002934 <_wctomb_r+0x10>)
 8002928:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 800292c:	46a4      	mov	ip, r4
 800292e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002932:	4760      	bx	ip
 8002934:	20001090 	.word	0x20001090

08002938 <__ascii_wctomb>:
 8002938:	b149      	cbz	r1, 800294e <__ascii_wctomb+0x16>
 800293a:	2aff      	cmp	r2, #255	; 0xff
 800293c:	bf85      	ittet	hi
 800293e:	238a      	movhi	r3, #138	; 0x8a
 8002940:	6003      	strhi	r3, [r0, #0]
 8002942:	700a      	strbls	r2, [r1, #0]
 8002944:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8002948:	bf98      	it	ls
 800294a:	2001      	movls	r0, #1
 800294c:	4770      	bx	lr
 800294e:	4608      	mov	r0, r1
 8002950:	4770      	bx	lr
 8002952:	bf00      	nop

08002954 <__aeabi_dcmpun>:
 8002954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800295c:	d102      	bne.n	8002964 <__aeabi_dcmpun+0x10>
 800295e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002962:	d10a      	bne.n	800297a <__aeabi_dcmpun+0x26>
 8002964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800296c:	d102      	bne.n	8002974 <__aeabi_dcmpun+0x20>
 800296e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002972:	d102      	bne.n	800297a <__aeabi_dcmpun+0x26>
 8002974:	f04f 0000 	mov.w	r0, #0
 8002978:	4770      	bx	lr
 800297a:	f04f 0001 	mov.w	r0, #1
 800297e:	4770      	bx	lr

08002980 <__aeabi_d2iz>:
 8002980:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002984:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002988:	d215      	bcs.n	80029b6 <__aeabi_d2iz+0x36>
 800298a:	d511      	bpl.n	80029b0 <__aeabi_d2iz+0x30>
 800298c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002990:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002994:	d912      	bls.n	80029bc <__aeabi_d2iz+0x3c>
 8002996:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800299a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800299e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80029a2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80029a6:	fa23 f002 	lsr.w	r0, r3, r2
 80029aa:	bf18      	it	ne
 80029ac:	4240      	negne	r0, r0
 80029ae:	4770      	bx	lr
 80029b0:	f04f 0000 	mov.w	r0, #0
 80029b4:	4770      	bx	lr
 80029b6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80029ba:	d105      	bne.n	80029c8 <__aeabi_d2iz+0x48>
 80029bc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80029c0:	bf08      	it	eq
 80029c2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80029c6:	4770      	bx	lr
 80029c8:	f04f 0000 	mov.w	r0, #0
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop

080029d0 <__udivmoddi4>:
 80029d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80029d6:	4615      	mov	r5, r2
 80029d8:	4604      	mov	r4, r0
 80029da:	468e      	mov	lr, r1
 80029dc:	461e      	mov	r6, r3
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f040 80cc 	bne.w	8002b7c <__udivmoddi4+0x1ac>
 80029e4:	428a      	cmp	r2, r1
 80029e6:	fab2 fc82 	clz	ip, r2
 80029ea:	d94c      	bls.n	8002a86 <__udivmoddi4+0xb6>
 80029ec:	f1bc 0f00 	cmp.w	ip, #0
 80029f0:	d00b      	beq.n	8002a0a <__udivmoddi4+0x3a>
 80029f2:	f1cc 0820 	rsb	r8, ip, #32
 80029f6:	fa01 fe0c 	lsl.w	lr, r1, ip
 80029fa:	fa20 f808 	lsr.w	r8, r0, r8
 80029fe:	fa02 f50c 	lsl.w	r5, r2, ip
 8002a02:	ea48 0e0e 	orr.w	lr, r8, lr
 8002a06:	fa00 f40c 	lsl.w	r4, r0, ip
 8002a0a:	ea4f 4915 	mov.w	r9, r5, lsr #16
 8002a0e:	fa1f f885 	uxth.w	r8, r5
 8002a12:	fbbe faf9 	udiv	sl, lr, r9
 8002a16:	0c21      	lsrs	r1, r4, #16
 8002a18:	fb09 e31a 	mls	r3, r9, sl, lr
 8002a1c:	fb0a fb08 	mul.w	fp, sl, r8
 8002a20:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002a24:	459b      	cmp	fp, r3
 8002a26:	d92a      	bls.n	8002a7e <__udivmoddi4+0xae>
 8002a28:	18eb      	adds	r3, r5, r3
 8002a2a:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 8002a2e:	d204      	bcs.n	8002a3a <__udivmoddi4+0x6a>
 8002a30:	459b      	cmp	fp, r3
 8002a32:	d902      	bls.n	8002a3a <__udivmoddi4+0x6a>
 8002a34:	f1aa 0002 	sub.w	r0, sl, #2
 8002a38:	442b      	add	r3, r5
 8002a3a:	eba3 030b 	sub.w	r3, r3, fp
 8002a3e:	b2a4      	uxth	r4, r4
 8002a40:	fbb3 f2f9 	udiv	r2, r3, r9
 8002a44:	fb09 3312 	mls	r3, r9, r2, r3
 8002a48:	fb02 f808 	mul.w	r8, r2, r8
 8002a4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002a50:	45a0      	cmp	r8, r4
 8002a52:	d916      	bls.n	8002a82 <__udivmoddi4+0xb2>
 8002a54:	192c      	adds	r4, r5, r4
 8002a56:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
 8002a5a:	d203      	bcs.n	8002a64 <__udivmoddi4+0x94>
 8002a5c:	45a0      	cmp	r8, r4
 8002a5e:	d901      	bls.n	8002a64 <__udivmoddi4+0x94>
 8002a60:	1e93      	subs	r3, r2, #2
 8002a62:	442c      	add	r4, r5
 8002a64:	eba4 0408 	sub.w	r4, r4, r8
 8002a68:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002a6c:	b127      	cbz	r7, 8002a78 <__udivmoddi4+0xa8>
 8002a6e:	fa24 f40c 	lsr.w	r4, r4, ip
 8002a72:	2300      	movs	r3, #0
 8002a74:	603c      	str	r4, [r7, #0]
 8002a76:	607b      	str	r3, [r7, #4]
 8002a78:	4631      	mov	r1, r6
 8002a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a7e:	4650      	mov	r0, sl
 8002a80:	e7db      	b.n	8002a3a <__udivmoddi4+0x6a>
 8002a82:	4613      	mov	r3, r2
 8002a84:	e7ee      	b.n	8002a64 <__udivmoddi4+0x94>
 8002a86:	b902      	cbnz	r2, 8002a8a <__udivmoddi4+0xba>
 8002a88:	deff      	udf	#255	; 0xff
 8002a8a:	f1bc 0f00 	cmp.w	ip, #0
 8002a8e:	d12e      	bne.n	8002aee <__udivmoddi4+0x11e>
 8002a90:	1a8b      	subs	r3, r1, r2
 8002a92:	2601      	movs	r6, #1
 8002a94:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8002a98:	b2aa      	uxth	r2, r5
 8002a9a:	fbb3 f8fe 	udiv	r8, r3, lr
 8002a9e:	0c21      	lsrs	r1, r4, #16
 8002aa0:	fb0e 3318 	mls	r3, lr, r8, r3
 8002aa4:	fb08 f902 	mul.w	r9, r8, r2
 8002aa8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8002aac:	4599      	cmp	r9, r3
 8002aae:	d961      	bls.n	8002b74 <__udivmoddi4+0x1a4>
 8002ab0:	18eb      	adds	r3, r5, r3
 8002ab2:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8002ab6:	d204      	bcs.n	8002ac2 <__udivmoddi4+0xf2>
 8002ab8:	4599      	cmp	r9, r3
 8002aba:	d902      	bls.n	8002ac2 <__udivmoddi4+0xf2>
 8002abc:	f1a8 0002 	sub.w	r0, r8, #2
 8002ac0:	442b      	add	r3, r5
 8002ac2:	eba3 0309 	sub.w	r3, r3, r9
 8002ac6:	b2a4      	uxth	r4, r4
 8002ac8:	fbb3 f1fe 	udiv	r1, r3, lr
 8002acc:	fb0e 3311 	mls	r3, lr, r1, r3
 8002ad0:	434a      	muls	r2, r1
 8002ad2:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8002ad6:	42a2      	cmp	r2, r4
 8002ad8:	d94e      	bls.n	8002b78 <__udivmoddi4+0x1a8>
 8002ada:	192c      	adds	r4, r5, r4
 8002adc:	f101 33ff 	add.w	r3, r1, #4294967295	; 0xffffffff
 8002ae0:	d203      	bcs.n	8002aea <__udivmoddi4+0x11a>
 8002ae2:	42a2      	cmp	r2, r4
 8002ae4:	d901      	bls.n	8002aea <__udivmoddi4+0x11a>
 8002ae6:	1e8b      	subs	r3, r1, #2
 8002ae8:	442c      	add	r4, r5
 8002aea:	1aa4      	subs	r4, r4, r2
 8002aec:	e7bc      	b.n	8002a68 <__udivmoddi4+0x98>
 8002aee:	f1cc 0e20 	rsb	lr, ip, #32
 8002af2:	fa02 f50c 	lsl.w	r5, r2, ip
 8002af6:	fa21 f90e 	lsr.w	r9, r1, lr
 8002afa:	fa01 f30c 	lsl.w	r3, r1, ip
 8002afe:	fa20 fe0e 	lsr.w	lr, r0, lr
 8002b02:	ea4e 0303 	orr.w	r3, lr, r3
 8002b06:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8002b0a:	fa00 f40c 	lsl.w	r4, r0, ip
 8002b0e:	fbb9 f1f8 	udiv	r1, r9, r8
 8002b12:	fa1f fe85 	uxth.w	lr, r5
 8002b16:	fb08 9211 	mls	r2, r8, r1, r9
 8002b1a:	0c18      	lsrs	r0, r3, #16
 8002b1c:	fb01 f60e 	mul.w	r6, r1, lr
 8002b20:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
 8002b24:	4296      	cmp	r6, r2
 8002b26:	d921      	bls.n	8002b6c <__udivmoddi4+0x19c>
 8002b28:	18aa      	adds	r2, r5, r2
 8002b2a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8002b2e:	d203      	bcs.n	8002b38 <__udivmoddi4+0x168>
 8002b30:	4296      	cmp	r6, r2
 8002b32:	d901      	bls.n	8002b38 <__udivmoddi4+0x168>
 8002b34:	1e88      	subs	r0, r1, #2
 8002b36:	442a      	add	r2, r5
 8002b38:	1b92      	subs	r2, r2, r6
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	fbb2 f9f8 	udiv	r9, r2, r8
 8002b40:	fb08 2219 	mls	r2, r8, r9, r2
 8002b44:	fb09 fe0e 	mul.w	lr, r9, lr
 8002b48:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8002b4c:	459e      	cmp	lr, r3
 8002b4e:	d90f      	bls.n	8002b70 <__udivmoddi4+0x1a0>
 8002b50:	18eb      	adds	r3, r5, r3
 8002b52:	f109 36ff 	add.w	r6, r9, #4294967295	; 0xffffffff
 8002b56:	d204      	bcs.n	8002b62 <__udivmoddi4+0x192>
 8002b58:	459e      	cmp	lr, r3
 8002b5a:	d902      	bls.n	8002b62 <__udivmoddi4+0x192>
 8002b5c:	f1a9 0602 	sub.w	r6, r9, #2
 8002b60:	442b      	add	r3, r5
 8002b62:	eba3 030e 	sub.w	r3, r3, lr
 8002b66:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8002b6a:	e793      	b.n	8002a94 <__udivmoddi4+0xc4>
 8002b6c:	4608      	mov	r0, r1
 8002b6e:	e7e3      	b.n	8002b38 <__udivmoddi4+0x168>
 8002b70:	464e      	mov	r6, r9
 8002b72:	e7f6      	b.n	8002b62 <__udivmoddi4+0x192>
 8002b74:	4640      	mov	r0, r8
 8002b76:	e7a4      	b.n	8002ac2 <__udivmoddi4+0xf2>
 8002b78:	460b      	mov	r3, r1
 8002b7a:	e7b6      	b.n	8002aea <__udivmoddi4+0x11a>
 8002b7c:	428b      	cmp	r3, r1
 8002b7e:	d905      	bls.n	8002b8c <__udivmoddi4+0x1bc>
 8002b80:	b10f      	cbz	r7, 8002b86 <__udivmoddi4+0x1b6>
 8002b82:	e9c7 0100 	strd	r0, r1, [r7]
 8002b86:	2600      	movs	r6, #0
 8002b88:	4630      	mov	r0, r6
 8002b8a:	e775      	b.n	8002a78 <__udivmoddi4+0xa8>
 8002b8c:	fab3 fc83 	clz	ip, r3
 8002b90:	f1bc 0f00 	cmp.w	ip, #0
 8002b94:	d10f      	bne.n	8002bb6 <__udivmoddi4+0x1e6>
 8002b96:	428b      	cmp	r3, r1
 8002b98:	d301      	bcc.n	8002b9e <__udivmoddi4+0x1ce>
 8002b9a:	4282      	cmp	r2, r0
 8002b9c:	d809      	bhi.n	8002bb2 <__udivmoddi4+0x1e2>
 8002b9e:	1a84      	subs	r4, r0, r2
 8002ba0:	eb61 0e03 	sbc.w	lr, r1, r3
 8002ba4:	2001      	movs	r0, #1
 8002ba6:	2f00      	cmp	r7, #0
 8002ba8:	d06a      	beq.n	8002c80 <__udivmoddi4+0x2b0>
 8002baa:	e9c7 4e00 	strd	r4, lr, [r7]
 8002bae:	2600      	movs	r6, #0
 8002bb0:	e762      	b.n	8002a78 <__udivmoddi4+0xa8>
 8002bb2:	4660      	mov	r0, ip
 8002bb4:	e7f7      	b.n	8002ba6 <__udivmoddi4+0x1d6>
 8002bb6:	f1cc 0e20 	rsb	lr, ip, #32
 8002bba:	fa03 f30c 	lsl.w	r3, r3, ip
 8002bbe:	fa22 f50e 	lsr.w	r5, r2, lr
 8002bc2:	fa21 f40e 	lsr.w	r4, r1, lr
 8002bc6:	431d      	orrs	r5, r3
 8002bc8:	fa01 f30c 	lsl.w	r3, r1, ip
 8002bcc:	fa20 f10e 	lsr.w	r1, r0, lr
 8002bd0:	430b      	orrs	r3, r1
 8002bd2:	ea4f 4a15 	mov.w	sl, r5, lsr #16
 8002bd6:	fa00 f60c 	lsl.w	r6, r0, ip
 8002bda:	fbb4 f9fa 	udiv	r9, r4, sl
 8002bde:	fa1f f885 	uxth.w	r8, r5
 8002be2:	fb0a 4019 	mls	r0, sl, r9, r4
 8002be6:	0c1c      	lsrs	r4, r3, #16
 8002be8:	fb09 f108 	mul.w	r1, r9, r8
 8002bec:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
 8002bf0:	42a1      	cmp	r1, r4
 8002bf2:	fa02 f20c 	lsl.w	r2, r2, ip
 8002bf6:	d93f      	bls.n	8002c78 <__udivmoddi4+0x2a8>
 8002bf8:	192c      	adds	r4, r5, r4
 8002bfa:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8002bfe:	d204      	bcs.n	8002c0a <__udivmoddi4+0x23a>
 8002c00:	42a1      	cmp	r1, r4
 8002c02:	d902      	bls.n	8002c0a <__udivmoddi4+0x23a>
 8002c04:	f1a9 0002 	sub.w	r0, r9, #2
 8002c08:	442c      	add	r4, r5
 8002c0a:	1a64      	subs	r4, r4, r1
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	fbb4 f9fa 	udiv	r9, r4, sl
 8002c12:	fb0a 4419 	mls	r4, sl, r9, r4
 8002c16:	fb09 f808 	mul.w	r8, r9, r8
 8002c1a:	ea43 4104 	orr.w	r1, r3, r4, lsl #16
 8002c1e:	4588      	cmp	r8, r1
 8002c20:	d92c      	bls.n	8002c7c <__udivmoddi4+0x2ac>
 8002c22:	1869      	adds	r1, r5, r1
 8002c24:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8002c28:	d204      	bcs.n	8002c34 <__udivmoddi4+0x264>
 8002c2a:	4588      	cmp	r8, r1
 8002c2c:	d902      	bls.n	8002c34 <__udivmoddi4+0x264>
 8002c2e:	f1a9 0302 	sub.w	r3, r9, #2
 8002c32:	4429      	add	r1, r5
 8002c34:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002c38:	eba1 0108 	sub.w	r1, r1, r8
 8002c3c:	fba0 8902 	umull	r8, r9, r0, r2
 8002c40:	4549      	cmp	r1, r9
 8002c42:	46c2      	mov	sl, r8
 8002c44:	464c      	mov	r4, r9
 8002c46:	d302      	bcc.n	8002c4e <__udivmoddi4+0x27e>
 8002c48:	d106      	bne.n	8002c58 <__udivmoddi4+0x288>
 8002c4a:	4546      	cmp	r6, r8
 8002c4c:	d204      	bcs.n	8002c58 <__udivmoddi4+0x288>
 8002c4e:	ebb8 0a02 	subs.w	sl, r8, r2
 8002c52:	eb69 0405 	sbc.w	r4, r9, r5
 8002c56:	3801      	subs	r0, #1
 8002c58:	b197      	cbz	r7, 8002c80 <__udivmoddi4+0x2b0>
 8002c5a:	ebb6 030a 	subs.w	r3, r6, sl
 8002c5e:	eb61 0604 	sbc.w	r6, r1, r4
 8002c62:	fa06 fe0e 	lsl.w	lr, r6, lr
 8002c66:	fa23 f30c 	lsr.w	r3, r3, ip
 8002c6a:	ea4e 0303 	orr.w	r3, lr, r3
 8002c6e:	fa26 f60c 	lsr.w	r6, r6, ip
 8002c72:	e9c7 3600 	strd	r3, r6, [r7]
 8002c76:	e79a      	b.n	8002bae <__udivmoddi4+0x1de>
 8002c78:	4648      	mov	r0, r9
 8002c7a:	e7c6      	b.n	8002c0a <__udivmoddi4+0x23a>
 8002c7c:	464b      	mov	r3, r9
 8002c7e:	e7d9      	b.n	8002c34 <__udivmoddi4+0x264>
 8002c80:	463e      	mov	r6, r7
 8002c82:	e6f9      	b.n	8002a78 <__udivmoddi4+0xa8>

08002c84 <memcpy>:
 8002c84:	440a      	add	r2, r1
 8002c86:	4291      	cmp	r1, r2
 8002c88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8002c8c:	d100      	bne.n	8002c90 <memcpy+0xc>
 8002c8e:	4770      	bx	lr
 8002c90:	b510      	push	{r4, lr}
 8002c92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002c96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002c9a:	4291      	cmp	r1, r2
 8002c9c:	d1f9      	bne.n	8002c92 <memcpy+0xe>
 8002c9e:	bd10      	pop	{r4, pc}

08002ca0 <memset>:
 8002ca0:	4402      	add	r2, r0
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	4293      	cmp	r3, r2
 8002ca6:	d100      	bne.n	8002caa <memset+0xa>
 8002ca8:	4770      	bx	lr
 8002caa:	f803 1b01 	strb.w	r1, [r3], #1
 8002cae:	e7f9      	b.n	8002ca4 <memset+0x4>

08002cb0 <strcmp>:
 8002cb0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002cb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	bf28      	it	cs
 8002cbc:	429a      	cmpcs	r2, r3
 8002cbe:	d0f7      	beq.n	8002cb0 <strcmp>
 8002cc0:	1ad0      	subs	r0, r2, r3
 8002cc2:	4770      	bx	lr

08002cc4 <strlen>:
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002cca:	2a00      	cmp	r2, #0
 8002ccc:	d1fb      	bne.n	8002cc6 <strlen+0x2>
 8002cce:	1a18      	subs	r0, r3, r0
 8002cd0:	3801      	subs	r0, #1
 8002cd2:	4770      	bx	lr

08002cd4 <_calloc_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	fb02 f401 	mul.w	r4, r2, r1
 8002cda:	4621      	mov	r1, r4
 8002cdc:	f7ff fda0 	bl	8002820 <_malloc_r>
 8002ce0:	4605      	mov	r5, r0
 8002ce2:	b118      	cbz	r0, 8002cec <_calloc_r+0x18>
 8002ce4:	4622      	mov	r2, r4
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	f7ff ffda 	bl	8002ca0 <memset>
 8002cec:	4628      	mov	r0, r5
 8002cee:	bd38      	pop	{r3, r4, r5, pc}

08002cf0 <__malloc_lock>:
 8002cf0:	4770      	bx	lr

08002cf2 <__malloc_unlock>:
 8002cf2:	4770      	bx	lr

08002cf4 <pwm_pin_set_usec.constprop.7>:
 * @param pulse Pulse width (in microseconds) set to the PWM.
 *
 * @retval 0 If successful.
 * @retval Negative errno code if failure.
 */
static inline int pwm_pin_set_usec(struct device *dev, u32_t pwm,
 8002cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cf8:	4680      	mov	r8, r0
 8002cfa:	468a      	mov	sl, r1
	return api->get_cycles_per_sec(dev, pwm, cycles);
 8002cfc:	6843      	ldr	r3, [r0, #4]
 8002cfe:	466a      	mov	r2, sp
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2101      	movs	r1, #1
 8002d04:	4798      	blx	r3
				   u32_t period, u32_t pulse)
{
	u64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
 8002d06:	bb88      	cbnz	r0, 8002d6c <pwm_pin_set_usec.constprop.7+0x78>
		return -EIO;
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8002d08:	e9dd 4900 	ldrd	r4, r9, [sp]
 8002d0c:	f644 6320 	movw	r3, #20000	; 0x4e20
 8002d10:	fba4 6703 	umull	r6, r7, r4, r3
 8002d14:	fb03 7709 	mla	r7, r3, r9, r7
 8002d18:	4a17      	ldr	r2, [pc, #92]	; (8002d78 <pwm_pin_set_usec.constprop.7+0x84>)
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	4630      	mov	r0, r6
 8002d1e:	4639      	mov	r1, r7
 8002d20:	f7fe fd2c 	bl	800177c <__aeabi_uldivmod>
	if (period_cycles >= ((u64_t)1 << 32)) {
 8002d24:	4b15      	ldr	r3, [pc, #84]	; (8002d7c <pwm_pin_set_usec.constprop.7+0x88>)
 8002d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d2a:	42bb      	cmp	r3, r7
 8002d2c:	bf08      	it	eq
 8002d2e:	42b2      	cmpeq	r2, r6
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
 8002d30:	4683      	mov	fp, r0
	if (period_cycles >= ((u64_t)1 << 32)) {
 8002d32:	d31e      	bcc.n	8002d72 <pwm_pin_set_usec.constprop.7+0x7e>
		return -ENOTSUP;
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002d34:	fbaa 4504 	umull	r4, r5, sl, r4
 8002d38:	fb0a 5509 	mla	r5, sl, r9, r5
 8002d3c:	4a0e      	ldr	r2, [pc, #56]	; (8002d78 <pwm_pin_set_usec.constprop.7+0x84>)
 8002d3e:	2300      	movs	r3, #0
 8002d40:	4620      	mov	r0, r4
 8002d42:	4629      	mov	r1, r5
 8002d44:	f7fe fd1a 	bl	800177c <__aeabi_uldivmod>
	if (pulse_cycles >= ((u64_t)1 << 32)) {
 8002d48:	4a0c      	ldr	r2, [pc, #48]	; (8002d7c <pwm_pin_set_usec.constprop.7+0x88>)
 8002d4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002d4e:	42aa      	cmp	r2, r5
 8002d50:	bf08      	it	eq
 8002d52:	42a1      	cmpeq	r1, r4
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
 8002d54:	4603      	mov	r3, r0
	if (pulse_cycles >= ((u64_t)1 << 32)) {
 8002d56:	d30c      	bcc.n	8002d72 <pwm_pin_set_usec.constprop.7+0x7e>
	return api->pin_set(dev, pwm, period, pulse);
 8002d58:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	6814      	ldr	r4, [r2, #0]
 8002d60:	4640      	mov	r0, r8
 8002d62:	465a      	mov	r2, fp
 8002d64:	47a0      	blx	r4
		return -ENOTSUP;
	}

	return pwm_pin_set_cycles(dev, pwm, (u32_t)period_cycles,
				  (u32_t)pulse_cycles);
}
 8002d66:	b003      	add	sp, #12
 8002d68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -EIO;
 8002d6c:	f06f 0004 	mvn.w	r0, #4
 8002d70:	e7f9      	b.n	8002d66 <pwm_pin_set_usec.constprop.7+0x72>
		return -ENOTSUP;
 8002d72:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8002d76:	e7f6      	b.n	8002d66 <pwm_pin_set_usec.constprop.7+0x72>
 8002d78:	000f4240 	.word	0x000f4240
 8002d7c:	000f423f 	.word	0x000f423f

08002d80 <speed.part.0>:
s8_t motors_init()
{
	return init();
}

s8_t speed(speed_t speed)
 8002d80:	b508      	push	{r3, lr}
			printk("pwm pin set fails\n");
			return E_FAIL;
		}
		break;
	case normal:
		if (pwm_pin_set_usec(pwm_2, CH1_PWM, PERIOD, NORMAL_SPEED)) {
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <speed.part.0+0x1c>)
 8002d84:	f641 3158 	movw	r1, #7000	; 0x1b58
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	f7ff ffb3 	bl	8002cf4 <pwm_pin_set_usec.constprop.7>
 8002d8e:	b118      	cbz	r0, 8002d98 <speed.part.0+0x18>
			printk("pwm pin set fails\n");
 8002d90:	4803      	ldr	r0, [pc, #12]	; (8002da0 <speed.part.0+0x20>)
 8002d92:	f002 fdee 	bl	8005972 <printk>
			return E_FAIL;
 8002d96:	2001      	movs	r0, #1
		}
	}
	return E_OK; /*no error*/
}
 8002d98:	bd08      	pop	{r3, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000014 	.word	0x20000014
 8002da0:	080069b8 	.word	0x080069b8

08002da4 <motors_init>:
{
 8002da4:	b538      	push	{r3, r4, r5, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8002da6:	4816      	ldr	r0, [pc, #88]	; (8002e00 <motors_init+0x5c>)
	portb = device_get_binding(PORT_B);
 8002da8:	4d16      	ldr	r5, [pc, #88]	; (8002e04 <motors_init+0x60>)
 8002daa:	f001 fe5f 	bl	8004a6c <z_impl_device_get_binding>
 8002dae:	6028      	str	r0, [r5, #0]
	if (!portb) {
 8002db0:	b928      	cbnz	r0, 8002dbe <motors_init+0x1a>
		printk("Cannot find %s!\n", PORT_B);
 8002db2:	4913      	ldr	r1, [pc, #76]	; (8002e00 <motors_init+0x5c>)
		printk("Cannot find %s!\n", PWM_DRIVER);
 8002db4:	4814      	ldr	r0, [pc, #80]	; (8002e08 <motors_init+0x64>)
 8002db6:	f002 fddc 	bl	8005972 <printk>
		return E_FAIL;
 8002dba:	2001      	movs	r0, #1
}
 8002dbc:	bd38      	pop	{r3, r4, r5, pc}
 8002dbe:	4813      	ldr	r0, [pc, #76]	; (8002e0c <motors_init+0x68>)
 8002dc0:	f001 fe54 	bl	8004a6c <z_impl_device_get_binding>
	pwm_2 = device_get_binding(PWM_DRIVER);
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <motors_init+0x6c>)
 8002dc6:	6018      	str	r0, [r3, #0]
	if (!pwm_2) {
 8002dc8:	b908      	cbnz	r0, 8002dce <motors_init+0x2a>
		printk("Cannot find %s!\n", PWM_DRIVER);
 8002dca:	4910      	ldr	r1, [pc, #64]	; (8002e0c <motors_init+0x68>)
 8002dcc:	e7f2      	b.n	8002db4 <motors_init+0x10>
	ret |= gpio_pin_configure(portb, RIGHT_FORWARDS, GPIO_DIR_OUT);
 8002dce:	2101      	movs	r1, #1
 8002dd0:	6828      	ldr	r0, [r5, #0]
 8002dd2:	f002 fb97 	bl	8005504 <gpio_pin_configure.constprop.2>
	ret |= gpio_pin_configure(portb, RIGHT_BACKWARDS, GPIO_DIR_OUT);
 8002dd6:	210f      	movs	r1, #15
	ret |= gpio_pin_configure(portb, RIGHT_FORWARDS, GPIO_DIR_OUT);
 8002dd8:	4604      	mov	r4, r0
	ret |= gpio_pin_configure(portb, RIGHT_BACKWARDS, GPIO_DIR_OUT);
 8002dda:	6828      	ldr	r0, [r5, #0]
 8002ddc:	f002 fb92 	bl	8005504 <gpio_pin_configure.constprop.2>
	ret |= gpio_pin_configure(portb, LEFT_FORWARDS, GPIO_DIR_OUT);
 8002de0:	210e      	movs	r1, #14
	ret |= gpio_pin_configure(portb, RIGHT_BACKWARDS, GPIO_DIR_OUT);
 8002de2:	4304      	orrs	r4, r0
	ret |= gpio_pin_configure(portb, LEFT_FORWARDS, GPIO_DIR_OUT);
 8002de4:	6828      	ldr	r0, [r5, #0]
 8002de6:	f002 fb8d 	bl	8005504 <gpio_pin_configure.constprop.2>
	ret |= gpio_pin_configure(portb, RIGHT_BACKWARDS, GPIO_DIR_OUT);
 8002dea:	b264      	sxtb	r4, r4
	ret |= gpio_pin_configure(portb, LEFT_FORWARDS, GPIO_DIR_OUT);
 8002dec:	4304      	orrs	r4, r0
	ret |= gpio_pin_configure(portb, LEFT_BACKWARDS, GPIO_DIR_OUT);
 8002dee:	210d      	movs	r1, #13
 8002df0:	6828      	ldr	r0, [r5, #0]
 8002df2:	f002 fb87 	bl	8005504 <gpio_pin_configure.constprop.2>
	ret |= gpio_pin_configure(portb, LEFT_FORWARDS, GPIO_DIR_OUT);
 8002df6:	b264      	sxtb	r4, r4
	ret |= gpio_pin_configure(portb, LEFT_BACKWARDS, GPIO_DIR_OUT);
 8002df8:	4320      	orrs	r0, r4
 8002dfa:	b240      	sxtb	r0, r0
	return ret;
 8002dfc:	e7de      	b.n	8002dbc <motors_init+0x18>
 8002dfe:	bf00      	nop
 8002e00:	0800699b 	.word	0x0800699b
 8002e04:	20000010 	.word	0x20000010
 8002e08:	080069a1 	.word	0x080069a1
 8002e0c:	080069b2 	.word	0x080069b2
 8002e10:	20000014 	.word	0x20000014

08002e14 <speed>:
{
 8002e14:	b510      	push	{r4, lr}
	switch (speed) {
 8002e16:	4604      	mov	r4, r0
 8002e18:	b168      	cbz	r0, 8002e36 <speed+0x22>
 8002e1a:	2801      	cmp	r0, #1
 8002e1c:	d10f      	bne.n	8002e3e <speed+0x2a>
		if (pwm_pin_set_usec(pwm_2, CH1_PWM, PERIOD, FAST_AND_FURIUS)) {
 8002e1e:	4b09      	ldr	r3, [pc, #36]	; (8002e44 <speed+0x30>)
 8002e20:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002e24:	6818      	ldr	r0, [r3, #0]
 8002e26:	f7ff ff65 	bl	8002cf4 <pwm_pin_set_usec.constprop.7>
 8002e2a:	b118      	cbz	r0, 8002e34 <speed+0x20>
			printk("pwm pin set fails\n");
 8002e2c:	4806      	ldr	r0, [pc, #24]	; (8002e48 <speed+0x34>)
 8002e2e:	f002 fda0 	bl	8005972 <printk>
			return E_FAIL;
 8002e32:	4620      	mov	r0, r4
}
 8002e34:	bd10      	pop	{r4, pc}
 8002e36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e3a:	f7ff bfa1 	b.w	8002d80 <speed.part.0>
	return E_OK; /*no error*/
 8002e3e:	2000      	movs	r0, #0
 8002e40:	e7f8      	b.n	8002e34 <speed+0x20>
 8002e42:	bf00      	nop
 8002e44:	20000014 	.word	0x20000014
 8002e48:	080069b8 	.word	0x080069b8

08002e4c <drive>:

s8_t drive(direction_t dir)
{
 8002e4c:	b570      	push	{r4, r5, r6, lr}
	switch (dir) {
 8002e4e:	2804      	cmp	r0, #4
 8002e50:	d822      	bhi.n	8002e98 <drive+0x4c>
 8002e52:	e8df f000 	tbb	[pc, r0]
 8002e56:	2303      	.short	0x2303
 8002e58:	433a      	.short	0x433a
 8002e5a:	4c          	.byte	0x4c
 8002e5b:	00          	.byte	0x00
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, HIGH);
 8002e5c:	4d44      	ldr	r5, [pc, #272]	; (8002f70 <drive+0x124>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	4611      	mov	r1, r2
 8002e62:	6828      	ldr	r0, [r5, #0]
 8002e64:	f002 fb44 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002e68:	2200      	movs	r2, #0
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, HIGH);
 8002e6a:	4604      	mov	r4, r0
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002e6c:	210f      	movs	r1, #15
 8002e6e:	6828      	ldr	r0, [r5, #0]
 8002e70:	f002 fb3e 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, HIGH);
 8002e74:	2201      	movs	r2, #1
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002e76:	4304      	orrs	r4, r0
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, HIGH);
 8002e78:	210e      	movs	r1, #14
 8002e7a:	6828      	ldr	r0, [r5, #0]
 8002e7c:	f002 fb38 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002e80:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, HIGH);
 8002e82:	4304      	orrs	r4, r0
 8002e84:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(portb, LEFT_BACKWARDS, LOW);
 8002e86:	2200      	movs	r2, #0
 8002e88:	210d      	movs	r1, #13
 8002e8a:	6828      	ldr	r0, [r5, #0]
 8002e8c:	f002 fb30 	bl	80054f0 <gpio_pin_write>
 8002e90:	4320      	orrs	r0, r4
	case forwards:
		if (drive_forwards()) {
 8002e92:	f010 0fff 	tst.w	r0, #255	; 0xff
 8002e96:	d138      	bne.n	8002f0a <drive+0xbe>
		if (drive_brake()) {
			printk("drive error\n");
			return E_FAIL;
		}
	}
	return E_OK; /*no error*/
 8002e98:	2000      	movs	r0, #0
 8002e9a:	e03a      	b.n	8002f12 <drive+0xc6>
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, LOW);
 8002e9c:	4d34      	ldr	r5, [pc, #208]	; (8002f70 <drive+0x124>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	6828      	ldr	r0, [r5, #0]
 8002ea4:	f002 fb24 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, HIGH);
 8002ea8:	2201      	movs	r2, #1
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, LOW);
 8002eaa:	4604      	mov	r4, r0
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002eac:	210f      	movs	r1, #15
 8002eae:	6828      	ldr	r0, [r5, #0]
 8002eb0:	f002 fb1e 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, LOW);
 8002eb4:	2200      	movs	r2, #0
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002eb6:	4304      	orrs	r4, r0
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, LOW);
 8002eb8:	210e      	movs	r1, #14
 8002eba:	6828      	ldr	r0, [r5, #0]
 8002ebc:	f002 fb18 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002ec0:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, LOW);
 8002ec2:	4304      	orrs	r4, r0
 8002ec4:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(portb, LEFT_BACKWARDS, HIGH);
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	e7de      	b.n	8002e88 <drive+0x3c>
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, LOW);
 8002eca:	4d29      	ldr	r5, [pc, #164]	; (8002f70 <drive+0x124>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	2101      	movs	r1, #1
 8002ed0:	6828      	ldr	r0, [r5, #0]
 8002ed2:	f002 fb0d 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, HIGH);
 8002ed6:	2201      	movs	r2, #1
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, LOW);
 8002ed8:	4604      	mov	r4, r0
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, HIGH);
 8002eda:	e7c7      	b.n	8002e6c <drive+0x20>
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, HIGH);
 8002edc:	4d24      	ldr	r5, [pc, #144]	; (8002f70 <drive+0x124>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	6828      	ldr	r0, [r5, #0]
 8002ee4:	f002 fb04 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002ee8:	2200      	movs	r2, #0
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, HIGH);
 8002eea:	4604      	mov	r4, r0
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002eec:	e7de      	b.n	8002eac <drive+0x60>
		if (pwm_pin_set_usec(pwm_2, CH1_PWM, period, pulse)) {
 8002eee:	4d21      	ldr	r5, [pc, #132]	; (8002f74 <drive+0x128>)
	u32_t pulse = NORMAL_SPEED;
 8002ef0:	f641 3458 	movw	r4, #7000	; 0x1b58
		pulse -= 700;
 8002ef4:	f5a4 742f 	sub.w	r4, r4, #700	; 0x2bc
		if (pwm_pin_set_usec(pwm_2, CH1_PWM, period, pulse)) {
 8002ef8:	4621      	mov	r1, r4
 8002efa:	6828      	ldr	r0, [r5, #0]
 8002efc:	f7ff fefa 	bl	8002cf4 <pwm_pin_set_usec.constprop.7>
 8002f00:	4606      	mov	r6, r0
 8002f02:	b138      	cbz	r0, 8002f14 <drive+0xc8>
			printk("pwm pin set fails\n");
 8002f04:	481c      	ldr	r0, [pc, #112]	; (8002f78 <drive+0x12c>)
 8002f06:	f002 fd34 	bl	8005972 <printk>
			printk("drive error\n");
 8002f0a:	481c      	ldr	r0, [pc, #112]	; (8002f7c <drive+0x130>)
 8002f0c:	f002 fd31 	bl	8005972 <printk>
			return E_FAIL;
 8002f10:	2001      	movs	r0, #1
}
 8002f12:	bd70      	pop	{r4, r5, r6, pc}
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&ms, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(ms);
 8002f14:	200a      	movs	r0, #10
 8002f16:	f002 f8e7 	bl	80050e8 <z_impl_k_sleep>
	} while (pulse > 1300);
 8002f1a:	f5b4 7f2f 	cmp.w	r4, #700	; 0x2bc
 8002f1e:	d1e9      	bne.n	8002ef4 <drive+0xa8>
	if (pwm_pin_set_usec(pwm_2, CH1_PWM, period, 0)) {
 8002f20:	6828      	ldr	r0, [r5, #0]
 8002f22:	4631      	mov	r1, r6
 8002f24:	f7ff fee6 	bl	8002cf4 <pwm_pin_set_usec.constprop.7>
 8002f28:	4605      	mov	r5, r0
 8002f2a:	2800      	cmp	r0, #0
 8002f2c:	d1ea      	bne.n	8002f04 <drive+0xb8>
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, LOW);
 8002f2e:	4e10      	ldr	r6, [pc, #64]	; (8002f70 <drive+0x124>)
 8002f30:	4602      	mov	r2, r0
 8002f32:	2101      	movs	r1, #1
 8002f34:	6830      	ldr	r0, [r6, #0]
 8002f36:	f002 fadb 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002f3a:	462a      	mov	r2, r5
	ret |= gpio_pin_write(portb, RIGHT_FORWARDS, LOW);
 8002f3c:	4604      	mov	r4, r0
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002f3e:	210f      	movs	r1, #15
 8002f40:	6830      	ldr	r0, [r6, #0]
 8002f42:	f002 fad5 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, LOW);
 8002f46:	462a      	mov	r2, r5
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002f48:	4304      	orrs	r4, r0
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, LOW);
 8002f4a:	210e      	movs	r1, #14
 8002f4c:	6830      	ldr	r0, [r6, #0]
 8002f4e:	f002 facf 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, RIGHT_BACKWARDS, LOW);
 8002f52:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, LOW);
 8002f54:	4304      	orrs	r4, r0
	ret |= gpio_pin_write(portb, LEFT_BACKWARDS, LOW);
 8002f56:	462a      	mov	r2, r5
 8002f58:	210d      	movs	r1, #13
 8002f5a:	6830      	ldr	r0, [r6, #0]
 8002f5c:	f002 fac8 	bl	80054f0 <gpio_pin_write>
	ret |= gpio_pin_write(portb, LEFT_FORWARDS, LOW);
 8002f60:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(portb, LEFT_BACKWARDS, LOW);
 8002f62:	4304      	orrs	r4, r0
 8002f64:	b264      	sxtb	r4, r4
	switch (speed) {
 8002f66:	f7ff ff0b 	bl	8002d80 <speed.part.0>
		if (drive_brake()) {
 8002f6a:	2c00      	cmp	r4, #0
 8002f6c:	d094      	beq.n	8002e98 <drive+0x4c>
 8002f6e:	e7cc      	b.n	8002f0a <drive+0xbe>
 8002f70:	20000010 	.word	0x20000010
 8002f74:	20000014 	.word	0x20000014
 8002f78:	080069b8 	.word	0x080069b8
 8002f7c:	0800698e 	.word	0x0800698e

08002f80 <main>:
	}
	return E_OK;
}

int main(void)
{
 8002f80:	b570      	push	{r4, r5, r6, lr}
	ret |= motors_init();
 8002f82:	f7ff ff0f 	bl	8002da4 <motors_init>
 8002f86:	4605      	mov	r5, r0
	k_sleep(100);
 8002f88:	f002 fac6 	bl	8005518 <k_sleep.constprop.1>
	ret |= usonic_init();
 8002f8c:	f000 f9b8 	bl	8003300 <usonic_init>
 8002f90:	4604      	mov	r4, r0
	k_sleep(100);
 8002f92:	f002 fac1 	bl	8005518 <k_sleep.constprop.1>
	ret |= ir_sensors_init();
 8002f96:	f000 f865 	bl	8003064 <ir_sensors_init>
 8002f9a:	4606      	mov	r6, r0
	k_sleep(100);
 8002f9c:	f002 fabc 	bl	8005518 <k_sleep.constprop.1>
	ret |= color_sensor_init();
 8002fa0:	f000 f8f6 	bl	8003190 <color_sensor_init>
 8002fa4:	4328      	orrs	r0, r5
 8002fa6:	4304      	orrs	r4, r0
 8002fa8:	4334      	orrs	r4, r6
 8002faa:	b264      	sxtb	r4, r4
	k_sleep(100);
 8002fac:	f002 fab4 	bl	8005518 <k_sleep.constprop.1>
	speed(normal);
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	f7ff ff2f 	bl	8002e14 <speed>
	k_sleep(100);
 8002fb6:	f002 faaf 	bl	8005518 <k_sleep.constprop.1>
	if (d_boot_init()) {
 8002fba:	b9a4      	cbnz	r4, 8002fe6 <main+0x66>
	node_counter = 0;
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <main+0x6c>)
 8002fbe:	701c      	strb	r4, [r3, #0]
	while (node_counter < n) {
 8002fc0:	461c      	mov	r4, r3
		find_node(n);
 8002fc2:	2002      	movs	r0, #2
 8002fc4:	f000 f814 	bl	8002ff0 <find_node>
	while (node_counter < n) {
 8002fc8:	7823      	ldrb	r3, [r4, #0]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d9f9      	bls.n	8002fc2 <main+0x42>
	turn_right();
 8002fce:	f002 fac2 	bl	8005556 <turn_right>
	node_counter = 0;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	7023      	strb	r3, [r4, #0]
		find_node(k);
 8002fd6:	2002      	movs	r0, #2
 8002fd8:	f000 f80a 	bl	8002ff0 <find_node>
	while (node_counter < k) {
 8002fdc:	7823      	ldrb	r3, [r4, #0]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d9f9      	bls.n	8002fd6 <main+0x56>
	*	0	1	2	*.....
	*	
	*/
	find_destination_node(2, 2);

	return E_OK;
 8002fe2:	2000      	movs	r0, #0
 8002fe4:	bd70      	pop	{r4, r5, r6, pc}
		return E_FAIL;
 8002fe6:	2001      	movs	r0, #1
 8002fe8:	e7fc      	b.n	8002fe4 <main+0x64>
 8002fea:	bf00      	nop
 8002fec:	20000349 	.word	0x20000349

08002ff0 <find_node>:
		}
	}
}

void find_node(u8_t n)
{
 8002ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	while ((map_nodes_n[node_counter]) < n) {
 8002ff4:	4c18      	ldr	r4, [pc, #96]	; (8003058 <find_node+0x68>)
 8002ff6:	f8df 8068 	ldr.w	r8, [pc, #104]	; 8003060 <find_node+0x70>
{
 8002ffa:	4607      	mov	r7, r0
 8002ffc:	4625      	mov	r5, r4
	while ((map_nodes_n[node_counter]) < n) {
 8002ffe:	7823      	ldrb	r3, [r4, #0]
 8003000:	f818 3003 	ldrb.w	r3, [r8, r3]
 8003004:	42bb      	cmp	r3, r7
 8003006:	d21e      	bcs.n	8003046 <find_node+0x56>
		follow_line();
 8003008:	f002 fa89 	bl	800551e <follow_line>

		while (usonic_distance_cm_get() < 20) {
 800300c:	f000 f9be 	bl	800338c <usonic_distance_cm_get>
 8003010:	2813      	cmp	r0, #19
 8003012:	d91d      	bls.n	8003050 <find_node+0x60>
			drive(stop);
		}

		follow_line();
 8003014:	f002 fa83 	bl	800551e <follow_line>

		if ((color_get() == BLUE) && blue_flag) {
 8003018:	f000 f91e 	bl	8003258 <color_get>
 800301c:	2802      	cmp	r0, #2
 800301e:	d106      	bne.n	800302e <find_node+0x3e>
 8003020:	4e0e      	ldr	r6, [pc, #56]	; (800305c <find_node+0x6c>)
 8003022:	7833      	ldrb	r3, [r6, #0]
 8003024:	b11b      	cbz	r3, 800302e <find_node+0x3e>
			wait_color_change();
 8003026:	f002 faa3 	bl	8005570 <wait_color_change>
			blue_flag = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	7033      	strb	r3, [r6, #0]
		}

		follow_line();
 800302e:	f002 fa76 	bl	800551e <follow_line>

		if (color_get() == BLUE) {
 8003032:	f000 f911 	bl	8003258 <color_get>
 8003036:	2802      	cmp	r0, #2
 8003038:	d1e1      	bne.n	8002ffe <find_node+0xe>
			blue_flag = 1;
 800303a:	4b08      	ldr	r3, [pc, #32]	; (800305c <find_node+0x6c>)
 800303c:	2201      	movs	r2, #1
 800303e:	701a      	strb	r2, [r3, #0]
			node_counter++;
 8003040:	782b      	ldrb	r3, [r5, #0]
 8003042:	4413      	add	r3, r2
 8003044:	702b      	strb	r3, [r5, #0]
			break;
		}
	}
	drive(stop);
 8003046:	2004      	movs	r0, #4
}
 8003048:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	drive(stop);
 800304c:	f7ff befe 	b.w	8002e4c <drive>
			drive(stop);
 8003050:	2004      	movs	r0, #4
 8003052:	f7ff fefb 	bl	8002e4c <drive>
 8003056:	e7d9      	b.n	800300c <find_node+0x1c>
 8003058:	20000349 	.word	0x20000349
 800305c:	20000348 	.word	0x20000348
 8003060:	2000122c 	.word	0x2000122c

08003064 <ir_sensors_init>:
	return var;
}

/****************Public Fucntions*********************/
u8_t ir_sensors_init()
{
 8003064:	b538      	push	{r3, r4, r5, lr}
 8003066:	480e      	ldr	r0, [pc, #56]	; (80030a0 <ir_sensors_init+0x3c>)
	port_a = device_get_binding(A_PORT);
 8003068:	4d0e      	ldr	r5, [pc, #56]	; (80030a4 <ir_sensors_init+0x40>)
 800306a:	f001 fcff 	bl	8004a6c <z_impl_device_get_binding>
 800306e:	6028      	str	r0, [r5, #0]
	if (!port_a) {
 8003070:	b928      	cbnz	r0, 800307e <ir_sensors_init+0x1a>
		printk("Cannot find %s!\n", A_PORT);
 8003072:	480d      	ldr	r0, [pc, #52]	; (80030a8 <ir_sensors_init+0x44>)
 8003074:	490a      	ldr	r1, [pc, #40]	; (80030a0 <ir_sensors_init+0x3c>)
 8003076:	f002 fc7c 	bl	8005972 <printk>
		return E_FAIL;
 800307a:	2001      	movs	r0, #1
	return init();
}
 800307c:	bd38      	pop	{r3, r4, r5, pc}
				    u32_t pin, int flags)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->config(port, access_op, pin, flags);
 800307e:	6843      	ldr	r3, [r0, #4]
 8003080:	681c      	ldr	r4, [r3, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	220c      	movs	r2, #12
 8003086:	4619      	mov	r1, r3
 8003088:	47a0      	blx	r4
 800308a:	4604      	mov	r4, r0
	ret |= gpio_pin_configure(port_a, IR_RIGTH, GPIO_DIR_IN);
 800308c:	6828      	ldr	r0, [r5, #0]
 800308e:	6843      	ldr	r3, [r0, #4]
 8003090:	681d      	ldr	r5, [r3, #0]
 8003092:	2300      	movs	r3, #0
 8003094:	220b      	movs	r2, #11
 8003096:	4619      	mov	r1, r3
 8003098:	47a8      	blx	r5
 800309a:	4320      	orrs	r0, r4
	return ret;
 800309c:	b2c0      	uxtb	r0, r0
 800309e:	e7ed      	b.n	800307c <ir_sensors_init+0x18>
 80030a0:	080069cb 	.word	0x080069cb
 80030a4:	20000018 	.word	0x20000018
 80030a8:	080069a1 	.word	0x080069a1

080030ac <ir_sensor_left>:
	gpio_pin_read(port_a, IR_LEFT, &var);
 80030ac:	4b06      	ldr	r3, [pc, #24]	; (80030c8 <ir_sensor_left+0x1c>)

u8_t ir_sensor_left()
{
 80030ae:	b513      	push	{r0, r1, r4, lr}
	gpio_pin_read(port_a, IR_LEFT, &var);
 80030b0:	6818      	ldr	r0, [r3, #0]
				  u32_t pin, u32_t *value)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	return api->read(port, access_op, pin, value);
 80030b2:	6843      	ldr	r3, [r0, #4]
 80030b4:	220c      	movs	r2, #12
 80030b6:	689c      	ldr	r4, [r3, #8]
 80030b8:	2100      	movs	r1, #0
 80030ba:	ab01      	add	r3, sp, #4
 80030bc:	47a0      	blx	r4
	return ir_left();
}
 80030be:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80030c2:	b002      	add	sp, #8
 80030c4:	bd10      	pop	{r4, pc}
 80030c6:	bf00      	nop
 80030c8:	20000018 	.word	0x20000018

080030cc <ir_sensor_right>:
	gpio_pin_read(port_a, IR_RIGTH, &var);
 80030cc:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <ir_sensor_right+0x1c>)
u8_t ir_sensor_right()
{
 80030ce:	b513      	push	{r0, r1, r4, lr}
	gpio_pin_read(port_a, IR_RIGTH, &var);
 80030d0:	6818      	ldr	r0, [r3, #0]
 80030d2:	6843      	ldr	r3, [r0, #4]
 80030d4:	220b      	movs	r2, #11
 80030d6:	689c      	ldr	r4, [r3, #8]
 80030d8:	2100      	movs	r1, #0
 80030da:	ab01      	add	r3, sp, #4
 80030dc:	47a0      	blx	r4
	return ir_right();
}
 80030de:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80030e2:	b002      	add	sp, #8
 80030e4:	bd10      	pop	{r4, pc}
 80030e6:	bf00      	nop
 80030e8:	20000018 	.word	0x20000018

080030ec <us_callback>:
/**
 * @brief Counts the time reflection depending on
 * the color surface and distance
 */
void us_callback(struct device *gpio, struct gpio_callback *cb, u32_t pins)
{
 80030ec:	b538      	push	{r3, r4, r5, lr}
	if (0 == (call_count_cb % 2)) {
 80030ee:	4c0b      	ldr	r4, [pc, #44]	; (800311c <us_callback+0x30>)
 80030f0:	4d0b      	ldr	r5, [pc, #44]	; (8003120 <us_callback+0x34>)
 80030f2:	6823      	ldr	r3, [r4, #0]
 80030f4:	f013 0f01 	tst.w	r3, #1
 80030f8:	d106      	bne.n	8003108 <us_callback+0x1c>
#ifndef _ASMLANGUAGE
extern u32_t z_timer_cycle_get_32(void);

static inline u32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
 80030fa:	f000 fc8f 	bl	8003a1c <z_timer_cycle_get_32>
		/*Read the hardware clock*/
		start_cycles_cb = k_cycle_get_32();
 80030fe:	6028      	str	r0, [r5, #0]
		/*Read the hardware clock*/
		stop_cycles_cb = k_cycle_get_32();
		cycles_spent_cb = stop_cycles_cb - start_cycles_cb;
		/*Convert hardware cycles to microseconds*/
		us_spent_cb = k_cyc_to_us_floor32(cycles_spent_cb);
		call_count_cb++;
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	3301      	adds	r3, #1
 8003104:	6023      	str	r3, [r4, #0]
	}
}
 8003106:	bd38      	pop	{r3, r4, r5, pc}
 8003108:	f000 fc88 	bl	8003a1c <z_timer_cycle_get_32>
		cycles_spent_cb = stop_cycles_cb - start_cycles_cb;
 800310c:	682b      	ldr	r3, [r5, #0]
 800310e:	1ac0      	subs	r0, r0, r3
	 * the compiler correctly guess at the 32 bit result otherwise).
	 */
	if (div_ratio) {
		t += off;
		if (result32) {
			return ((u32_t)t) / (from_hz / to_hz);
 8003110:	2360      	movs	r3, #96	; 0x60
 8003112:	fbb0 f0f3 	udiv	r0, r0, r3
		us_spent_cb = k_cyc_to_us_floor32(cycles_spent_cb);
 8003116:	4b03      	ldr	r3, [pc, #12]	; (8003124 <us_callback+0x38>)
 8003118:	6018      	str	r0, [r3, #0]
 800311a:	e7f1      	b.n	8003100 <us_callback+0x14>
 800311c:	20000020 	.word	0x20000020
 8003120:	2000003c 	.word	0x2000003c
 8003124:	20000040 	.word	0x20000040

08003128 <us_get>:
{
 8003128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800312a:	4605      	mov	r5, r0
 800312c:	4c16      	ldr	r4, [pc, #88]	; (8003188 <us_get+0x60>)
	switch (filter) {
 800312e:	2d01      	cmp	r5, #1
 8003130:	6820      	ldr	r0, [r4, #0]
 8003132:	d01f      	beq.n	8003174 <us_get+0x4c>
 8003134:	2d02      	cmp	r5, #2
		gpio_pin_write(port_a, S2, 0);
 8003136:	f04f 0200 	mov.w	r2, #0
 800313a:	f04f 010d 	mov.w	r1, #13
	switch (filter) {
 800313e:	d01b      	beq.n	8003178 <us_get+0x50>
		gpio_pin_write(port_a, S2, 0);
 8003140:	f002 fa1f 	bl	8005582 <gpio_pin_write>
	if (z_syscall_trap()) {
		return (s32_t) arch_syscall_invoke1(*(uintptr_t *)&us, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
 8003144:	203c      	movs	r0, #60	; 0x3c
 8003146:	f002 ffe5 	bl	8006114 <z_impl_k_usleep>
		gpio_pin_write(port_a, S3, 0);
 800314a:	2200      	movs	r2, #0
		gpio_pin_write(port_a, S3, 1);
 800314c:	210e      	movs	r1, #14
 800314e:	6820      	ldr	r0, [r4, #0]
 8003150:	f002 fa17 	bl	8005582 <gpio_pin_write>
	u32_t val = 0;
 8003154:	2300      	movs	r3, #0
 8003156:	9301      	str	r3, [sp, #4]
		gpio_pin_read(port_a, S_OUT, &val);
 8003158:	6820      	ldr	r0, [r4, #0]
 800315a:	6843      	ldr	r3, [r0, #4]
 800315c:	220f      	movs	r2, #15
 800315e:	689d      	ldr	r5, [r3, #8]
 8003160:	2100      	movs	r1, #0
 8003162:	ab01      	add	r3, sp, #4
 8003164:	47a8      	blx	r5
	} while (val == 0);
 8003166:	9b01      	ldr	r3, [sp, #4]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f5      	beq.n	8003158 <us_get+0x30>
}
 800316c:	4b07      	ldr	r3, [pc, #28]	; (800318c <us_get+0x64>)
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	b003      	add	sp, #12
 8003172:	bd30      	pop	{r4, r5, pc}
		gpio_pin_write(port_a, S2, 1);
 8003174:	462a      	mov	r2, r5
 8003176:	210d      	movs	r1, #13
		gpio_pin_write(port_a, S2, 0);
 8003178:	f002 fa03 	bl	8005582 <gpio_pin_write>
 800317c:	203c      	movs	r0, #60	; 0x3c
 800317e:	f002 ffc9 	bl	8006114 <z_impl_k_usleep>
		gpio_pin_write(port_a, S3, 1);
 8003182:	2201      	movs	r2, #1
 8003184:	e7e2      	b.n	800314c <us_get+0x24>
 8003186:	bf00      	nop
 8003188:	20000034 	.word	0x20000034
 800318c:	20000040 	.word	0x20000040

08003190 <color_sensor_init>:

/****************Public Fucntions*********************/

s8_t color_sensor_init()
{
 8003190:	b538      	push	{r3, r4, r5, lr}
 8003192:	482c      	ldr	r0, [pc, #176]	; (8003244 <color_sensor_init+0xb4>)
	port_a = device_get_binding(A_PORT);
 8003194:	4d2c      	ldr	r5, [pc, #176]	; (8003248 <color_sensor_init+0xb8>)
 8003196:	f001 fc69 	bl	8004a6c <z_impl_device_get_binding>
 800319a:	6028      	str	r0, [r5, #0]
	if (!port_a) {
 800319c:	b928      	cbnz	r0, 80031aa <color_sensor_init+0x1a>
		printk("Cannot find %s!\n", A_PORT);
 800319e:	482b      	ldr	r0, [pc, #172]	; (800324c <color_sensor_init+0xbc>)
 80031a0:	4928      	ldr	r1, [pc, #160]	; (8003244 <color_sensor_init+0xb4>)
 80031a2:	f002 fbe6 	bl	8005972 <printk>
		return E_FAIL;
 80031a6:	2001      	movs	r0, #1
	return init();
}
 80031a8:	bd38      	pop	{r3, r4, r5, pc}
	ret |= gpio_pin_configure(port_a, S0, GPIO_DIR_OUT);
 80031aa:	2201      	movs	r2, #1
 80031ac:	4611      	mov	r1, r2
 80031ae:	f002 f9f2 	bl	8005596 <gpio_pin_configure>
	ret |= gpio_pin_configure(port_a, S1, GPIO_DIR_OUT);
 80031b2:	2201      	movs	r2, #1
	ret |= gpio_pin_configure(port_a, S0, GPIO_DIR_OUT);
 80031b4:	4604      	mov	r4, r0
	ret |= gpio_pin_configure(port_a, S1, GPIO_DIR_OUT);
 80031b6:	2104      	movs	r1, #4
 80031b8:	6828      	ldr	r0, [r5, #0]
 80031ba:	f002 f9ec 	bl	8005596 <gpio_pin_configure>
	ret |= gpio_pin_configure(port_a, S2, GPIO_DIR_OUT);
 80031be:	2201      	movs	r2, #1
	ret |= gpio_pin_configure(port_a, S1, GPIO_DIR_OUT);
 80031c0:	4304      	orrs	r4, r0
	ret |= gpio_pin_configure(port_a, S2, GPIO_DIR_OUT);
 80031c2:	210d      	movs	r1, #13
 80031c4:	6828      	ldr	r0, [r5, #0]
 80031c6:	f002 f9e6 	bl	8005596 <gpio_pin_configure>
	ret |= gpio_pin_configure(port_a, S1, GPIO_DIR_OUT);
 80031ca:	b264      	sxtb	r4, r4
	ret |= gpio_pin_configure(port_a, S2, GPIO_DIR_OUT);
 80031cc:	4304      	orrs	r4, r0
	ret |= gpio_pin_configure(port_a, S3, GPIO_DIR_OUT);
 80031ce:	2201      	movs	r2, #1
 80031d0:	210e      	movs	r1, #14
 80031d2:	6828      	ldr	r0, [r5, #0]
 80031d4:	f002 f9df 	bl	8005596 <gpio_pin_configure>
	ret |= gpio_pin_configure(port_a, S2, GPIO_DIR_OUT);
 80031d8:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(port_a, S0, 1);
 80031da:	2201      	movs	r2, #1
 80031dc:	4611      	mov	r1, r2
	ret |= gpio_pin_configure(port_a, S3, GPIO_DIR_OUT);
 80031de:	4304      	orrs	r4, r0
	ret |= gpio_pin_write(port_a, S0, 1);
 80031e0:	6828      	ldr	r0, [r5, #0]
 80031e2:	f002 f9ce 	bl	8005582 <gpio_pin_write>
	ret |= gpio_pin_configure(port_a, S3, GPIO_DIR_OUT);
 80031e6:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(port_a, S0, 1);
 80031e8:	4304      	orrs	r4, r0
	ret |= gpio_pin_write(port_a, S1, 0);
 80031ea:	2200      	movs	r2, #0
 80031ec:	2104      	movs	r1, #4
 80031ee:	6828      	ldr	r0, [r5, #0]
 80031f0:	f002 f9c7 	bl	8005582 <gpio_pin_write>
	ret |= gpio_pin_write(port_a, S0, 1);
 80031f4:	b264      	sxtb	r4, r4
	ret |= gpio_pin_write(port_a, S1, 0);
 80031f6:	4304      	orrs	r4, r0
	ret |= gpio_pin_configure(port_a, S_OUT, INT_FLAGS);
 80031f8:	210f      	movs	r1, #15
 80031fa:	2262      	movs	r2, #98	; 0x62
 80031fc:	6828      	ldr	r0, [r5, #0]
 80031fe:	f002 f9ca 	bl	8005596 <gpio_pin_configure>
	ret |= gpio_pin_write(port_a, S1, 0);
 8003202:	b264      	sxtb	r4, r4
				      u32_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
 8003204:	4912      	ldr	r1, [pc, #72]	; (8003250 <color_sensor_init+0xc0>)
 8003206:	4b13      	ldr	r3, [pc, #76]	; (8003254 <color_sensor_init+0xc4>)
 8003208:	604b      	str	r3, [r1, #4]
	ret |= gpio_pin_configure(port_a, S_OUT, INT_FLAGS);
 800320a:	4304      	orrs	r4, r0
	ret |= gpio_add_callback(port_a, &gpio_cb);
 800320c:	6828      	ldr	r0, [r5, #0]
	callback->pin_mask = pin_mask;
 800320e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003212:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->driver_api;

	if (api->manage_callback == NULL) {
 8003214:	6843      	ldr	r3, [r0, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
	ret |= gpio_pin_configure(port_a, S_OUT, INT_FLAGS);
 8003218:	b264      	sxtb	r4, r4
 800321a:	b16b      	cbz	r3, 8003238 <color_sensor_init+0xa8>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
 800321c:	2201      	movs	r2, #1
 800321e:	4798      	blx	r3
	ret |= gpio_add_callback(port_a, &gpio_cb);
 8003220:	4304      	orrs	r4, r0
 8003222:	b264      	sxtb	r4, r4
	ret |= gpio_pin_enable_callback(port_a, S_OUT);
 8003224:	6828      	ldr	r0, [r5, #0]
	if (api->enable_callback == NULL) {
 8003226:	6843      	ldr	r3, [r0, #4]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	b143      	cbz	r3, 800323e <color_sensor_init+0xae>
	return api->enable_callback(port, access_op, pin);
 800322c:	220f      	movs	r2, #15
 800322e:	2100      	movs	r1, #0
 8003230:	4798      	blx	r3
 8003232:	4320      	orrs	r0, r4
 8003234:	b240      	sxtb	r0, r0
	return ret;
 8003236:	e7b7      	b.n	80031a8 <color_sensor_init+0x18>
		return -ENOTSUP;
 8003238:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800323c:	e7f0      	b.n	8003220 <color_sensor_init+0x90>
		return -ENOTSUP;
 800323e:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003242:	e7f6      	b.n	8003232 <color_sensor_init+0xa2>
 8003244:	080069cb 	.word	0x080069cb
 8003248:	20000034 	.word	0x20000034
 800324c:	080069a1 	.word	0x080069a1
 8003250:	20000024 	.word	0x20000024
 8003254:	080030ed 	.word	0x080030ed

08003258 <color_get>:

color_t color_get()
{
 8003258:	b570      	push	{r4, r5, r6, lr}
	red = us_get(red_f);
 800325a:	2000      	movs	r0, #0
 800325c:	f7ff ff64 	bl	8003128 <us_get>
 8003260:	4e15      	ldr	r6, [pc, #84]	; (80032b8 <color_get+0x60>)
 8003262:	6030      	str	r0, [r6, #0]
	return z_impl_k_sleep(ms);
 8003264:	200a      	movs	r0, #10
 8003266:	f001 ff3f 	bl	80050e8 <z_impl_k_sleep>
	k_sleep(10);
	green = us_get(green_f);
 800326a:	2001      	movs	r0, #1
 800326c:	f7ff ff5c 	bl	8003128 <us_get>
 8003270:	4c12      	ldr	r4, [pc, #72]	; (80032bc <color_get+0x64>)
 8003272:	6020      	str	r0, [r4, #0]
 8003274:	200a      	movs	r0, #10
 8003276:	f001 ff37 	bl	80050e8 <z_impl_k_sleep>
	k_sleep(10);
	blue = us_get(blue_f);
 800327a:	2002      	movs	r0, #2
 800327c:	f7ff ff54 	bl	8003128 <us_get>
 8003280:	4d0f      	ldr	r5, [pc, #60]	; (80032c0 <color_get+0x68>)
 8003282:	6028      	str	r0, [r5, #0]
 8003284:	200a      	movs	r0, #10
 8003286:	f001 ff2f 	bl	80050e8 <z_impl_k_sleep>
	k_sleep(10);
	if (red > 80 && green < 35 && green > 20) {
 800328a:	6833      	ldr	r3, [r6, #0]
 800328c:	2b50      	cmp	r3, #80	; 0x50
 800328e:	d906      	bls.n	800329e <color_get+0x46>
 8003290:	6823      	ldr	r3, [r4, #0]
 8003292:	3b15      	subs	r3, #21
 8003294:	2b0d      	cmp	r3, #13
		return RED;
 8003296:	bf8c      	ite	hi
 8003298:	2003      	movhi	r0, #3
 800329a:	2000      	movls	r0, #0
	} else if (red < 40 && blue < 40 && green < 20) {
		return BLUE;
	} else {
		return CLEAR;
	}
}
 800329c:	bd70      	pop	{r4, r5, r6, pc}
	} else if (red < 40 && blue < 40 && green < 20) {
 800329e:	2b27      	cmp	r3, #39	; 0x27
 80032a0:	d808      	bhi.n	80032b4 <color_get+0x5c>
 80032a2:	682b      	ldr	r3, [r5, #0]
 80032a4:	2b27      	cmp	r3, #39	; 0x27
 80032a6:	d805      	bhi.n	80032b4 <color_get+0x5c>
 80032a8:	6823      	ldr	r3, [r4, #0]
 80032aa:	2b13      	cmp	r3, #19
		return BLUE;
 80032ac:	bf8c      	ite	hi
 80032ae:	2003      	movhi	r0, #3
 80032b0:	2002      	movls	r0, #2
 80032b2:	e7f3      	b.n	800329c <color_get+0x44>
		return CLEAR;
 80032b4:	2003      	movs	r0, #3
 80032b6:	e7f1      	b.n	800329c <color_get+0x44>
 80032b8:	20000038 	.word	0x20000038
 80032bc:	20000030 	.word	0x20000030
 80032c0:	2000001c 	.word	0x2000001c

080032c4 <echo_us_callback>:
/**
 * @brief Interrupt to count the time (in us) that an Echo signal
 * needs to go and bounce back from an Object.
 */
void echo_us_callback(struct device *gpio, struct gpio_callback *cb, u32_t pins)
{
 80032c4:	b538      	push	{r3, r4, r5, lr}
	if (0 == (call_count_cb % 2)) {
 80032c6:	4c0b      	ldr	r4, [pc, #44]	; (80032f4 <echo_us_callback+0x30>)
 80032c8:	4d0b      	ldr	r5, [pc, #44]	; (80032f8 <echo_us_callback+0x34>)
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	f013 0f01 	tst.w	r3, #1
 80032d0:	d106      	bne.n	80032e0 <echo_us_callback+0x1c>
 80032d2:	f000 fba3 	bl	8003a1c <z_timer_cycle_get_32>
		/*Read the hardware clock*/
		start_cycles_cb = k_cycle_get_32();
 80032d6:	6028      	str	r0, [r5, #0]
		/*Read the hardware clock*/
		stop_cycles_cb = k_cycle_get_32();
		cycles_spent_cb = stop_cycles_cb - start_cycles_cb;
		/*Convert hardware cycles to microseconds*/
		echo_us_cb = k_cyc_to_us_floor32(cycles_spent_cb);
		call_count_cb++;
 80032d8:	6823      	ldr	r3, [r4, #0]
 80032da:	3301      	adds	r3, #1
 80032dc:	6023      	str	r3, [r4, #0]
	}
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	f000 fb9c 	bl	8003a1c <z_timer_cycle_get_32>
		cycles_spent_cb = stop_cycles_cb - start_cycles_cb;
 80032e4:	682b      	ldr	r3, [r5, #0]
 80032e6:	1ac0      	subs	r0, r0, r3
 80032e8:	2360      	movs	r3, #96	; 0x60
 80032ea:	fbb0 f0f3 	udiv	r0, r0, r3
		echo_us_cb = k_cyc_to_us_floor32(cycles_spent_cb);
 80032ee:	4b03      	ldr	r3, [pc, #12]	; (80032fc <echo_us_callback+0x38>)
 80032f0:	6018      	str	r0, [r3, #0]
 80032f2:	e7f1      	b.n	80032d8 <echo_us_callback+0x14>
 80032f4:	20000048 	.word	0x20000048
 80032f8:	2000005c 	.word	0x2000005c
 80032fc:	2000004c 	.word	0x2000004c

08003300 <usonic_init>:
{
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	481d      	ldr	r0, [pc, #116]	; (8003378 <usonic_init+0x78>)
	a_port = device_get_binding(A_PORT);
 8003304:	4d1d      	ldr	r5, [pc, #116]	; (800337c <usonic_init+0x7c>)
 8003306:	f001 fbb1 	bl	8004a6c <z_impl_device_get_binding>
 800330a:	6028      	str	r0, [r5, #0]
	if (!a_port) {
 800330c:	b928      	cbnz	r0, 800331a <usonic_init+0x1a>
		printk("Cannot find %s!\n", A_PORT);
 800330e:	481c      	ldr	r0, [pc, #112]	; (8003380 <usonic_init+0x80>)
 8003310:	4919      	ldr	r1, [pc, #100]	; (8003378 <usonic_init+0x78>)
 8003312:	f002 fb2e 	bl	8005972 <printk>
		return E_FAIL;
 8003316:	2001      	movs	r0, #1
}
 8003318:	bd70      	pop	{r4, r5, r6, pc}
	return api->config(port, access_op, pin, flags);
 800331a:	6843      	ldr	r3, [r0, #4]
 800331c:	2208      	movs	r2, #8
 800331e:	681c      	ldr	r4, [r3, #0]
 8003320:	2100      	movs	r1, #0
 8003322:	2301      	movs	r3, #1
 8003324:	47a0      	blx	r4
 8003326:	4604      	mov	r4, r0
	ret |= gpio_pin_configure(a_port, ECHO, INT_FLAGS);
 8003328:	6828      	ldr	r0, [r5, #0]
 800332a:	6843      	ldr	r3, [r0, #4]
 800332c:	2100      	movs	r1, #0
 800332e:	681e      	ldr	r6, [r3, #0]
 8003330:	2209      	movs	r2, #9
 8003332:	2362      	movs	r3, #98	; 0x62
 8003334:	47b0      	blx	r6
	callback->handler = handler;
 8003336:	4913      	ldr	r1, [pc, #76]	; (8003384 <usonic_init+0x84>)
 8003338:	4b13      	ldr	r3, [pc, #76]	; (8003388 <usonic_init+0x88>)
 800333a:	604b      	str	r3, [r1, #4]
 800333c:	4304      	orrs	r4, r0
	ret |= gpio_add_callback(a_port, &gpio_cb);
 800333e:	6828      	ldr	r0, [r5, #0]
	callback->pin_mask = pin_mask;
 8003340:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003344:	608b      	str	r3, [r1, #8]
	if (api->manage_callback == NULL) {
 8003346:	6843      	ldr	r3, [r0, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
	ret |= gpio_pin_configure(a_port, ECHO, INT_FLAGS);
 800334a:	b264      	sxtb	r4, r4
 800334c:	b16b      	cbz	r3, 800336a <usonic_init+0x6a>
	return api->manage_callback(port, callback, true);
 800334e:	2201      	movs	r2, #1
 8003350:	4798      	blx	r3
	ret |= gpio_add_callback(a_port, &gpio_cb);
 8003352:	4304      	orrs	r4, r0
 8003354:	b264      	sxtb	r4, r4
	ret |= gpio_pin_enable_callback(a_port, ECHO);
 8003356:	6828      	ldr	r0, [r5, #0]
	if (api->enable_callback == NULL) {
 8003358:	6843      	ldr	r3, [r0, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	b143      	cbz	r3, 8003370 <usonic_init+0x70>
	return api->enable_callback(port, access_op, pin);
 800335e:	2209      	movs	r2, #9
 8003360:	2100      	movs	r1, #0
 8003362:	4798      	blx	r3
 8003364:	4320      	orrs	r0, r4
	return ret;
 8003366:	b2c0      	uxtb	r0, r0
 8003368:	e7d6      	b.n	8003318 <usonic_init+0x18>
		return -ENOTSUP;
 800336a:	f06f 0085 	mvn.w	r0, #133	; 0x85
 800336e:	e7f0      	b.n	8003352 <usonic_init+0x52>
		return -ENOTSUP;
 8003370:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8003374:	e7f6      	b.n	8003364 <usonic_init+0x64>
 8003376:	bf00      	nop
 8003378:	080069cb 	.word	0x080069cb
 800337c:	20000044 	.word	0x20000044
 8003380:	080069a1 	.word	0x080069a1
 8003384:	20000050 	.word	0x20000050
 8003388:	080032c5 	.word	0x080032c5

0800338c <usonic_distance_cm_get>:
{
 800338c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (gpio_pin_write(a_port, TRIGGER, LOW)) {
 800338e:	4c1a      	ldr	r4, [pc, #104]	; (80033f8 <usonic_distance_cm_get+0x6c>)
	u32_t val = 0;
 8003390:	2300      	movs	r3, #0
 8003392:	9301      	str	r3, [sp, #4]
	if (gpio_pin_write(a_port, TRIGGER, LOW)) {
 8003394:	6820      	ldr	r0, [r4, #0]
	return api->write(port, access_op, pin, value);
 8003396:	6842      	ldr	r2, [r0, #4]
 8003398:	4619      	mov	r1, r3
 800339a:	6855      	ldr	r5, [r2, #4]
 800339c:	2208      	movs	r2, #8
 800339e:	47a8      	blx	r5
 80033a0:	4605      	mov	r5, r0
 80033a2:	b110      	cbz	r0, 80033aa <usonic_distance_cm_get+0x1e>
		return E_FAIL;
 80033a4:	2001      	movs	r0, #1
}
 80033a6:	b002      	add	sp, #8
 80033a8:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_usleep(us);
 80033aa:	203c      	movs	r0, #60	; 0x3c
 80033ac:	f002 feb2 	bl	8006114 <z_impl_k_usleep>
	if (gpio_pin_write(a_port, TRIGGER, HIGH)) {
 80033b0:	6820      	ldr	r0, [r4, #0]
 80033b2:	6843      	ldr	r3, [r0, #4]
 80033b4:	2208      	movs	r2, #8
 80033b6:	685e      	ldr	r6, [r3, #4]
 80033b8:	4629      	mov	r1, r5
 80033ba:	2301      	movs	r3, #1
 80033bc:	47b0      	blx	r6
 80033be:	2800      	cmp	r0, #0
 80033c0:	d1f0      	bne.n	80033a4 <usonic_distance_cm_get+0x18>
		if (gpio_pin_read(a_port, ECHO, &val)) {
 80033c2:	6820      	ldr	r0, [r4, #0]
	return api->read(port, access_op, pin, value);
 80033c4:	6843      	ldr	r3, [r0, #4]
 80033c6:	2209      	movs	r2, #9
 80033c8:	689d      	ldr	r5, [r3, #8]
 80033ca:	2100      	movs	r1, #0
 80033cc:	ab01      	add	r3, sp, #4
 80033ce:	47a8      	blx	r5
 80033d0:	2800      	cmp	r0, #0
 80033d2:	d1e7      	bne.n	80033a4 <usonic_distance_cm_get+0x18>
	} while (val);
 80033d4:	9b01      	ldr	r3, [sp, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1f3      	bne.n	80033c2 <usonic_distance_cm_get+0x36>
	return (u32_t)DISTANCE_CM(echo_us_cb);
 80033da:	4b08      	ldr	r3, [pc, #32]	; (80033fc <usonic_distance_cm_get+0x70>)
 80033dc:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003400 <usonic_distance_cm_get+0x74>
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033f0:	ee17 0a90 	vmov	r0, s15
 80033f4:	e7d7      	b.n	80033a6 <usonic_distance_cm_get+0x1a>
 80033f6:	bf00      	nop
 80033f8:	20000044 	.word	0x20000044
 80033fc:	2000004c 	.word	0x2000004c
 8003400:	3c8c7e28 	.word	0x3c8c7e28

08003404 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8003404:	680b      	ldr	r3, [r1, #0]
 8003406:	3301      	adds	r3, #1
 8003408:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 800340a:	4b01      	ldr	r3, [pc, #4]	; (8003410 <char_out+0xc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4718      	bx	r3
 8003410:	200011fc 	.word	0x200011fc

08003414 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8003414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003418:	b085      	sub	sp, #20
 800341a:	469b      	mov	fp, r3
 800341c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800341e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80034a8 <_printk_dec_ulong+0x94>
 8003422:	2c01      	cmp	r4, #1
 8003424:	bfb8      	it	lt
 8003426:	2401      	movlt	r4, #1
 8003428:	2b01      	cmp	r3, #1
 800342a:	bf0c      	ite	eq
 800342c:	2330      	moveq	r3, #48	; 0x30
 800342e:	2320      	movne	r3, #32
 8003430:	4616      	mov	r6, r2
 8003432:	4682      	mov	sl, r0
 8003434:	4688      	mov	r8, r1
 8003436:	9302      	str	r3, [sp, #8]
 8003438:	2501      	movs	r5, #1
 800343a:	270a      	movs	r7, #10
 800343c:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 800343e:	fbb6 f3f9 	udiv	r3, r6, r9
 8003442:	9301      	str	r3, [sp, #4]
 8003444:	b90a      	cbnz	r2, 800344a <_printk_dec_ulong+0x36>
 8003446:	45b1      	cmp	r9, r6
 8003448:	d81d      	bhi.n	8003486 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 800344a:	9b01      	ldr	r3, [sp, #4]
 800344c:	4641      	mov	r1, r8
 800344e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8003452:	47d0      	blx	sl
			digits++;
 8003454:	3501      	adds	r5, #1
			found_largest_digit = 1;
 8003456:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 8003458:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 800345a:	3f01      	subs	r7, #1
	while (pos >= 10) {
 800345c:	2f01      	cmp	r7, #1
		remainder %= pos;
 800345e:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
 8003462:	f04f 030a 	mov.w	r3, #10
 8003466:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 800346a:	d1e8      	bne.n	800343e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
 800346c:	4641      	mov	r1, r8
 800346e:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8003472:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 8003474:	f1bb 0f03 	cmp.w	fp, #3
 8003478:	d102      	bne.n	8003480 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
 800347a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 800347c:	2c00      	cmp	r4, #0
 800347e:	dc0e      	bgt.n	800349e <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
 8003480:	b005      	add	sp, #20
 8003482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8003486:	42bc      	cmp	r4, r7
 8003488:	dbe6      	blt.n	8003458 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 800348a:	f1bb 0f02 	cmp.w	fp, #2
 800348e:	d8e3      	bhi.n	8003458 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8003490:	4641      	mov	r1, r8
 8003492:	9802      	ldr	r0, [sp, #8]
 8003494:	9203      	str	r2, [sp, #12]
			digits++;
 8003496:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8003498:	47d0      	blx	sl
			digits++;
 800349a:	9a03      	ldr	r2, [sp, #12]
 800349c:	e7dc      	b.n	8003458 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 800349e:	4641      	mov	r1, r8
 80034a0:	2020      	movs	r0, #32
 80034a2:	47d0      	blx	sl
 80034a4:	3c01      	subs	r4, #1
 80034a6:	e7e9      	b.n	800347c <_printk_dec_ulong+0x68>
 80034a8:	3b9aca00 	.word	0x3b9aca00

080034ac <__printk_hook_install>:
	_char_out = fn;
 80034ac:	4b01      	ldr	r3, [pc, #4]	; (80034b4 <__printk_hook_install+0x8>)
 80034ae:	6018      	str	r0, [r3, #0]
}
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	200011fc 	.word	0x200011fc

080034b8 <vprintk>:
{
 80034b8:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
 80034ba:	2300      	movs	r3, #0
 80034bc:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4803      	ldr	r0, [pc, #12]	; (80034d0 <vprintk+0x18>)
 80034c4:	a901      	add	r1, sp, #4
 80034c6:	f002 f8e4 	bl	8005692 <z_vprintk>
}
 80034ca:	b003      	add	sp, #12
 80034cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80034d0:	08003405 	.word	0x08003405

080034d4 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 80034d4:	f04f 0210 	mov.w	r2, #16
 80034d8:	f3ef 8311 	mrs	r3, BASEPRI
 80034dc:	f382 8811 	msr	BASEPRI, r2
 80034e0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 80034e4:	f383 8811 	msr	BASEPRI, r3
 80034e8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 80034ec:	4b02      	ldr	r3, [pc, #8]	; (80034f8 <st_stm32f4_init+0x24>)
 80034ee:	4a03      	ldr	r2, [pc, #12]	; (80034fc <st_stm32f4_init+0x28>)
 80034f0:	601a      	str	r2, [r3, #0]

	return 0;
}
 80034f2:	2000      	movs	r0, #0
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	20001220 	.word	0x20001220
 80034fc:	00f42400 	.word	0x00f42400

08003500 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8003500:	280a      	cmp	r0, #10
{
 8003502:	b538      	push	{r3, r4, r5, lr}
 8003504:	4604      	mov	r4, r0
 8003506:	4d07      	ldr	r5, [pc, #28]	; (8003524 <console_out+0x24>)
	if ('\n' == c) {
 8003508:	d104      	bne.n	8003514 <console_out+0x14>
 800350a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 800350c:	6843      	ldr	r3, [r0, #4]
 800350e:	210d      	movs	r1, #13
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8003514:	6828      	ldr	r0, [r5, #0]
 8003516:	6843      	ldr	r3, [r0, #4]
 8003518:	b2e1      	uxtb	r1, r4
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	4798      	blx	r3

	return c;
}
 800351e:	4620      	mov	r0, r4
 8003520:	bd38      	pop	{r3, r4, r5, pc}
 8003522:	bf00      	nop
 8003524:	20000060 	.word	0x20000060

08003528 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8003528:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 800352a:	4c04      	ldr	r4, [pc, #16]	; (800353c <uart_console_hook_install+0x14>)
 800352c:	4620      	mov	r0, r4
 800352e:	f000 fdb7 	bl	80040a0 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8003532:	4620      	mov	r0, r4
}
 8003534:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 8003538:	f7ff bfb8 	b.w	80034ac <__printk_hook_install>
 800353c:	08003501 	.word	0x08003501

08003540 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8003540:	b508      	push	{r3, lr}
 8003542:	4804      	ldr	r0, [pc, #16]	; (8003554 <uart_console_init+0x14>)
 8003544:	f001 fa92 	bl	8004a6c <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8003548:	4b03      	ldr	r3, [pc, #12]	; (8003558 <uart_console_init+0x18>)
 800354a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 800354c:	f7ff ffec 	bl	8003528 <uart_console_hook_install>

	return 0;
}
 8003550:	2000      	movs	r0, #0
 8003552:	bd08      	pop	{r3, pc}
 8003554:	080069df 	.word	0x080069df
 8003558:	20000060 	.word	0x20000060

0800355c <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 800355c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8003560:	6895      	ldr	r5, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8003562:	4e0d      	ldr	r6, [pc, #52]	; (8003598 <__stm32_exti_isr+0x3c>)
{
 8003564:	4604      	mov	r4, r0
 8003566:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8003568:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 800356c:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 8003570:	42bc      	cmp	r4, r7
 8003572:	db01      	blt.n	8003578 <__stm32_exti_isr+0x1c>
		}
	}
}
 8003574:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003578:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 800357a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 800357e:	ea33 0202 	bics.w	r2, r3, r2
 8003582:	d107      	bne.n	8003594 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8003584:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8003586:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 800358a:	b11b      	cbz	r3, 8003594 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 800358c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8003590:	4620      	mov	r0, r4
 8003592:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8003594:	3401      	adds	r4, #1
 8003596:	e7eb      	b.n	8003570 <__stm32_exti_isr+0x14>
 8003598:	40013c00 	.word	0x40013c00

0800359c <stm32_exti_enable>:
	if (line < 32) {
 800359c:	281f      	cmp	r0, #31
{
 800359e:	b508      	push	{r3, lr}
	if (line < 32) {
 80035a0:	dd02      	ble.n	80035a8 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 80035a2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 80035a6:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 80035a8:	4a06      	ldr	r2, [pc, #24]	; (80035c4 <stm32_exti_enable+0x28>)
		LL_EXTI_EnableIT_0_31(1 << line);
 80035aa:	2301      	movs	r3, #1
 80035ac:	6811      	ldr	r1, [r2, #0]
 80035ae:	4083      	lsls	r3, r0
 80035b0:	430b      	orrs	r3, r1
	if (line < ARRAY_SIZE(exti_irq_table)) {
 80035b2:	2816      	cmp	r0, #22
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	dcf4      	bgt.n	80035a2 <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 80035b8:	4b03      	ldr	r3, [pc, #12]	; (80035c8 <stm32_exti_enable+0x2c>)
 80035ba:	5618      	ldrsb	r0, [r3, r0]
 80035bc:	f000 fad4 	bl	8003b68 <arch_irq_enable>
	return 0;
 80035c0:	2000      	movs	r0, #0
 80035c2:	e7f0      	b.n	80035a6 <stm32_exti_enable+0xa>
 80035c4:	40013c00 	.word	0x40013c00
 80035c8:	080069e6 	.word	0x080069e6

080035cc <stm32_exti_disable>:
	if (line < 32) {
 80035cc:	281f      	cmp	r0, #31
 80035ce:	dc06      	bgt.n	80035de <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 80035d0:	4903      	ldr	r1, [pc, #12]	; (80035e0 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 80035d2:	2201      	movs	r2, #1
 80035d4:	680b      	ldr	r3, [r1, #0]
 80035d6:	4082      	lsls	r2, r0
 80035d8:	ea23 0302 	bic.w	r3, r3, r2
 80035dc:	600b      	str	r3, [r1, #0]
}
 80035de:	4770      	bx	lr
 80035e0:	40013c00 	.word	0x40013c00

080035e4 <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80035e4:	07ca      	lsls	r2, r1, #31
{
 80035e6:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 80035e8:	d507      	bpl.n	80035fa <stm32_exti_trigger+0x16>
		if (line < 32) {
 80035ea:	281f      	cmp	r0, #31
 80035ec:	dc05      	bgt.n	80035fa <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR, ExtiLine);
 80035ee:	4b08      	ldr	r3, [pc, #32]	; (8003610 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 80035f0:	2201      	movs	r2, #1
 80035f2:	689c      	ldr	r4, [r3, #8]
 80035f4:	4082      	lsls	r2, r0
 80035f6:	4322      	orrs	r2, r4
 80035f8:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 80035fa:	078b      	lsls	r3, r1, #30
 80035fc:	d507      	bpl.n	800360e <stm32_exti_trigger+0x2a>
		if (line < 32) {
 80035fe:	281f      	cmp	r0, #31
 8003600:	dc05      	bgt.n	800360e <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8003602:	4a03      	ldr	r2, [pc, #12]	; (8003610 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8003604:	2301      	movs	r3, #1
 8003606:	68d1      	ldr	r1, [r2, #12]
 8003608:	4083      	lsls	r3, r0
 800360a:	430b      	orrs	r3, r1
 800360c:	60d3      	str	r3, [r2, #12]
}
 800360e:	bd10      	pop	{r4, pc}
 8003610:	40013c00 	.word	0x40013c00

08003614 <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8003614:	4907      	ldr	r1, [pc, #28]	; (8003634 <stm32_exti_set_callback+0x20>)
{
 8003616:	b530      	push	{r4, r5, lr}
 8003618:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 800361a:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 800361e:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 8003622:	b921      	cbnz	r1, 800362e <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8003624:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8003628:	606b      	str	r3, [r5, #4]

	return 0;
 800362a:	4608      	mov	r0, r1
}
 800362c:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 800362e:	f06f 000f 	mvn.w	r0, #15
 8003632:	e7fb      	b.n	800362c <stm32_exti_set_callback+0x18>
 8003634:	2000126c 	.word	0x2000126c

08003638 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 8003638:	4b04      	ldr	r3, [pc, #16]	; (800364c <stm32_exti_unset_callback+0x14>)
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8003640:	2300      	movs	r3, #0
 8003642:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 8003646:	604b      	str	r3, [r1, #4]
}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	2000126c 	.word	0x2000126c

08003650 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8003650:	680b      	ldr	r3, [r1, #0]
{
 8003652:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8003654:	2b03      	cmp	r3, #3
 8003656:	d82d      	bhi.n	80036b4 <stm32_clock_control_on+0x64>
 8003658:	e8df f003 	tbb	[pc, r3]
 800365c:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8003660:	4a16      	ldr	r2, [pc, #88]	; (80036bc <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8003662:	684b      	ldr	r3, [r1, #4]
 8003664:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8003666:	4319      	orrs	r1, r3
 8003668:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800366a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800366c:	4013      	ands	r3, r2
 800366e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8003670:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8003672:	2000      	movs	r0, #0
}
 8003674:	b004      	add	sp, #16
 8003676:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003678:	4a10      	ldr	r2, [pc, #64]	; (80036bc <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 800367a:	684b      	ldr	r3, [r1, #4]
 800367c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800367e:	4319      	orrs	r1, r3
 8003680:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003682:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003684:	4013      	ands	r3, r2
 8003686:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003688:	9b01      	ldr	r3, [sp, #4]
 800368a:	e7f2      	b.n	8003672 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800368c:	4a0b      	ldr	r2, [pc, #44]	; (80036bc <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 800368e:	684b      	ldr	r3, [r1, #4]
 8003690:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8003692:	4319      	orrs	r1, r3
 8003694:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8003696:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003698:	4013      	ands	r3, r2
 800369a:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 800369c:	9b02      	ldr	r3, [sp, #8]
 800369e:	e7e8      	b.n	8003672 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80036a0:	4a06      	ldr	r2, [pc, #24]	; (80036bc <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 80036a2:	684b      	ldr	r3, [r1, #4]
 80036a4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80036a6:	4319      	orrs	r1, r3
 80036a8:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80036aa:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80036ac:	4013      	ands	r3, r2
 80036ae:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 80036b0:	9b03      	ldr	r3, [sp, #12]
 80036b2:	e7de      	b.n	8003672 <stm32_clock_control_on+0x22>
		return -ENOTSUP;
 80036b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80036b8:	e7dc      	b.n	8003674 <stm32_clock_control_on+0x24>
 80036ba:	bf00      	nop
 80036bc:	40023800 	.word	0x40023800

080036c0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 80036c0:	680b      	ldr	r3, [r1, #0]
 80036c2:	2b03      	cmp	r3, #3
 80036c4:	d820      	bhi.n	8003708 <stm32_clock_control_off+0x48>
 80036c6:	e8df f003 	tbb	[pc, r3]
 80036ca:	0a02      	.short	0x0a02
 80036cc:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 80036ce:	4a10      	ldr	r2, [pc, #64]	; (8003710 <stm32_clock_control_off+0x50>)
 80036d0:	6849      	ldr	r1, [r1, #4]
 80036d2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80036d4:	ea23 0301 	bic.w	r3, r3, r1
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 80036da:	2000      	movs	r0, #0
 80036dc:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 80036de:	4a0c      	ldr	r2, [pc, #48]	; (8003710 <stm32_clock_control_off+0x50>)
 80036e0:	6849      	ldr	r1, [r1, #4]
 80036e2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 80036e4:	ea23 0301 	bic.w	r3, r3, r1
 80036e8:	6353      	str	r3, [r2, #52]	; 0x34
 80036ea:	e7f6      	b.n	80036da <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80036ec:	4a08      	ldr	r2, [pc, #32]	; (8003710 <stm32_clock_control_off+0x50>)
 80036ee:	6849      	ldr	r1, [r1, #4]
 80036f0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80036f2:	ea23 0301 	bic.w	r3, r3, r1
 80036f6:	6413      	str	r3, [r2, #64]	; 0x40
 80036f8:	e7ef      	b.n	80036da <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 80036fa:	4a05      	ldr	r2, [pc, #20]	; (8003710 <stm32_clock_control_off+0x50>)
 80036fc:	6849      	ldr	r1, [r1, #4]
 80036fe:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8003700:	ea23 0301 	bic.w	r3, r3, r1
 8003704:	6453      	str	r3, [r2, #68]	; 0x44
 8003706:	e7e8      	b.n	80036da <stm32_clock_control_off+0x1a>
		return -ENOTSUP;
 8003708:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 800370c:	4770      	bx	lr
 800370e:	bf00      	nop
 8003710:	40023800 	.word	0x40023800

08003714 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 8003714:	4b07      	ldr	r3, [pc, #28]	; (8003734 <stm32_clock_control_get_subsys_rate+0x20>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8003716:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8003718:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 800371a:	2903      	cmp	r1, #3
 800371c:	d807      	bhi.n	800372e <stm32_clock_control_get_subsys_rate+0x1a>
 800371e:	e8df f001 	tbb	[pc, r1]
 8003722:	0303      	.short	0x0303
 8003724:	0302      	.short	0x0302
	return clock / prescaler;
 8003726:	085b      	lsrs	r3, r3, #1
#endif
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8003728:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 800372a:	2000      	movs	r0, #0
		break;
 800372c:	4770      	bx	lr
		return -ENOTSUP;
 800372e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8003732:	4770      	bx	lr
 8003734:	20001220 	.word	0x20001220

08003738 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8003738:	b530      	push	{r4, r5, lr}
 800373a:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 800373c:	2300      	movs	r3, #0
 800373e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003742:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8003746:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8003748:	f000 f838 	bl	80037bc <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 800374c:	a803      	add	r0, sp, #12
 800374e:	f002 f98f 	bl	8005a70 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003752:	4b18      	ldr	r3, [pc, #96]	; (80037b4 <stm32_clock_control_init+0x7c>)
 8003754:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8003756:	0791      	lsls	r1, r2, #30
 8003758:	d406      	bmi.n	8003768 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	f042 0201 	orr.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8003762:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8003764:	0792      	lsls	r2, r2, #30
 8003766:	d5fc      	bpl.n	8003762 <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8003768:	4c12      	ldr	r4, [pc, #72]	; (80037b4 <stm32_clock_control_init+0x7c>)
 800376a:	68a3      	ldr	r3, [r4, #8]
 800376c:	f023 0303 	bic.w	r3, r3, #3
 8003770:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8003772:	68a3      	ldr	r3, [r4, #8]
 8003774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003778:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800377a:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 800377c:	f015 050c 	ands.w	r5, r5, #12
 8003780:	d1fb      	bne.n	800377a <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003782:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8003784:	480c      	ldr	r0, [pc, #48]	; (80037b8 <stm32_clock_control_init+0x80>)
 8003786:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800378a:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 800378c:	6863      	ldr	r3, [r4, #4]
 800378e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003792:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003796:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8003798:	aa03      	add	r2, sp, #12
 800379a:	466b      	mov	r3, sp
 800379c:	2101      	movs	r1, #1
 800379e:	f001 f915 	bl	80049cc <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	f023 0301 	bic.w	r3, r3, #1
 80037a8:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 80037aa:	f002 f96a 	bl	8005a82 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 80037ae:	4628      	mov	r0, r5
 80037b0:	b007      	add	sp, #28
 80037b2:	bd30      	pop	{r4, r5, pc}
 80037b4:	40023800 	.word	0x40023800
 80037b8:	007a1200 	.word	0x007a1200

080037bc <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 80037bc:	4b06      	ldr	r3, [pc, #24]	; (80037d8 <config_enable_default_clocks+0x1c>)
 80037be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037c0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80037c4:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80037c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 80037c8:	b082      	sub	sp, #8
 80037ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ce:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80037d0:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 80037d2:	b002      	add	sp, #8
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	40023800 	.word	0x40023800

080037dc <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 80037dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80037de:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 80037e0:	0906      	lsrs	r6, r0, #4
{
 80037e2:	460d      	mov	r5, r1
	if (!clk) {
 80037e4:	4610      	mov	r0, r2
 80037e6:	b912      	cbnz	r2, 80037ee <z_pinmux_stm32_set+0x12>
 80037e8:	4811      	ldr	r0, [pc, #68]	; (8003830 <z_pinmux_stm32_set+0x54>)
 80037ea:	f001 f93f 	bl	8004a6c <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 80037ee:	2300      	movs	r3, #0
 80037f0:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 80037f2:	4b10      	ldr	r3, [pc, #64]	; (8003834 <z_pinmux_stm32_set+0x58>)
 80037f4:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80037f8:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 80037fa:	3301      	adds	r3, #1
 80037fc:	d102      	bne.n	8003804 <z_pinmux_stm32_set+0x28>
		return -EIO;
 80037fe:	f06f 0004 	mvn.w	r0, #4
 8003802:	e012      	b.n	800382a <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8003804:	6843      	ldr	r3, [r0, #4]
 8003806:	4669      	mov	r1, sp
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 800380c:	2800      	cmp	r0, #0
 800380e:	d1f6      	bne.n	80037fe <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8003810:	1120      	asrs	r0, r4, #4
 8003812:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8003814:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8003818:	f005 030f 	and.w	r3, r5, #15
 800381c:	462a      	mov	r2, r5
 800381e:	f004 010f 	and.w	r1, r4, #15
 8003822:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8003826:	f002 f9e2 	bl	8005bee <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 800382a:	b002      	add	sp, #8
 800382c:	bd70      	pop	{r4, r5, r6, pc}
 800382e:	bf00      	nop
 8003830:	08006a08 	.word	0x08006a08
 8003834:	0800688c 	.word	0x0800688c

08003838 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8003838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800383a:	4604      	mov	r4, r0
 800383c:	460e      	mov	r6, r1
 800383e:	4809      	ldr	r0, [pc, #36]	; (8003864 <stm32_setup_pins+0x2c>)
 8003840:	f001 f914 	bl	8004a6c <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8003844:	2500      	movs	r5, #0
 8003846:	4607      	mov	r7, r0
 8003848:	42b5      	cmp	r5, r6
 800384a:	f104 0408 	add.w	r4, r4, #8
 800384e:	d100      	bne.n	8003852 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8003850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8003852:	463a      	mov	r2, r7
 8003854:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8003858:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 800385c:	f7ff ffbe 	bl	80037dc <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8003860:	3501      	adds	r5, #1
 8003862:	e7f1      	b.n	8003848 <stm32_setup_pins+0x10>
 8003864:	08006a08 	.word	0x08006a08

08003868 <elapsed>:
	 * the double-overflow if called at the end of a cycle.  There
	 * is no safe algorithm here, so we split the difference by
	 * reading CTRL twice, suppressing the second overflow bit if
	 * VAL was "about to overflow".
	 */
	ctrl1 = SysTick->CTRL;
 8003868:	4b0f      	ldr	r3, [pc, #60]	; (80038a8 <elapsed+0x40>)
{
 800386a:	b530      	push	{r4, r5, lr}
	ctrl1 = SysTick->CTRL;
 800386c:	681a      	ldr	r2, [r3, #0]
	val = SysTick->VAL & COUNTER_MAX;
 800386e:	6899      	ldr	r1, [r3, #8]
	ctrl2 = SysTick->CTRL;
 8003870:	681d      	ldr	r5, [r3, #0]
 8003872:	4b0e      	ldr	r3, [pc, #56]	; (80038ac <elapsed+0x44>)
 8003874:	681c      	ldr	r4, [r3, #0]

	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8003876:	4b0e      	ldr	r3, [pc, #56]	; (80038b0 <elapsed+0x48>)
 8003878:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 800387c:	6818      	ldr	r0, [r3, #0]
 800387e:	bf18      	it	ne
 8003880:	4622      	movne	r2, r4
	val = SysTick->VAL & COUNTER_MAX;
 8003882:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8003886:	4402      	add	r2, r0
	if (val > VAL_ABOUT_TO_WRAP) {
 8003888:	2908      	cmp	r1, #8
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 800388a:	601a      	str	r2, [r3, #0]
	if (val > VAL_ABOUT_TO_WRAP) {
 800388c:	d907      	bls.n	800389e <elapsed+0x36>
		int wrap = ctrl2 & SysTick_CTRL_COUNTFLAG_Msk;

		overflow_cyc += (wrap != 0) ? last_load : 0;
 800388e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	bf14      	ite	ne
 8003896:	4620      	movne	r0, r4
 8003898:	2000      	moveq	r0, #0
 800389a:	4402      	add	r2, r0
 800389c:	601a      	str	r2, [r3, #0]
	}

	return (last_load - val) + overflow_cyc;
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	4420      	add	r0, r4
}
 80038a2:	1a40      	subs	r0, r0, r1
 80038a4:	bd30      	pop	{r4, r5, pc}
 80038a6:	bf00      	nop
 80038a8:	e000e010 	.word	0xe000e010
 80038ac:	20000124 	.word	0x20000124
 80038b0:	20000128 	.word	0x20000128

080038b4 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 80038b4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	cycle_count += last_load;
 80038b6:	4a0e      	ldr	r2, [pc, #56]	; (80038f0 <z_clock_isr+0x3c>)
 80038b8:	4b0e      	ldr	r3, [pc, #56]	; (80038f4 <z_clock_isr+0x40>)
 80038ba:	6812      	ldr	r2, [r2, #0]
 80038bc:	6818      	ldr	r0, [r3, #0]
 80038be:	4410      	add	r0, r2
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80038c0:	4a0d      	ldr	r2, [pc, #52]	; (80038f8 <z_clock_isr+0x44>)
	cycle_count += last_load;
 80038c2:	6018      	str	r0, [r3, #0]
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 80038c4:	6811      	ldr	r1, [r2, #0]
 80038c6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80038ca:	1a40      	subs	r0, r0, r1
 80038cc:	fbb0 f0f3 	udiv	r0, r0, r3
	announced_cycles += dticks * CYC_PER_TICK;
 80038d0:	fb03 1300 	mla	r3, r3, r0, r1
 80038d4:	6013      	str	r3, [r2, #0]

	overflow_cyc = SysTick->CTRL; /* Reset overflow flag */
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <z_clock_isr+0x48>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <z_clock_isr+0x4c>)
 80038dc:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]

	z_clock_announce(TICKLESS ? dticks : 1);
 80038e2:	f001 fd91 	bl	8005408 <z_clock_announce>
	z_arm_exc_exit();
}
 80038e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 80038ea:	f000 b8ad 	b.w	8003a48 <z_arm_exc_exit>
 80038ee:	bf00      	nop
 80038f0:	20000124 	.word	0x20000124
 80038f4:	20000120 	.word	0x20000120
 80038f8:	2000011c 	.word	0x2000011c
 80038fc:	e000e010 	.word	0xe000e010
 8003900:	20000128 	.word	0x20000128

08003904 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003904:	4b09      	ldr	r3, [pc, #36]	; (800392c <z_clock_driver_init+0x28>)
 8003906:	2210      	movs	r2, #16
 8003908:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <z_clock_driver_init+0x2c>)
 800390e:	f242 527f 	movw	r2, #9599	; 0x257f
 8003912:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8003914:	4b07      	ldr	r3, [pc, #28]	; (8003934 <z_clock_driver_init+0x30>)
 8003916:	2000      	movs	r0, #0
 8003918:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 800391a:	4b07      	ldr	r3, [pc, #28]	; (8003938 <z_clock_driver_init+0x34>)
 800391c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 800391e:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	f042 0207 	orr.w	r2, r2, #7
 8003926:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8003928:	4770      	bx	lr
 800392a:	bf00      	nop
 800392c:	e000ed00 	.word	0xe000ed00
 8003930:	20000124 	.word	0x20000124
 8003934:	20000128 	.word	0x20000128
 8003938:	e000e010 	.word	0xe000e010

0800393c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 800393c:	b570      	push	{r4, r5, r6, lr}
 800393e:	4c23      	ldr	r4, [pc, #140]	; (80039cc <z_clock_set_timeout+0x90>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8003940:	b151      	cbz	r1, 8003958 <z_clock_set_timeout+0x1c>
 8003942:	1c43      	adds	r3, r0, #1
 8003944:	d108      	bne.n	8003958 <z_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8003946:	4a22      	ldr	r2, [pc, #136]	; (80039d0 <z_clock_set_timeout+0x94>)
 8003948:	6813      	ldr	r3, [r2, #0]
 800394a:	f023 0301 	bic.w	r3, r3, #1
 800394e:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8003950:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003954:	6023      	str	r3, [r4, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8003956:	bd70      	pop	{r4, r5, r6, pc}
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 8003958:	3801      	subs	r0, #1
 800395a:	f240 63d2 	movw	r3, #1746	; 0x6d2
 800395e:	4298      	cmp	r0, r3
 8003960:	dc2e      	bgt.n	80039c0 <z_clock_set_timeout+0x84>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8003962:	2800      	cmp	r0, #0
 8003964:	dd2e      	ble.n	80039c4 <z_clock_set_timeout+0x88>
 8003966:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800396a:	fb03 f600 	mul.w	r6, r3, r0
	__asm__ volatile(
 800396e:	f04f 0310 	mov.w	r3, #16
 8003972:	f3ef 8511 	mrs	r5, BASEPRI
 8003976:	f383 8811 	msr	BASEPRI, r3
 800397a:	f3bf 8f6f 	isb	sy
	cycle_count += elapsed();
 800397e:	f7ff ff73 	bl	8003868 <elapsed>
 8003982:	4b14      	ldr	r3, [pc, #80]	; (80039d4 <z_clock_set_timeout+0x98>)
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	4410      	add	r0, r2
 8003988:	6018      	str	r0, [r3, #0]
	delay = delay + (cycle_count - announced_cycles);
 800398a:	4b13      	ldr	r3, [pc, #76]	; (80039d8 <z_clock_set_timeout+0x9c>)
 800398c:	681a      	ldr	r2, [r3, #0]
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800398e:	f5c2 5315 	rsb	r3, r2, #9536	; 0x2540
 8003992:	333f      	adds	r3, #63	; 0x3f
 8003994:	4433      	add	r3, r6
 8003996:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800399a:	4403      	add	r3, r0
	last_load = delay - (cycle_count - announced_cycles);
 800399c:	1a10      	subs	r0, r2, r0
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 800399e:	fbb3 f3f1 	udiv	r3, r3, r1
	last_load = delay - (cycle_count - announced_cycles);
 80039a2:	fb01 0003 	mla	r0, r1, r3, r0
	overflow_cyc = 0U;
 80039a6:	4b0d      	ldr	r3, [pc, #52]	; (80039dc <z_clock_set_timeout+0xa0>)
	last_load = delay - (cycle_count - announced_cycles);
 80039a8:	6020      	str	r0, [r4, #0]
	overflow_cyc = 0U;
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load - 1;
 80039ae:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <z_clock_set_timeout+0x94>)
 80039b0:	3801      	subs	r0, #1
 80039b2:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 80039b4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 80039b6:	f385 8811 	msr	BASEPRI, r5
 80039ba:	f3bf 8f6f 	isb	sy
 80039be:	e7ca      	b.n	8003956 <z_clock_set_timeout+0x1a>
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 80039c0:	4618      	mov	r0, r3
 80039c2:	e7d0      	b.n	8003966 <z_clock_set_timeout+0x2a>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 80039c4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 80039c8:	e7d1      	b.n	800396e <z_clock_set_timeout+0x32>
 80039ca:	bf00      	nop
 80039cc:	20000124 	.word	0x20000124
 80039d0:	e000e010 	.word	0xe000e010
 80039d4:	20000120 	.word	0x20000120
 80039d8:	2000011c 	.word	0x2000011c
 80039dc:	20000128 	.word	0x20000128

080039e0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 80039e0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80039e2:	f04f 0310 	mov.w	r3, #16
 80039e6:	f3ef 8411 	mrs	r4, BASEPRI
 80039ea:	f383 8811 	msr	BASEPRI, r3
 80039ee:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 80039f2:	f7ff ff39 	bl	8003868 <elapsed>
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <z_clock_elapsed+0x34>)
 80039f8:	4a07      	ldr	r2, [pc, #28]	; (8003a18 <z_clock_elapsed+0x38>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	6812      	ldr	r2, [r2, #0]
 80039fe:	1a9b      	subs	r3, r3, r2
 8003a00:	4418      	add	r0, r3
	__asm__ volatile(
 8003a02:	f384 8811 	msr	BASEPRI, r4
 8003a06:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 8003a0a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8003a0e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a12:	bd10      	pop	{r4, pc}
 8003a14:	20000120 	.word	0x20000120
 8003a18:	2000011c 	.word	0x2000011c

08003a1c <z_timer_cycle_get_32>:

u32_t z_timer_cycle_get_32(void)
{
 8003a1c:	b510      	push	{r4, lr}
	__asm__ volatile(
 8003a1e:	f04f 0310 	mov.w	r3, #16
 8003a22:	f3ef 8411 	mrs	r4, BASEPRI
 8003a26:	f383 8811 	msr	BASEPRI, r3
 8003a2a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t ret = elapsed() + cycle_count;
 8003a2e:	f7ff ff1b 	bl	8003868 <elapsed>
 8003a32:	4b04      	ldr	r3, [pc, #16]	; (8003a44 <z_timer_cycle_get_32+0x28>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4418      	add	r0, r3
	__asm__ volatile(
 8003a38:	f384 8811 	msr	BASEPRI, r4
 8003a3c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
 8003a40:	bd10      	pop	{r4, pc}
 8003a42:	bf00      	nop
 8003a44:	20000120 	.word	0x20000120

08003a48 <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 8003a48:	4804      	ldr	r0, [pc, #16]	; (8003a5c <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 8003a4a:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 8003a4c:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 8003a4e:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8003a50:	d003      	beq.n	8003a5a <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8003a52:	4903      	ldr	r1, [pc, #12]	; (8003a60 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8003a54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 8003a58:	600a      	str	r2, [r1, #0]

08003a5a <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
 8003a5a:	4770      	bx	lr
    ldr r0, =_kernel
 8003a5c:	20000308 	.word	0x20000308
    ldr r1, =_SCS_ICSR
 8003a60:	e000ed04 	.word	0xe000ed04

08003a64 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8003a64:	4a09      	ldr	r2, [pc, #36]	; (8003a8c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 8003a66:	490a      	ldr	r1, [pc, #40]	; (8003a90 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 8003a68:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 8003a6a:	6809      	ldr	r1, [r1, #0]
 8003a6c:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003a6e:	4909      	ldr	r1, [pc, #36]	; (8003a94 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8003a70:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003a72:	684b      	ldr	r3, [r1, #4]
 8003a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a78:	604b      	str	r3, [r1, #4]
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8003a84:	6893      	ldr	r3, [r2, #8]
}
 8003a86:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8003a88:	4770      	bx	lr
 8003a8a:	bf00      	nop
 8003a8c:	20000308 	.word	0x20000308
 8003a90:	08006984 	.word	0x08006984
 8003a94:	e000ed00 	.word	0xe000ed00

08003a98 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 8003a98:	4929      	ldr	r1, [pc, #164]	; (8003b40 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 8003a9a:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8003a9c:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 8003aa0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8003aa2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 8003aa6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
 8003aaa:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8003aae:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
 8003ab2:	d004      	beq.n	8003abe <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
 8003ab4:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
 8003ab8:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
 8003abc:	e007      	b.n	8003ace <out_fp_endif>

08003abe <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
 8003abe:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
 8003ac2:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
 8003ac6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
 8003aca:	f050 0004 	orrs.w	r0, r0, #4

08003ace <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
 8003ace:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003ad2:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003ad4:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 8003ad8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 8003adc:	4f19      	ldr	r7, [pc, #100]	; (8003b44 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 8003ade:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 8003ae2:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 8003ae4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 8003ae6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 8003ae8:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
 8003aea:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 8003aec:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 8003aee:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
 8003af2:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
 8003af6:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
 8003afa:	d105      	bne.n	8003b08 <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 8003afc:	2300      	movs	r3, #0
    vmsr fpscr, r3
 8003afe:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8003b02:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
 8003b06:	e005      	b.n	8003b14 <in_fp_endif>

08003b08 <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
 8003b08:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
 8003b0c:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
 8003b10:	ec90 8a10 	vldmia	r0, {s16-s31}

08003b14 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 8003b14:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
 8003b18:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8003b1c:	f383 8814 	msr	CONTROL, r3
    isb
 8003b20:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8003b24:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 8003b26:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 8003b28:	f001 ffbb 	bl	8005aa2 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8003b2c:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8003b30:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8003b34:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 8003b38:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8003b3c:	4770      	bx	lr
 8003b3e:	0000      	.short	0x0000
    ldr r1, =_kernel
 8003b40:	20000308 	.word	0x20000308
    ldr v4, =_SCS_ICSR
 8003b44:	e000ed04 	.word	0xe000ed04

08003b48 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 8003b48:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8003b4c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8003b4e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8003b52:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 8003b56:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 8003b58:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8003b5c:	2902      	cmp	r1, #2
    beq _oops
 8003b5e:	d0ff      	beq.n	8003b60 <_oops>

08003b60 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8003b60:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8003b62:	f001 ff93 	bl	8005a8c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 8003b66:	bd01      	pop	{r0, pc}

08003b68 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 8003b68:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	db08      	blt.n	8003b80 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f000 001f 	and.w	r0, r0, #31
 8003b74:	fa02 f000 	lsl.w	r0, r2, r0
 8003b78:	095b      	lsrs	r3, r3, #5
 8003b7a:	4a02      	ldr	r2, [pc, #8]	; (8003b84 <arch_irq_enable+0x1c>)
 8003b7c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	e000e100 	.word	0xe000e100

08003b88 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 8003b88:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 8003b8a:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b8c:	bfa8      	it	ge
 8003b8e:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8003b92:	f101 0101 	add.w	r1, r1, #1
 8003b96:	ea4f 1101 	mov.w	r1, r1, lsl #4
 8003b9a:	bfae      	itee	ge
 8003b9c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba0:	f000 000f 	andlt.w	r0, r0, #15
 8003ba4:	4b03      	ldrlt	r3, [pc, #12]	; (8003bb4 <z_arm_irq_priority_set+0x2c>)
 8003ba6:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba8:	bfac      	ite	ge
 8003baa:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	5419      	strblt	r1, [r3, r0]
}
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	e000ed14 	.word	0xe000ed14

08003bb8 <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
 8003bb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bba:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8003bbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003bbe:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
 8003bc0:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8003bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 8003bc4:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 8003bc6:	f002 fac4 	bl	8006152 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8003bca:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 8003bce:	4a0b      	ldr	r2, [pc, #44]	; (8003bfc <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 8003bd0:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 8003bd4:	f022 0201 	bic.w	r2, r2, #1
 8003bd8:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 8003bda:	9a06      	ldr	r2, [sp, #24]
 8003bdc:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 8003bde:	9a07      	ldr	r2, [sp, #28]
 8003be0:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 8003be2:	9a08      	ldr	r2, [sp, #32]
 8003be4:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
 8003be6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
 8003bea:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
 8003bec:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 8003bee:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
 8003bf4:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 8003bf8:	b002      	add	sp, #8
 8003bfa:	bd70      	pop	{r4, r5, r6, pc}
 8003bfc:	0800565f 	.word	0x0800565f

08003c00 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
 8003c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c04:	461f      	mov	r7, r3
 8003c06:	4606      	mov	r6, r0
 8003c08:	460c      	mov	r4, r1
 8003c0a:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8003c12:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 8003c16:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 8003c1a:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003c1e:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8003c22:	f000 f97d 	bl	8003f20 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 8003c26:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
 8003c28:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003c2a:	4630      	mov	r0, r6
	_current = main_thread;
 8003c2c:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
 8003c2e:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8003c32:	f001 ff36 	bl	8005aa2 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 8003c36:	4638      	mov	r0, r7
 8003c38:	f384 8809 	msr	PSP, r4
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	b663      	cpsie	if
 8003c40:	f381 8811 	msr	BASEPRI, r1
 8003c44:	f3bf 8f6f 	isb	sy
 8003c48:	2200      	movs	r2, #0
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	f001 fd07 	bl	800565e <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8003c50:	20000308 	.word	0x20000308

08003c54 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
 8003c54:	4901      	ldr	r1, [pc, #4]	; (8003c5c <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 8003c56:	2210      	movs	r2, #16
	str r2, [r1]
 8003c58:	600a      	str	r2, [r1, #0]
#endif
	bx lr
 8003c5a:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8003c5c:	e000ed10 	.word	0xe000ed10

08003c60 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 8003c60:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8003c62:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 8003c66:	bf30      	wfi

	bx lr
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop

08003c6c <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
 8003c6c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8003c70:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8003c74:	4672      	mov	r2, lr

	push {r0, lr}
 8003c76:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
 8003c78:	f000 f8a4 	bl	8003dc4 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
 8003c7c:	bd01      	pop	{r0, pc}
 8003c7e:	bf00      	nop

08003c80 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8003c80:	bf30      	wfi
    b z_SysNmiOnReset
 8003c82:	f7ff bffd 	b.w	8003c80 <z_SysNmiOnReset>
 8003c86:	bf00      	nop

08003c88 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003c88:	4a11      	ldr	r2, [pc, #68]	; (8003cd0 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 8003c8a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8003c8c:	4b11      	ldr	r3, [pc, #68]	; (8003cd4 <z_arm_prep_c+0x4c>)
 8003c8e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8003c92:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c94:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003c98:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8003c9c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ca0:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003ca4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 8003ca8:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8003cac:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 8003cb0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003cb4:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 8003cb8:	2300      	movs	r3, #0
 8003cba:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 8003cbe:	f000 fefb 	bl	8004ab8 <z_bss_zero>
	z_data_copy();
 8003cc2:	f000 ff03 	bl	8004acc <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
 8003cc6:	f000 f8f9 	bl	8003ebc <z_arm_int_lib_init>
	z_cstart();
 8003cca:	f000 ff31 	bl	8004b30 <z_cstart>
 8003cce:	bf00      	nop
 8003cd0:	08000000 	.word	0x08000000
 8003cd4:	e000ed00 	.word	0xe000ed00

08003cd8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 8003cd8:	b501      	push	{r0, lr}

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 8003cda:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 8003cde:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 8003ce2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 8003ce6:	4904      	ldr	r1, [pc, #16]	; (8003cf8 <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 8003ce8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 8003cea:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 8003cec:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 8003cee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 8003cf2:	4902      	ldr	r1, [pc, #8]	; (8003cfc <_isr_wrapper+0x24>)
	bx r1
 8003cf4:	4708      	bx	r1
 8003cf6:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 8003cf8:	08006284 	.word	0x08006284
	ldr r1, =z_arm_int_exit
 8003cfc:	08003a49 	.word	0x08003a49

08003d00 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 8003d00:	2010      	movs	r0, #16
    msr BASEPRI, r0
 8003d02:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 8003d06:	4808      	ldr	r0, [pc, #32]	; (8003d28 <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 8003d08:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 8003d0c:	1840      	adds	r0, r0, r1
    msr PSP, r0
 8003d0e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 8003d12:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 8003d16:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 8003d18:	4308      	orrs	r0, r1
    msr CONTROL, r0
 8003d1a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8003d1e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8003d22:	f7ff ffb1 	bl	8003c88 <z_arm_prep_c>
 8003d26:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 8003d28:	20000890 	.word	0x20000890

08003d2c <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	; (8003d60 <mem_manage_fault.isra.2+0x34>)
 8003d2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8003d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8003d32:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d34:	0792      	lsls	r2, r2, #30
 8003d36:	d508      	bpl.n	8003d4a <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 8003d38:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 8003d3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d3c:	0612      	lsls	r2, r2, #24
 8003d3e:	d504      	bpl.n	8003d4a <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 8003d40:	b118      	cbz	r0, 8003d4a <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8003d42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d48:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <mem_manage_fault.isra.2+0x34>)
 8003d4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8003d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003d52:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 8003d54:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8003d56:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 8003d5a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8003d5c:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8003d5e:	4770      	bx	lr
 8003d60:	e000ed00 	.word	0xe000ed00

08003d64 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <bus_fault.isra.3+0x38>)
 8003d66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 8003d68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 8003d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d6c:	0592      	lsls	r2, r2, #22
 8003d6e:	d508      	bpl.n	8003d82 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8003d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8003d72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d74:	0412      	lsls	r2, r2, #16
 8003d76:	d504      	bpl.n	8003d82 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 8003d78:	b118      	cbz	r0, 8003d82 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 8003d7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8003d82:	4b06      	ldr	r3, [pc, #24]	; (8003d9c <bus_fault.isra.3+0x38>)
 8003d84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 8003d86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d88:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 8003d8a:	bf58      	it	pl
 8003d8c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003d8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 8003d90:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8003d92:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8003d98:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8003d9a:	4770      	bx	lr
 8003d9c:	e000ed00 	.word	0xe000ed00

08003da0 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8003da0:	4b07      	ldr	r3, [pc, #28]	; (8003dc0 <usage_fault.isra.4+0x20>)
 8003da2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8003da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 8003da6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 8003da8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 8003daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8003dac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8003dae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003db0:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8003db4:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 8003db8:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 8003dba:	2000      	movs	r0, #0
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	e000ed00 	.word	0xe000ed00

08003dc4 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 8003dc4:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003dc6:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <z_arm_fault+0xdc>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
{
 8003dca:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 8003dcc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dd0:	2500      	movs	r5, #0
 8003dd2:	f385 8811 	msr	BASEPRI, r5
 8003dd6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 8003dda:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 8003dde:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 8003de2:	d112      	bne.n	8003e0a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 8003de4:	f002 040c 	and.w	r4, r2, #12
 8003de8:	2c08      	cmp	r4, #8
 8003dea:	d00e      	beq.n	8003e0a <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 8003dec:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 8003dee:	bf4e      	itee	mi
 8003df0:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
 8003df2:	4606      	movpl	r6, r0
			*nested_exc = true;
 8003df4:	2501      	movpl	r5, #1
	*recoverable = false;
 8003df6:	2200      	movs	r2, #0
	switch (fault) {
 8003df8:	3b03      	subs	r3, #3
	*recoverable = false;
 8003dfa:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d847      	bhi.n	8003e92 <z_arm_fault+0xce>
 8003e02:	e8df f003 	tbb	[pc, r3]
 8003e06:	3e04      	.short	0x3e04
 8003e08:	3b42      	.short	0x3b42
		return NULL;
 8003e0a:	462e      	mov	r6, r5
 8003e0c:	e7f3      	b.n	8003df6 <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 8003e0e:	4b24      	ldr	r3, [pc, #144]	; (8003ea0 <z_arm_fault+0xdc>)
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	0792      	lsls	r2, r2, #30
 8003e14:	d43d      	bmi.n	8003e92 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 8003e16:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8003e18:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8003e1c:	d008      	beq.n	8003e30 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
 8003e1e:	3328      	adds	r3, #40	; 0x28
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	b1eb      	cbz	r3, 8003e60 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8003e24:	f10d 0107 	add.w	r1, sp, #7
 8003e28:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 8003e2a:	f7ff ff7f 	bl	8003d2c <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
 8003e2e:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8003e30:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003e34:	b993      	cbnz	r3, 8003e5c <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 8003e36:	2268      	movs	r2, #104	; 0x68
 8003e38:	4631      	mov	r1, r6
 8003e3a:	a802      	add	r0, sp, #8
 8003e3c:	f7fe ff22 	bl	8002c84 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8003e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e42:	b345      	cbz	r5, 8003e96 <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8003e44:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003e48:	b922      	cbnz	r2, 8003e54 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 8003e4a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8003e4e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003e52:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8003e54:	a902      	add	r1, sp, #8
 8003e56:	4620      	mov	r0, r4
 8003e58:	f001 fe16 	bl	8005a88 <z_arm_fatal_error>
}
 8003e5c:	b01c      	add	sp, #112	; 0x70
 8003e5e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <z_arm_fault+0xe0>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	b12b      	cbz	r3, 8003e72 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
 8003e66:	f10d 0107 	add.w	r1, sp, #7
 8003e6a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8003e6c:	f7ff ff7a 	bl	8003d64 <bus_fault.isra.3>
 8003e70:	e7dd      	b.n	8003e2e <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
 8003e72:	4b0d      	ldr	r3, [pc, #52]	; (8003ea8 <z_arm_fault+0xe4>)
 8003e74:	881c      	ldrh	r4, [r3, #0]
 8003e76:	b2a4      	uxth	r4, r4
 8003e78:	2c00      	cmp	r4, #0
 8003e7a:	d0d9      	beq.n	8003e30 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
 8003e7c:	f7ff ff90 	bl	8003da0 <usage_fault.isra.4>
 8003e80:	e7d5      	b.n	8003e2e <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
 8003e82:	f10d 0107 	add.w	r1, sp, #7
 8003e86:	2000      	movs	r0, #0
 8003e88:	e7cf      	b.n	8003e2a <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 8003e8a:	f10d 0107 	add.w	r1, sp, #7
 8003e8e:	2000      	movs	r0, #0
 8003e90:	e7ec      	b.n	8003e6c <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 8003e92:	2400      	movs	r4, #0
 8003e94:	e7cc      	b.n	8003e30 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8003e96:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8003e9a:	f023 0301 	bic.w	r3, r3, #1
 8003e9e:	e7d8      	b.n	8003e52 <z_arm_fault+0x8e>
 8003ea0:	e000ed00 	.word	0xe000ed00
 8003ea4:	e000ed29 	.word	0xe000ed29
 8003ea8:	e000ed2a 	.word	0xe000ed2a

08003eac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8003eac:	4a02      	ldr	r2, [pc, #8]	; (8003eb8 <z_arm_fault_init+0xc>)
 8003eae:	6953      	ldr	r3, [r2, #20]
 8003eb0:	f043 0310 	orr.w	r3, r3, #16
 8003eb4:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ebc:	4804      	ldr	r0, [pc, #16]	; (8003ed0 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	2b61      	cmp	r3, #97	; 0x61
 8003ec8:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 8003ecc:	d1f9      	bne.n	8003ec2 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 8003ece:	4770      	bx	lr
 8003ed0:	e000e100 	.word	0xe000e100

08003ed4 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 8003ed4:	b538      	push	{r3, r4, r5, lr}
 8003ed6:	4605      	mov	r5, r0
	__asm__ volatile(
 8003ed8:	f04f 0310 	mov.w	r3, #16
 8003edc:	f3ef 8411 	mrs	r4, BASEPRI
 8003ee0:	f383 8811 	msr	BASEPRI, r3
 8003ee4:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 8003ee8:	f002 f94f 	bl	800618a <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 8003eec:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <z_impl_k_thread_abort+0x44>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	42ab      	cmp	r3, r5
 8003ef2:	d10b      	bne.n	8003f0c <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 8003ef4:	4b09      	ldr	r3, [pc, #36]	; (8003f1c <z_impl_k_thread_abort+0x48>)
 8003ef6:	685a      	ldr	r2, [r3, #4]
 8003ef8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003efc:	b912      	cbnz	r2, 8003f04 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 8003efe:	4620      	mov	r0, r4
 8003f00:	f7ff fdb0 	bl	8003a64 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8003f04:	685a      	ldr	r2, [r3, #4]
 8003f06:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f0a:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 8003f0c:	4620      	mov	r0, r4
}
 8003f0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 8003f12:	f002 b885 	b.w	8006020 <z_reschedule_irqlock>
 8003f16:	bf00      	nop
 8003f18:	20000308 	.word	0x20000308
 8003f1c:	e000ed00 	.word	0xe000ed00

08003f20 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8003f20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <z_arm_configure_static_mpu_regions+0x24>)
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <z_arm_configure_static_mpu_regions+0x28>)
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	4b08      	ldr	r3, [pc, #32]	; (8003f4c <z_arm_configure_static_mpu_regions+0x2c>)
 8003f2c:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 8003f2e:	ab01      	add	r3, sp, #4
 8003f30:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8003f32:	4a07      	ldr	r2, [pc, #28]	; (8003f50 <z_arm_configure_static_mpu_regions+0x30>)
 8003f34:	4b07      	ldr	r3, [pc, #28]	; (8003f54 <z_arm_configure_static_mpu_regions+0x34>)
 8003f36:	2101      	movs	r1, #1
 8003f38:	4668      	mov	r0, sp
 8003f3a:	f000 f891 	bl	8004060 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8003f3e:	b005      	add	sp, #20
 8003f40:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f44:	20000000 	.word	0x20000000
 8003f48:	00000000 	.word	0x00000000
 8003f4c:	060b0000 	.word	0x060b0000
 8003f50:	20000000 	.word	0x20000000
 8003f54:	20020000 	.word	0x20020000

08003f58 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
 8003f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 8003f5a:	4f20      	ldr	r7, [pc, #128]	; (8003fdc <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8003f5c:	2600      	movs	r6, #0
 8003f5e:	428e      	cmp	r6, r1
 8003f60:	db01      	blt.n	8003f66 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8003f62:	4610      	mov	r0, r2
 8003f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
 8003f66:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
 8003f6a:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8003f6e:	b394      	cbz	r4, 8003fd6 <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
 8003f70:	b15b      	cbz	r3, 8003f8a <mpu_configure_regions+0x32>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
 8003f72:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 8003f76:	ea14 0f0e 	tst.w	r4, lr
 8003f7a:	d11a      	bne.n	8003fb2 <mpu_configure_regions+0x5a>
		&&
 8003f7c:	2c1f      	cmp	r4, #31
 8003f7e:	d918      	bls.n	8003fb2 <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
 8003f80:	f8dc 5000 	ldr.w	r5, [ip]
		&&
 8003f84:	ea1e 0f05 	tst.w	lr, r5
 8003f88:	d113      	bne.n	8003fb2 <mpu_configure_regions+0x5a>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 8003f8a:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8003f8c:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 8003f90:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	d90f      	bls.n	8003fb8 <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 8003f98:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003f9c:	d80e      	bhi.n	8003fbc <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8003f9e:	3c01      	subs	r4, #1
 8003fa0:	fab4 f484 	clz	r4, r4
 8003fa4:	f1c4 041f 	rsb	r4, r4, #31
 8003fa8:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 8003faa:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8003fac:	ea4c 0404 	orr.w	r4, ip, r4
 8003fb0:	d906      	bls.n	8003fc0 <mpu_configure_regions+0x68>
			return -EINVAL;
 8003fb2:	f06f 0215 	mvn.w	r2, #21
 8003fb6:	e7d4      	b.n	8003f62 <mpu_configure_regions+0xa>
		return REGION_32B;
 8003fb8:	2408      	movs	r4, #8
 8003fba:	e7f6      	b.n	8003faa <mpu_configure_regions+0x52>
		return REGION_4G;
 8003fbc:	243e      	movs	r4, #62	; 0x3e
 8003fbe:	e7f4      	b.n	8003faa <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003fc0:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 8003fc4:	4315      	orrs	r5, r2
 8003fc6:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003fca:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 8003fce:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8003fd0:	60fd      	str	r5, [r7, #12]
		reg_index++;
 8003fd2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8003fd4:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 8003fd6:	3601      	adds	r6, #1
 8003fd8:	e7c1      	b.n	8003f5e <mpu_configure_regions+0x6>
 8003fda:	bf00      	nop
 8003fdc:	e000ed90 	.word	0xe000ed90

08003fe0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 8003fe0:	4b03      	ldr	r3, [pc, #12]	; (8003ff0 <arm_core_mpu_enable+0x10>)
 8003fe2:	2205      	movs	r2, #5
 8003fe4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8003fe6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003fea:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 8003fee:	4770      	bx	lr
 8003ff0:	e000ed90 	.word	0xe000ed90

08003ff4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8003ff4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 8003ff8:	4b01      	ldr	r3, [pc, #4]	; (8004000 <arm_core_mpu_disable+0xc>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	605a      	str	r2, [r3, #4]
}
 8003ffe:	4770      	bx	lr
 8004000:	e000ed90 	.word	0xe000ed90

08004004 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 8004004:	4913      	ldr	r1, [pc, #76]	; (8004054 <arm_mpu_init+0x50>)
 8004006:	6808      	ldr	r0, [r1, #0]
 8004008:	2808      	cmp	r0, #8
{
 800400a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 800400c:	d81e      	bhi.n	800404c <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 800400e:	f7ff fff1 	bl	8003ff4 <arm_core_mpu_disable>
	MPU->RNR = index;
 8004012:	4c11      	ldr	r4, [pc, #68]	; (8004058 <arm_mpu_init+0x54>)
 8004014:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004016:	2200      	movs	r2, #0
 8004018:	4290      	cmp	r0, r2
 800401a:	f101 010c 	add.w	r1, r1, #12
 800401e:	d105      	bne.n	800402c <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8004020:	4b0e      	ldr	r3, [pc, #56]	; (800405c <arm_mpu_init+0x58>)
 8004022:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8004024:	f7ff ffdc 	bl	8003fe0 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 8004028:	2000      	movs	r0, #0
}
 800402a:	bd10      	pop	{r4, pc}
 800402c:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800402e:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8004032:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 8004036:	4313      	orrs	r3, r2
 8004038:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 800403c:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 800403e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 8004048:	3201      	adds	r2, #1
 800404a:	e7e5      	b.n	8004018 <arm_mpu_init+0x14>
		return -1;
 800404c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004050:	e7eb      	b.n	800402a <arm_mpu_init+0x26>
 8004052:	bf00      	nop
 8004054:	0800686c 	.word	0x0800686c
 8004058:	e000ed90 	.word	0xe000ed90
 800405c:	2000034a 	.word	0x2000034a

08004060 <arm_core_mpu_configure_static_mpu_regions>:
{
 8004060:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8004062:	4c03      	ldr	r4, [pc, #12]	; (8004070 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8004064:	2301      	movs	r3, #1
 8004066:	7822      	ldrb	r2, [r4, #0]
 8004068:	f7ff ff76 	bl	8003f58 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 800406c:	7020      	strb	r0, [r4, #0]
}
 800406e:	bd10      	pop	{r4, pc}
 8004070:	2000034a 	.word	0x2000034a

08004074 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 8004074:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 8004076:	4a08      	ldr	r2, [pc, #32]	; (8004098 <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 8004078:	2300      	movs	r3, #0
 800407a:	7812      	ldrb	r2, [r2, #0]
 800407c:	f7ff ff6c 	bl	8003f58 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8004080:	f110 0f16 	cmn.w	r0, #22
 8004084:	d003      	beq.n	800408e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 8004088:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800408a:	2807      	cmp	r0, #7
 800408c:	dd00      	ble.n	8004090 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 800408e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8004090:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 8004092:	611a      	str	r2, [r3, #16]
 8004094:	3001      	adds	r0, #1
 8004096:	e7f8      	b.n	800408a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 8004098:	2000034a 	.word	0x2000034a
 800409c:	e000ed90 	.word	0xe000ed90

080040a0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 80040a0:	4b01      	ldr	r3, [pc, #4]	; (80040a8 <__stdout_hook_install+0x8>)
 80040a2:	6018      	str	r0, [r3, #0]
}
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	20001214 	.word	0x20001214

080040ac <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
 80040ac:	b538      	push	{r3, r4, r5, lr}
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
 80040ae:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 80040b2:	4605      	mov	r5, r0
	sys_sem_take(&heap_sem, K_FOREVER);
 80040b4:	480a      	ldr	r0, [pc, #40]	; (80040e0 <_sbrk+0x34>)
 80040b6:	f001 fac3 	bl	8005640 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80040ba:	4a0a      	ldr	r2, [pc, #40]	; (80040e4 <_sbrk+0x38>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80040bc:	490a      	ldr	r1, [pc, #40]	; (80040e8 <_sbrk+0x3c>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80040be:	6814      	ldr	r4, [r2, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
	}

	sys_sem_give(&heap_sem);
 80040c0:	4807      	ldr	r0, [pc, #28]	; (80040e0 <_sbrk+0x34>)
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80040c2:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
 80040c6:	4425      	add	r5, r4
 80040c8:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 80040cc:	429d      	cmp	r5, r3
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80040ce:	bf36      	itet	cc
 80040d0:	1864      	addcc	r4, r4, r1
		ret = (void *)-1;
 80040d2:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
		heap_sz += count;
 80040d6:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
 80040d8:	f001 faad 	bl	8005636 <sys_sem_give>

	return ret;
}
 80040dc:	4620      	mov	r0, r4
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	200012d8 	.word	0x200012d8
 80040e4:	2000012c 	.word	0x2000012c
 80040e8:	200012fc 	.word	0x200012fc

080040ec <pinmux_stm32_init>:
#endif 

};

static int pinmux_stm32_init(struct device *port)
{
 80040ec:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 80040ee:	2104      	movs	r1, #4
 80040f0:	4802      	ldr	r0, [pc, #8]	; (80040fc <pinmux_stm32_init+0x10>)
 80040f2:	f7ff fba1 	bl	8003838 <stm32_setup_pins>

	return 0;
}
 80040f6:	2000      	movs	r0, #0
 80040f8:	bd08      	pop	{r3, pc}
 80040fa:	bf00      	nop
 80040fc:	080068b8 	.word	0x080068b8

08004100 <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004100:	6803      	ldr	r3, [r0, #0]
{
 8004102:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8004104:	689c      	ldr	r4, [r3, #8]
 8004106:	4806      	ldr	r0, [pc, #24]	; (8004120 <gpio_stm32_init+0x20>)
 8004108:	f000 fcb0 	bl	8004a6c <z_impl_device_get_binding>
 800410c:	6843      	ldr	r3, [r0, #4]
 800410e:	f104 0108 	add.w	r1, r4, #8
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8004116:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8004118:	bf18      	it	ne
 800411a:	f06f 0004 	mvnne.w	r0, #4
 800411e:	bd10      	pop	{r4, pc}
 8004120:	08006a08 	.word	0x08006a08

08004124 <gpio_stm32_config>:
{
 8004124:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8004128:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 800412a:	6803      	ldr	r3, [r0, #0]
 800412c:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 800412e:	f005 0380 	and.w	r3, r5, #128	; 0x80
 8004132:	430b      	orrs	r3, r1
{
 8004134:	4680      	mov	r8, r0
 8004136:	4614      	mov	r4, r2
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 8004138:	d005      	beq.n	8004146 <gpio_stm32_config+0x22>
		return -ENOTSUP;
 800413a:	f06f 0685 	mvn.w	r6, #133	; 0x85
}
 800413e:	4630      	mov	r0, r6
 8004140:	b004      	add	sp, #16
 8004142:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 8004146:	a901      	add	r1, sp, #4
 8004148:	4628      	mov	r0, r5
 800414a:	f001 fd33 	bl	8005bb4 <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 800414e:	4606      	mov	r6, r0
 8004150:	2800      	cmp	r0, #0
 8004152:	d1f4      	bne.n	800413e <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 8004154:	4603      	mov	r3, r0
 8004156:	9a01      	ldr	r2, [sp, #4]
 8004158:	6838      	ldr	r0, [r7, #0]
 800415a:	4621      	mov	r1, r4
 800415c:	f001 fd47 	bl	8005bee <gpio_stm32_configure>
 8004160:	b110      	cbz	r0, 8004168 <gpio_stm32_config+0x44>
		err = -EIO;
 8004162:	f06f 0604 	mvn.w	r6, #4
 8004166:	e7ea      	b.n	800413e <gpio_stm32_config+0x1a>
	if (flags & GPIO_INT) {
 8004168:	f015 0602 	ands.w	r6, r5, #2
 800416c:	6879      	ldr	r1, [r7, #4]
 800416e:	d051      	beq.n	8004214 <gpio_stm32_config+0xf0>
		if (stm32_exti_set_callback(pin, cfg->port,
 8004170:	4643      	mov	r3, r8
 8004172:	4a41      	ldr	r2, [pc, #260]	; (8004278 <gpio_stm32_config+0x154>)
 8004174:	4620      	mov	r0, r4
 8004176:	f7ff fa4d 	bl	8003614 <stm32_exti_set_callback>
 800417a:	2800      	cmp	r0, #0
 800417c:	d178      	bne.n	8004270 <gpio_stm32_config+0x14c>
		gpio_stm32_enable_int(cfg->port, pin);
 800417e:	687e      	ldr	r6, [r7, #4]
 8004180:	483e      	ldr	r0, [pc, #248]	; (800427c <gpio_stm32_config+0x158>)
 8004182:	f000 fc73 	bl	8004a6c <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 8004186:	493e      	ldr	r1, [pc, #248]	; (8004280 <gpio_stm32_config+0x15c>)
 8004188:	4602      	mov	r2, r0
 800418a:	c903      	ldmia	r1, {r0, r1}
 800418c:	ab02      	add	r3, sp, #8
 800418e:	e883 0003 	stmia.w	r3, {r0, r1}
 8004192:	6851      	ldr	r1, [r2, #4]
 8004194:	4610      	mov	r0, r2
 8004196:	680f      	ldr	r7, [r1, #0]
 8004198:	4619      	mov	r1, r3
 800419a:	47b8      	blx	r7
	if (pin > 15) {
 800419c:	2c0f      	cmp	r4, #15
 800419e:	dc24      	bgt.n	80041ea <gpio_stm32_config+0xc6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80041a0:	4262      	negs	r2, r4
 80041a2:	f002 0203 	and.w	r2, r2, #3
 80041a6:	f004 0303 	and.w	r3, r4, #3
 80041aa:	bf58      	it	pl
 80041ac:	4253      	negpl	r3, r2
 80041ae:	3304      	adds	r3, #4
 80041b0:	009a      	lsls	r2, r3, #2
 80041b2:	2c00      	cmp	r4, #0
 80041b4:	f04f 030f 	mov.w	r3, #15
 80041b8:	fa03 f302 	lsl.w	r3, r3, r2
 80041bc:	4622      	mov	r2, r4
 80041be:	bfb8      	it	lt
 80041c0:	1ce2      	addlt	r2, r4, #3
 80041c2:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 80041c6:	b2da      	uxtb	r2, r3
 80041c8:	0092      	lsls	r2, r2, #2
 80041ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80041ce:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80041d2:	0c1b      	lsrs	r3, r3, #16
 80041d4:	6891      	ldr	r1, [r2, #8]
 80041d6:	ea21 0103 	bic.w	r1, r1, r3
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041da:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	fa06 f303 	lsl.w	r3, r6, r3
 80041e6:	430b      	orrs	r3, r1
 80041e8:	6093      	str	r3, [r2, #8]
		if ((flags & GPIO_INT_EDGE) != 0) {
 80041ea:	06aa      	lsls	r2, r5, #26
 80041ec:	d5a5      	bpl.n	800413a <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 80041ee:	066b      	lsls	r3, r5, #25
 80041f0:	d40e      	bmi.n	8004210 <gpio_stm32_config+0xec>
				edge = STM32_EXTI_TRIG_FALLING;
 80041f2:	f015 0f04 	tst.w	r5, #4
 80041f6:	bf14      	ite	ne
 80041f8:	2101      	movne	r1, #1
 80041fa:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 80041fc:	4620      	mov	r0, r4
 80041fe:	f7ff f9f1 	bl	80035e4 <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 8004202:	4620      	mov	r0, r4
 8004204:	f7ff f9ca 	bl	800359c <stm32_exti_enable>
 8004208:	2800      	cmp	r0, #0
 800420a:	d1aa      	bne.n	8004162 <gpio_stm32_config+0x3e>
	int err = 0;
 800420c:	2600      	movs	r6, #0
 800420e:	e796      	b.n	800413e <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 8004210:	2103      	movs	r1, #3
 8004212:	e7f3      	b.n	80041fc <gpio_stm32_config+0xd8>
	if (pin > 15) {
 8004214:	2c0f      	cmp	r4, #15
 8004216:	dc28      	bgt.n	800426a <gpio_stm32_config+0x146>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8004218:	4263      	negs	r3, r4
 800421a:	f003 0303 	and.w	r3, r3, #3
 800421e:	f004 0203 	and.w	r2, r4, #3
 8004222:	bf58      	it	pl
 8004224:	425a      	negpl	r2, r3
 8004226:	3204      	adds	r2, #4
 8004228:	0093      	lsls	r3, r2, #2
 800422a:	2c00      	cmp	r4, #0
 800422c:	f04f 020f 	mov.w	r2, #15
 8004230:	fa02 f203 	lsl.w	r2, r2, r3
 8004234:	4623      	mov	r3, r4
 8004236:	bfb8      	it	lt
 8004238:	1ce3      	addlt	r3, r4, #3
 800423a:	ea42 02a3 	orr.w	r2, r2, r3, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800423e:	b2d3      	uxtb	r3, r2
 8004240:	4810      	ldr	r0, [pc, #64]	; (8004284 <gpio_stm32_config+0x160>)
 8004242:	3302      	adds	r3, #2
 8004244:	0c12      	lsrs	r2, r2, #16
 8004246:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800424a:	4013      	ands	r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800424c:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 8004250:	fab2 f282 	clz	r2, r2
 8004254:	fa23 f202 	lsr.w	r2, r3, r2
		if (gpio_stm32_int_enabled_port(pin) == cfg->port) {
 8004258:	4291      	cmp	r1, r2
 800425a:	d1d7      	bne.n	800420c <gpio_stm32_config+0xe8>
			stm32_exti_disable(pin);
 800425c:	4620      	mov	r0, r4
 800425e:	f7ff f9b5 	bl	80035cc <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 8004262:	4620      	mov	r0, r4
 8004264:	f7ff f9e8 	bl	8003638 <stm32_exti_unset_callback>
 8004268:	e769      	b.n	800413e <gpio_stm32_config+0x1a>
		return -EINVAL;
 800426a:	f06f 0215 	mvn.w	r2, #21
 800426e:	e7f3      	b.n	8004258 <gpio_stm32_config+0x134>
			err = -EBUSY;
 8004270:	f06f 060f 	mvn.w	r6, #15
 8004274:	e763      	b.n	800413e <gpio_stm32_config+0x1a>
 8004276:	bf00      	nop
 8004278:	08005ab9 	.word	0x08005ab9
 800427c:	08006a08 	.word	0x08006a08
 8004280:	08006760 	.word	0x08006760
 8004284:	40013800 	.word	0x40013800

08004288 <pwm_stm32_pin_set>:
 *
 * return 0, or negative errno code
 */
static int pwm_stm32_pin_set(struct device *dev, u32_t pwm,
			     u32_t period_cycles, u32_t pulse_cycles)
{
 8004288:	b5f0      	push	{r4, r5, r6, r7, lr}
 800428a:	461f      	mov	r7, r3
 800428c:	b089      	sub	sp, #36	; 0x24
	struct pwm_stm32_data *data = DEV_DATA(dev);
 800428e:	6886      	ldr	r6, [r0, #8]
	TIM_HandleTypeDef *TimerHandle = &data->hpwm;
	TIM_OC_InitTypeDef sConfig;
	u32_t channel;
	bool counter_32b;

	if (period_cycles == 0U || pulse_cycles > period_cycles) {
 8004290:	b3a2      	cbz	r2, 80042fc <pwm_stm32_pin_set+0x74>
 8004292:	429a      	cmp	r2, r3
 8004294:	d332      	bcc.n	80042fc <pwm_stm32_pin_set+0x74>
	}

	/* configure channel */
	channel = (pwm - 1)*CHANNEL_LENGTH;

	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004296:	6803      	ldr	r3, [r0, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
	channel = (pwm - 1)*CHANNEL_LENGTH;
 800429a:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 800429e:	6819      	ldr	r1, [r3, #0]
 80042a0:	4b33      	ldr	r3, [pc, #204]	; (8004370 <pwm_stm32_pin_set+0xe8>)
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80042a2:	3c01      	subs	r4, #1
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80042a4:	4299      	cmp	r1, r3
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80042a6:	ea4f 0484 	mov.w	r4, r4, lsl #2
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80042aa:	d05e      	beq.n	800436a <pwm_stm32_pin_set+0xe2>
 80042ac:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80042b0:	d027      	beq.n	8004302 <pwm_stm32_pin_set+0x7a>
 80042b2:	4830      	ldr	r0, [pc, #192]	; (8004374 <pwm_stm32_pin_set+0xec>)
 80042b4:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80042b8:	4283      	cmp	r3, r0
 80042ba:	d053      	beq.n	8004364 <pwm_stm32_pin_set+0xdc>
 80042bc:	f421 5580 	bic.w	r5, r1, #4096	; 0x1000
 80042c0:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 80042c4:	4285      	cmp	r5, r0
 80042c6:	d04d      	beq.n	8004364 <pwm_stm32_pin_set+0xdc>
 80042c8:	f421 6580 	bic.w	r5, r1, #1024	; 0x400
 80042cc:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 80042d0:	4285      	cmp	r5, r0
 80042d2:	d047      	beq.n	8004364 <pwm_stm32_pin_set+0xdc>
 80042d4:	f421 4580 	bic.w	r5, r1, #16384	; 0x4000
 80042d8:	f500 4074 	add.w	r0, r0, #62464	; 0xf400
 80042dc:	4285      	cmp	r5, r0
 80042de:	d041      	beq.n	8004364 <pwm_stm32_pin_set+0xdc>
 80042e0:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 80042e4:	4283      	cmp	r3, r0
 80042e6:	d03d      	beq.n	8004364 <pwm_stm32_pin_set+0xdc>
 80042e8:	4b23      	ldr	r3, [pc, #140]	; (8004378 <pwm_stm32_pin_set+0xf0>)
 80042ea:	4299      	cmp	r1, r3
 80042ec:	d03d      	beq.n	800436a <pwm_stm32_pin_set+0xe2>
 80042ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042f2:	4299      	cmp	r1, r3
 80042f4:	d039      	beq.n	800436a <pwm_stm32_pin_set+0xe2>
		!IS_TIM_CHANNELS(channel)) {
		return -ENOTSUP;
 80042f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80042fa:	e031      	b.n	8004360 <pwm_stm32_pin_set+0xd8>
		return -EINVAL;
 80042fc:	f06f 0015 	mvn.w	r0, #21
 8004300:	e02e      	b.n	8004360 <pwm_stm32_pin_set+0xd8>
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004302:	b184      	cbz	r4, 8004326 <pwm_stm32_pin_set+0x9e>
		!IS_TIM_CHANNELS(channel)) {
 8004304:	f024 0308 	bic.w	r3, r4, #8
 8004308:	2b04      	cmp	r3, #4
 800430a:	d003      	beq.n	8004314 <pwm_stm32_pin_set+0x8c>
 800430c:	2c08      	cmp	r4, #8
 800430e:	d001      	beq.n	8004314 <pwm_stm32_pin_set+0x8c>
 8004310:	2c3c      	cmp	r4, #60	; 0x3c
 8004312:	d1f0      	bne.n	80042f6 <pwm_stm32_pin_set+0x6e>
	/* FIXME: IS_TIM_32B_COUNTER_INSTANCE not available on
	 * SMT32F1 Cube HAL since all timer counters are 16 bits
	 */
	counter_32b = 0;
#else
	counter_32b = IS_TIM_32B_COUNTER_INSTANCE(PWM_STRUCT(dev));
 8004314:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8004318:	d005      	beq.n	8004326 <pwm_stm32_pin_set+0x9e>

	/*
	 * The timer counts from 0 up to the value in the ARR register (16-bit).
	 * Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!counter_32b && (period_cycles > 0x10000)) {
 800431a:	4b18      	ldr	r3, [pc, #96]	; (800437c <pwm_stm32_pin_set+0xf4>)
 800431c:	4299      	cmp	r1, r3
 800431e:	d002      	beq.n	8004326 <pwm_stm32_pin_set+0x9e>
 8004320:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004324:	d8e7      	bhi.n	80042f6 <pwm_stm32_pin_set+0x6e>
	}

	/* Configure Timer IP */
	TimerHandle->Instance = PWM_STRUCT(dev);
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
	TimerHandle->Init.ClockDivision = 0;
 8004326:	2500      	movs	r5, #0
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 8004328:	6c33      	ldr	r3, [r6, #64]	; 0x40
	TimerHandle->Instance = PWM_STRUCT(dev);
 800432a:	6031      	str	r1, [r6, #0]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
	TimerHandle->Init.RepetitionCounter = 0;

	/* Set period value */
	TimerHandle->Init.Period = period_cycles - 1;
 800432c:	3a01      	subs	r2, #1
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 800432e:	6073      	str	r3, [r6, #4]
	TimerHandle->Init.Period = period_cycles - 1;
 8004330:	60f2      	str	r2, [r6, #12]
	TimerHandle->Init.ClockDivision = 0;
 8004332:	6135      	str	r5, [r6, #16]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8004334:	60b5      	str	r5, [r6, #8]
	TimerHandle->Init.RepetitionCounter = 0;
 8004336:	6175      	str	r5, [r6, #20]

	HAL_TIM_PWM_Init(TimerHandle);
 8004338:	4630      	mov	r0, r6
 800433a:	f001 fd9d 	bl	8005e78 <HAL_TIM_PWM_Init>

	/* Configure PWM channel */
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 800433e:	2360      	movs	r3, #96	; 0x60
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;

	/* Set the pulse value */
	sConfig.Pulse = pulse_cycles;

	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8004340:	a901      	add	r1, sp, #4
 8004342:	4622      	mov	r2, r4
 8004344:	4630      	mov	r0, r6
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 8004346:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8004348:	9503      	str	r5, [sp, #12]
	sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 800434a:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800434e:	e9cd 5506 	strd	r5, r5, [sp, #24]
	sConfig.Pulse = pulse_cycles;
 8004352:	9702      	str	r7, [sp, #8]
	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8004354:	f001 fdaa 	bl	8005eac <HAL_TIM_PWM_ConfigChannel>

	return HAL_TIM_PWM_Start(TimerHandle, channel);
 8004358:	4621      	mov	r1, r4
 800435a:	4630      	mov	r0, r6
 800435c:	f001 fe16 	bl	8005f8c <HAL_TIM_PWM_Start>
}
 8004360:	b009      	add	sp, #36	; 0x24
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 8004364:	2c00      	cmp	r4, #0
 8004366:	d1cd      	bne.n	8004304 <pwm_stm32_pin_set+0x7c>
 8004368:	e7d7      	b.n	800431a <pwm_stm32_pin_set+0x92>
 800436a:	2c00      	cmp	r4, #0
 800436c:	d1ca      	bne.n	8004304 <pwm_stm32_pin_set+0x7c>
 800436e:	e7d7      	b.n	8004320 <pwm_stm32_pin_set+0x98>
 8004370:	40010000 	.word	0x40010000
 8004374:	40000400 	.word	0x40000400
 8004378:	40001c00 	.word	0x40001c00
 800437c:	40000c00 	.word	0x40000c00

08004380 <pwm_stm32_init>:
	data->clock = clk;
}


static int pwm_stm32_init(struct device *dev)
{
 8004380:	b538      	push	{r3, r4, r5, lr}
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 8004382:	6803      	ldr	r3, [r0, #0]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8004384:	6885      	ldr	r5, [r0, #8]
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 8004386:	689c      	ldr	r4, [r3, #8]
 8004388:	4806      	ldr	r0, [pc, #24]	; (80043a4 <pwm_stm32_init+0x24>)
 800438a:	f000 fb6f 	bl	8004a6c <z_impl_device_get_binding>
 800438e:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8004390:	6468      	str	r0, [r5, #68]	; 0x44
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	1d21      	adds	r1, r4, #4
 8004396:	4798      	blx	r3

	__pwm_stm32_get_clock(dev);

	/* enable clock */
	if (clock_control_on(data->clock,
 8004398:	2800      	cmp	r0, #0
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 800439a:	bf18      	it	ne
 800439c:	f06f 0004 	mvnne.w	r0, #4
 80043a0:	bd38      	pop	{r3, r4, r5, pc}
 80043a2:	bf00      	nop
 80043a4:	08006a08 	.word	0x08006a08

080043a8 <uart_stm32_configure>:
	return UART_CFG_PARITY_NONE;
}

static int uart_stm32_configure(struct device *dev,
				const struct uart_config *cfg)
{
 80043a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80043ac:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80043ae:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80043b0:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80043b2:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80043b4:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 80043b6:	2a01      	cmp	r2, #1
{
 80043b8:	460d      	mov	r5, r1
	switch (parity) {
 80043ba:	d075      	beq.n	80044a8 <uart_stm32_configure+0x100>
		return LL_USART_PARITY_NONE;
 80043bc:	2a02      	cmp	r2, #2
 80043be:	bf0c      	ite	eq
 80043c0:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 80043c4:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80043c6:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 80043ca:	f895 9006 	ldrb.w	r9, [r5, #6]
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 80043ce:	79ef      	ldrb	r7, [r5, #7]
 80043d0:	f1b8 0f02 	cmp.w	r8, #2
 80043d4:	bf96      	itet	ls
 80043d6:	4b37      	ldrls	r3, [pc, #220]	; (80044b4 <uart_stm32_configure+0x10c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 80043d8:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 80043dc:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 80043e0:	f1b9 0f04 	cmp.w	r9, #4
 80043e4:	bf0c      	ite	eq
 80043e6:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 80043ea:	2300      	movne	r3, #0

	/* Hardware doesn't support mark or space parity */
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80043ec:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 80043ee:	2f01      	cmp	r7, #1
 80043f0:	bf14      	ite	ne
 80043f2:	f04f 0c00 	movne.w	ip, #0
 80043f6:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 80043fa:	2a01      	cmp	r2, #1
 80043fc:	d957      	bls.n	80044ae <uart_stm32_configure+0x106>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
		return -ENOTSUP;
	}
#else
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 80043fe:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8004402:	d054      	beq.n	80044ae <uart_stm32_configure+0x106>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8004404:	f1b9 0f02 	cmp.w	r9, #2
 8004408:	d951      	bls.n	80044ae <uart_stm32_configure+0x106>
		) {
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 800440a:	b187      	cbz	r7, 800442e <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 800440c:	4a2a      	ldr	r2, [pc, #168]	; (80044b8 <uart_stm32_configure+0x110>)
 800440e:	4294      	cmp	r4, r2
 8004410:	d00b      	beq.n	800442a <uart_stm32_configure+0x82>
 8004412:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8004416:	4294      	cmp	r4, r2
 8004418:	d007      	beq.n	800442a <uart_stm32_configure+0x82>
 800441a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800441e:	4294      	cmp	r4, r2
 8004420:	d003      	beq.n	800442a <uart_stm32_configure+0x82>
 8004422:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8004426:	4294      	cmp	r4, r2
 8004428:	d141      	bne.n	80044ae <uart_stm32_configure+0x106>
 800442a:	2f01      	cmp	r7, #1
 800442c:	d13f      	bne.n	80044ae <uart_stm32_configure+0x106>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 800442e:	68e2      	ldr	r2, [r4, #12]
 8004430:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004434:	60e2      	str	r2, [r4, #12]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8004436:	68e2      	ldr	r2, [r4, #12]
 8004438:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 800443c:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 800443e:	bf1f      	itttt	ne
 8004440:	68e7      	ldrne	r7, [r4, #12]
 8004442:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8004446:	430f      	orrne	r7, r1
 8004448:	60e7      	strne	r7, [r4, #12]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800444a:	6922      	ldr	r2, [r4, #16]
 800444c:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8004450:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004452:	bf1f      	itttt	ne
 8004454:	6921      	ldrne	r1, [r4, #16]
 8004456:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 800445a:	ea41 010e 	orrne.w	r1, r1, lr
 800445e:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8004460:	68e2      	ldr	r2, [r4, #12]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8004462:	6829      	ldr	r1, [r5, #0]
 8004464:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8004468:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 800446a:	bf1f      	itttt	ne
 800446c:	68e2      	ldrne	r2, [r4, #12]
 800446e:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8004472:	431a      	orrne	r2, r3
 8004474:	60e2      	strne	r2, [r4, #12]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8004476:	6963      	ldr	r3, [r4, #20]
 8004478:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 800447c:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800447e:	bf1f      	itttt	ne
 8004480:	6963      	ldrne	r3, [r4, #20]
 8004482:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8004486:	ea43 030c 	orrne.w	r3, r3, ip
 800448a:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 800448c:	6833      	ldr	r3, [r6, #0]
 800448e:	4299      	cmp	r1, r3
 8004490:	d003      	beq.n	800449a <uart_stm32_configure+0xf2>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8004492:	f001 fc99 	bl	8005dc8 <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8004496:	682b      	ldr	r3, [r5, #0]
 8004498:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800449a:	68e3      	ldr	r3, [r4, #12]
 800449c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80044a0:	60e3      	str	r3, [r4, #12]
	}

	LL_USART_Enable(UartInstance);
	return 0;
 80044a2:	2000      	movs	r0, #0
};
 80044a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 80044a8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80044ac:	e78b      	b.n	80043c6 <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 80044ae:	f06f 0085 	mvn.w	r0, #133	; 0x85
 80044b2:	e7f7      	b.n	80044a4 <uart_stm32_configure+0xfc>
 80044b4:	08006988 	.word	0x08006988
 80044b8:	40011000 	.word	0x40011000

080044bc <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80044bc:	6803      	ldr	r3, [r0, #0]
{
 80044be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80044c2:	f8d3 8008 	ldr.w	r8, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80044c6:	6887      	ldr	r7, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80044c8:	4646      	mov	r6, r8
{
 80044ca:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80044cc:	f856 4b08 	ldr.w	r4, [r6], #8
 80044d0:	4818      	ldr	r0, [pc, #96]	; (8004534 <uart_stm32_init+0x78>)
 80044d2:	f000 facb 	bl	8004a6c <z_impl_device_get_binding>
 80044d6:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 80044d8:	6078      	str	r0, [r7, #4]
 80044da:	4631      	mov	r1, r6
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 80044e0:	4606      	mov	r6, r0
 80044e2:	bb20      	cbnz	r0, 800452e <uart_stm32_init+0x72>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 80044e4:	68e3      	ldr	r3, [r4, #12]
 80044e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044ea:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 80044ec:	68e3      	ldr	r3, [r4, #12]
 80044ee:	f043 030c 	orr.w	r3, r3, #12
 80044f2:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80044f4:	68e3      	ldr	r3, [r4, #12]
 80044f6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80044fa:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80044fc:	6923      	ldr	r3, [r4, #16]
 80044fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004502:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8004504:	f898 3010 	ldrb.w	r3, [r8, #16]
 8004508:	b133      	cbz	r3, 8004518 <uart_stm32_init+0x5c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800450a:	682b      	ldr	r3, [r5, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004510:	6953      	ldr	r3, [r2, #20]
 8004512:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004516:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8004518:	6839      	ldr	r1, [r7, #0]
 800451a:	4628      	mov	r0, r5
 800451c:	f001 fc54 	bl	8005dc8 <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8004520:	68e3      	ldr	r3, [r4, #12]
 8004522:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004526:	60e3      	str	r3, [r4, #12]

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 8004528:	4630      	mov	r0, r6
 800452a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 800452e:	f06f 0604 	mvn.w	r6, #4
 8004532:	e7f9      	b.n	8004528 <uart_stm32_init+0x6c>
 8004534:	08006a08 	.word	0x08006a08

08004538 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004538:	6a03      	ldr	r3, [r0, #32]
 800453a:	f023 0301 	bic.w	r3, r3, #1
 800453e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004540:	6a03      	ldr	r3, [r0, #32]
{
 8004542:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004546:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004548:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800454a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800454e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004550:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8004552:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004556:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004558:	4d0e      	ldr	r5, [pc, #56]	; (8004594 <TIM_OC1_SetConfig+0x5c>)
 800455a:	42a8      	cmp	r0, r5
 800455c:	d002      	beq.n	8004564 <TIM_OC1_SetConfig+0x2c>
 800455e:	4e0e      	ldr	r6, [pc, #56]	; (8004598 <TIM_OC1_SetConfig+0x60>)
 8004560:	42b0      	cmp	r0, r6
 8004562:	d110      	bne.n	8004586 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004564:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004566:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800456a:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800456c:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800456e:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004572:	d002      	beq.n	800457a <TIM_OC1_SetConfig+0x42>
 8004574:	4d08      	ldr	r5, [pc, #32]	; (8004598 <TIM_OC1_SetConfig+0x60>)
 8004576:	42a8      	cmp	r0, r5
 8004578:	d105      	bne.n	8004586 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800457a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800457e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004582:	4335      	orrs	r5, r6
 8004584:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004586:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004588:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800458a:	684a      	ldr	r2, [r1, #4]
 800458c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	6203      	str	r3, [r0, #32]
}
 8004590:	bd70      	pop	{r4, r5, r6, pc}
 8004592:	bf00      	nop
 8004594:	40010000 	.word	0x40010000
 8004598:	40010400 	.word	0x40010400

0800459c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459c:	6a03      	ldr	r3, [r0, #32]
 800459e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a4:	6a03      	ldr	r3, [r0, #32]
{
 80045a6:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045ae:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80045b2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80045b6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045ba:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045be:	4d11      	ldr	r5, [pc, #68]	; (8004604 <TIM_OC3_SetConfig+0x68>)
 80045c0:	42a8      	cmp	r0, r5
 80045c2:	d003      	beq.n	80045cc <TIM_OC3_SetConfig+0x30>
 80045c4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045c8:	42a8      	cmp	r0, r5
 80045ca:	d114      	bne.n	80045f6 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045cc:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80045ce:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045d2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045d6:	4d0b      	ldr	r5, [pc, #44]	; (8004604 <TIM_OC3_SetConfig+0x68>)
 80045d8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 80045da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045de:	d003      	beq.n	80045e8 <TIM_OC3_SetConfig+0x4c>
 80045e0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80045e4:	42a8      	cmp	r0, r5
 80045e6:	d106      	bne.n	80045f6 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045e8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80045ec:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80045f0:	4335      	orrs	r5, r6
 80045f2:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045f8:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80045fa:	684a      	ldr	r2, [r1, #4]
 80045fc:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fe:	6203      	str	r3, [r0, #32]
}
 8004600:	bd70      	pop	{r4, r5, r6, pc}
 8004602:	bf00      	nop
 8004604:	40010000 	.word	0x40010000

08004608 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004608:	6a03      	ldr	r3, [r0, #32]
 800460a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800460e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004610:	6a03      	ldr	r3, [r0, #32]
{
 8004612:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004616:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004618:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800461a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800461e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004622:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004624:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004628:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800462c:	4d08      	ldr	r5, [pc, #32]	; (8004650 <TIM_OC4_SetConfig+0x48>)
 800462e:	42a8      	cmp	r0, r5
 8004630:	d003      	beq.n	800463a <TIM_OC4_SetConfig+0x32>
 8004632:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004636:	42a8      	cmp	r0, r5
 8004638:	d104      	bne.n	8004644 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800463a:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800463c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004640:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004644:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004646:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004648:	684a      	ldr	r2, [r1, #4]
 800464a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800464c:	6203      	str	r3, [r0, #32]
}
 800464e:	bd30      	pop	{r4, r5, pc}
 8004650:	40010000 	.word	0x40010000

08004654 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004654:	4a30      	ldr	r2, [pc, #192]	; (8004718 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8004656:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004658:	4290      	cmp	r0, r2
 800465a:	d012      	beq.n	8004682 <TIM_Base_SetConfig+0x2e>
 800465c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004660:	d00f      	beq.n	8004682 <TIM_Base_SetConfig+0x2e>
 8004662:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8004666:	4290      	cmp	r0, r2
 8004668:	d00b      	beq.n	8004682 <TIM_Base_SetConfig+0x2e>
 800466a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800466e:	4290      	cmp	r0, r2
 8004670:	d007      	beq.n	8004682 <TIM_Base_SetConfig+0x2e>
 8004672:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004676:	4290      	cmp	r0, r2
 8004678:	d003      	beq.n	8004682 <TIM_Base_SetConfig+0x2e>
 800467a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800467e:	4290      	cmp	r0, r2
 8004680:	d119      	bne.n	80046b6 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8004682:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004684:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004688:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800468a:	4a23      	ldr	r2, [pc, #140]	; (8004718 <TIM_Base_SetConfig+0xc4>)
 800468c:	4290      	cmp	r0, r2
 800468e:	d029      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 8004690:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8004694:	d026      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 8004696:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 800469a:	4290      	cmp	r0, r2
 800469c:	d022      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 800469e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046a2:	4290      	cmp	r0, r2
 80046a4:	d01e      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046aa:	4290      	cmp	r0, r2
 80046ac:	d01a      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046ae:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 80046b2:	4290      	cmp	r0, r2
 80046b4:	d016      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046b6:	4a19      	ldr	r2, [pc, #100]	; (800471c <TIM_Base_SetConfig+0xc8>)
 80046b8:	4290      	cmp	r0, r2
 80046ba:	d013      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046bc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c0:	4290      	cmp	r0, r2
 80046c2:	d00f      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046c8:	4290      	cmp	r0, r2
 80046ca:	d00b      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046cc:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 80046d0:	4290      	cmp	r0, r2
 80046d2:	d007      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046d8:	4290      	cmp	r0, r2
 80046da:	d003      	beq.n	80046e4 <TIM_Base_SetConfig+0x90>
 80046dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80046e0:	4290      	cmp	r0, r2
 80046e2:	d103      	bne.n	80046ec <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046e4:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80046e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80046ea:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80046ec:	694a      	ldr	r2, [r1, #20]
 80046ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f2:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80046f4:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80046f6:	688b      	ldr	r3, [r1, #8]
 80046f8:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80046fa:	680b      	ldr	r3, [r1, #0]
 80046fc:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046fe:	4b06      	ldr	r3, [pc, #24]	; (8004718 <TIM_Base_SetConfig+0xc4>)
 8004700:	4298      	cmp	r0, r3
 8004702:	d003      	beq.n	800470c <TIM_Base_SetConfig+0xb8>
 8004704:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004708:	4298      	cmp	r0, r3
 800470a:	d101      	bne.n	8004710 <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 800470c:	690b      	ldr	r3, [r1, #16]
 800470e:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004710:	2301      	movs	r3, #1
 8004712:	6143      	str	r3, [r0, #20]
}
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40014000 	.word	0x40014000

08004720 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004720:	6a03      	ldr	r3, [r0, #32]
 8004722:	f023 0310 	bic.w	r3, r3, #16
 8004726:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004728:	6a03      	ldr	r3, [r0, #32]
{
 800472a:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 800472c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800472e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004730:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004732:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004736:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800473a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800473c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004740:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004744:	4d10      	ldr	r5, [pc, #64]	; (8004788 <TIM_OC2_SetConfig+0x68>)
 8004746:	42a8      	cmp	r0, r5
 8004748:	d003      	beq.n	8004752 <TIM_OC2_SetConfig+0x32>
 800474a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800474e:	42a8      	cmp	r0, r5
 8004750:	d114      	bne.n	800477c <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004752:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004754:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004758:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800475c:	4d0a      	ldr	r5, [pc, #40]	; (8004788 <TIM_OC2_SetConfig+0x68>)
 800475e:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8004760:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004764:	d003      	beq.n	800476e <TIM_OC2_SetConfig+0x4e>
 8004766:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800476a:	42a8      	cmp	r0, r5
 800476c:	d106      	bne.n	800477c <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800476e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004772:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004776:	4335      	orrs	r5, r6
 8004778:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 800477c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800477e:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8004780:	684a      	ldr	r2, [r1, #4]
 8004782:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004784:	6203      	str	r3, [r0, #32]
}
 8004786:	bd70      	pop	{r4, r5, r6, pc}
 8004788:	40010000 	.word	0x40010000

0800478c <HAL_TIM_OC_Start>:
{
 800478c:	b510      	push	{r4, lr}
 800478e:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004790:	2201      	movs	r2, #1
 8004792:	6800      	ldr	r0, [r0, #0]
 8004794:	f001 fbec 	bl	8005f70 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004798:	6823      	ldr	r3, [r4, #0]
 800479a:	4a0b      	ldr	r2, [pc, #44]	; (80047c8 <HAL_TIM_OC_Start+0x3c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d003      	beq.n	80047a8 <HAL_TIM_OC_Start+0x1c>
 80047a0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d103      	bne.n	80047b0 <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 80047a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047ae:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b0:	689a      	ldr	r2, [r3, #8]
 80047b2:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b6:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 80047b8:	bf1e      	ittt	ne
 80047ba:	681a      	ldrne	r2, [r3, #0]
 80047bc:	f042 0201 	orrne.w	r2, r2, #1
 80047c0:	601a      	strne	r2, [r3, #0]
}
 80047c2:	2000      	movs	r0, #0
 80047c4:	bd10      	pop	{r4, pc}
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000

080047cc <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 80047cc:	b530      	push	{r4, r5, lr}
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 80047ce:	4c0a      	ldr	r4, [pc, #40]	; (80047f8 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 80047d0:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 80047d4:	6865      	ldr	r5, [r4, #4]
 80047d6:	4909      	ldr	r1, [pc, #36]	; (80047fc <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 80047d8:	4029      	ands	r1, r5
 80047da:	430a      	orrs	r2, r1
 80047dc:	4302      	orrs	r2, r0
 80047de:	6062      	str	r2, [r4, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 80047e0:	6862      	ldr	r2, [r4, #4]
 80047e2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 80047e6:	431a      	orrs	r2, r3
 80047e8:	6062      	str	r2, [r4, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 80047ea:	6862      	ldr	r2, [r4, #4]
 80047ec:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 80047f0:	431a      	orrs	r2, r3
 80047f2:	6062      	str	r2, [r4, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80047f4:	bd30      	pop	{r4, r5, pc}
 80047f6:	bf00      	nop
 80047f8:	40023800 	.word	0x40023800
 80047fc:	ffbf8000 	.word	0xffbf8000

08004800 <UTILS_PLL_IsBusy>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <UTILS_PLL_IsBusy+0x24>)
 8004802:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8004804:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8004806:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004808:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 800480c:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8004810:	430a      	orrs	r2, r1
 8004812:	bf14      	ite	ne
 8004814:	2001      	movne	r0, #1
 8004816:	2000      	moveq	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 8004818:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 800481c:	bf18      	it	ne
 800481e:	2001      	movne	r0, #1
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800

08004828 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8004828:	4b39      	ldr	r3, [pc, #228]	; (8004910 <UTILS_SetFlashLatency.part.0+0xe8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8004830:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004834:	d145      	bne.n	80048c2 <UTILS_SetFlashLatency.part.0+0x9a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004836:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 800483a:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 800483e:	4298      	cmp	r0, r3
 8004840:	d80c      	bhi.n	800485c <UTILS_SetFlashLatency.part.0+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004842:	4b34      	ldr	r3, [pc, #208]	; (8004914 <UTILS_SetFlashLatency.part.0+0xec>)
 8004844:	4298      	cmp	r0, r3
 8004846:	d901      	bls.n	800484c <UTILS_SetFlashLatency.part.0+0x24>
        latency = LL_FLASH_LATENCY_4;
 8004848:	2304      	movs	r3, #4
 800484a:	e008      	b.n	800485e <UTILS_SetFlashLatency.part.0+0x36>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800484c:	4b32      	ldr	r3, [pc, #200]	; (8004918 <UTILS_SetFlashLatency.part.0+0xf0>)
 800484e:	4298      	cmp	r0, r3
 8004850:	d82f      	bhi.n	80048b2 <UTILS_SetFlashLatency.part.0+0x8a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004852:	4b32      	ldr	r3, [pc, #200]	; (800491c <UTILS_SetFlashLatency.part.0+0xf4>)
 8004854:	4298      	cmp	r0, r3
 8004856:	d92e      	bls.n	80048b6 <UTILS_SetFlashLatency.part.0+0x8e>
        latency = LL_FLASH_LATENCY_2;
 8004858:	2302      	movs	r3, #2
 800485a:	e000      	b.n	800485e <UTILS_SetFlashLatency.part.0+0x36>
        latency = LL_FLASH_LATENCY_5;
 800485c:	2305      	movs	r3, #5
 800485e:	4a2c      	ldr	r2, [pc, #176]	; (8004910 <UTILS_SetFlashLatency.part.0+0xe8>)
 8004860:	6812      	ldr	r2, [r2, #0]
 8004862:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8004866:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800486a:	d108      	bne.n	800487e <UTILS_SetFlashLatency.part.0+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800486c:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 8004870:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 8004874:	4290      	cmp	r0, r2
 8004876:	d926      	bls.n	80048c6 <UTILS_SetFlashLatency.part.0+0x9e>
 8004878:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_5;
 800487a:	bf08      	it	eq
 800487c:	2305      	moveq	r3, #5
 800487e:	4a24      	ldr	r2, [pc, #144]	; (8004910 <UTILS_SetFlashLatency.part.0+0xe8>)
 8004880:	6812      	ldr	r2, [r2, #0]
 8004882:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8004886:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 800488a:	d105      	bne.n	8004898 <UTILS_SetFlashLatency.part.0+0x70>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 800488c:	4a22      	ldr	r2, [pc, #136]	; (8004918 <UTILS_SetFlashLatency.part.0+0xf0>)
 800488e:	4290      	cmp	r0, r2
 8004890:	d930      	bls.n	80048f4 <UTILS_SetFlashLatency.part.0+0xcc>
 8004892:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_3;
 8004894:	bf08      	it	eq
 8004896:	2303      	moveq	r3, #3
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8004898:	4921      	ldr	r1, [pc, #132]	; (8004920 <UTILS_SetFlashLatency.part.0+0xf8>)
 800489a:	680a      	ldr	r2, [r1, #0]
 800489c:	f022 020f 	bic.w	r2, r2, #15
 80048a0:	431a      	orrs	r2, r3
 80048a2:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80048a4:	6808      	ldr	r0, [r1, #0]
 80048a6:	f000 000f 	and.w	r0, r0, #15
  return status;
 80048aa:	1ac0      	subs	r0, r0, r3
 80048ac:	bf18      	it	ne
 80048ae:	2001      	movne	r0, #1
}
 80048b0:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e7d3      	b.n	800485e <UTILS_SetFlashLatency.part.0+0x36>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048b6:	4b1b      	ldr	r3, [pc, #108]	; (8004924 <UTILS_SetFlashLatency.part.0+0xfc>)
 80048b8:	4298      	cmp	r0, r3
 80048ba:	bf94      	ite	ls
 80048bc:	2300      	movls	r3, #0
 80048be:	2301      	movhi	r3, #1
 80048c0:	e7cd      	b.n	800485e <UTILS_SetFlashLatency.part.0+0x36>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 80048c2:	2300      	movs	r3, #0
 80048c4:	e7cb      	b.n	800485e <UTILS_SetFlashLatency.part.0+0x36>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048c6:	4a18      	ldr	r2, [pc, #96]	; (8004928 <UTILS_SetFlashLatency.part.0+0x100>)
 80048c8:	4290      	cmp	r0, r2
 80048ca:	d905      	bls.n	80048d8 <UTILS_SetFlashLatency.part.0+0xb0>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048cc:	4a12      	ldr	r2, [pc, #72]	; (8004918 <UTILS_SetFlashLatency.part.0+0xf0>)
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048ce:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_4;
 80048d0:	bf08      	it	eq
 80048d2:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048d4:	4290      	cmp	r0, r2
 80048d6:	d8d2      	bhi.n	800487e <UTILS_SetFlashLatency.part.0+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048d8:	4a10      	ldr	r2, [pc, #64]	; (800491c <UTILS_SetFlashLatency.part.0+0xf4>)
 80048da:	4290      	cmp	r0, r2
 80048dc:	d903      	bls.n	80048e6 <UTILS_SetFlashLatency.part.0+0xbe>
 80048de:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_2;
 80048e0:	bf08      	it	eq
 80048e2:	2302      	moveq	r3, #2
 80048e4:	e7cb      	b.n	800487e <UTILS_SetFlashLatency.part.0+0x56>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048e6:	4a0f      	ldr	r2, [pc, #60]	; (8004924 <UTILS_SetFlashLatency.part.0+0xfc>)
 80048e8:	4290      	cmp	r0, r2
 80048ea:	d9c8      	bls.n	800487e <UTILS_SetFlashLatency.part.0+0x56>
 80048ec:	2b00      	cmp	r3, #0
          latency = LL_FLASH_LATENCY_1;
 80048ee:	bf08      	it	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	e7c4      	b.n	800487e <UTILS_SetFlashLatency.part.0+0x56>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 80048f4:	4a09      	ldr	r2, [pc, #36]	; (800491c <UTILS_SetFlashLatency.part.0+0xf4>)
 80048f6:	4290      	cmp	r0, r2
 80048f8:	d903      	bls.n	8004902 <UTILS_SetFlashLatency.part.0+0xda>
 80048fa:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_2;
 80048fc:	bf08      	it	eq
 80048fe:	2302      	moveq	r3, #2
 8004900:	e7ca      	b.n	8004898 <UTILS_SetFlashLatency.part.0+0x70>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8004902:	4a08      	ldr	r2, [pc, #32]	; (8004924 <UTILS_SetFlashLatency.part.0+0xfc>)
 8004904:	4290      	cmp	r0, r2
 8004906:	d9c7      	bls.n	8004898 <UTILS_SetFlashLatency.part.0+0x70>
 8004908:	2b00      	cmp	r3, #0
          latency = LL_FLASH_LATENCY_1;
 800490a:	bf08      	it	eq
 800490c:	2301      	moveq	r3, #1
 800490e:	e7c3      	b.n	8004898 <UTILS_SetFlashLatency.part.0+0x70>
 8004910:	40007000 	.word	0x40007000
 8004914:	07270e00 	.word	0x07270e00
 8004918:	055d4a80 	.word	0x055d4a80
 800491c:	03938700 	.word	0x03938700
 8004920:	40023c00 	.word	0x40023c00
 8004924:	01c9c380 	.word	0x01c9c380
 8004928:	00b71b00 	.word	0x00b71b00

0800492c <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800492c:	680b      	ldr	r3, [r1, #0]
 800492e:	4a24      	ldr	r2, [pc, #144]	; (80049c0 <UTILS_EnablePLLAndSwitchSystem+0x94>)
 8004930:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8004934:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8004936:	4d23      	ldr	r5, [pc, #140]	; (80049c4 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8004938:	5cd4      	ldrb	r4, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 800493a:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 800493c:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8004940:	42a3      	cmp	r3, r4
{
 8004942:	460e      	mov	r6, r1
  if(SystemCoreClock < hclk_frequency)
 8004944:	d327      	bcc.n	8004996 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8004946:	4b20      	ldr	r3, [pc, #128]	; (80049c8 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800494e:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8004950:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8004952:	0192      	lsls	r2, r2, #6
 8004954:	d5fc      	bpl.n	8004950 <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004956:	689a      	ldr	r2, [r3, #8]
 8004958:	6831      	ldr	r1, [r6, #0]
 800495a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800495e:	430a      	orrs	r2, r1
 8004960:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004962:	689a      	ldr	r2, [r3, #8]
 8004964:	f022 0203 	bic.w	r2, r2, #3
 8004968:	f042 0202 	orr.w	r2, r2, #2
 800496c:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800496e:	4b16      	ldr	r3, [pc, #88]	; (80049c8 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004976:	2a08      	cmp	r2, #8
 8004978:	d1fa      	bne.n	8004970 <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800497a:	689a      	ldr	r2, [r3, #8]
 800497c:	6871      	ldr	r1, [r6, #4]
 800497e:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004982:	430a      	orrs	r2, r1
 8004984:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	68b1      	ldr	r1, [r6, #8]
 800498a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800498e:	430a      	orrs	r2, r1
 8004990:	609a      	str	r2, [r3, #8]
 8004992:	2000      	movs	r0, #0
 8004994:	e005      	b.n	80049a2 <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8004996:	b174      	cbz	r4, 80049b6 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff ff45 	bl	8004828 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 800499e:	2800      	cmp	r0, #0
 80049a0:	d0d1      	beq.n	8004946 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 80049a2:	682b      	ldr	r3, [r5, #0]
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	d903      	bls.n	80049b0 <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 80049a8:	b13c      	cbz	r4, 80049ba <UTILS_EnablePLLAndSwitchSystem+0x8e>
 80049aa:	4620      	mov	r0, r4
 80049ac:	f7ff ff3c 	bl	8004828 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 80049b0:	b900      	cbnz	r0, 80049b4 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 80049b2:	602c      	str	r4, [r5, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 80049b4:	bd70      	pop	{r4, r5, r6, pc}
    status = ERROR;
 80049b6:	2001      	movs	r0, #1
 80049b8:	e7f3      	b.n	80049a2 <UTILS_EnablePLLAndSwitchSystem+0x76>
 80049ba:	2001      	movs	r0, #1
 80049bc:	e7fa      	b.n	80049b4 <UTILS_EnablePLLAndSwitchSystem+0x88>
 80049be:	bf00      	nop
 80049c0:	08006a27 	.word	0x08006a27
 80049c4:	20001220 	.word	0x20001220
 80049c8:	40023800 	.word	0x40023800

080049cc <LL_PLL_ConfigSystemClock_HSE>:
{
 80049cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049ce:	4605      	mov	r5, r0
 80049d0:	460f      	mov	r7, r1
 80049d2:	4614      	mov	r4, r2
 80049d4:	461e      	mov	r6, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 80049d6:	f7ff ff13 	bl	8004800 <UTILS_PLL_IsBusy>
 80049da:	bb60      	cbnz	r0, 8004a36 <LL_PLL_ConfigSystemClock_HSE+0x6a>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80049dc:	6821      	ldr	r1, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80049de:	6862      	ldr	r2, [r4, #4]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 80049e0:	f001 033f 	and.w	r3, r1, #63	; 0x3f
 80049e4:	fbb5 f5f3 	udiv	r5, r5, r3
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 80049e8:	f3c2 0308 	ubfx	r3, r2, #0, #9
 80049ec:	435d      	muls	r5, r3
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80049ee:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80049f0:	4c12      	ldr	r4, [pc, #72]	; (8004a3c <LL_PLL_ConfigSystemClock_HSE+0x70>)
 80049f2:	0c18      	lsrs	r0, r3, #16
 80049f4:	3001      	adds	r0, #1
 80049f6:	0040      	lsls	r0, r0, #1
 80049f8:	fbb5 f5f0 	udiv	r5, r5, r0
 80049fc:	6820      	ldr	r0, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 80049fe:	0380      	lsls	r0, r0, #14
 8004a00:	d40f      	bmi.n	8004a22 <LL_PLL_ConfigSystemClock_HSE+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004a02:	6820      	ldr	r0, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8004a04:	2f01      	cmp	r7, #1
 8004a06:	bf0c      	ite	eq
 8004a08:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8004a0c:	f420 2080 	bicne.w	r0, r0, #262144	; 0x40000
 8004a10:	6020      	str	r0, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8004a12:	6820      	ldr	r0, [r4, #0]
 8004a14:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8004a18:	6020      	str	r0, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8004a1a:	4c08      	ldr	r4, [pc, #32]	; (8004a3c <LL_PLL_ConfigSystemClock_HSE+0x70>)
 8004a1c:	6820      	ldr	r0, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 8004a1e:	0380      	lsls	r0, r0, #14
 8004a20:	d5fc      	bpl.n	8004a1c <LL_PLL_ConfigSystemClock_HSE+0x50>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 8004a22:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8004a26:	f7ff fed1 	bl	80047cc <LL_RCC_PLL_ConfigDomain_SYS>
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8004a2a:	4631      	mov	r1, r6
 8004a2c:	4628      	mov	r0, r5
}
 8004a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8004a32:	f7ff bf7b 	b.w	800492c <UTILS_EnablePLLAndSwitchSystem>
}
 8004a36:	2001      	movs	r0, #1
 8004a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800

08004a40 <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 8004a40:	4b09      	ldr	r3, [pc, #36]	; (8004a68 <z_sys_device_do_config_level+0x28>)
{
 8004a42:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8004a44:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8004a48:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 8004a4a:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8004a4c:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 8004a50:	42a5      	cmp	r5, r4
 8004a52:	d800      	bhi.n	8004a56 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 8004a54:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8004a56:	6823      	ldr	r3, [r4, #0]
 8004a58:	4620      	mov	r0, r4
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	4798      	blx	r3
		if (retval != 0) {
 8004a5e:	b100      	cbz	r0, 8004a62 <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 8004a60:	6066      	str	r6, [r4, #4]
								info++) {
 8004a62:	340c      	adds	r4, #12
 8004a64:	e7f4      	b.n	8004a50 <z_sys_device_do_config_level+0x10>
 8004a66:	bf00      	nop
 8004a68:	08006970 	.word	0x08006970

08004a6c <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004a6c:	4b10      	ldr	r3, [pc, #64]	; (8004ab0 <z_impl_device_get_binding+0x44>)
{
 8004a6e:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004a70:	4c10      	ldr	r4, [pc, #64]	; (8004ab4 <z_impl_device_get_binding+0x48>)
{
 8004a72:	4605      	mov	r5, r0
 8004a74:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004a76:	429c      	cmp	r4, r3
 8004a78:	d104      	bne.n	8004a84 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 8004a7a:	4c0e      	ldr	r4, [pc, #56]	; (8004ab4 <z_impl_device_get_binding+0x48>)
 8004a7c:	42b4      	cmp	r4, r6
 8004a7e:	d109      	bne.n	8004a94 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 8004a80:	2400      	movs	r4, #0
 8004a82:	e012      	b.n	8004aaa <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 8004a84:	6862      	ldr	r2, [r4, #4]
 8004a86:	b11a      	cbz	r2, 8004a90 <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 8004a88:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	42aa      	cmp	r2, r5
 8004a8e:	d00c      	beq.n	8004aaa <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004a90:	340c      	adds	r4, #12
 8004a92:	e7f0      	b.n	8004a76 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 8004a94:	6863      	ldr	r3, [r4, #4]
 8004a96:	b90b      	cbnz	r3, 8004a9c <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 8004a98:	340c      	adds	r4, #12
 8004a9a:	e7ef      	b.n	8004a7c <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 8004a9c:	6823      	ldr	r3, [r4, #0]
 8004a9e:	4628      	mov	r0, r5
 8004aa0:	6819      	ldr	r1, [r3, #0]
 8004aa2:	f7fe f905 	bl	8002cb0 <strcmp>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d1f6      	bne.n	8004a98 <z_impl_device_get_binding+0x2c>
}
 8004aaa:	4620      	mov	r0, r4
 8004aac:	bd70      	pop	{r4, r5, r6, pc}
 8004aae:	bf00      	nop
 8004ab0:	200012d8 	.word	0x200012d8
 8004ab4:	20001230 	.word	0x20001230

08004ab8 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 8004ab8:	4802      	ldr	r0, [pc, #8]	; (8004ac4 <z_bss_zero+0xc>)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 8004aba:	4a03      	ldr	r2, [pc, #12]	; (8004ac8 <z_bss_zero+0x10>)
 8004abc:	2100      	movs	r1, #0
 8004abe:	1a12      	subs	r2, r2, r0
 8004ac0:	f7fe b8ee 	b.w	8002ca0 <memset>
 8004ac4:	20000000 	.word	0x20000000
 8004ac8:	20000350 	.word	0x20000350

08004acc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8004acc:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 8004ace:	4806      	ldr	r0, [pc, #24]	; (8004ae8 <z_data_copy+0x1c>)
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <z_data_copy+0x20>)
 8004ad2:	4907      	ldr	r1, [pc, #28]	; (8004af0 <z_data_copy+0x24>)
 8004ad4:	1a12      	subs	r2, r2, r0
 8004ad6:	f7fe f8d5 	bl	8002c84 <memcpy>
 8004ada:	4a06      	ldr	r2, [pc, #24]	; (8004af4 <z_data_copy+0x28>)
 8004adc:	4906      	ldr	r1, [pc, #24]	; (8004af8 <z_data_copy+0x2c>)
 8004ade:	4807      	ldr	r0, [pc, #28]	; (8004afc <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 8004ae0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ae4:	f7fe b8ce 	b.w	8002c84 <memcpy>
 8004ae8:	20001090 	.word	0x20001090
 8004aec:	200012fc 	.word	0x200012fc
 8004af0:	08006acc 	.word	0x08006acc
 8004af4:	00000000 	.word	0x00000000
 8004af8:	08006acc 	.word	0x08006acc
 8004afc:	20000000 	.word	0x20000000

08004b00 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 8004b00:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 8004b02:	2002      	movs	r0, #2
 8004b04:	f7ff ff9c 	bl	8004a40 <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
 8004b08:	4807      	ldr	r0, [pc, #28]	; (8004b28 <bg_thread_main+0x28>)
 8004b0a:	f000 ff32 	bl	8005972 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 8004b0e:	2003      	movs	r0, #3
 8004b10:	f7ff ff96 	bl	8004a40 <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8004b14:	f000 fbb4 	bl	8005280 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8004b18:	f7fe fa32 	bl	8002f80 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8004b1c:	4a03      	ldr	r2, [pc, #12]	; (8004b2c <bg_thread_main+0x2c>)
 8004b1e:	7b13      	ldrb	r3, [r2, #12]
 8004b20:	f023 0301 	bic.w	r3, r3, #1
 8004b24:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8004b26:	bd08      	pop	{r3, pc}
 8004b28:	08006a37 	.word	0x08006a37
 8004b2c:	20000258 	.word	0x20000258

08004b30 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 8004b30:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 8004b32:	4b36      	ldr	r3, [pc, #216]	; (8004c0c <z_cstart+0xdc>)
 8004b34:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8004b36:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8004b3a:	4c35      	ldr	r4, [pc, #212]	; (8004c10 <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
 8004b3c:	4e35      	ldr	r6, [pc, #212]	; (8004c14 <z_cstart+0xe4>)
 8004b3e:	6963      	ldr	r3, [r4, #20]
 8004b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b44:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b46:	2500      	movs	r5, #0
 8004b48:	23f0      	movs	r3, #240	; 0xf0
 8004b4a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8004b4e:	77e5      	strb	r5, [r4, #31]
 8004b50:	7625      	strb	r5, [r4, #24]
 8004b52:	7665      	strb	r5, [r4, #25]
 8004b54:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8004b56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004b58:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8004b5c:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 8004b5e:	f7ff f9a5 	bl	8003eac <z_arm_fault_init>
	z_arm_cpu_idle_init();
 8004b62:	f7ff f877 	bl	8003c54 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b6a:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 8004b6c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 8004b6e:	ab06      	add	r3, sp, #24
 8004b70:	22b0      	movs	r2, #176	; 0xb0
 8004b72:	4629      	mov	r1, r5
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe f893 	bl	8002ca0 <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 8004b7a:	4c27      	ldr	r4, [pc, #156]	; (8004c18 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
 8004b7c:	2701      	movs	r7, #1
	_current = &dummy_thread;
 8004b7e:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004b80:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
 8004b82:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 8004b86:	f7ff ff5b 	bl	8004a40 <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 8004b8a:	4638      	mov	r0, r7
 8004b8c:	f7ff ff58 	bl	8004a40 <z_sys_device_do_config_level>
	z_sched_init();
 8004b90:	f000 fa52 	bl	8005038 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004b94:	4b21      	ldr	r3, [pc, #132]	; (8004c1c <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 8004b96:	6226      	str	r6, [r4, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 8004b98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b9c:	e9cd 7304 	strd	r7, r3, [sp, #16]
 8004ba0:	e9cd 5502 	strd	r5, r5, [sp, #8]
 8004ba4:	4b1e      	ldr	r3, [pc, #120]	; (8004c20 <z_cstart+0xf0>)
 8004ba6:	491f      	ldr	r1, [pc, #124]	; (8004c24 <z_cstart+0xf4>)
 8004ba8:	e9cd 5500 	strd	r5, r5, [sp]
 8004bac:	4630      	mov	r0, r6
 8004bae:	f000 fb2f 	bl	8005210 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004bb2:	7b73      	ldrb	r3, [r6, #13]
 8004bb4:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004bb8:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004bbc:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8004bbe:	d104      	bne.n	8004bca <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 8004bc0:	69b3      	ldr	r3, [r6, #24]
 8004bc2:	b913      	cbnz	r3, 8004bca <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
 8004bc4:	4630      	mov	r0, r6
 8004bc6:	f000 f8e7 	bl	8004d98 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
 8004bca:	4b17      	ldr	r3, [pc, #92]	; (8004c28 <z_cstart+0xf8>)
 8004bcc:	4d17      	ldr	r5, [pc, #92]	; (8004c2c <z_cstart+0xfc>)
 8004bce:	9305      	str	r3, [sp, #20]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	230f      	movs	r3, #15
 8004bd4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004bd8:	2300      	movs	r3, #0
 8004bda:	e9cd 3301 	strd	r3, r3, [sp, #4]
 8004bde:	9300      	str	r3, [sp, #0]
 8004be0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8004be4:	4b12      	ldr	r3, [pc, #72]	; (8004c30 <z_cstart+0x100>)
 8004be6:	4913      	ldr	r1, [pc, #76]	; (8004c34 <z_cstart+0x104>)
 8004be8:	4628      	mov	r0, r5
 8004bea:	f000 fb11 	bl	8005210 <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 8004bee:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
 8004bf0:	60e5      	str	r5, [r4, #12]
 8004bf2:	f023 0304 	bic.w	r3, r3, #4
 8004bf6:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8004bf8:	4b0f      	ldr	r3, [pc, #60]	; (8004c38 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8004bfa:	490a      	ldr	r1, [pc, #40]	; (8004c24 <z_cstart+0xf4>)
 8004bfc:	4805      	ldr	r0, [pc, #20]	; (8004c14 <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
 8004bfe:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004c02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c06:	4b06      	ldr	r3, [pc, #24]	; (8004c20 <z_cstart+0xf0>)
 8004c08:	f7fe fffa 	bl	8003c00 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8004c0c:	20001090 	.word	0x20001090
 8004c10:	e000ed00 	.word	0xe000ed00
 8004c14:	20000258 	.word	0x20000258
 8004c18:	20000308 	.word	0x20000308
 8004c1c:	08006a79 	.word	0x08006a79
 8004c20:	08004b01 	.word	0x08004b01
 8004c24:	20000350 	.word	0x20000350
 8004c28:	08006a7e 	.word	0x08006a7e
 8004c2c:	200001a8 	.word	0x200001a8
 8004c30:	08006251 	.word	0x08006251
 8004c34:	20000750 	.word	0x20000750
 8004c38:	20000320 	.word	0x20000320

08004c3c <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8004c3c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8004c3e:	4c07      	ldr	r4, [pc, #28]	; (8004c5c <init_static_pools+0x20>)
 8004c40:	4d07      	ldr	r5, [pc, #28]	; (8004c60 <init_static_pools+0x24>)
 8004c42:	42ac      	cmp	r4, r5
 8004c44:	d301      	bcc.n	8004c4a <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8004c46:	2000      	movs	r0, #0
 8004c48:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8004c4a:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 8004c4e:	4620      	mov	r0, r4
 8004c50:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8004c54:	f000 fca9 	bl	80055aa <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8004c58:	341c      	adds	r4, #28
 8004c5a:	e7f2      	b.n	8004c42 <init_static_pools+0x6>
 8004c5c:	200012d8 	.word	0x200012d8
 8004c60:	200012d8 	.word	0x200012d8

08004c64 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 8004c64:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 8004c66:	4c08      	ldr	r4, [pc, #32]	; (8004c88 <z_reset_time_slice+0x24>)
 8004c68:	6823      	ldr	r3, [r4, #0]
 8004c6a:	b15b      	cbz	r3, 8004c84 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 8004c6c:	f7fe feb8 	bl	80039e0 <z_clock_elapsed>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	4a06      	ldr	r2, [pc, #24]	; (8004c8c <z_reset_time_slice+0x28>)
 8004c74:	4418      	add	r0, r3
 8004c76:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 8004c78:	2100      	movs	r1, #0
 8004c7a:	4618      	mov	r0, r3
	}
}
 8004c7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 8004c80:	f001 bac8 	b.w	8006214 <z_set_timeout_expiry>
}
 8004c84:	bd10      	pop	{r4, pc}
 8004c86:	bf00      	nop
 8004c88:	20000340 	.word	0x20000340
 8004c8c:	20000308 	.word	0x20000308

08004c90 <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 8004c90:	b510      	push	{r4, lr}
 8004c92:	f04f 0310 	mov.w	r3, #16
 8004c96:	f3ef 8411 	mrs	r4, BASEPRI
 8004c9a:	f383 8811 	msr	BASEPRI, r3
 8004c9e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <k_sched_time_slice_set+0x34>)
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 8004ca8:	4a07      	ldr	r2, [pc, #28]	; (8004cc8 <k_sched_time_slice_set+0x38>)
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((u32_t)t) * (to_hz / from_hz);
 8004caa:	230a      	movs	r3, #10
 8004cac:	4343      	muls	r3, r0
 8004cae:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 8004cb0:	4b06      	ldr	r3, [pc, #24]	; (8004ccc <k_sched_time_slice_set+0x3c>)
 8004cb2:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 8004cb4:	f7ff ffd6 	bl	8004c64 <z_reset_time_slice>
	__asm__ volatile(
 8004cb8:	f384 8811 	msr	BASEPRI, r4
 8004cbc:	f3bf 8f6f 	isb	sy
	}
}
 8004cc0:	bd10      	pop	{r4, pc}
 8004cc2:	bf00      	nop
 8004cc4:	20000308 	.word	0x20000308
 8004cc8:	20000340 	.word	0x20000340
 8004ccc:	2000033c 	.word	0x2000033c

08004cd0 <k_sched_lock>:
	__asm__ volatile(
 8004cd0:	f04f 0310 	mov.w	r3, #16
 8004cd4:	f3ef 8111 	mrs	r1, BASEPRI
 8004cd8:	f383 8811 	msr	BASEPRI, r3
 8004cdc:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 8004ce0:	4b04      	ldr	r3, [pc, #16]	; (8004cf4 <k_sched_lock+0x24>)
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	7bd3      	ldrb	r3, [r2, #15]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8004cea:	f381 8811 	msr	BASEPRI, r1
 8004cee:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 8004cf2:	4770      	bx	lr
 8004cf4:	20000308 	.word	0x20000308

08004cf8 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8004cf8:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <z_priq_dumb_remove+0x28>)
 8004cfa:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8004cfe:	4282      	cmp	r2, r0
 8004d00:	d105      	bne.n	8004d0e <z_priq_dumb_remove+0x16>
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	428b      	cmp	r3, r1
 8004d06:	d102      	bne.n	8004d0e <z_priq_dumb_remove+0x16>
 8004d08:	7b4b      	ldrb	r3, [r1, #13]
 8004d0a:	06db      	lsls	r3, r3, #27
 8004d0c:	d106      	bne.n	8004d1c <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 8004d0e:	e9d1 3200 	ldrd	r3, r2, [r1]
 8004d12:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8004d14:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8004d16:	2300      	movs	r3, #0
	node->prev = NULL;
 8004d18:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	20000308 	.word	0x20000308

08004d24 <update_cache>:
{
 8004d24:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8004d26:	4c0d      	ldr	r4, [pc, #52]	; (8004d5c <update_cache+0x38>)
{
 8004d28:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8004d2a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8004d2e:	f001 f98d 	bl	800604c <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
 8004d32:	4605      	mov	r5, r0
 8004d34:	b900      	cbnz	r0, 8004d38 <update_cache+0x14>
 8004d36:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8004d38:	68a3      	ldr	r3, [r4, #8]
 8004d3a:	b94a      	cbnz	r2, 8004d50 <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 8004d3c:	7b5a      	ldrb	r2, [r3, #13]
 8004d3e:	06d2      	lsls	r2, r2, #27
 8004d40:	d106      	bne.n	8004d50 <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 8004d42:	69aa      	ldr	r2, [r5, #24]
 8004d44:	b922      	cbnz	r2, 8004d50 <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
 8004d46:	89da      	ldrh	r2, [r3, #14]
 8004d48:	2a7f      	cmp	r2, #127	; 0x7f
 8004d4a:	d901      	bls.n	8004d50 <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8004d4c:	6223      	str	r3, [r4, #32]
}
 8004d4e:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
 8004d50:	429d      	cmp	r5, r3
 8004d52:	d001      	beq.n	8004d58 <update_cache+0x34>
			z_reset_time_slice();
 8004d54:	f7ff ff86 	bl	8004c64 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
 8004d58:	6225      	str	r5, [r4, #32]
}
 8004d5a:	e7f8      	b.n	8004d4e <update_cache+0x2a>
 8004d5c:	20000308 	.word	0x20000308

08004d60 <k_sched_unlock>:
{
 8004d60:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004d62:	f04f 0310 	mov.w	r3, #16
 8004d66:	f3ef 8411 	mrs	r4, BASEPRI
 8004d6a:	f383 8811 	msr	BASEPRI, r3
 8004d6e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 8004d72:	4b08      	ldr	r3, [pc, #32]	; (8004d94 <k_sched_unlock+0x34>)
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	7bd3      	ldrb	r3, [r2, #15]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 8004d7c:	2000      	movs	r0, #0
 8004d7e:	f7ff ffd1 	bl	8004d24 <update_cache>
	__asm__ volatile(
 8004d82:	f384 8811 	msr	BASEPRI, r4
 8004d86:	f3bf 8f6f 	isb	sy
}
 8004d8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 8004d8e:	f001 b953 	b.w	8006038 <z_reschedule_unlocked>
 8004d92:	bf00      	nop
 8004d94:	20000308 	.word	0x20000308

08004d98 <z_add_thread_to_ready_q>:
{
 8004d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 8004d9a:	f04f 0310 	mov.w	r3, #16
 8004d9e:	f3ef 8411 	mrs	r4, BASEPRI
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
	return list->head == list;
 8004daa:	4a15      	ldr	r2, [pc, #84]	; (8004e00 <z_add_thread_to_ready_q+0x68>)
 8004dac:	4611      	mov	r1, r2
 8004dae:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004db2:	428b      	cmp	r3, r1
 8004db4:	d01d      	beq.n	8004df2 <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004db6:	b1e3      	cbz	r3, 8004df2 <z_add_thread_to_ready_q+0x5a>
 8004db8:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8004dba:	f990 500e 	ldrsb.w	r5, [r0, #14]
 8004dbe:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8004dc2:	42af      	cmp	r7, r5
 8004dc4:	dd10      	ble.n	8004de8 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 8004dc6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004dc8:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8004dcc:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 8004dce:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 8004dd0:	7b43      	ldrb	r3, [r0, #13]
 8004dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dd6:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 8004dd8:	2000      	movs	r0, #0
 8004dda:	f7ff ffa3 	bl	8004d24 <update_cache>
	__asm__ volatile(
 8004dde:	f384 8811 	msr	BASEPRI, r4
 8004de2:	f3bf 8f6f 	isb	sy
}
 8004de6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8004de8:	42b3      	cmp	r3, r6
 8004dea:	d002      	beq.n	8004df2 <z_add_thread_to_ready_q+0x5a>
 8004dec:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e5      	bne.n	8004dbe <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 8004df2:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004df4:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 8004df6:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 8004df8:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
 8004dfa:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8004dfc:	6290      	str	r0, [r2, #40]	; 0x28
 8004dfe:	e7e7      	b.n	8004dd0 <z_add_thread_to_ready_q+0x38>
 8004e00:	20000308 	.word	0x20000308

08004e04 <z_move_thread_to_end_of_prio_q>:
{
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	4604      	mov	r4, r0
	__asm__ volatile(
 8004e08:	f04f 0310 	mov.w	r3, #16
 8004e0c:	f3ef 8511 	mrs	r5, BASEPRI
 8004e10:	f383 8811 	msr	BASEPRI, r3
 8004e14:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8004e18:	7b43      	ldrb	r3, [r0, #13]
 8004e1a:	065a      	lsls	r2, r3, #25
 8004e1c:	d503      	bpl.n	8004e26 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8004e1e:	4601      	mov	r1, r0
 8004e20:	4817      	ldr	r0, [pc, #92]	; (8004e80 <z_move_thread_to_end_of_prio_q+0x7c>)
 8004e22:	f7ff ff69 	bl	8004cf8 <z_priq_dumb_remove>
	return list->head == list;
 8004e26:	4a17      	ldr	r2, [pc, #92]	; (8004e84 <z_move_thread_to_end_of_prio_q+0x80>)
 8004e28:	e9d2 3009 	ldrd	r3, r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004e2c:	f102 0124 	add.w	r1, r2, #36	; 0x24
 8004e30:	428b      	cmp	r3, r1
 8004e32:	d01f      	beq.n	8004e74 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004e34:	b1f3      	cbz	r3, 8004e74 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
 8004e36:	f994 600e 	ldrsb.w	r6, [r4, #14]
 8004e3a:	f993 700e 	ldrsb.w	r7, [r3, #14]
 8004e3e:	42b7      	cmp	r7, r6
 8004e40:	dd13      	ble.n	8004e6a <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
 8004e42:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8004e44:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 8004e48:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8004e4a:	605c      	str	r4, [r3, #4]
 8004e4c:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 8004e4e:	6890      	ldr	r0, [r2, #8]
 8004e50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e54:	7363      	strb	r3, [r4, #13]
 8004e56:	1b03      	subs	r3, r0, r4
 8004e58:	4258      	negs	r0, r3
 8004e5a:	4158      	adcs	r0, r3
 8004e5c:	f7ff ff62 	bl	8004d24 <update_cache>
	__asm__ volatile(
 8004e60:	f385 8811 	msr	BASEPRI, r5
 8004e64:	f3bf 8f6f 	isb	sy
}
 8004e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8004e6a:	4283      	cmp	r3, r0
 8004e6c:	d002      	beq.n	8004e74 <z_move_thread_to_end_of_prio_q+0x70>
 8004e6e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1e2      	bne.n	8004e3a <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
 8004e74:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
 8004e78:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8004e7a:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8004e7c:	6294      	str	r4, [r2, #40]	; 0x28
 8004e7e:	e7e5      	b.n	8004e4c <z_move_thread_to_end_of_prio_q+0x48>
 8004e80:	2000032c 	.word	0x2000032c
 8004e84:	20000308 	.word	0x20000308

08004e88 <z_time_slice>:
	if (pending_current == _current) {
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <z_time_slice+0x58>)
 8004e8a:	4916      	ldr	r1, [pc, #88]	; (8004ee4 <z_time_slice+0x5c>)
{
 8004e8c:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 8004e8e:	680c      	ldr	r4, [r1, #0]
 8004e90:	6893      	ldr	r3, [r2, #8]
 8004e92:	42a3      	cmp	r3, r4
 8004e94:	4614      	mov	r4, r2
 8004e96:	d103      	bne.n	8004ea0 <z_time_slice+0x18>
}
 8004e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 8004e9c:	f7ff bee2 	b.w	8004c64 <z_reset_time_slice>
	pending_current = NULL;
 8004ea0:	2500      	movs	r5, #0
 8004ea2:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
 8004ea4:	4910      	ldr	r1, [pc, #64]	; (8004ee8 <z_time_slice+0x60>)
 8004ea6:	6809      	ldr	r1, [r1, #0]
 8004ea8:	b1b9      	cbz	r1, 8004eda <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
 8004eaa:	89d9      	ldrh	r1, [r3, #14]
 8004eac:	297f      	cmp	r1, #127	; 0x7f
 8004eae:	d814      	bhi.n	8004eda <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
 8004eb0:	490e      	ldr	r1, [pc, #56]	; (8004eec <z_time_slice+0x64>)
 8004eb2:	f993 500e 	ldrsb.w	r5, [r3, #14]
 8004eb6:	6809      	ldr	r1, [r1, #0]
 8004eb8:	428d      	cmp	r5, r1
 8004eba:	db0e      	blt.n	8004eda <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
 8004ebc:	490c      	ldr	r1, [pc, #48]	; (8004ef0 <z_time_slice+0x68>)
 8004ebe:	428b      	cmp	r3, r1
 8004ec0:	d00b      	beq.n	8004eda <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
 8004ec2:	6999      	ldr	r1, [r3, #24]
 8004ec4:	b949      	cbnz	r1, 8004eda <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 8004ec6:	6911      	ldr	r1, [r2, #16]
 8004ec8:	4281      	cmp	r1, r0
 8004eca:	dc03      	bgt.n	8004ed4 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f7ff ff99 	bl	8004e04 <z_move_thread_to_end_of_prio_q>
 8004ed2:	e7e1      	b.n	8004e98 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
 8004ed4:	1a09      	subs	r1, r1, r0
 8004ed6:	6111      	str	r1, [r2, #16]
}
 8004ed8:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	6123      	str	r3, [r4, #16]
 8004ede:	e7fb      	b.n	8004ed8 <z_time_slice+0x50>
 8004ee0:	20000308 	.word	0x20000308
 8004ee4:	20000338 	.word	0x20000338
 8004ee8:	20000340 	.word	0x20000340
 8004eec:	2000033c 	.word	0x2000033c
 8004ef0:	200001a8 	.word	0x200001a8

08004ef4 <z_remove_thread_from_ready_q>:
{
 8004ef4:	b538      	push	{r3, r4, r5, lr}
 8004ef6:	4604      	mov	r4, r0
	__asm__ volatile(
 8004ef8:	f04f 0310 	mov.w	r3, #16
 8004efc:	f3ef 8511 	mrs	r5, BASEPRI
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8004f08:	7b43      	ldrb	r3, [r0, #13]
 8004f0a:	065a      	lsls	r2, r3, #25
 8004f0c:	d507      	bpl.n	8004f1e <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 8004f0e:	4601      	mov	r1, r0
 8004f10:	4809      	ldr	r0, [pc, #36]	; (8004f38 <z_remove_thread_from_ready_q+0x44>)
 8004f12:	f7ff fef1 	bl	8004cf8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8004f16:	7b63      	ldrb	r3, [r4, #13]
 8004f18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f1c:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 8004f1e:	4b07      	ldr	r3, [pc, #28]	; (8004f3c <z_remove_thread_from_ready_q+0x48>)
 8004f20:	6898      	ldr	r0, [r3, #8]
 8004f22:	1b03      	subs	r3, r0, r4
 8004f24:	4258      	negs	r0, r3
 8004f26:	4158      	adcs	r0, r3
 8004f28:	f7ff fefc 	bl	8004d24 <update_cache>
	__asm__ volatile(
 8004f2c:	f385 8811 	msr	BASEPRI, r5
 8004f30:	f3bf 8f6f 	isb	sy
}
 8004f34:	bd38      	pop	{r3, r4, r5, pc}
 8004f36:	bf00      	nop
 8004f38:	2000032c 	.word	0x2000032c
 8004f3c:	20000308 	.word	0x20000308

08004f40 <pend>:
{
 8004f40:	b570      	push	{r4, r5, r6, lr}
 8004f42:	4604      	mov	r4, r0
 8004f44:	460d      	mov	r5, r1
 8004f46:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
 8004f48:	f7ff ffd4 	bl	8004ef4 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8004f4c:	7b63      	ldrb	r3, [r4, #13]
 8004f4e:	f043 0302 	orr.w	r3, r3, #2
 8004f52:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8004f54:	b17d      	cbz	r5, 8004f76 <pend+0x36>
	return list->head == list;
 8004f56:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8004f58:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8004f5a:	429d      	cmp	r5, r3
 8004f5c:	d01f      	beq.n	8004f9e <pend+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004f5e:	b1f3      	cbz	r3, 8004f9e <pend+0x5e>
	if (t1->base.prio < t2->base.prio) {
 8004f60:	f994 200e 	ldrsb.w	r2, [r4, #14]
 8004f64:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8004f68:	4291      	cmp	r1, r2
 8004f6a:	dd12      	ble.n	8004f92 <pend+0x52>
	node->prev = successor->prev;
 8004f6c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8004f6e:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 8004f72:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 8004f74:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
 8004f76:	1c73      	adds	r3, r6, #1
 8004f78:	d018      	beq.n	8004fac <pend+0x6c>
		ticks = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
 8004f7a:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8004f7e:	220a      	movs	r2, #10
 8004f80:	4372      	muls	r2, r6

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 8004f82:	f104 0018 	add.w	r0, r4, #24
 8004f86:	3201      	adds	r2, #1
 8004f88:	4909      	ldr	r1, [pc, #36]	; (8004fb0 <pend+0x70>)
}
 8004f8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f8e:	f000 b9f9 	b.w	8005384 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 8004f92:	6869      	ldr	r1, [r5, #4]
 8004f94:	428b      	cmp	r3, r1
 8004f96:	d002      	beq.n	8004f9e <pend+0x5e>
 8004f98:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e2      	bne.n	8004f64 <pend+0x24>
	node->prev = list->tail;
 8004f9e:	686b      	ldr	r3, [r5, #4]
 8004fa0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 8004fa2:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 8004fa4:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 8004fa6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 8004fa8:	606c      	str	r4, [r5, #4]
 8004faa:	e7e4      	b.n	8004f76 <pend+0x36>
}
 8004fac:	bd70      	pop	{r4, r5, r6, pc}
 8004fae:	bf00      	nop
 8004fb0:	08006059 	.word	0x08006059

08004fb4 <z_pend_curr>:
{
 8004fb4:	b510      	push	{r4, lr}
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	4611      	mov	r1, r2
	pending_current = _current;
 8004fba:	4a06      	ldr	r2, [pc, #24]	; (8004fd4 <z_pend_curr+0x20>)
 8004fbc:	6890      	ldr	r0, [r2, #8]
 8004fbe:	4a06      	ldr	r2, [pc, #24]	; (8004fd8 <z_pend_curr+0x24>)
 8004fc0:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
 8004fc2:	461a      	mov	r2, r3
 8004fc4:	f7ff ffbc 	bl	8004f40 <pend>
 8004fc8:	4620      	mov	r0, r4
}
 8004fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fce:	f7fe bd49 	b.w	8003a64 <arch_swap>
 8004fd2:	bf00      	nop
 8004fd4:	20000308 	.word	0x20000308
 8004fd8:	20000338 	.word	0x20000338

08004fdc <z_tick_sleep.part.19>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static s32_t z_tick_sleep(s32_t ticks)
 8004fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (ticks == 0) {
		k_yield();
		return 0;
	}

	ticks += _TICK_ALIGN;
 8004fde:	1c46      	adds	r6, r0, #1
	expected_wakeup_time = ticks + z_tick_get_32();
 8004fe0:	f001 f932 	bl	8006248 <z_tick_get_32>
 8004fe4:	1834      	adds	r4, r6, r0
	__asm__ volatile(
 8004fe6:	f04f 0310 	mov.w	r3, #16
 8004fea:	f3ef 8711 	mrs	r7, BASEPRI
 8004fee:	f383 8811 	msr	BASEPRI, r3
 8004ff2:	f3bf 8f6f 	isb	sy
	 */
	struct k_spinlock local_lock = {};
	k_spinlock_key_t key = k_spin_lock(&local_lock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
 8004ff6:	4d0d      	ldr	r5, [pc, #52]	; (800502c <z_tick_sleep.part.19+0x50>)
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <z_tick_sleep.part.19+0x54>)
 8004ffa:	68a8      	ldr	r0, [r5, #8]
 8004ffc:	6018      	str	r0, [r3, #0]
#endif
	z_remove_thread_from_ready_q(_current);
 8004ffe:	f7ff ff79 	bl	8004ef4 <z_remove_thread_from_ready_q>
 8005002:	68a8      	ldr	r0, [r5, #8]
 8005004:	490b      	ldr	r1, [pc, #44]	; (8005034 <z_tick_sleep.part.19+0x58>)
 8005006:	4632      	mov	r2, r6
 8005008:	3018      	adds	r0, #24
 800500a:	f000 f9bb 	bl	8005384 <z_add_timeout>
	z_add_thread_timeout(_current, ticks);
	z_mark_thread_as_suspended(_current);
 800500e:	68aa      	ldr	r2, [r5, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8005010:	7b53      	ldrb	r3, [r2, #13]
 8005012:	f043 0310 	orr.w	r3, r3, #16
 8005016:	7353      	strb	r3, [r2, #13]
 8005018:	4638      	mov	r0, r7
 800501a:	f7fe fd23 	bl	8003a64 <arch_swap>

	(void)z_swap(&local_lock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
 800501e:	f001 f913 	bl	8006248 <z_tick_get_32>
 8005022:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
 8005024:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800502a:	bf00      	nop
 800502c:	20000308 	.word	0x20000308
 8005030:	20000338 	.word	0x20000338
 8005034:	08006059 	.word	0x08006059

08005038 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800503a:	2100      	movs	r1, #0
 800503c:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8005040:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8005044:	4608      	mov	r0, r1
 8005046:	f7ff be23 	b.w	8004c90 <k_sched_time_slice_set>
 800504a:	bf00      	nop
 800504c:	20000308 	.word	0x20000308

08005050 <z_impl_k_yield>:
{
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
 8005052:	4c23      	ldr	r4, [pc, #140]	; (80050e0 <z_impl_k_yield+0x90>)
 8005054:	4b23      	ldr	r3, [pc, #140]	; (80050e4 <z_impl_k_yield+0x94>)
 8005056:	68a2      	ldr	r2, [r4, #8]
 8005058:	429a      	cmp	r2, r3
 800505a:	d029      	beq.n	80050b0 <z_impl_k_yield+0x60>
 800505c:	f04f 0310 	mov.w	r3, #16
 8005060:	f3ef 8611 	mrs	r6, BASEPRI
 8005064:	f383 8811 	msr	BASEPRI, r3
 8005068:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
 800506c:	f104 0524 	add.w	r5, r4, #36	; 0x24
 8005070:	68a1      	ldr	r1, [r4, #8]
 8005072:	4628      	mov	r0, r5
 8005074:	f7ff fe40 	bl	8004cf8 <z_priq_dumb_remove>
	return list->head == list;
 8005078:	6a62      	ldr	r2, [r4, #36]	; 0x24
			_priq_run_add(&_kernel.ready_q.runq, _current);
 800507a:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800507c:	42aa      	cmp	r2, r5
 800507e:	d028      	beq.n	80050d2 <z_impl_k_yield+0x82>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8005080:	b33a      	cbz	r2, 80050d2 <z_impl_k_yield+0x82>
 8005082:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 8005084:	f993 100e 	ldrsb.w	r1, [r3, #14]
 8005088:	f992 700e 	ldrsb.w	r7, [r2, #14]
 800508c:	428f      	cmp	r7, r1
 800508e:	dd1b      	ble.n	80050c8 <z_impl_k_yield+0x78>
	node->prev = successor->prev;
 8005090:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 8005092:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
 8005096:	600b      	str	r3, [r1, #0]
	successor->prev = node;
 8005098:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
 800509a:	7b5a      	ldrb	r2, [r3, #13]
 800509c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050a0:	735a      	strb	r2, [r3, #13]
			update_cache(1);
 80050a2:	2001      	movs	r0, #1
 80050a4:	f7ff fe3e 	bl	8004d24 <update_cache>
	__asm__ volatile(
 80050a8:	f386 8811 	msr	BASEPRI, r6
 80050ac:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
 80050b0:	f04f 0310 	mov.w	r3, #16
 80050b4:	f3ef 8011 	mrs	r0, BASEPRI
 80050b8:	f383 8811 	msr	BASEPRI, r3
 80050bc:	f3bf 8f6f 	isb	sy
}
 80050c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050c4:	f7fe bcce 	b.w	8003a64 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
 80050c8:	4282      	cmp	r2, r0
 80050ca:	d002      	beq.n	80050d2 <z_impl_k_yield+0x82>
 80050cc:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80050ce:	2a00      	cmp	r2, #0
 80050d0:	d1da      	bne.n	8005088 <z_impl_k_yield+0x38>
	node->prev = list->tail;
 80050d2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80050d4:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
 80050d6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	node->next = list;
 80050d8:	601d      	str	r5, [r3, #0]
	list->tail->next = node;
 80050da:	6013      	str	r3, [r2, #0]
	list->tail = node;
 80050dc:	62a3      	str	r3, [r4, #40]	; 0x28
 80050de:	e7dc      	b.n	800509a <z_impl_k_yield+0x4a>
 80050e0:	20000308 	.word	0x20000308
 80050e4:	200001a8 	.word	0x200001a8

080050e8 <z_impl_k_sleep>:

s32_t z_impl_k_sleep(int ms)
{
 80050e8:	b538      	push	{r3, r4, r5, lr}
	s32_t ticks;

	if (ms == K_FOREVER) {
 80050ea:	1c43      	adds	r3, r0, #1
{
 80050ec:	4605      	mov	r5, r0
	if (ms == K_FOREVER) {
 80050ee:	d105      	bne.n	80050fc <z_impl_k_sleep+0x14>
		k_thread_suspend(_current);
 80050f0:	4b0b      	ldr	r3, [pc, #44]	; (8005120 <z_impl_k_sleep+0x38>)
 80050f2:	6898      	ldr	r0, [r3, #8]
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_SUSPEND);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_suspend(thread);
 80050f4:	f000 f8a4 	bl	8005240 <z_impl_k_thread_suspend>
	}

	ticks = k_ms_to_ticks_ceil32(ms);
	ticks = z_tick_sleep(ticks);
	return k_ticks_to_ms_floor64(ticks);
}
 80050f8:	4628      	mov	r0, r5
 80050fa:	bd38      	pop	{r3, r4, r5, pc}
 80050fc:	240a      	movs	r4, #10
	if (ticks == 0) {
 80050fe:	4344      	muls	r4, r0
 8005100:	d109      	bne.n	8005116 <z_impl_k_sleep+0x2e>
	z_impl_k_yield();
 8005102:	f7ff ffa5 	bl	8005050 <z_impl_k_yield>
			return t / (from_hz / to_hz);
 8005106:	220a      	movs	r2, #10
 8005108:	2300      	movs	r3, #0
 800510a:	4620      	mov	r0, r4
 800510c:	17e1      	asrs	r1, r4, #31
 800510e:	f7fc fb35 	bl	800177c <__aeabi_uldivmod>
 8005112:	4605      	mov	r5, r0
	return k_ticks_to_ms_floor64(ticks);
 8005114:	e7f0      	b.n	80050f8 <z_impl_k_sleep+0x10>
 8005116:	4620      	mov	r0, r4
 8005118:	f7ff ff60 	bl	8004fdc <z_tick_sleep.part.19>
 800511c:	4604      	mov	r4, r0
 800511e:	e7f2      	b.n	8005106 <z_impl_k_sleep+0x1e>
 8005120:	20000308 	.word	0x20000308

08005124 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 8005124:	4b01      	ldr	r3, [pc, #4]	; (800512c <z_impl_k_current_get+0x8>)
 8005126:	6898      	ldr	r0, [r3, #8]
 8005128:	4770      	bx	lr
 800512a:	bf00      	nop
 800512c:	20000308 	.word	0x20000308

08005130 <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 8005130:	b570      	push	{r4, r5, r6, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	f04f 0310 	mov.w	r3, #16
 8005138:	f3ef 8611 	mrs	r6, BASEPRI
 800513c:	f383 8811 	msr	BASEPRI, r3
 8005140:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 8005144:	f000 ffb9 	bl	80060ba <z_unpend_first_thread>
	if (thread != NULL) {
 8005148:	4605      	mov	r5, r0
 800514a:	b170      	cbz	r0, 800516a <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 800514c:	7b43      	ldrb	r3, [r0, #13]
 800514e:	06db      	lsls	r3, r3, #27
 8005150:	d103      	bne.n	800515a <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
 8005152:	6983      	ldr	r3, [r0, #24]
 8005154:	b90b      	cbnz	r3, 800515a <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
 8005156:	f7ff fe1f 	bl	8004d98 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 800515a:	2300      	movs	r3, #0
 800515c:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 800515e:	4631      	mov	r1, r6
 8005160:	4805      	ldr	r0, [pc, #20]	; (8005178 <z_impl_k_sem_give+0x48>)
}
 8005162:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 8005166:	f000 bf50 	b.w	800600a <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 800516a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800516e:	429a      	cmp	r2, r3
 8005170:	bf18      	it	ne
 8005172:	3301      	addne	r3, #1
 8005174:	60a3      	str	r3, [r4, #8]
 8005176:	e7f2      	b.n	800515e <z_impl_k_sem_give+0x2e>
 8005178:	2000034b 	.word	0x2000034b

0800517c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 800517c:	b410      	push	{r4}
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	f04f 0010 	mov.w	r0, #16
 8005186:	f3ef 8111 	mrs	r1, BASEPRI
 800518a:	f380 8811 	msr	BASEPRI, r0
 800518e:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 8005192:	6894      	ldr	r4, [r2, #8]
 8005194:	b14c      	cbz	r4, 80051aa <z_impl_k_sem_take+0x2e>
		sem->count--;
 8005196:	3c01      	subs	r4, #1
 8005198:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
 800519a:	f381 8811 	msr	BASEPRI, r1
 800519e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 80051a2:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
 80051a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051a8:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 80051aa:	b933      	cbnz	r3, 80051ba <z_impl_k_sem_take+0x3e>
 80051ac:	f381 8811 	msr	BASEPRI, r1
 80051b0:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 80051b4:	f06f 000f 	mvn.w	r0, #15
 80051b8:	e7f4      	b.n	80051a4 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80051ba:	4802      	ldr	r0, [pc, #8]	; (80051c4 <z_impl_k_sem_take+0x48>)
}
 80051bc:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80051c0:	f7ff bef8 	b.w	8004fb4 <z_pend_curr>
 80051c4:	2000034b 	.word	0x2000034b

080051c8 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 80051c8:	b510      	push	{r4, lr}
 80051ca:	4602      	mov	r2, r0
	__asm__ volatile(
 80051cc:	f04f 0310 	mov.w	r3, #16
 80051d0:	f3ef 8411 	mrs	r4, BASEPRI
 80051d4:	f383 8811 	msr	BASEPRI, r3
 80051d8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 80051dc:	7b43      	ldrb	r3, [r0, #13]
 80051de:	0759      	lsls	r1, r3, #29
 80051e0:	d404      	bmi.n	80051ec <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 80051e2:	f384 8811 	msr	BASEPRI, r4
 80051e6:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 80051ea:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80051ec:	f023 0304 	bic.w	r3, r3, #4
 80051f0:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 80051f2:	f000 ffa5 	bl	8006140 <z_is_thread_ready>
 80051f6:	b110      	cbz	r0, 80051fe <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 80051f8:	4610      	mov	r0, r2
 80051fa:	f7ff fdcd 	bl	8004d98 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 80051fe:	4621      	mov	r1, r4
 8005200:	4802      	ldr	r0, [pc, #8]	; (800520c <z_impl_k_thread_start+0x44>)
}
 8005202:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 8005206:	f000 bf00 	b.w	800600a <z_reschedule>
 800520a:	bf00      	nop
 800520c:	2000034b 	.word	0x2000034b

08005210 <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 8005210:	b530      	push	{r4, r5, lr}
 8005212:	b087      	sub	sp, #28
 8005214:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8005216:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8005218:	9504      	str	r5, [sp, #16]
 800521a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800521c:	9503      	str	r5, [sp, #12]
 800521e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005220:	9502      	str	r5, [sp, #8]
 8005222:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005224:	9501      	str	r5, [sp, #4]
 8005226:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005228:	9500      	str	r5, [sp, #0]
 800522a:	f7fe fcc5 	bl	8003bb8 <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800522e:	4b03      	ldr	r3, [pc, #12]	; (800523c <z_setup_new_thread+0x2c>)
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	b103      	cbz	r3, 8005236 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8005234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005236:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
 8005238:	b007      	add	sp, #28
 800523a:	bd30      	pop	{r4, r5, pc}
 800523c:	20000308 	.word	0x20000308

08005240 <z_impl_k_thread_suspend>:

	z_mark_thread_as_suspended(thread);
}

void z_impl_k_thread_suspend(struct k_thread *thread)
{
 8005240:	b538      	push	{r3, r4, r5, lr}
 8005242:	4605      	mov	r5, r0
	__asm__ volatile(
 8005244:	f04f 0310 	mov.w	r3, #16
 8005248:	f3ef 8411 	mrs	r4, BASEPRI
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	z_thread_single_suspend(thread);
 8005254:	f000 ff8c 	bl	8006170 <z_thread_single_suspend>

	sys_trace_thread_suspend(thread);

	if (thread == _current) {
 8005258:	4b07      	ldr	r3, [pc, #28]	; (8005278 <z_impl_k_thread_suspend+0x38>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	42ab      	cmp	r3, r5
 800525e:	d105      	bne.n	800526c <z_impl_k_thread_suspend+0x2c>
		z_reschedule(&lock, key);
 8005260:	4621      	mov	r1, r4
 8005262:	4806      	ldr	r0, [pc, #24]	; (800527c <z_impl_k_thread_suspend+0x3c>)
	} else {
		k_spin_unlock(&lock, key);
	}
}
 8005264:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&lock, key);
 8005268:	f000 becf 	b.w	800600a <z_reschedule>
	__asm__ volatile(
 800526c:	f384 8811 	msr	BASEPRI, r4
 8005270:	f3bf 8f6f 	isb	sy
}
 8005274:	bd38      	pop	{r3, r4, r5, pc}
 8005276:	bf00      	nop
 8005278:	20000308 	.word	0x20000308
 800527c:	2000034b 	.word	0x2000034b

08005280 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 8005280:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 8005282:	4e20      	ldr	r6, [pc, #128]	; (8005304 <z_init_static_threads+0x84>)
 8005284:	4d20      	ldr	r5, [pc, #128]	; (8005308 <z_init_static_threads+0x88>)
{
 8005286:	b087      	sub	sp, #28
 8005288:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
 800528a:	42b5      	cmp	r5, r6
 800528c:	f105 0430 	add.w	r4, r5, #48	; 0x30
 8005290:	d30b      	bcc.n	80052aa <z_init_static_threads+0x2a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 8005292:	f7ff fd1d 	bl	8004cd0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8005296:	4c1c      	ldr	r4, [pc, #112]	; (8005308 <z_init_static_threads+0x88>)
 8005298:	4e1c      	ldr	r6, [pc, #112]	; (800530c <z_init_static_threads+0x8c>)
			return ((u32_t)t) * (to_hz / from_hz);
 800529a:	250a      	movs	r5, #10
 800529c:	42bc      	cmp	r4, r7
 800529e:	d321      	bcc.n	80052e4 <z_init_static_threads+0x64>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 80052a0:	b007      	add	sp, #28
 80052a2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 80052a6:	f7ff bd5b 	b.w	8004d60 <k_sched_unlock>
		z_setup_new_thread(
 80052aa:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80052ae:	9305      	str	r3, [sp, #20]
 80052b0:	f854 3c10 	ldr.w	r3, [r4, #-16]
 80052b4:	9304      	str	r3, [sp, #16]
 80052b6:	f854 3c14 	ldr.w	r3, [r4, #-20]
 80052ba:	9303      	str	r3, [sp, #12]
 80052bc:	f854 3c18 	ldr.w	r3, [r4, #-24]
 80052c0:	9302      	str	r3, [sp, #8]
 80052c2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 80052c6:	9301      	str	r3, [sp, #4]
 80052c8:	f854 3c20 	ldr.w	r3, [r4, #-32]
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 80052d2:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80052d6:	f7ff ff9b 	bl	8005210 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80052da:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80052de:	64dd      	str	r5, [r3, #76]	; 0x4c
 80052e0:	4625      	mov	r5, r4
 80052e2:	e7d2      	b.n	800528a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 80052e4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80052e6:	1c53      	adds	r3, r2, #1
 80052e8:	d003      	beq.n	80052f2 <z_init_static_threads+0x72>
			schedule_new_thread(thread_data->init_thread,
 80052ea:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 80052ec:	b91a      	cbnz	r2, 80052f6 <z_init_static_threads+0x76>
	z_impl_k_thread_start(thread);
 80052ee:	f7ff ff6b 	bl	80051c8 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80052f2:	3430      	adds	r4, #48	; 0x30
 80052f4:	e7d2      	b.n	800529c <z_init_static_threads+0x1c>
 80052f6:	436a      	muls	r2, r5
 80052f8:	3201      	adds	r2, #1
 80052fa:	4631      	mov	r1, r6
 80052fc:	3018      	adds	r0, #24
 80052fe:	f000 f841 	bl	8005384 <z_add_timeout>
 8005302:	e7f6      	b.n	80052f2 <z_init_static_threads+0x72>
 8005304:	200012d8 	.word	0x200012d8
 8005308:	200012d8 	.word	0x200012d8
 800530c:	08006059 	.word	0x08006059

08005310 <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 8005310:	4b03      	ldr	r3, [pc, #12]	; (8005320 <elapsed+0x10>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	b90b      	cbnz	r3, 800531a <elapsed+0xa>
 8005316:	f7fe bb63 	b.w	80039e0 <z_clock_elapsed>
}
 800531a:	2000      	movs	r0, #0
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	20000344 	.word	0x20000344

08005324 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 8005324:	6803      	ldr	r3, [r0, #0]
 8005326:	b140      	cbz	r0, 800533a <remove_timeout+0x16>
 8005328:	4a07      	ldr	r2, [pc, #28]	; (8005348 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 800532a:	6852      	ldr	r2, [r2, #4]
 800532c:	4290      	cmp	r0, r2
 800532e:	d004      	beq.n	800533a <remove_timeout+0x16>
	if (next(t) != NULL) {
 8005330:	b11b      	cbz	r3, 800533a <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	6881      	ldr	r1, [r0, #8]
 8005336:	440a      	add	r2, r1
 8005338:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 800533a:	6842      	ldr	r2, [r0, #4]
 800533c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 800533e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8005340:	2300      	movs	r3, #0
	node->prev = NULL;
 8005342:	e9c0 3300 	strd	r3, r3, [r0]
}
 8005346:	4770      	bx	lr
 8005348:	20001224 	.word	0x20001224

0800534c <next_timeout>:
	return list->head == list;
 800534c:	4b0b      	ldr	r3, [pc, #44]	; (800537c <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 800534e:	b510      	push	{r4, lr}
 8005350:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005352:	429c      	cmp	r4, r3
 8005354:	bf08      	it	eq
 8005356:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 8005358:	f7ff ffda 	bl	8005310 <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 800535c:	b154      	cbz	r4, 8005374 <next_timeout+0x28>
 800535e:	68a3      	ldr	r3, [r4, #8]
 8005360:	1a18      	subs	r0, r3, r0
 8005362:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <next_timeout+0x34>)
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	b113      	cbz	r3, 8005372 <next_timeout+0x26>
 800536c:	4298      	cmp	r0, r3
 800536e:	bfa8      	it	ge
 8005370:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 8005372:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8005374:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8005378:	e7f5      	b.n	8005366 <next_timeout+0x1a>
 800537a:	bf00      	nop
 800537c:	20001224 	.word	0x20001224
 8005380:	20000308 	.word	0x20000308

08005384 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	4604      	mov	r4, r0
 8005388:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 800538a:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 800538c:	f04f 0310 	mov.w	r3, #16
 8005390:	f3ef 8511 	mrs	r5, BASEPRI
 8005394:	f383 8811 	msr	BASEPRI, r3
 8005398:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 800539c:	f7ff ffb8 	bl	8005310 <elapsed>
	return list->head == list;
 80053a0:	4b18      	ldr	r3, [pc, #96]	; (8005404 <z_add_timeout+0x80>)
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	2e01      	cmp	r6, #1
 80053a6:	bfac      	ite	ge
 80053a8:	1980      	addge	r0, r0, r6
 80053aa:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80053ac:	429a      	cmp	r2, r3
 80053ae:	60a0      	str	r0, [r4, #8]
 80053b0:	d001      	beq.n	80053b6 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80053b2:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 80053b4:	b932      	cbnz	r2, 80053c4 <z_add_timeout+0x40>
	node->prev = list->tail;
 80053b6:	685a      	ldr	r2, [r3, #4]
 80053b8:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 80053ba:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 80053bc:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
 80053be:	6014      	str	r4, [r2, #0]
	list->tail = node;
 80053c0:	605c      	str	r4, [r3, #4]
 80053c2:	e00a      	b.n	80053da <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 80053c4:	6890      	ldr	r0, [r2, #8]
 80053c6:	68a1      	ldr	r1, [r4, #8]
 80053c8:	4288      	cmp	r0, r1
 80053ca:	dd15      	ble.n	80053f8 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 80053cc:	1a41      	subs	r1, r0, r1
 80053ce:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 80053d0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 80053d2:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 80053d6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 80053d8:	6054      	str	r4, [r2, #4]
	return list->head == list;
 80053da:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80053dc:	429a      	cmp	r2, r3
 80053de:	d006      	beq.n	80053ee <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80053e0:	4294      	cmp	r4, r2
 80053e2:	d104      	bne.n	80053ee <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 80053e4:	f7ff ffb2 	bl	800534c <next_timeout>
 80053e8:	2100      	movs	r1, #0
 80053ea:	f7fe faa7 	bl	800393c <z_clock_set_timeout>
	__asm__ volatile(
 80053ee:	f385 8811 	msr	BASEPRI, r5
 80053f2:	f3bf 8f6f 	isb	sy
		}
	}
}
 80053f6:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 80053f8:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80053fa:	42b2      	cmp	r2, r6
 80053fc:	60a1      	str	r1, [r4, #8]
 80053fe:	d0da      	beq.n	80053b6 <z_add_timeout+0x32>
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	e7d7      	b.n	80053b4 <z_add_timeout+0x30>
 8005404:	20001224 	.word	0x20001224

08005408 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 8005408:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 800540c:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 800540e:	f7ff fd3b 	bl	8004e88 <z_time_slice>
	__asm__ volatile(
 8005412:	f04f 0310 	mov.w	r3, #16
 8005416:	f3ef 8511 	mrs	r5, BASEPRI
 800541a:	f383 8811 	msr	BASEPRI, r3
 800541e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 8005422:	4e21      	ldr	r6, [pc, #132]	; (80054a8 <z_clock_announce+0xa0>)
 8005424:	4f21      	ldr	r7, [pc, #132]	; (80054ac <z_clock_announce+0xa4>)
	return list->head == list;
 8005426:	f8df 9088 	ldr.w	r9, [pc, #136]	; 80054b0 <z_clock_announce+0xa8>
 800542a:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 800542c:	46b8      	mov	r8, r7
 800542e:	f8d9 4000 	ldr.w	r4, [r9]
 8005432:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8005434:	454c      	cmp	r4, r9
 8005436:	e9d7 bc00 	ldrd	fp, ip, [r7]
 800543a:	d005      	beq.n	8005448 <z_clock_announce+0x40>
 800543c:	b124      	cbz	r4, 8005448 <z_clock_announce+0x40>
 800543e:	68a3      	ldr	r3, [r4, #8]
 8005440:	4293      	cmp	r3, r2
 8005442:	dd14      	ble.n	800546e <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8005444:	1a9b      	subs	r3, r3, r2
 8005446:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 8005448:	eb1b 0002 	adds.w	r0, fp, r2
 800544c:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 8005450:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 8005452:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
 8005456:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
 8005458:	f7ff ff78 	bl	800534c <next_timeout>
 800545c:	4621      	mov	r1, r4
 800545e:	f7fe fa6d 	bl	800393c <z_clock_set_timeout>
	__asm__ volatile(
 8005462:	f385 8811 	msr	BASEPRI, r5
 8005466:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 800546a:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 800546e:	eb1b 0003 	adds.w	r0, fp, r3
 8005472:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 800547a:	2300      	movs	r3, #0
		curr_tick += dt;
 800547c:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 8005480:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 8005482:	4620      	mov	r0, r4
 8005484:	f7ff ff4e 	bl	8005324 <remove_timeout>
 8005488:	f385 8811 	msr	BASEPRI, r5
 800548c:	f3bf 8f6f 	isb	sy
		t->fn(t);
 8005490:	68e3      	ldr	r3, [r4, #12]
 8005492:	4798      	blx	r3
	__asm__ volatile(
 8005494:	f04f 0310 	mov.w	r3, #16
 8005498:	f3ef 8511 	mrs	r5, BASEPRI
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 80054a4:	e7c3      	b.n	800542e <z_clock_announce+0x26>
 80054a6:	bf00      	nop
 80054a8:	20000344 	.word	0x20000344
 80054ac:	20000008 	.word	0x20000008
 80054b0:	20001224 	.word	0x20001224

080054b4 <z_tick_get>:

s64_t z_tick_get(void)
{
 80054b4:	e92d 4818 	stmdb	sp!, {r3, r4, fp, lr}
 80054b8:	f04f 0310 	mov.w	r3, #16
 80054bc:	f3ef 8411 	mrs	r4, BASEPRI
 80054c0:	f383 8811 	msr	BASEPRI, r3
 80054c4:	f3bf 8f6f 	isb	sy
	u64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
 80054c8:	f7fe fa8a 	bl	80039e0 <z_clock_elapsed>
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <z_tick_get+0x38>)
 80054ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d2:	eb12 0b00 	adds.w	fp, r2, r0
 80054d6:	f143 0c00 	adc.w	ip, r3, #0
 80054da:	4658      	mov	r0, fp
 80054dc:	4661      	mov	r1, ip
	__asm__ volatile(
 80054de:	f384 8811 	msr	BASEPRI, r4
 80054e2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
 80054e6:	e8bd 8818 	ldmia.w	sp!, {r3, r4, fp, pc}
 80054ea:	bf00      	nop
 80054ec:	20000008 	.word	0x20000008

080054f0 <gpio_pin_write>:
{
 80054f0:	b410      	push	{r4}
 80054f2:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
 80054f4:	6842      	ldr	r2, [r0, #4]
 80054f6:	6854      	ldr	r4, [r2, #4]
 80054f8:	460a      	mov	r2, r1
 80054fa:	46a4      	mov	ip, r4
 80054fc:	2100      	movs	r1, #0
}
 80054fe:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
 8005502:	4760      	bx	ip

08005504 <gpio_pin_configure.constprop.2>:
static inline int gpio_pin_configure(struct device *port, u32_t pin,
 8005504:	b410      	push	{r4}
 8005506:	460a      	mov	r2, r1
	return api->config(port, access_op, pin, flags);
 8005508:	6843      	ldr	r3, [r0, #4]
 800550a:	681c      	ldr	r4, [r3, #0]
 800550c:	2100      	movs	r1, #0
 800550e:	46a4      	mov	ip, r4
 8005510:	2301      	movs	r3, #1
}
 8005512:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->config(port, access_op, pin, flags);
 8005516:	4760      	bx	ip

08005518 <k_sleep.constprop.1>:
	return z_impl_k_sleep(ms);
 8005518:	2064      	movs	r0, #100	; 0x64
 800551a:	f7ff bde5 	b.w	80050e8 <z_impl_k_sleep>

0800551e <follow_line>:
{
 800551e:	b508      	push	{r3, lr}
	drive(forwards);
 8005520:	2000      	movs	r0, #0
 8005522:	f7fd fc93 	bl	8002e4c <drive>
 8005526:	200a      	movs	r0, #10
 8005528:	f7ff fdde 	bl	80050e8 <z_impl_k_sleep>
	if (ir_sensor_right()) {
 800552c:	f7fd fdce 	bl	80030cc <ir_sensor_right>
 8005530:	b128      	cbz	r0, 800553e <follow_line+0x20>
		drive(rightwards);
 8005532:	2002      	movs	r0, #2
 8005534:	f7fd fc8a 	bl	8002e4c <drive>
 8005538:	200a      	movs	r0, #10
 800553a:	f7ff fdd5 	bl	80050e8 <z_impl_k_sleep>
	if (ir_sensor_left()) {
 800553e:	f7fd fdb5 	bl	80030ac <ir_sensor_left>
 8005542:	b138      	cbz	r0, 8005554 <follow_line+0x36>
		drive(leftwards);
 8005544:	2003      	movs	r0, #3
 8005546:	f7fd fc81 	bl	8002e4c <drive>
 800554a:	200a      	movs	r0, #10
}
 800554c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005550:	f7ff bdca 	b.w	80050e8 <z_impl_k_sleep>
 8005554:	bd08      	pop	{r3, pc}

08005556 <turn_right>:
{
 8005556:	b508      	push	{r3, lr}
		drive(rightwards);
 8005558:	2002      	movs	r0, #2
 800555a:	f7fd fc77 	bl	8002e4c <drive>
		if (ir_sensor_left()) {
 800555e:	f7fd fda5 	bl	80030ac <ir_sensor_left>
 8005562:	2800      	cmp	r0, #0
 8005564:	d0f8      	beq.n	8005558 <turn_right+0x2>
			drive(stop);
 8005566:	2004      	movs	r0, #4
}
 8005568:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			drive(stop);
 800556c:	f7fd bc6e 	b.w	8002e4c <drive>

08005570 <wait_color_change>:
{
 8005570:	b508      	push	{r3, lr}
		if (color_get() == BLUE) {
 8005572:	f7fd fe71 	bl	8003258 <color_get>
 8005576:	2802      	cmp	r0, #2
 8005578:	d102      	bne.n	8005580 <wait_color_change+0x10>
			follow_line();
 800557a:	f7ff ffd0 	bl	800551e <follow_line>
		if (color_get() == BLUE) {
 800557e:	e7f8      	b.n	8005572 <wait_color_change+0x2>
}
 8005580:	bd08      	pop	{r3, pc}

08005582 <gpio_pin_write>:
{
 8005582:	b410      	push	{r4}
 8005584:	4613      	mov	r3, r2
	return api->write(port, access_op, pin, value);
 8005586:	6842      	ldr	r2, [r0, #4]
 8005588:	6854      	ldr	r4, [r2, #4]
 800558a:	460a      	mov	r2, r1
 800558c:	46a4      	mov	ip, r4
 800558e:	2100      	movs	r1, #0
}
 8005590:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->write(port, access_op, pin, value);
 8005594:	4760      	bx	ip

08005596 <gpio_pin_configure>:
{
 8005596:	b410      	push	{r4}
 8005598:	4613      	mov	r3, r2
	return api->config(port, access_op, pin, flags);
 800559a:	6842      	ldr	r2, [r0, #4]
 800559c:	6814      	ldr	r4, [r2, #0]
 800559e:	460a      	mov	r2, r1
 80055a0:	46a4      	mov	ip, r4
 80055a2:	2100      	movs	r1, #0
}
 80055a4:	f85d 4b04 	ldr.w	r4, [sp], #4
	return api->config(port, access_op, pin, flags);
 80055a8:	4760      	bx	ip

080055aa <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
 80055aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80055ae:	6846      	ldr	r6, [r0, #4]
 80055b0:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 80055b2:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
 80055b4:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
 80055b8:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80055ba:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
 80055be:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 80055c0:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 80055c2:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
 80055c4:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
 80055c6:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
 80055ca:	4598      	cmp	r8, r3
 80055cc:	dc05      	bgt.n	80055da <z_sys_mem_pool_base_init+0x30>
 80055ce:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
 80055d0:	4619      	mov	r1, r3
 80055d2:	428f      	cmp	r7, r1
 80055d4:	dc20      	bgt.n	8005618 <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
 80055d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
 80055da:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
 80055de:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
 80055e2:	fb09 fe03 	mul.w	lr, r9, r3
 80055e6:	eb0a 040e 	add.w	r4, sl, lr
 80055ea:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
 80055ee:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
 80055f0:	e9c4 bb01 	strd	fp, fp, [r4, #4]
 80055f4:	d805      	bhi.n	8005602 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 80055f6:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
 80055f8:	0892      	lsrs	r2, r2, #2
 80055fa:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
 80055fe:	3301      	adds	r3, #1
 8005600:	e7e3      	b.n	80055ca <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
 8005602:	f115 041f 	adds.w	r4, r5, #31
 8005606:	bf48      	it	mi
 8005608:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
 800560c:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
 800560e:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
 8005612:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005616:	e7ef      	b.n	80055f8 <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
 8005618:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
 800561a:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 800561c:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
 8005620:	18ec      	adds	r4, r5, r3
	node->next = list;
 8005622:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
 8005626:	6895      	ldr	r5, [r2, #8]
 8005628:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
 800562a:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
 800562c:	3101      	adds	r1, #1
 800562e:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8005630:	4433      	add	r3, r6
 8005632:	6094      	str	r4, [r2, #8]
 8005634:	e7cd      	b.n	80055d2 <z_sys_mem_pool_base_init+0x28>

08005636 <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
 8005636:	b508      	push	{r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8005638:	f7ff fd7a 	bl	8005130 <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
 800563c:	2000      	movs	r0, #0
 800563e:	bd08      	pop	{r3, pc}

08005640 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
 8005640:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
 8005642:	f7ff fd9b 	bl	800517c <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
 8005646:	f110 0f0b 	cmn.w	r0, #11
 800564a:	d005      	beq.n	8005658 <sys_sem_take+0x18>
 800564c:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
 8005650:	bf08      	it	eq
 8005652:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
 8005656:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
 8005658:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
 800565c:	e7fb      	b.n	8005656 <sys_sem_take+0x16>

0800565e <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 800565e:	4604      	mov	r4, r0
 8005660:	b508      	push	{r3, lr}
 8005662:	4608      	mov	r0, r1
 8005664:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8005666:	461a      	mov	r2, r3
 8005668:	47a0      	blx	r4
	return z_impl_k_current_get();
 800566a:	f7ff fd5b 	bl	8005124 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 800566e:	f7fe fc31 	bl	8003ed4 <z_impl_k_thread_abort>

08005672 <arch_printk_char_out>:
}
 8005672:	2000      	movs	r0, #0
 8005674:	4770      	bx	lr

08005676 <print_err>:
{
 8005676:	b570      	push	{r4, r5, r6, lr}
 8005678:	4604      	mov	r4, r0
 800567a:	460d      	mov	r5, r1
	out('E', ctx);
 800567c:	2045      	movs	r0, #69	; 0x45
 800567e:	47a0      	blx	r4
	out('R', ctx);
 8005680:	4629      	mov	r1, r5
 8005682:	2052      	movs	r0, #82	; 0x52
 8005684:	47a0      	blx	r4
	out('R', ctx);
 8005686:	4629      	mov	r1, r5
 8005688:	4623      	mov	r3, r4
 800568a:	2052      	movs	r0, #82	; 0x52
}
 800568c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 8005690:	4718      	bx	r3

08005692 <z_vprintk>:
{
 8005692:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005696:	b08b      	sub	sp, #44	; 0x2c
 8005698:	461c      	mov	r4, r3
	char length_mod = 0;
 800569a:	f04f 0800 	mov.w	r8, #0
 800569e:	1e53      	subs	r3, r2, #1
{
 80056a0:	4606      	mov	r6, r0
 80056a2:	460f      	mov	r7, r1
 80056a4:	9302      	str	r3, [sp, #8]
	int min_width = -1;
 80056a6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 80056aa:	46c1      	mov	r9, r8
			might_format = 0;
 80056ac:	2500      	movs	r5, #0
					break;
 80056ae:	e005      	b.n	80056bc <z_vprintk+0x2a>
		if (!might_format) {
 80056b0:	b96d      	cbnz	r5, 80056ce <z_vprintk+0x3c>
			if (*fmt != '%') {
 80056b2:	2825      	cmp	r0, #37	; 0x25
 80056b4:	f000 814f 	beq.w	8005956 <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 80056b8:	4639      	mov	r1, r7
 80056ba:	47b0      	blx	r6
	while (*fmt) {
 80056bc:	9b02      	ldr	r3, [sp, #8]
 80056be:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80056c2:	9302      	str	r3, [sp, #8]
 80056c4:	2800      	cmp	r0, #0
 80056c6:	d1f3      	bne.n	80056b0 <z_vprintk+0x1e>
}
 80056c8:	b00b      	add	sp, #44	; 0x2c
 80056ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 80056ce:	2864      	cmp	r0, #100	; 0x64
 80056d0:	d06e      	beq.n	80057b0 <z_vprintk+0x11e>
 80056d2:	d81a      	bhi.n	800570a <z_vprintk+0x78>
 80056d4:	2839      	cmp	r0, #57	; 0x39
 80056d6:	d80a      	bhi.n	80056ee <z_vprintk+0x5c>
 80056d8:	2831      	cmp	r0, #49	; 0x31
 80056da:	d260      	bcs.n	800579e <z_vprintk+0x10c>
 80056dc:	282d      	cmp	r0, #45	; 0x2d
 80056de:	f000 8140 	beq.w	8005962 <z_vprintk+0x2d0>
 80056e2:	2830      	cmp	r0, #48	; 0x30
 80056e4:	d04c      	beq.n	8005780 <z_vprintk+0xee>
 80056e6:	2825      	cmp	r0, #37	; 0x25
 80056e8:	d107      	bne.n	80056fa <z_vprintk+0x68>
				out((int)'%', ctx);
 80056ea:	4639      	mov	r1, r7
 80056ec:	e00b      	b.n	8005706 <z_vprintk+0x74>
			switch (*fmt) {
 80056ee:	2858      	cmp	r0, #88	; 0x58
 80056f0:	f000 80bb 	beq.w	800586a <z_vprintk+0x1d8>
 80056f4:	2863      	cmp	r0, #99	; 0x63
 80056f6:	f000 812a 	beq.w	800594e <z_vprintk+0x2bc>
					out((int)'%', ctx);
 80056fa:	4639      	mov	r1, r7
 80056fc:	2025      	movs	r0, #37	; 0x25
 80056fe:	47b0      	blx	r6
					out((int)*fmt, ctx);
 8005700:	9b02      	ldr	r3, [sp, #8]
 8005702:	7818      	ldrb	r0, [r3, #0]
 8005704:	4639      	mov	r1, r7
 8005706:	47b0      	blx	r6
 8005708:	e7d0      	b.n	80056ac <z_vprintk+0x1a>
			switch (*fmt) {
 800570a:	2870      	cmp	r0, #112	; 0x70
 800570c:	f000 80a3 	beq.w	8005856 <z_vprintk+0x1c4>
 8005710:	d811      	bhi.n	8005736 <z_vprintk+0xa4>
 8005712:	2869      	cmp	r0, #105	; 0x69
 8005714:	d04c      	beq.n	80057b0 <z_vprintk+0x11e>
 8005716:	286c      	cmp	r0, #108	; 0x6c
 8005718:	d105      	bne.n	8005726 <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 800571a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800571e:	d12a      	bne.n	8005776 <z_vprintk+0xe4>
					length_mod = 'L';
 8005720:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8005724:	e7ca      	b.n	80056bc <z_vprintk+0x2a>
			switch (*fmt) {
 8005726:	2868      	cmp	r0, #104	; 0x68
 8005728:	d1e7      	bne.n	80056fa <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 800572a:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 800572e:	d122      	bne.n	8005776 <z_vprintk+0xe4>
					length_mod = 'H';
 8005730:	f04f 0848 	mov.w	r8, #72	; 0x48
 8005734:	e7c2      	b.n	80056bc <z_vprintk+0x2a>
			switch (*fmt) {
 8005736:	2875      	cmp	r0, #117	; 0x75
 8005738:	d071      	beq.n	800581e <z_vprintk+0x18c>
 800573a:	d818      	bhi.n	800576e <z_vprintk+0xdc>
 800573c:	2873      	cmp	r0, #115	; 0x73
 800573e:	d1dc      	bne.n	80056fa <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 8005740:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 8005744:	46ab      	mov	fp, r5
 8005746:	465b      	mov	r3, fp
 8005748:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800574c:	2800      	cmp	r0, #0
 800574e:	f040 80fb 	bne.w	8005948 <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 8005752:	f1b9 0f03 	cmp.w	r9, #3
 8005756:	f040 810a 	bne.w	800596e <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 800575a:	1b5d      	subs	r5, r3, r5
 800575c:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 8005760:	2d00      	cmp	r5, #0
 8005762:	dda3      	ble.n	80056ac <z_vprintk+0x1a>
						out(' ', ctx);
 8005764:	4639      	mov	r1, r7
 8005766:	2020      	movs	r0, #32
 8005768:	47b0      	blx	r6
 800576a:	3d01      	subs	r5, #1
 800576c:	e7f8      	b.n	8005760 <z_vprintk+0xce>
			switch (*fmt) {
 800576e:	2878      	cmp	r0, #120	; 0x78
 8005770:	d07b      	beq.n	800586a <z_vprintk+0x1d8>
 8005772:	287a      	cmp	r0, #122	; 0x7a
 8005774:	d1c1      	bne.n	80056fa <z_vprintk+0x68>
				} else if (length_mod == 0) {
 8005776:	f1b8 0f00 	cmp.w	r8, #0
 800577a:	d1be      	bne.n	80056fa <z_vprintk+0x68>
 800577c:	4680      	mov	r8, r0
 800577e:	e79d      	b.n	80056bc <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 8005780:	f1ba 0f00 	cmp.w	sl, #0
 8005784:	da0e      	bge.n	80057a4 <z_vprintk+0x112>
 8005786:	f1b9 0f00 	cmp.w	r9, #0
 800578a:	f000 80ed 	beq.w	8005968 <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 800578e:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8005792:	f1b9 0f00 	cmp.w	r9, #0
 8005796:	bf08      	it	eq
 8005798:	f04f 0902 	moveq.w	r9, #2
 800579c:	e78e      	b.n	80056bc <z_vprintk+0x2a>
				if (min_width < 0) {
 800579e:	f1ba 0f00 	cmp.w	sl, #0
 80057a2:	dbf4      	blt.n	800578e <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 80057a4:	230a      	movs	r3, #10
 80057a6:	fb03 0a0a 	mla	sl, r3, sl, r0
 80057aa:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 80057ae:	e7f0      	b.n	8005792 <z_vprintk+0x100>
				if (length_mod == 'z') {
 80057b0:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 80057b4:	d102      	bne.n	80057bc <z_vprintk+0x12a>
					d = va_arg(ap, int);
 80057b6:	f854 5b04 	ldr.w	r5, [r4], #4
 80057ba:	e01f      	b.n	80057fc <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 80057bc:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 80057c0:	d0f9      	beq.n	80057b6 <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 80057c2:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 80057c6:	d1f6      	bne.n	80057b6 <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 80057c8:	3407      	adds	r4, #7
 80057ca:	f024 0407 	bic.w	r4, r4, #7
 80057ce:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 80057d2:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 80057d6:	9106      	str	r1, [sp, #24]
 80057d8:	f143 0100 	adc.w	r1, r3, #0
 80057dc:	9107      	str	r1, [sp, #28]
 80057de:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 80057e2:	2100      	movs	r1, #0
 80057e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057e8:	4561      	cmp	r1, ip
 80057ea:	bf08      	it	eq
 80057ec:	4558      	cmpeq	r0, fp
 80057ee:	d204      	bcs.n	80057fa <z_vprintk+0x168>
						print_err(out, ctx);
 80057f0:	4639      	mov	r1, r7
 80057f2:	4630      	mov	r0, r6
 80057f4:	f7ff ff3f 	bl	8005676 <print_err>
						break;
 80057f8:	e758      	b.n	80056ac <z_vprintk+0x1a>
					d = lld;
 80057fa:	4615      	mov	r5, r2
				if (d < 0) {
 80057fc:	2d00      	cmp	r5, #0
 80057fe:	da05      	bge.n	800580c <z_vprintk+0x17a>
					out((int)'-', ctx);
 8005800:	4639      	mov	r1, r7
 8005802:	202d      	movs	r0, #45	; 0x2d
 8005804:	47b0      	blx	r6
					d = -d;
 8005806:	426d      	negs	r5, r5
					min_width--;
 8005808:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 800580c:	f8cd a000 	str.w	sl, [sp]
 8005810:	464b      	mov	r3, r9
 8005812:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 8005814:	4639      	mov	r1, r7
 8005816:	4630      	mov	r0, r6
 8005818:	f7fd fdfc 	bl	8003414 <_printk_dec_ulong>
				break;
 800581c:	e746      	b.n	80056ac <z_vprintk+0x1a>
				if (length_mod == 'z') {
 800581e:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8005822:	d102      	bne.n	800582a <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 8005824:	f854 2b04 	ldr.w	r2, [r4], #4
 8005828:	e011      	b.n	800584e <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 800582a:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 800582e:	d0f9      	beq.n	8005824 <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 8005830:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8005834:	d1f6      	bne.n	8005824 <z_vprintk+0x192>
					unsigned long long llu =
 8005836:	3407      	adds	r4, #7
 8005838:	f024 0407 	bic.w	r4, r4, #7
 800583c:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 8005840:	2100      	movs	r1, #0
 8005842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005846:	4299      	cmp	r1, r3
 8005848:	bf08      	it	eq
 800584a:	4290      	cmpeq	r0, r2
 800584c:	d3d0      	bcc.n	80057f0 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 800584e:	f8cd a000 	str.w	sl, [sp]
 8005852:	464b      	mov	r3, r9
 8005854:	e7de      	b.n	8005814 <z_vprintk+0x182>
				out('0', ctx);
 8005856:	4639      	mov	r1, r7
 8005858:	2030      	movs	r0, #48	; 0x30
 800585a:	47b0      	blx	r6
				out('x', ctx);
 800585c:	4639      	mov	r1, r7
 800585e:	2078      	movs	r0, #120	; 0x78
 8005860:	47b0      	blx	r6
					min_width = 8;
 8005862:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
 8005866:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
 800586a:	9b02      	ldr	r3, [sp, #8]
 800586c:	781b      	ldrb	r3, [r3, #0]
 800586e:	2b70      	cmp	r3, #112	; 0x70
 8005870:	d104      	bne.n	800587c <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 8005872:	f854 3b04 	ldr.w	r3, [r4], #4
 8005876:	9304      	str	r3, [sp, #16]
 8005878:	2300      	movs	r3, #0
 800587a:	e00d      	b.n	8005898 <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 800587c:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8005880:	d0f7      	beq.n	8005872 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 8005882:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8005886:	d1f4      	bne.n	8005872 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 8005888:	3407      	adds	r4, #7
 800588a:	f024 0307 	bic.w	r3, r4, #7
 800588e:	461c      	mov	r4, r3
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f854 2b08 	ldr.w	r2, [r4], #8
 8005896:	9204      	str	r2, [sp, #16]
	int digits = 0;
 8005898:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 800589a:	2210      	movs	r2, #16
	int digits = 0;
 800589c:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 800589e:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
 80058a0:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
 80058a4:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 80058a8:	9804      	ldr	r0, [sp, #16]
 80058aa:	f1cb 0c20 	rsb	ip, fp, #32
 80058ae:	f1ab 0120 	sub.w	r1, fp, #32
 80058b2:	fa20 f00b 	lsr.w	r0, r0, fp
 80058b6:	fa03 fc0c 	lsl.w	ip, r3, ip
 80058ba:	ea40 000c 	orr.w	r0, r0, ip
 80058be:	fa23 f101 	lsr.w	r1, r3, r1
 80058c2:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 80058c4:	f010 000f 	ands.w	r0, r0, #15
 80058c8:	d108      	bne.n	80058dc <z_vprintk+0x24a>
 80058ca:	9905      	ldr	r1, [sp, #20]
 80058cc:	b911      	cbnz	r1, 80058d4 <z_vprintk+0x242>
 80058ce:	f1bb 0f00 	cmp.w	fp, #0
 80058d2:	d124      	bne.n	800591e <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 80058d4:	2130      	movs	r1, #48	; 0x30
 80058d6:	e005      	b.n	80058e4 <z_vprintk+0x252>
			found_largest_digit = 1;
 80058d8:	9505      	str	r5, [sp, #20]
 80058da:	e7e3      	b.n	80058a4 <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 80058dc:	2809      	cmp	r0, #9
 80058de:	bf8c      	ite	hi
 80058e0:	2157      	movhi	r1, #87	; 0x57
 80058e2:	2130      	movls	r1, #48	; 0x30
 80058e4:	4408      	add	r0, r1
			out((int)nibble, ctx);
 80058e6:	b240      	sxtb	r0, r0
 80058e8:	4639      	mov	r1, r7
 80058ea:	9308      	str	r3, [sp, #32]
 80058ec:	9205      	str	r2, [sp, #20]
 80058ee:	47b0      	blx	r6
			digits++;
 80058f0:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 80058f2:	9a05      	ldr	r2, [sp, #20]
			digits++;
 80058f4:	3301      	adds	r3, #1
 80058f6:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 80058f8:	9b08      	ldr	r3, [sp, #32]
 80058fa:	f1bb 0f00 	cmp.w	fp, #0
 80058fe:	d1eb      	bne.n	80058d8 <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 8005900:	f1b9 0f03 	cmp.w	r9, #3
 8005904:	f47f aed2 	bne.w	80056ac <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 8005908:	9b03      	ldr	r3, [sp, #12]
 800590a:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 800590e:	2d00      	cmp	r5, #0
 8005910:	f77f aecc 	ble.w	80056ac <z_vprintk+0x1a>
			out(' ', ctx);
 8005914:	4639      	mov	r1, r7
 8005916:	2020      	movs	r0, #32
 8005918:	47b0      	blx	r6
 800591a:	3d01      	subs	r5, #1
 800591c:	e7f7      	b.n	800590e <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 800591e:	1e51      	subs	r1, r2, #1
 8005920:	4592      	cmp	sl, r2
 8005922:	9108      	str	r1, [sp, #32]
 8005924:	db07      	blt.n	8005936 <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 8005926:	f1b9 0f01 	cmp.w	r9, #1
 800592a:	d106      	bne.n	800593a <z_vprintk+0x2a8>
 800592c:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
 800592e:	4639      	mov	r1, r7
 8005930:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8005932:	47b0      	blx	r6
 8005934:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 8005936:	9a08      	ldr	r2, [sp, #32]
 8005938:	e7b4      	b.n	80058a4 <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 800593a:	f1b9 0f02 	cmp.w	r9, #2
 800593e:	d1fa      	bne.n	8005936 <z_vprintk+0x2a4>
 8005940:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 8005942:	4639      	mov	r1, r7
 8005944:	2020      	movs	r0, #32
 8005946:	e7f4      	b.n	8005932 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 8005948:	4639      	mov	r1, r7
 800594a:	47b0      	blx	r6
 800594c:	e6fb      	b.n	8005746 <z_vprintk+0xb4>
				out(c, ctx);
 800594e:	4639      	mov	r1, r7
 8005950:	f854 0b04 	ldr.w	r0, [r4], #4
 8005954:	e6d7      	b.n	8005706 <z_vprintk+0x74>
				length_mod = 0;
 8005956:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 8005958:	46a9      	mov	r9, r5
				min_width = -1;
 800595a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 800595e:	2501      	movs	r5, #1
 8005960:	e6ac      	b.n	80056bc <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 8005962:	f04f 0903 	mov.w	r9, #3
 8005966:	e6a9      	b.n	80056bc <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 8005968:	f04f 0901 	mov.w	r9, #1
 800596c:	e6a6      	b.n	80056bc <z_vprintk+0x2a>
			might_format = 0;
 800596e:	4605      	mov	r5, r0
		++fmt;
 8005970:	e6a4      	b.n	80056bc <z_vprintk+0x2a>

08005972 <printk>:
{
 8005972:	b40f      	push	{r0, r1, r2, r3}
 8005974:	b507      	push	{r0, r1, r2, lr}
 8005976:	a904      	add	r1, sp, #16
 8005978:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 800597c:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 800597e:	f7fd fd9b 	bl	80034b8 <vprintk>
}
 8005982:	b003      	add	sp, #12
 8005984:	f85d eb04 	ldr.w	lr, [sp], #4
 8005988:	b004      	add	sp, #16
 800598a:	4770      	bx	lr

0800598c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 800598c:	4770      	bx	lr

0800598e <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 800598e:	4602      	mov	r2, r0
 8005990:	2101      	movs	r1, #1
 8005992:	2000      	movs	r0, #0
 8005994:	f7fd bde2 	b.w	800355c <__stm32_exti_isr>

08005998 <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8005998:	4602      	mov	r2, r0
 800599a:	2102      	movs	r1, #2
 800599c:	2001      	movs	r0, #1
 800599e:	f7fd bddd 	b.w	800355c <__stm32_exti_isr>

080059a2 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 80059a2:	4602      	mov	r2, r0
 80059a4:	2103      	movs	r1, #3
 80059a6:	2002      	movs	r0, #2
 80059a8:	f7fd bdd8 	b.w	800355c <__stm32_exti_isr>

080059ac <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 80059ac:	4602      	mov	r2, r0
 80059ae:	2104      	movs	r1, #4
 80059b0:	2003      	movs	r0, #3
 80059b2:	f7fd bdd3 	b.w	800355c <__stm32_exti_isr>

080059b6 <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 80059b6:	4602      	mov	r2, r0
 80059b8:	2105      	movs	r1, #5
 80059ba:	2004      	movs	r0, #4
 80059bc:	f7fd bdce 	b.w	800355c <__stm32_exti_isr>

080059c0 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 80059c0:	4602      	mov	r2, r0
 80059c2:	210a      	movs	r1, #10
 80059c4:	2005      	movs	r0, #5
 80059c6:	f7fd bdc9 	b.w	800355c <__stm32_exti_isr>

080059ca <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 80059ca:	4602      	mov	r2, r0
 80059cc:	2110      	movs	r1, #16
 80059ce:	200a      	movs	r0, #10
 80059d0:	f7fd bdc4 	b.w	800355c <__stm32_exti_isr>

080059d4 <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 80059d4:	4602      	mov	r2, r0
 80059d6:	2111      	movs	r1, #17
 80059d8:	2010      	movs	r0, #16
 80059da:	f7fd bdbf 	b.w	800355c <__stm32_exti_isr>

080059de <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 80059de:	4602      	mov	r2, r0
 80059e0:	2113      	movs	r1, #19
 80059e2:	2012      	movs	r0, #18
 80059e4:	f7fd bdba 	b.w	800355c <__stm32_exti_isr>

080059e8 <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 80059e8:	4602      	mov	r2, r0
 80059ea:	2116      	movs	r1, #22
 80059ec:	2015      	movs	r0, #21
 80059ee:	f7fd bdb5 	b.w	800355c <__stm32_exti_isr>

080059f2 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 80059f2:	4602      	mov	r2, r0
 80059f4:	2117      	movs	r1, #23
 80059f6:	2016      	movs	r0, #22
 80059f8:	f7fd bdb0 	b.w	800355c <__stm32_exti_isr>

080059fc <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 80059fc:	2200      	movs	r2, #0
{
 80059fe:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8005a00:	4611      	mov	r1, r2
 8005a02:	2006      	movs	r0, #6
 8005a04:	f7fe f8c0 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8005a08:	2200      	movs	r2, #0
 8005a0a:	4611      	mov	r1, r2
 8005a0c:	2007      	movs	r0, #7
 8005a0e:	f7fe f8bb 	bl	8003b88 <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8005a12:	2200      	movs	r2, #0
 8005a14:	4611      	mov	r1, r2
 8005a16:	2008      	movs	r0, #8
 8005a18:	f7fe f8b6 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	4611      	mov	r1, r2
 8005a20:	2009      	movs	r0, #9
 8005a22:	f7fe f8b1 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8005a26:	2200      	movs	r2, #0
 8005a28:	4611      	mov	r1, r2
 8005a2a:	200a      	movs	r0, #10
 8005a2c:	f7fe f8ac 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8005a30:	2200      	movs	r2, #0
 8005a32:	4611      	mov	r1, r2
 8005a34:	2017      	movs	r0, #23
 8005a36:	f7fe f8a7 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4611      	mov	r1, r2
 8005a3e:	2028      	movs	r0, #40	; 0x28
 8005a40:	f7fe f8a2 	bl	8003b88 <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8005a44:	2200      	movs	r2, #0
 8005a46:	4611      	mov	r1, r2
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f7fe f89d 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4611      	mov	r1, r2
 8005a52:	202a      	movs	r0, #42	; 0x2a
 8005a54:	f7fe f898 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8005a58:	2200      	movs	r2, #0
 8005a5a:	4611      	mov	r1, r2
 8005a5c:	2002      	movs	r0, #2
 8005a5e:	f7fe f893 	bl	8003b88 <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8005a62:	2200      	movs	r2, #0
 8005a64:	4611      	mov	r1, r2
 8005a66:	2003      	movs	r0, #3
 8005a68:	f7fe f88e 	bl	8003b88 <z_arm_irq_priority_set>
}
 8005a6c:	2000      	movs	r0, #0
 8005a6e:	bd08      	pop	{r3, pc}

08005a70 <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8005a70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005a74:	2208      	movs	r2, #8
 8005a76:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 8005a7a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005a7e:	6083      	str	r3, [r0, #8]
}
 8005a80:	4770      	bx	lr

08005a82 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8005a82:	4770      	bx	lr

08005a84 <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
 8005a84:	f7fe b8f2 	b.w	8003c6c <z_arm_bus_fault>

08005a88 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8005a88:	f000 ba8e 	b.w	8005fa8 <z_fatal_error>

08005a8c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8005a8c:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8005a8e:	6800      	ldr	r0, [r0, #0]
 8005a90:	f000 ba8a 	b.w	8005fa8 <z_fatal_error>

08005a94 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8005a94:	b508      	push	{r3, lr}
	handler();
 8005a96:	f7fe f8f3 	bl	8003c80 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
 8005a9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8005a9e:	f7fd bfd3 	b.w	8003a48 <z_arm_exc_exit>

08005aa2 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8005aa2:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	a801      	add	r0, sp, #4
 8005aa8:	f7fe fae4 	bl	8004074 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
 8005aac:	b003      	add	sp, #12
 8005aae:	f85d fb04 	ldr.w	pc, [sp], #4

08005ab2 <_stdout_hook_default>:
}
 8005ab2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ab6:	4770      	bx	lr

08005ab8 <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 8005ab8:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 8005aba:	6813      	ldr	r3, [r2, #0]
 8005abc:	40c3      	lsrs	r3, r0
 8005abe:	07db      	lsls	r3, r3, #31
{
 8005ac0:	b570      	push	{r4, r5, r6, lr}
 8005ac2:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 8005ac4:	d50f      	bpl.n	8005ae6 <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8005ac6:	6851      	ldr	r1, [r2, #4]
 8005ac8:	b169      	cbz	r1, 8005ae6 <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8005aca:	2501      	movs	r5, #1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8005acc:	680c      	ldr	r4, [r1, #0]
 8005ace:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8005ad0:	688b      	ldr	r3, [r1, #8]
 8005ad2:	421d      	tst	r5, r3
 8005ad4:	d003      	beq.n	8005ade <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8005ad6:	684b      	ldr	r3, [r1, #4]
 8005ad8:	462a      	mov	r2, r5
 8005ada:	4630      	mov	r0, r6
 8005adc:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8005ade:	b114      	cbz	r4, 8005ae6 <gpio_stm32_isr+0x2e>
 8005ae0:	4621      	mov	r1, r4
 8005ae2:	6824      	ldr	r4, [r4, #0]
 8005ae4:	e7f4      	b.n	8005ad0 <gpio_stm32_isr+0x18>
}
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}

08005ae8 <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8005ae8:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005aea:	6880      	ldr	r0, [r0, #8]
{
 8005aec:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005aee:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8005af0:	b941      	cbnz	r1, 8005b04 <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 8005af2:	2401      	movs	r4, #1
 8005af4:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 8005af8:	b113      	cbz	r3, 8005b00 <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005afa:	6182      	str	r2, [r0, #24]
}
 8005afc:	4608      	mov	r0, r1
 8005afe:	bd10      	pop	{r4, pc}
 8005b00:	0412      	lsls	r2, r2, #16
 8005b02:	e7fa      	b.n	8005afa <gpio_stm32_write+0x12>
		return -ENOTSUP;
 8005b04:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8005b08:	e7f8      	b.n	8005afc <gpio_stm32_write+0x14>

08005b0a <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8005b0a:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005b0c:	6880      	ldr	r0, [r0, #8]
{
 8005b0e:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8005b10:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8005b12:	b931      	cbnz	r1, 8005b22 <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8005b14:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 8005b16:	40d4      	lsrs	r4, r2
 8005b18:	f004 0401 	and.w	r4, r4, #1
 8005b1c:	601c      	str	r4, [r3, #0]
}
 8005b1e:	4608      	mov	r0, r1
 8005b20:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8005b22:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8005b26:	e7fa      	b.n	8005b1e <gpio_stm32_read+0x14>

08005b28 <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8005b28:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8005b2a:	6858      	ldr	r0, [r3, #4]
{
 8005b2c:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8005b2e:	b158      	cbz	r0, 8005b48 <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005b30:	2400      	movs	r4, #0
 8005b32:	4281      	cmp	r1, r0
 8005b34:	d113      	bne.n	8005b5e <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8005b36:	6808      	ldr	r0, [r1, #0]
 8005b38:	b95c      	cbnz	r4, 8005b52 <gpio_stm32_manage_callback+0x2a>
 8005b3a:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8005b3c:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8005b3e:	42a1      	cmp	r1, r4
 8005b40:	d100      	bne.n	8005b44 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8005b42:	6098      	str	r0, [r3, #8]
	parent->next = child;
 8005b44:	2000      	movs	r0, #0
 8005b46:	6008      	str	r0, [r1, #0]
	if (set) {
 8005b48:	b972      	cbnz	r2, 8005b68 <gpio_stm32_manage_callback+0x40>
	return 0;
 8005b4a:	2000      	movs	r0, #0
}
 8005b4c:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005b4e:	4628      	mov	r0, r5
 8005b50:	e7ef      	b.n	8005b32 <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 8005b52:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8005b54:	6898      	ldr	r0, [r3, #8]
 8005b56:	4281      	cmp	r1, r0
	list->tail = node;
 8005b58:	bf08      	it	eq
 8005b5a:	609c      	streq	r4, [r3, #8]
 8005b5c:	e7f2      	b.n	8005b44 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8005b5e:	6805      	ldr	r5, [r0, #0]
	return node->next;
 8005b60:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8005b62:	2d00      	cmp	r5, #0
 8005b64:	d1f3      	bne.n	8005b4e <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8005b66:	b13a      	cbz	r2, 8005b78 <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8005b68:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8005b6a:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8005b6c:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8005b6e:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d1ea      	bne.n	8005b4a <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8005b74:	6099      	str	r1, [r3, #8]
 8005b76:	e7e9      	b.n	8005b4c <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8005b78:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8005b7c:	e7e6      	b.n	8005b4c <gpio_stm32_manage_callback+0x24>

08005b7e <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8005b7e:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8005b80:	b939      	cbnz	r1, 8005b92 <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 8005b82:	2301      	movs	r3, #1
 8005b84:	fa03 f202 	lsl.w	r2, r3, r2
 8005b88:	6803      	ldr	r3, [r0, #0]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	6003      	str	r3, [r0, #0]
}
 8005b8e:	4608      	mov	r0, r1
 8005b90:	4770      	bx	lr
		return -ENOTSUP;
 8005b92:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8005b96:	e7fa      	b.n	8005b8e <gpio_stm32_enable_callback+0x10>

08005b98 <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8005b98:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8005b9a:	b941      	cbnz	r1, 8005bae <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	fa03 f202 	lsl.w	r2, r3, r2
 8005ba2:	6803      	ldr	r3, [r0, #0]
 8005ba4:	ea23 0302 	bic.w	r3, r3, r2
 8005ba8:	6003      	str	r3, [r0, #0]
}
 8005baa:	4608      	mov	r0, r1
 8005bac:	4770      	bx	lr
		return -ENOTSUP;
 8005bae:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8005bb2:	e7fa      	b.n	8005baa <gpio_stm32_disable_callback+0x12>

08005bb4 <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 8005bb4:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 8005bb8:	b1b1      	cbz	r1, 8005be8 <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 8005bba:	b123      	cbz	r3, 8005bc6 <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8005bbc:	2310      	movs	r3, #16
 8005bbe:	600b      	str	r3, [r1, #0]
	return 0;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8005bc6:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8005bca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8005bce:	d103      	bne.n	8005bd8 <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8005bd0:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8005bd4:	600a      	str	r2, [r1, #0]
 8005bd6:	e7f4      	b.n	8005bc2 <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8005bd8:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005bdc:	d001      	beq.n	8005be2 <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8005bde:	600b      	str	r3, [r1, #0]
 8005be0:	e7ef      	b.n	8005bc2 <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8005be2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005be6:	e7f5      	b.n	8005bd4 <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 8005be8:	f06f 0315 	mvn.w	r3, #21
 8005bec:	e7e9      	b.n	8005bc2 <gpio_stm32_flags_to_conf+0xe>

08005bee <gpio_stm32_configure>:
{
 8005bee:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8005bf0:	f002 0530 	and.w	r5, r2, #48	; 0x30
	pinval = 1 << pin;
 8005bf4:	2401      	movs	r4, #1
 8005bf6:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8005bf8:	092e      	lsrs	r6, r5, #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005bfa:	f8d0 c000 	ldr.w	ip, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005bfe:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8005c02:	fab7 f787 	clz	r7, r7
 8005c06:	f04f 0e03 	mov.w	lr, #3
 8005c0a:	007f      	lsls	r7, r7, #1
 8005c0c:	fa0e f707 	lsl.w	r7, lr, r7
 8005c10:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c14:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8005c18:	fab7 f787 	clz	r7, r7
 8005c1c:	007f      	lsls	r7, r7, #1
 8005c1e:	40be      	lsls	r6, r7
 8005c20:	ea46 060c 	orr.w	r6, r6, ip
	if (STM32_MODER_ALT_MODE == mode) {
 8005c24:	2d20      	cmp	r5, #32
 8005c26:	6006      	str	r6, [r0, #0]
 8005c28:	d116      	bne.n	8005c58 <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 8005c2a:	2907      	cmp	r1, #7
 8005c2c:	dc49      	bgt.n	8005cc2 <gpio_stm32_configure+0xd4>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005c2e:	6a07      	ldr	r7, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c30:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005c34:	b10e      	cbz	r6, 8005c3a <gpio_stm32_configure+0x4c>
  return __builtin_clz(value);
 8005c36:	fab6 f586 	clz	r5, r6
 8005c3a:	260f      	movs	r6, #15
 8005c3c:	00ad      	lsls	r5, r5, #2
 8005c3e:	fa06 f505 	lsl.w	r5, r6, r5
 8005c42:	ea27 0605 	bic.w	r6, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c46:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 8005c4a:	fab5 f585 	clz	r5, r5
 8005c4e:	00ad      	lsls	r5, r5, #2
 8005c50:	fa03 f505 	lsl.w	r5, r3, r5
 8005c54:	4335      	orrs	r5, r6
 8005c56:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8005c58:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 8005c5a:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8005c5e:	ea25 0504 	bic.w	r5, r5, r4
 8005c62:	fa03 f101 	lsl.w	r1, r3, r1
 8005c66:	4329      	orrs	r1, r5
 8005c68:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 8005c6a:	f3c2 13c1 	ubfx	r3, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8005c6e:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c70:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8005c74:	fab1 f181 	clz	r1, r1
 8005c78:	2603      	movs	r6, #3
 8005c7a:	0049      	lsls	r1, r1, #1
 8005c7c:	fa06 f101 	lsl.w	r1, r6, r1
 8005c80:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c84:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8005c88:	fab1 f181 	clz	r1, r1
 8005c8c:	0049      	lsls	r1, r1, #1
 8005c8e:	408b      	lsls	r3, r1
 8005c90:	432b      	orrs	r3, r5
 8005c92:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8005c94:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005c98:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 8005c9e:	fab3 f383 	clz	r3, r3
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	fa06 f303 	lsl.w	r3, r6, r3
 8005ca8:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cac:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 8005cb0:	fab4 f484 	clz	r4, r4
 8005cb4:	0064      	lsls	r4, r4, #1
 8005cb6:	fa02 f404 	lsl.w	r4, r2, r4
 8005cba:	431c      	orrs	r4, r3
 8005cbc:	60c4      	str	r4, [r0, #12]
}
 8005cbe:	2000      	movs	r0, #0
 8005cc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8005cc2:	6a47      	ldr	r7, [r0, #36]	; 0x24
 8005cc4:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005cc6:	fa96 fca6 	rbit	ip, r6
  if (value == 0U)
 8005cca:	f1bc 0f00 	cmp.w	ip, #0
 8005cce:	d001      	beq.n	8005cd4 <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 8005cd0:	fabc f58c 	clz	r5, ip
 8005cd4:	f04f 0c0f 	mov.w	ip, #15
 8005cd8:	00ad      	lsls	r5, r5, #2
 8005cda:	fa0c f505 	lsl.w	r5, ip, r5
 8005cde:	ea27 0505 	bic.w	r5, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ce2:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 8005ce6:	fab6 f686 	clz	r6, r6
 8005cea:	00b6      	lsls	r6, r6, #2
 8005cec:	40b3      	lsls	r3, r6
 8005cee:	432b      	orrs	r3, r5
 8005cf0:	6243      	str	r3, [r0, #36]	; 0x24
 8005cf2:	e7b1      	b.n	8005c58 <gpio_stm32_configure+0x6a>

08005cf4 <pwm_stm32_get_cycles_per_sec>:
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8005cf4:	6803      	ldr	r3, [r0, #0]
{
 8005cf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 8005cf8:	689e      	ldr	r6, [r3, #8]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 8005cfa:	6885      	ldr	r5, [r0, #8]
	if (cycles == NULL) {
 8005cfc:	4614      	mov	r4, r2
 8005cfe:	b1a2      	cbz	r2, 8005d2a <pwm_stm32_get_cycles_per_sec+0x36>
	clock_control_get_rate(data->clock,
 8005d00:	6c68      	ldr	r0, [r5, #68]	; 0x44
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8005d02:	6843      	ldr	r3, [r0, #4]
 8005d04:	aa01      	add	r2, sp, #4
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	1d31      	adds	r1, r6, #4
 8005d0a:	4798      	blx	r3
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 8005d0c:	6872      	ldr	r2, [r6, #4]
	tim_clk = __get_tim_clk(bus_clk,
 8005d0e:	9b01      	ldr	r3, [sp, #4]
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 8005d10:	2a02      	cmp	r2, #2
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8005d12:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8005d14:	f04f 0000 	mov.w	r0, #0
		tim_clk = bus_clk * 2U;
 8005d18:	bf08      	it	eq
 8005d1a:	005b      	lsleq	r3, r3, #1
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8005d1c:	3201      	adds	r2, #1
 8005d1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d22:	e9c4 3000 	strd	r3, r0, [r4]
}
 8005d26:	b002      	add	sp, #8
 8005d28:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 8005d2a:	f06f 0015 	mvn.w	r0, #21
 8005d2e:	e7fa      	b.n	8005d26 <pwm_stm32_get_cycles_per_sec+0x32>

08005d30 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8005d30:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8005d32:	6803      	ldr	r3, [r0, #0]
 8005d34:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8005d36:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8005d38:	6843      	ldr	r3, [r0, #4]
 8005d3a:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8005d3c:	9b01      	ldr	r3, [sp, #4]
}
 8005d3e:	b002      	add	sp, #8
 8005d40:	4770      	bx	lr

08005d42 <uart_stm32_poll_in>:
{
 8005d42:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005d44:	6803      	ldr	r3, [r0, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8005d4a:	6813      	ldr	r3, [r2, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8005d4c:	0718      	lsls	r0, r3, #28
 8005d4e:	d502      	bpl.n	8005d56 <uart_stm32_poll_in+0x14>
		LL_USART_ClearFlag_ORE(UartInstance);
 8005d50:	4610      	mov	r0, r2
 8005d52:	f7ff ffed 	bl	8005d30 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8005d56:	6813      	ldr	r3, [r2, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 8005d58:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8005d5a:	bf43      	ittte	mi
 8005d5c:	6853      	ldrmi	r3, [r2, #4]
 8005d5e:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8005d60:	2000      	movmi	r0, #0
		return -1;
 8005d62:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8005d66:	bd08      	pop	{r3, pc}

08005d68 <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005d68:	6803      	ldr	r3, [r0, #0]
 8005d6a:	689b      	ldr	r3, [r3, #8]
 8005d6c:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8005d6e:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8005d70:	0612      	lsls	r2, r2, #24
 8005d72:	d5fc      	bpl.n	8005d6e <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8005d74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d78:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 8005d7a:	6059      	str	r1, [r3, #4]
}
 8005d7c:	4770      	bx	lr

08005d7e <uart_stm32_err_check>:
{
 8005d7e:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005d80:	6803      	ldr	r3, [r0, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	6819      	ldr	r1, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8005d86:	680a      	ldr	r2, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 8005d88:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 8005d8a:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8005d8c:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8005d8e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8005d92:	bf48      	it	mi
 8005d94:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 8005d98:	0798      	lsls	r0, r3, #30
		err |= UART_ERROR_FRAMING;
 8005d9a:	bf48      	it	mi
 8005d9c:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 8005da0:	07d3      	lsls	r3, r2, #31
 8005da2:	d502      	bpl.n	8005daa <uart_stm32_err_check+0x2c>
		LL_USART_ClearFlag_ORE(UartInstance);
 8005da4:	4608      	mov	r0, r1
 8005da6:	f7ff ffc3 	bl	8005d30 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 8005daa:	0790      	lsls	r0, r2, #30
 8005dac:	d502      	bpl.n	8005db4 <uart_stm32_err_check+0x36>
		LL_USART_ClearFlag_PE(UartInstance);
 8005dae:	4608      	mov	r0, r1
 8005db0:	f7ff ffbe 	bl	8005d30 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 8005db4:	0753      	lsls	r3, r2, #29
 8005db6:	d502      	bpl.n	8005dbe <uart_stm32_err_check+0x40>
		LL_USART_ClearFlag_FE(UartInstance);
 8005db8:	4608      	mov	r0, r1
 8005dba:	f7ff ffb9 	bl	8005d30 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 8005dbe:	4608      	mov	r0, r1
 8005dc0:	f7ff ffb6 	bl	8005d30 <LL_USART_ClearFlag_FE>
}
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	bd08      	pop	{r3, pc}

08005dc8 <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8005dc8:	6803      	ldr	r3, [r0, #0]
{
 8005dca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005dcc:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005dce:	6899      	ldr	r1, [r3, #8]
	clock_control_get_rate(data->clock,
 8005dd0:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005dd2:	f851 4b08 	ldr.w	r4, [r1], #8
	clock_control_get_rate(data->clock,
 8005dd6:	6858      	ldr	r0, [r3, #4]
 8005dd8:	6843      	ldr	r3, [r0, #4]
 8005dda:	aa01      	add	r2, sp, #4
 8005ddc:	68db      	ldr	r3, [r3, #12]
 8005dde:	4798      	blx	r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005de0:	9b01      	ldr	r3, [sp, #4]
 8005de2:	2264      	movs	r2, #100	; 0x64
 8005de4:	2119      	movs	r1, #25
 8005de6:	4359      	muls	r1, r3
 8005de8:	00ad      	lsls	r5, r5, #2
 8005dea:	fbb1 f1f5 	udiv	r1, r1, r5
 8005dee:	fbb1 f0f2 	udiv	r0, r1, r2
 8005df2:	fb02 1310 	mls	r3, r2, r0, r1
 8005df6:	011b      	lsls	r3, r3, #4
 8005df8:	3332      	adds	r3, #50	; 0x32
 8005dfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dfe:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	60a3      	str	r3, [r4, #8]
}
 8005e06:	b003      	add	sp, #12
 8005e08:	bd30      	pop	{r4, r5, pc}

08005e0a <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 8005e0a:	6883      	ldr	r3, [r0, #8]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005e10:	6803      	ldr	r3, [r0, #0]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8005e16:	68d3      	ldr	r3, [r2, #12]
 8005e18:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 8005e1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e20:	d023      	beq.n	8005e6a <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 8005e22:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8005e26:	4243      	negs	r3, r0
 8005e28:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 8005e2a:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005e2c:	6913      	ldr	r3, [r2, #16]
 8005e2e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8005e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e36:	d01a      	beq.n	8005e6e <uart_stm32_config_get+0x64>
 8005e38:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e3c:	d019      	beq.n	8005e72 <uart_stm32_config_get+0x68>
 8005e3e:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 8005e40:	bf0c      	ite	eq
 8005e42:	2301      	moveq	r3, #1
 8005e44:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8005e46:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8005e48:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 8005e4a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 8005e4e:	bf14      	ite	ne
 8005e50:	2304      	movne	r3, #4
 8005e52:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8005e54:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8005e56:	6953      	ldr	r3, [r2, #20]
 8005e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 8005e5c:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8005e60:	4253      	negs	r3, r2
 8005e62:	4153      	adcs	r3, r2
 8005e64:	71cb      	strb	r3, [r1, #7]
}
 8005e66:	2000      	movs	r0, #0
 8005e68:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 8005e6a:	2302      	movs	r3, #2
 8005e6c:	e7dd      	b.n	8005e2a <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	e7e9      	b.n	8005e46 <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8005e72:	2302      	movs	r3, #2
 8005e74:	e7e7      	b.n	8005e46 <uart_stm32_config_get+0x3c>

08005e76 <HAL_TIM_PWM_MspInit>:
 8005e76:	4770      	bx	lr

08005e78 <HAL_TIM_PWM_Init>:
{
 8005e78:	b510      	push	{r4, lr}
  if (htim == NULL)
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	b1a0      	cbz	r0, 8005ea8 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8005e7e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005e82:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005e86:	b91b      	cbnz	r3, 8005e90 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8005e88:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005e8c:	f7ff fff3 	bl	8005e76 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	2302      	movs	r3, #2
 8005e92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e96:	6820      	ldr	r0, [r4, #0]
 8005e98:	1d21      	adds	r1, r4, #4
 8005e9a:	f7fe fbdb 	bl	8004654 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8005ea4:	2000      	movs	r0, #0
}
 8005ea6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005ea8:	2001      	movs	r0, #1
 8005eaa:	e7fc      	b.n	8005ea6 <HAL_TIM_PWM_Init+0x2e>

08005eac <HAL_TIM_PWM_ConfigChannel>:
{
 8005eac:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8005eae:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005eb2:	2b01      	cmp	r3, #1
{
 8005eb4:	4604      	mov	r4, r0
 8005eb6:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8005eba:	d025      	beq.n	8005f08 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 8005ec6:	2a0c      	cmp	r2, #12
 8005ec8:	d818      	bhi.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x50>
 8005eca:	e8df f002 	tbb	[pc, r2]
 8005ece:	1707      	.short	0x1707
 8005ed0:	171e1717 	.word	0x171e1717
 8005ed4:	172f1717 	.word	0x172f1717
 8005ed8:	1717      	.short	0x1717
 8005eda:	40          	.byte	0x40
 8005edb:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005edc:	6820      	ldr	r0, [r4, #0]
 8005ede:	f7fe fb2b 	bl	8004538 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ee4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005ee6:	699a      	ldr	r2, [r3, #24]
 8005ee8:	f042 0208 	orr.w	r2, r2, #8
 8005eec:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005eee:	699a      	ldr	r2, [r3, #24]
 8005ef0:	f022 0204 	bic.w	r2, r2, #4
 8005ef4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ef6:	699a      	ldr	r2, [r3, #24]
 8005ef8:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005efa:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8005efe:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005f00:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005f04:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8005f08:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f0a:	6820      	ldr	r0, [r4, #0]
 8005f0c:	f7fe fc08 	bl	8004720 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f10:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f12:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f14:	699a      	ldr	r2, [r3, #24]
 8005f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f1c:	699a      	ldr	r2, [r3, #24]
 8005f1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f24:	699a      	ldr	r2, [r3, #24]
 8005f26:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005f2a:	e7e6      	b.n	8005efa <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f2c:	6820      	ldr	r0, [r4, #0]
 8005f2e:	f7fe fb35 	bl	800459c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f32:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f34:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	f042 0208 	orr.w	r2, r2, #8
 8005f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f3e:	69da      	ldr	r2, [r3, #28]
 8005f40:	f022 0204 	bic.w	r2, r2, #4
 8005f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f46:	69da      	ldr	r2, [r3, #28]
 8005f48:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f4a:	61da      	str	r2, [r3, #28]
      break;
 8005f4c:	e7d6      	b.n	8005efc <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	f7fe fb5a 	bl	8004608 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f54:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f56:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005f58:	69da      	ldr	r2, [r3, #28]
 8005f5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f5e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005f60:	69da      	ldr	r2, [r3, #28]
 8005f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f66:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005f68:	69da      	ldr	r2, [r3, #28]
 8005f6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005f6e:	e7ec      	b.n	8005f4a <HAL_TIM_PWM_ConfigChannel+0x9e>

08005f70 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f70:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f72:	f001 011f 	and.w	r1, r1, #31
{
 8005f76:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f78:	2401      	movs	r4, #1
 8005f7a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8005f7c:	ea23 0304 	bic.w	r3, r3, r4
 8005f80:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f82:	6a03      	ldr	r3, [r0, #32]
 8005f84:	408a      	lsls	r2, r1
 8005f86:	431a      	orrs	r2, r3
 8005f88:	6202      	str	r2, [r0, #32]
}
 8005f8a:	bd10      	pop	{r4, pc}

08005f8c <HAL_TIM_PWM_Start>:
 8005f8c:	f7fe bbfe 	b.w	800478c <HAL_TIM_OC_Start>

08005f90 <arch_system_halt>:
	__asm__ volatile(
 8005f90:	f04f 0210 	mov.w	r2, #16
 8005f94:	f3ef 8311 	mrs	r3, BASEPRI
 8005f98:	f382 8811 	msr	BASEPRI, r2
 8005f9c:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
 8005fa0:	e7fe      	b.n	8005fa0 <arch_system_halt+0x10>

08005fa2 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 8005fa2:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 8005fa4:	f7ff fff4 	bl	8005f90 <arch_system_halt>

08005fa8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	4605      	mov	r5, r0
 8005fac:	460e      	mov	r6, r1
	return z_impl_k_current_get();
 8005fae:	f7ff f8b9 	bl	8005124 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	4628      	mov	r0, r5
 8005fb8:	f7ff fff3 	bl	8005fa2 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
 8005fbc:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
 8005fbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005fc2:	f7fd bf87 	b.w	8003ed4 <z_impl_k_thread_abort>

08005fc6 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8005fc6:	7b43      	ldrb	r3, [r0, #13]
 8005fc8:	06db      	lsls	r3, r3, #27
 8005fca:	bf03      	ittte	eq
 8005fcc:	6980      	ldreq	r0, [r0, #24]
 8005fce:	fab0 f080 	clzeq	r0, r0
 8005fd2:	0940      	lsreq	r0, r0, #5
 8005fd4:	2000      	movne	r0, #0
}
 8005fd6:	4770      	bx	lr

08005fd8 <z_unpend_thread_no_timeout>:
{
 8005fd8:	b538      	push	{r3, r4, r5, lr}
 8005fda:	4604      	mov	r4, r0
 8005fdc:	f04f 0310 	mov.w	r3, #16
 8005fe0:	f3ef 8511 	mrs	r5, BASEPRI
 8005fe4:	f383 8811 	msr	BASEPRI, r3
 8005fe8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8005fec:	4601      	mov	r1, r0
 8005fee:	6880      	ldr	r0, [r0, #8]
 8005ff0:	f7fe fe82 	bl	8004cf8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8005ff4:	7b63      	ldrb	r3, [r4, #13]
 8005ff6:	f023 0302 	bic.w	r3, r3, #2
 8005ffa:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 8005ffc:	f385 8811 	msr	BASEPRI, r5
 8006000:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8006004:	2300      	movs	r3, #0
 8006006:	60a3      	str	r3, [r4, #8]
}
 8006008:	bd38      	pop	{r3, r4, r5, pc}

0800600a <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800600a:	b921      	cbnz	r1, 8006016 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800600c:	f3ef 8005 	mrs	r0, IPSR
 8006010:	b908      	cbnz	r0, 8006016 <z_reschedule+0xc>
 8006012:	f7fd bd27 	b.w	8003a64 <arch_swap>
 8006016:	f381 8811 	msr	BASEPRI, r1
 800601a:	f3bf 8f6f 	isb	sy
}
 800601e:	4770      	bx	lr

08006020 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8006020:	4603      	mov	r3, r0
 8006022:	b920      	cbnz	r0, 800602e <z_reschedule_irqlock+0xe>
 8006024:	f3ef 8205 	mrs	r2, IPSR
 8006028:	b90a      	cbnz	r2, 800602e <z_reschedule_irqlock+0xe>
 800602a:	f7fd bd1b 	b.w	8003a64 <arch_swap>
 800602e:	f383 8811 	msr	BASEPRI, r3
 8006032:	f3bf 8f6f 	isb	sy
}
 8006036:	4770      	bx	lr

08006038 <z_reschedule_unlocked>:
	__asm__ volatile(
 8006038:	f04f 0310 	mov.w	r3, #16
 800603c:	f3ef 8011 	mrs	r0, BASEPRI
 8006040:	f383 8811 	msr	BASEPRI, r3
 8006044:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 8006048:	f7ff bfea 	b.w	8006020 <z_reschedule_irqlock>

0800604c <z_priq_dumb_best>:
	return list->head == list;
 800604c:	6803      	ldr	r3, [r0, #0]
}
 800604e:	4298      	cmp	r0, r3
 8006050:	bf14      	ite	ne
 8006052:	4618      	movne	r0, r3
 8006054:	2000      	moveq	r0, #0
 8006056:	4770      	bx	lr

08006058 <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
 8006058:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 8006060:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 8006064:	b1cb      	cbz	r3, 800609a <z_thread_timeout+0x42>
 8006066:	f04f 0310 	mov.w	r3, #16
 800606a:	f3ef 8611 	mrs	r6, BASEPRI
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8006076:	4629      	mov	r1, r5
 8006078:	f850 0c10 	ldr.w	r0, [r0, #-16]
 800607c:	f7fe fe3c 	bl	8004cf8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8006080:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8006084:	f023 0302 	bic.w	r3, r3, #2
 8006088:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 800608c:	f386 8811 	msr	BASEPRI, r6
 8006090:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8006094:	2300      	movs	r3, #0
 8006096:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800609a:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 800609e:	f023 0314 	bic.w	r3, r3, #20
 80060a2:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 80060a6:	4628      	mov	r0, r5
 80060a8:	f7ff ff8d 	bl	8005fc6 <z_is_thread_ready>
 80060ac:	b120      	cbz	r0, 80060b8 <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 80060ae:	4628      	mov	r0, r5
}
 80060b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80060b4:	f7fe be70 	b.w	8004d98 <z_add_thread_to_ready_q>
 80060b8:	bd70      	pop	{r4, r5, r6, pc}

080060ba <z_unpend_first_thread>:
{
 80060ba:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80060bc:	f04f 0310 	mov.w	r3, #16
 80060c0:	f3ef 8211 	mrs	r2, BASEPRI
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 80060cc:	f7ff ffbe 	bl	800604c <z_priq_dumb_best>
 80060d0:	4604      	mov	r4, r0
	__asm__ volatile(
 80060d2:	f382 8811 	msr	BASEPRI, r2
 80060d6:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 80060da:	b1c8      	cbz	r0, 8006110 <z_unpend_first_thread+0x56>
	__asm__ volatile(
 80060dc:	f04f 0310 	mov.w	r3, #16
 80060e0:	f3ef 8511 	mrs	r5, BASEPRI
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80060ec:	4601      	mov	r1, r0
 80060ee:	6880      	ldr	r0, [r0, #8]
 80060f0:	f7fe fe02 	bl	8004cf8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80060f4:	7b63      	ldrb	r3, [r4, #13]
 80060f6:	f023 0302 	bic.w	r3, r3, #2
 80060fa:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 80060fc:	f385 8811 	msr	BASEPRI, r5
 8006100:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8006104:	2300      	movs	r3, #0
 8006106:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 8006108:	f104 0018 	add.w	r0, r4, #24
 800610c:	f000 f85c 	bl	80061c8 <z_abort_timeout>
}
 8006110:	4620      	mov	r0, r4
 8006112:	bd38      	pop	{r3, r4, r5, pc}

08006114 <z_impl_k_usleep>:
{
 8006114:	b538      	push	{r3, r4, r5, lr}
	ticks = k_us_to_ticks_ceil64(us);
 8006116:	17c5      	asrs	r5, r0, #31
			return t / (from_hz / to_hz);
 8006118:	3063      	adds	r0, #99	; 0x63
 800611a:	f04f 0264 	mov.w	r2, #100	; 0x64
 800611e:	f04f 0300 	mov.w	r3, #0
 8006122:	f145 0100 	adc.w	r1, r5, #0
 8006126:	f7fb fb29 	bl	800177c <__aeabi_uldivmod>
	if (ticks == 0) {
 800612a:	4604      	mov	r4, r0
 800612c:	b920      	cbnz	r0, 8006138 <z_impl_k_usleep+0x24>
	z_impl_k_yield();
 800612e:	f7fe ff8f 	bl	8005050 <z_impl_k_yield>
}
 8006132:	2064      	movs	r0, #100	; 0x64
 8006134:	4360      	muls	r0, r4
 8006136:	bd38      	pop	{r3, r4, r5, pc}
 8006138:	f7fe ff50 	bl	8004fdc <z_tick_sleep.part.19>
 800613c:	4604      	mov	r4, r0
 800613e:	e7f8      	b.n	8006132 <z_impl_k_usleep+0x1e>

08006140 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8006140:	7b43      	ldrb	r3, [r0, #13]
 8006142:	06db      	lsls	r3, r3, #27
 8006144:	bf03      	ittte	eq
 8006146:	6980      	ldreq	r0, [r0, #24]
 8006148:	fab0 f080 	clzeq	r0, r0
 800614c:	0940      	lsreq	r0, r0, #5
 800614e:	2000      	movne	r0, #0
}
 8006150:	4770      	bx	lr

08006152 <z_new_thread_init>:
{
 8006152:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 8006154:	9c02      	ldr	r4, [sp, #8]
 8006156:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 8006158:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
 800615a:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
 800615c:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 800615e:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
 8006160:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 8006162:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
 8006166:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
 800616a:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
 800616e:	bd10      	pop	{r4, pc}

08006170 <z_thread_single_suspend>:
{
 8006170:	b510      	push	{r4, lr}
 8006172:	4604      	mov	r4, r0
	if (z_is_thread_ready(thread)) {
 8006174:	f7ff ffe4 	bl	8006140 <z_is_thread_ready>
 8006178:	b110      	cbz	r0, 8006180 <z_thread_single_suspend+0x10>
		z_remove_thread_from_ready_q(thread);
 800617a:	4620      	mov	r0, r4
 800617c:	f7fe feba 	bl	8004ef4 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_SUSPENDED;
 8006180:	7b63      	ldrb	r3, [r4, #13]
 8006182:	f043 0310 	orr.w	r3, r3, #16
 8006186:	7363      	strb	r3, [r4, #13]
}
 8006188:	bd10      	pop	{r4, pc}

0800618a <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 800618a:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 800618c:	b510      	push	{r4, lr}
 800618e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 8006190:	b103      	cbz	r3, 8006194 <z_thread_single_abort+0xa>
		thread->fn_abort();
 8006192:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 8006194:	4620      	mov	r0, r4
 8006196:	f7ff ffd3 	bl	8006140 <z_is_thread_ready>
 800619a:	b138      	cbz	r0, 80061ac <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 800619c:	4620      	mov	r0, r4
 800619e:	f7fe fea9 	bl	8004ef4 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 80061a2:	7b63      	ldrb	r3, [r4, #13]
 80061a4:	f043 0308 	orr.w	r3, r3, #8
 80061a8:	7363      	strb	r3, [r4, #13]
}
 80061aa:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 80061ac:	7b63      	ldrb	r3, [r4, #13]
 80061ae:	079b      	lsls	r3, r3, #30
 80061b0:	d502      	bpl.n	80061b8 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 80061b2:	4620      	mov	r0, r4
 80061b4:	f7ff ff10 	bl	8005fd8 <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 80061b8:	69a3      	ldr	r3, [r4, #24]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d0f1      	beq.n	80061a2 <z_thread_single_abort+0x18>
 80061be:	f104 0018 	add.w	r0, r4, #24
 80061c2:	f000 f801 	bl	80061c8 <z_abort_timeout>
 80061c6:	e7ec      	b.n	80061a2 <z_thread_single_abort+0x18>

080061c8 <z_abort_timeout>:
{
 80061c8:	b510      	push	{r4, lr}
	__asm__ volatile(
 80061ca:	f04f 0210 	mov.w	r2, #16
 80061ce:	f3ef 8411 	mrs	r4, BASEPRI
 80061d2:	f382 8811 	msr	BASEPRI, r2
 80061d6:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 80061da:	6803      	ldr	r3, [r0, #0]
 80061dc:	b13b      	cbz	r3, 80061ee <z_abort_timeout+0x26>
			remove_timeout(to);
 80061de:	f7ff f8a1 	bl	8005324 <remove_timeout>
			ret = 0;
 80061e2:	2000      	movs	r0, #0
	__asm__ volatile(
 80061e4:	f384 8811 	msr	BASEPRI, r4
 80061e8:	f3bf 8f6f 	isb	sy
}
 80061ec:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80061ee:	f06f 0015 	mvn.w	r0, #21
 80061f2:	e7f7      	b.n	80061e4 <z_abort_timeout+0x1c>

080061f4 <z_get_next_timeout_expiry>:
{
 80061f4:	b510      	push	{r4, lr}
	__asm__ volatile(
 80061f6:	f04f 0310 	mov.w	r3, #16
 80061fa:	f3ef 8411 	mrs	r4, BASEPRI
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 8006206:	f7ff f8a1 	bl	800534c <next_timeout>
	__asm__ volatile(
 800620a:	f384 8811 	msr	BASEPRI, r4
 800620e:	f3bf 8f6f 	isb	sy
}
 8006212:	bd10      	pop	{r4, pc}

08006214 <z_set_timeout_expiry>:
{
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4604      	mov	r4, r0
 8006218:	460e      	mov	r6, r1
	__asm__ volatile(
 800621a:	f04f 0310 	mov.w	r3, #16
 800621e:	f3ef 8511 	mrs	r5, BASEPRI
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 800622a:	f7ff f88f 	bl	800534c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 800622e:	2801      	cmp	r0, #1
 8006230:	dd05      	ble.n	800623e <z_set_timeout_expiry+0x2a>
 8006232:	42a0      	cmp	r0, r4
 8006234:	dd03      	ble.n	800623e <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 8006236:	4631      	mov	r1, r6
 8006238:	4620      	mov	r0, r4
 800623a:	f7fd fb7f 	bl	800393c <z_clock_set_timeout>
	__asm__ volatile(
 800623e:	f385 8811 	msr	BASEPRI, r5
 8006242:	f3bf 8f6f 	isb	sy
}
 8006246:	bd70      	pop	{r4, r5, r6, pc}

08006248 <z_tick_get_32>:

u32_t z_tick_get_32(void)
{
 8006248:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (u32_t)z_tick_get();
 800624a:	f7ff f933 	bl	80054b4 <z_tick_get>
#else
	return (u32_t)curr_tick;
#endif
}
 800624e:	bd08      	pop	{r3, pc}

08006250 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8006250:	b508      	push	{r3, lr}
	__asm__ volatile(
 8006252:	f04f 0210 	mov.w	r2, #16
 8006256:	f3ef 8311 	mrs	r3, BASEPRI
 800625a:	f382 8811 	msr	BASEPRI, r2
 800625e:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8006262:	f7ff ffc7 	bl	80061f4 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 8006266:	2101      	movs	r1, #1
 8006268:	2802      	cmp	r0, #2
 800626a:	bfd8      	it	le
 800626c:	4608      	movle	r0, r1
 800626e:	f7ff ffd1 	bl	8006214 <z_set_timeout_expiry>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8006272:	f7fd fcf5 	bl	8003c60 <arch_cpu_idle>
 8006276:	e7ec      	b.n	8006252 <idle+0x2>

08006278 <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 8006278:	4770      	bx	lr
