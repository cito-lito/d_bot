
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

08000000 <_vector_table>:
 8000000:	20000700 	.word	0x20000700
 8000004:	080052e5 	.word	0x080052e5
 8000008:	08006e6b 	.word	0x08006e6b
 800000c:	08005251 	.word	0x08005251
 8000010:	08005251 	.word	0x08005251
 8000014:	08005251 	.word	0x08005251
 8000018:	08005251 	.word	0x08005251
 800001c:	08005251 	.word	0x08005251
 8000020:	08005251 	.word	0x08005251
 8000024:	08005251 	.word	0x08005251
 8000028:	08005251 	.word	0x08005251
 800002c:	0800512d 	.word	0x0800512d
 8000030:	08005251 	.word	0x08005251
 8000034:	08005251 	.word	0x08005251
 8000038:	0800507d 	.word	0x0800507d
 800003c:	08004ec5 	.word	0x08004ec5

08000040 <_irq_vector_table>:
 8000040:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000050:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000060:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000070:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000080:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000090:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80000a0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80000b0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80000c0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80000d0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80000e0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80000f0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000100:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000110:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000120:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000130:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000140:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000150:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000160:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000170:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000180:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 8000190:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80001a0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80001b0:	080052bd 080052bd 080052bd 080052bd     .R...R...R...R..
 80001c0:	080052bd                                .R..

Disassembly of section _TEXT_SECTION_NAME_2:

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <cos>:
 8000270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000272:	ec51 0b10 	vmov	r0, r1, d0
 8000276:	4a24      	ldr	r2, [pc, #144]	; (8000308 <cos+0x98>)
 8000278:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800027c:	4293      	cmp	r3, r2
 800027e:	dc06      	bgt.n	800028e <cos+0x1e>
 8000280:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8000300 <cos+0x90>
 8000284:	f000 fa8c 	bl	80007a0 <__kernel_cos>
 8000288:	ec51 0b10 	vmov	r0, r1, d0
 800028c:	e007      	b.n	800029e <cos+0x2e>
 800028e:	4a1f      	ldr	r2, [pc, #124]	; (800030c <cos+0x9c>)
 8000290:	4293      	cmp	r3, r2
 8000292:	dd09      	ble.n	80002a8 <cos+0x38>
 8000294:	ee10 2a10 	vmov	r2, s0
 8000298:	460b      	mov	r3, r1
 800029a:	f001 fe79 	bl	8001f90 <__aeabi_dsub>
 800029e:	ec41 0b10 	vmov	d0, r0, r1
 80002a2:	b005      	add	sp, #20
 80002a4:	f85d fb04 	ldr.w	pc, [sp], #4
 80002a8:	4668      	mov	r0, sp
 80002aa:	f000 f885 	bl	80003b8 <__ieee754_rem_pio2>
 80002ae:	f000 0003 	and.w	r0, r0, #3
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d007      	beq.n	80002c6 <cos+0x56>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	d012      	beq.n	80002e0 <cos+0x70>
 80002ba:	b9c0      	cbnz	r0, 80002ee <cos+0x7e>
 80002bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 80002c0:	ed9d 0b00 	vldr	d0, [sp]
 80002c4:	e7de      	b.n	8000284 <cos+0x14>
 80002c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80002ca:	ed9d 0b00 	vldr	d0, [sp]
 80002ce:	f000 fe67 	bl	8000fa0 <__kernel_sin>
 80002d2:	ec53 2b10 	vmov	r2, r3, d0
 80002d6:	ee10 0a10 	vmov	r0, s0
 80002da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80002de:	e7de      	b.n	800029e <cos+0x2e>
 80002e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80002e4:	ed9d 0b00 	vldr	d0, [sp]
 80002e8:	f000 fa5a 	bl	80007a0 <__kernel_cos>
 80002ec:	e7f1      	b.n	80002d2 <cos+0x62>
 80002ee:	2001      	movs	r0, #1
 80002f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80002f4:	ed9d 0b00 	vldr	d0, [sp]
 80002f8:	f000 fe52 	bl	8000fa0 <__kernel_sin>
 80002fc:	e7c4      	b.n	8000288 <cos+0x18>
 80002fe:	bf00      	nop
	...
 8000308:	3fe921fb 	.word	0x3fe921fb
 800030c:	7fefffff 	.word	0x7fefffff

08000310 <sin>:
 8000310:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000312:	ec51 0b10 	vmov	r0, r1, d0
 8000316:	4a26      	ldr	r2, [pc, #152]	; (80003b0 <sin+0xa0>)
 8000318:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800031c:	4293      	cmp	r3, r2
 800031e:	dc07      	bgt.n	8000330 <sin+0x20>
 8000320:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80003a8 <sin+0x98>
 8000324:	2000      	movs	r0, #0
 8000326:	f000 fe3b 	bl	8000fa0 <__kernel_sin>
 800032a:	ec51 0b10 	vmov	r0, r1, d0
 800032e:	e007      	b.n	8000340 <sin+0x30>
 8000330:	4a20      	ldr	r2, [pc, #128]	; (80003b4 <sin+0xa4>)
 8000332:	4293      	cmp	r3, r2
 8000334:	dd09      	ble.n	800034a <sin+0x3a>
 8000336:	ee10 2a10 	vmov	r2, s0
 800033a:	460b      	mov	r3, r1
 800033c:	f001 fe28 	bl	8001f90 <__aeabi_dsub>
 8000340:	ec41 0b10 	vmov	d0, r0, r1
 8000344:	b005      	add	sp, #20
 8000346:	f85d fb04 	ldr.w	pc, [sp], #4
 800034a:	4668      	mov	r0, sp
 800034c:	f000 f834 	bl	80003b8 <__ieee754_rem_pio2>
 8000350:	f000 0003 	and.w	r0, r0, #3
 8000354:	2801      	cmp	r0, #1
 8000356:	d008      	beq.n	800036a <sin+0x5a>
 8000358:	2802      	cmp	r0, #2
 800035a:	d00d      	beq.n	8000378 <sin+0x68>
 800035c:	b9d0      	cbnz	r0, 8000394 <sin+0x84>
 800035e:	2001      	movs	r0, #1
 8000360:	ed9d 1b02 	vldr	d1, [sp, #8]
 8000364:	ed9d 0b00 	vldr	d0, [sp]
 8000368:	e7dd      	b.n	8000326 <sin+0x16>
 800036a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800036e:	ed9d 0b00 	vldr	d0, [sp]
 8000372:	f000 fa15 	bl	80007a0 <__kernel_cos>
 8000376:	e7d8      	b.n	800032a <sin+0x1a>
 8000378:	2001      	movs	r0, #1
 800037a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800037e:	ed9d 0b00 	vldr	d0, [sp]
 8000382:	f000 fe0d 	bl	8000fa0 <__kernel_sin>
 8000386:	ec53 2b10 	vmov	r2, r3, d0
 800038a:	ee10 0a10 	vmov	r0, s0
 800038e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8000392:	e7d5      	b.n	8000340 <sin+0x30>
 8000394:	ed9d 1b02 	vldr	d1, [sp, #8]
 8000398:	ed9d 0b00 	vldr	d0, [sp]
 800039c:	f000 fa00 	bl	80007a0 <__kernel_cos>
 80003a0:	e7f1      	b.n	8000386 <sin+0x76>
 80003a2:	bf00      	nop
 80003a4:	f3af 8000 	nop.w
	...
 80003b0:	3fe921fb 	.word	0x3fe921fb
 80003b4:	7fefffff 	.word	0x7fefffff

080003b8 <__ieee754_rem_pio2>:
 80003b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003bc:	ec57 6b10 	vmov	r6, r7, d0
 80003c0:	4bc3      	ldr	r3, [pc, #780]	; (80006d0 <__ieee754_rem_pio2+0x318>)
 80003c2:	b08d      	sub	sp, #52	; 0x34
 80003c4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80003c8:	4598      	cmp	r8, r3
 80003ca:	4604      	mov	r4, r0
 80003cc:	9704      	str	r7, [sp, #16]
 80003ce:	dc07      	bgt.n	80003e0 <__ieee754_rem_pio2+0x28>
 80003d0:	2200      	movs	r2, #0
 80003d2:	2300      	movs	r3, #0
 80003d4:	ed84 0b00 	vstr	d0, [r4]
 80003d8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80003dc:	2500      	movs	r5, #0
 80003de:	e027      	b.n	8000430 <__ieee754_rem_pio2+0x78>
 80003e0:	4bbc      	ldr	r3, [pc, #752]	; (80006d4 <__ieee754_rem_pio2+0x31c>)
 80003e2:	4598      	cmp	r8, r3
 80003e4:	dc75      	bgt.n	80004d2 <__ieee754_rem_pio2+0x11a>
 80003e6:	9b04      	ldr	r3, [sp, #16]
 80003e8:	4dbb      	ldr	r5, [pc, #748]	; (80006d8 <__ieee754_rem_pio2+0x320>)
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	ee10 0a10 	vmov	r0, s0
 80003f0:	a3a9      	add	r3, pc, #676	; (adr r3, 8000698 <__ieee754_rem_pio2+0x2e0>)
 80003f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80003f6:	4639      	mov	r1, r7
 80003f8:	dd36      	ble.n	8000468 <__ieee754_rem_pio2+0xb0>
 80003fa:	f001 fdc9 	bl	8001f90 <__aeabi_dsub>
 80003fe:	45a8      	cmp	r8, r5
 8000400:	4606      	mov	r6, r0
 8000402:	460f      	mov	r7, r1
 8000404:	d018      	beq.n	8000438 <__ieee754_rem_pio2+0x80>
 8000406:	a3a6      	add	r3, pc, #664	; (adr r3, 80006a0 <__ieee754_rem_pio2+0x2e8>)
 8000408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800040c:	f001 fdc0 	bl	8001f90 <__aeabi_dsub>
 8000410:	4602      	mov	r2, r0
 8000412:	460b      	mov	r3, r1
 8000414:	e9c4 2300 	strd	r2, r3, [r4]
 8000418:	4630      	mov	r0, r6
 800041a:	4639      	mov	r1, r7
 800041c:	f001 fdb8 	bl	8001f90 <__aeabi_dsub>
 8000420:	a39f      	add	r3, pc, #636	; (adr r3, 80006a0 <__ieee754_rem_pio2+0x2e8>)
 8000422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000426:	f001 fdb3 	bl	8001f90 <__aeabi_dsub>
 800042a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800042e:	2501      	movs	r5, #1
 8000430:	4628      	mov	r0, r5
 8000432:	b00d      	add	sp, #52	; 0x34
 8000434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000438:	a39b      	add	r3, pc, #620	; (adr r3, 80006a8 <__ieee754_rem_pio2+0x2f0>)
 800043a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800043e:	f001 fda7 	bl	8001f90 <__aeabi_dsub>
 8000442:	a39b      	add	r3, pc, #620	; (adr r3, 80006b0 <__ieee754_rem_pio2+0x2f8>)
 8000444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000448:	4606      	mov	r6, r0
 800044a:	460f      	mov	r7, r1
 800044c:	f001 fda0 	bl	8001f90 <__aeabi_dsub>
 8000450:	4602      	mov	r2, r0
 8000452:	460b      	mov	r3, r1
 8000454:	e9c4 2300 	strd	r2, r3, [r4]
 8000458:	4630      	mov	r0, r6
 800045a:	4639      	mov	r1, r7
 800045c:	f001 fd98 	bl	8001f90 <__aeabi_dsub>
 8000460:	a393      	add	r3, pc, #588	; (adr r3, 80006b0 <__ieee754_rem_pio2+0x2f8>)
 8000462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000466:	e7de      	b.n	8000426 <__ieee754_rem_pio2+0x6e>
 8000468:	f001 fd94 	bl	8001f94 <__adddf3>
 800046c:	45a8      	cmp	r8, r5
 800046e:	4606      	mov	r6, r0
 8000470:	460f      	mov	r7, r1
 8000472:	d016      	beq.n	80004a2 <__ieee754_rem_pio2+0xea>
 8000474:	a38a      	add	r3, pc, #552	; (adr r3, 80006a0 <__ieee754_rem_pio2+0x2e8>)
 8000476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800047a:	f001 fd8b 	bl	8001f94 <__adddf3>
 800047e:	4602      	mov	r2, r0
 8000480:	460b      	mov	r3, r1
 8000482:	e9c4 2300 	strd	r2, r3, [r4]
 8000486:	4630      	mov	r0, r6
 8000488:	4639      	mov	r1, r7
 800048a:	f001 fd81 	bl	8001f90 <__aeabi_dsub>
 800048e:	a384      	add	r3, pc, #528	; (adr r3, 80006a0 <__ieee754_rem_pio2+0x2e8>)
 8000490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000494:	f001 fd7e 	bl	8001f94 <__adddf3>
 8000498:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800049c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80004a0:	e7c6      	b.n	8000430 <__ieee754_rem_pio2+0x78>
 80004a2:	a381      	add	r3, pc, #516	; (adr r3, 80006a8 <__ieee754_rem_pio2+0x2f0>)
 80004a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004a8:	f001 fd74 	bl	8001f94 <__adddf3>
 80004ac:	a380      	add	r3, pc, #512	; (adr r3, 80006b0 <__ieee754_rem_pio2+0x2f8>)
 80004ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004b2:	4606      	mov	r6, r0
 80004b4:	460f      	mov	r7, r1
 80004b6:	f001 fd6d 	bl	8001f94 <__adddf3>
 80004ba:	4602      	mov	r2, r0
 80004bc:	460b      	mov	r3, r1
 80004be:	e9c4 2300 	strd	r2, r3, [r4]
 80004c2:	4630      	mov	r0, r6
 80004c4:	4639      	mov	r1, r7
 80004c6:	f001 fd63 	bl	8001f90 <__aeabi_dsub>
 80004ca:	a379      	add	r3, pc, #484	; (adr r3, 80006b0 <__ieee754_rem_pio2+0x2f8>)
 80004cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004d0:	e7e0      	b.n	8000494 <__ieee754_rem_pio2+0xdc>
 80004d2:	4b82      	ldr	r3, [pc, #520]	; (80006dc <__ieee754_rem_pio2+0x324>)
 80004d4:	4598      	cmp	r8, r3
 80004d6:	f300 80d0 	bgt.w	800067a <__ieee754_rem_pio2+0x2c2>
 80004da:	f004 f8c9 	bl	8004670 <fabs>
 80004de:	ec57 6b10 	vmov	r6, r7, d0
 80004e2:	ee10 0a10 	vmov	r0, s0
 80004e6:	a374      	add	r3, pc, #464	; (adr r3, 80006b8 <__ieee754_rem_pio2+0x300>)
 80004e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80004ec:	4639      	mov	r1, r7
 80004ee:	f001 ff07 	bl	8002300 <__aeabi_dmul>
 80004f2:	2200      	movs	r2, #0
 80004f4:	4b7a      	ldr	r3, [pc, #488]	; (80006e0 <__ieee754_rem_pio2+0x328>)
 80004f6:	f001 fd4d 	bl	8001f94 <__adddf3>
 80004fa:	f004 f891 	bl	8004620 <__aeabi_d2iz>
 80004fe:	4605      	mov	r5, r0
 8000500:	f001 fe94 	bl	800222c <__aeabi_i2d>
 8000504:	a364      	add	r3, pc, #400	; (adr r3, 8000698 <__ieee754_rem_pio2+0x2e0>)
 8000506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800050a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800050e:	f001 fef7 	bl	8002300 <__aeabi_dmul>
 8000512:	4602      	mov	r2, r0
 8000514:	460b      	mov	r3, r1
 8000516:	4630      	mov	r0, r6
 8000518:	4639      	mov	r1, r7
 800051a:	f001 fd39 	bl	8001f90 <__aeabi_dsub>
 800051e:	a360      	add	r3, pc, #384	; (adr r3, 80006a0 <__ieee754_rem_pio2+0x2e8>)
 8000520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000524:	4682      	mov	sl, r0
 8000526:	468b      	mov	fp, r1
 8000528:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800052c:	f001 fee8 	bl	8002300 <__aeabi_dmul>
 8000530:	2d1f      	cmp	r5, #31
 8000532:	4606      	mov	r6, r0
 8000534:	460f      	mov	r7, r1
 8000536:	dc0c      	bgt.n	8000552 <__ieee754_rem_pio2+0x19a>
 8000538:	1e6a      	subs	r2, r5, #1
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <__ieee754_rem_pio2+0x32c>)
 800053c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000540:	4543      	cmp	r3, r8
 8000542:	d006      	beq.n	8000552 <__ieee754_rem_pio2+0x19a>
 8000544:	4632      	mov	r2, r6
 8000546:	463b      	mov	r3, r7
 8000548:	4650      	mov	r0, sl
 800054a:	4659      	mov	r1, fp
 800054c:	f001 fd20 	bl	8001f90 <__aeabi_dsub>
 8000550:	e00e      	b.n	8000570 <__ieee754_rem_pio2+0x1b8>
 8000552:	4632      	mov	r2, r6
 8000554:	463b      	mov	r3, r7
 8000556:	4650      	mov	r0, sl
 8000558:	4659      	mov	r1, fp
 800055a:	f001 fd19 	bl	8001f90 <__aeabi_dsub>
 800055e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8000562:	9305      	str	r3, [sp, #20]
 8000564:	9a05      	ldr	r2, [sp, #20]
 8000566:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800056a:	1ad3      	subs	r3, r2, r3
 800056c:	2b10      	cmp	r3, #16
 800056e:	dc02      	bgt.n	8000576 <__ieee754_rem_pio2+0x1be>
 8000570:	e9c4 0100 	strd	r0, r1, [r4]
 8000574:	e039      	b.n	80005ea <__ieee754_rem_pio2+0x232>
 8000576:	a34c      	add	r3, pc, #304	; (adr r3, 80006a8 <__ieee754_rem_pio2+0x2f0>)
 8000578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800057c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000580:	f001 febe 	bl	8002300 <__aeabi_dmul>
 8000584:	4606      	mov	r6, r0
 8000586:	460f      	mov	r7, r1
 8000588:	4602      	mov	r2, r0
 800058a:	460b      	mov	r3, r1
 800058c:	4650      	mov	r0, sl
 800058e:	4659      	mov	r1, fp
 8000590:	f001 fcfe 	bl	8001f90 <__aeabi_dsub>
 8000594:	4602      	mov	r2, r0
 8000596:	460b      	mov	r3, r1
 8000598:	4680      	mov	r8, r0
 800059a:	4689      	mov	r9, r1
 800059c:	4650      	mov	r0, sl
 800059e:	4659      	mov	r1, fp
 80005a0:	f001 fcf6 	bl	8001f90 <__aeabi_dsub>
 80005a4:	4632      	mov	r2, r6
 80005a6:	463b      	mov	r3, r7
 80005a8:	f001 fcf2 	bl	8001f90 <__aeabi_dsub>
 80005ac:	a340      	add	r3, pc, #256	; (adr r3, 80006b0 <__ieee754_rem_pio2+0x2f8>)
 80005ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80005b2:	4606      	mov	r6, r0
 80005b4:	460f      	mov	r7, r1
 80005b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80005ba:	f001 fea1 	bl	8002300 <__aeabi_dmul>
 80005be:	4632      	mov	r2, r6
 80005c0:	463b      	mov	r3, r7
 80005c2:	f001 fce5 	bl	8001f90 <__aeabi_dsub>
 80005c6:	4602      	mov	r2, r0
 80005c8:	460b      	mov	r3, r1
 80005ca:	4606      	mov	r6, r0
 80005cc:	460f      	mov	r7, r1
 80005ce:	4640      	mov	r0, r8
 80005d0:	4649      	mov	r1, r9
 80005d2:	f001 fcdd 	bl	8001f90 <__aeabi_dsub>
 80005d6:	9a05      	ldr	r2, [sp, #20]
 80005d8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80005dc:	1ad3      	subs	r3, r2, r3
 80005de:	2b31      	cmp	r3, #49	; 0x31
 80005e0:	dc20      	bgt.n	8000624 <__ieee754_rem_pio2+0x26c>
 80005e2:	e9c4 0100 	strd	r0, r1, [r4]
 80005e6:	46c2      	mov	sl, r8
 80005e8:	46cb      	mov	fp, r9
 80005ea:	e9d4 8900 	ldrd	r8, r9, [r4]
 80005ee:	4650      	mov	r0, sl
 80005f0:	4642      	mov	r2, r8
 80005f2:	464b      	mov	r3, r9
 80005f4:	4659      	mov	r1, fp
 80005f6:	f001 fccb 	bl	8001f90 <__aeabi_dsub>
 80005fa:	463b      	mov	r3, r7
 80005fc:	4632      	mov	r2, r6
 80005fe:	f001 fcc7 	bl	8001f90 <__aeabi_dsub>
 8000602:	9b04      	ldr	r3, [sp, #16]
 8000604:	2b00      	cmp	r3, #0
 8000606:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800060a:	f6bf af11 	bge.w	8000430 <__ieee754_rem_pio2+0x78>
 800060e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8000612:	6063      	str	r3, [r4, #4]
 8000614:	f8c4 8000 	str.w	r8, [r4]
 8000618:	60a0      	str	r0, [r4, #8]
 800061a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800061e:	60e3      	str	r3, [r4, #12]
 8000620:	426d      	negs	r5, r5
 8000622:	e705      	b.n	8000430 <__ieee754_rem_pio2+0x78>
 8000624:	a326      	add	r3, pc, #152	; (adr r3, 80006c0 <__ieee754_rem_pio2+0x308>)
 8000626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800062a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800062e:	f001 fe67 	bl	8002300 <__aeabi_dmul>
 8000632:	4606      	mov	r6, r0
 8000634:	460f      	mov	r7, r1
 8000636:	4602      	mov	r2, r0
 8000638:	460b      	mov	r3, r1
 800063a:	4640      	mov	r0, r8
 800063c:	4649      	mov	r1, r9
 800063e:	f001 fca7 	bl	8001f90 <__aeabi_dsub>
 8000642:	4602      	mov	r2, r0
 8000644:	460b      	mov	r3, r1
 8000646:	4682      	mov	sl, r0
 8000648:	468b      	mov	fp, r1
 800064a:	4640      	mov	r0, r8
 800064c:	4649      	mov	r1, r9
 800064e:	f001 fc9f 	bl	8001f90 <__aeabi_dsub>
 8000652:	4632      	mov	r2, r6
 8000654:	463b      	mov	r3, r7
 8000656:	f001 fc9b 	bl	8001f90 <__aeabi_dsub>
 800065a:	a31b      	add	r3, pc, #108	; (adr r3, 80006c8 <__ieee754_rem_pio2+0x310>)
 800065c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000660:	4606      	mov	r6, r0
 8000662:	460f      	mov	r7, r1
 8000664:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000668:	f001 fe4a 	bl	8002300 <__aeabi_dmul>
 800066c:	4632      	mov	r2, r6
 800066e:	463b      	mov	r3, r7
 8000670:	f001 fc8e 	bl	8001f90 <__aeabi_dsub>
 8000674:	4606      	mov	r6, r0
 8000676:	460f      	mov	r7, r1
 8000678:	e764      	b.n	8000544 <__ieee754_rem_pio2+0x18c>
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <__ieee754_rem_pio2+0x330>)
 800067c:	4598      	cmp	r8, r3
 800067e:	dd35      	ble.n	80006ec <__ieee754_rem_pio2+0x334>
 8000680:	ee10 2a10 	vmov	r2, s0
 8000684:	463b      	mov	r3, r7
 8000686:	4630      	mov	r0, r6
 8000688:	4639      	mov	r1, r7
 800068a:	f001 fc81 	bl	8001f90 <__aeabi_dsub>
 800068e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8000692:	e9c4 0100 	strd	r0, r1, [r4]
 8000696:	e6a1      	b.n	80003dc <__ieee754_rem_pio2+0x24>
 8000698:	54400000 	.word	0x54400000
 800069c:	3ff921fb 	.word	0x3ff921fb
 80006a0:	1a626331 	.word	0x1a626331
 80006a4:	3dd0b461 	.word	0x3dd0b461
 80006a8:	1a600000 	.word	0x1a600000
 80006ac:	3dd0b461 	.word	0x3dd0b461
 80006b0:	2e037073 	.word	0x2e037073
 80006b4:	3ba3198a 	.word	0x3ba3198a
 80006b8:	6dc9c883 	.word	0x6dc9c883
 80006bc:	3fe45f30 	.word	0x3fe45f30
 80006c0:	2e000000 	.word	0x2e000000
 80006c4:	3ba3198a 	.word	0x3ba3198a
 80006c8:	252049c1 	.word	0x252049c1
 80006cc:	397b839a 	.word	0x397b839a
 80006d0:	3fe921fb 	.word	0x3fe921fb
 80006d4:	4002d97b 	.word	0x4002d97b
 80006d8:	3ff921fb 	.word	0x3ff921fb
 80006dc:	413921fb 	.word	0x413921fb
 80006e0:	3fe00000 	.word	0x3fe00000
 80006e4:	08007b60 	.word	0x08007b60
 80006e8:	7fefffff 	.word	0x7fefffff
 80006ec:	ea4f 5528 	mov.w	r5, r8, asr #20
 80006f0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80006f4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80006f8:	4630      	mov	r0, r6
 80006fa:	460f      	mov	r7, r1
 80006fc:	f003 ff90 	bl	8004620 <__aeabi_d2iz>
 8000700:	f001 fd94 	bl	800222c <__aeabi_i2d>
 8000704:	4602      	mov	r2, r0
 8000706:	460b      	mov	r3, r1
 8000708:	4630      	mov	r0, r6
 800070a:	4639      	mov	r1, r7
 800070c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8000710:	f001 fc3e 	bl	8001f90 <__aeabi_dsub>
 8000714:	2200      	movs	r2, #0
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <__ieee754_rem_pio2+0x3e0>)
 8000718:	f001 fdf2 	bl	8002300 <__aeabi_dmul>
 800071c:	460f      	mov	r7, r1
 800071e:	4606      	mov	r6, r0
 8000720:	f003 ff7e 	bl	8004620 <__aeabi_d2iz>
 8000724:	f001 fd82 	bl	800222c <__aeabi_i2d>
 8000728:	4602      	mov	r2, r0
 800072a:	460b      	mov	r3, r1
 800072c:	4630      	mov	r0, r6
 800072e:	4639      	mov	r1, r7
 8000730:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8000734:	f001 fc2c 	bl	8001f90 <__aeabi_dsub>
 8000738:	2200      	movs	r2, #0
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <__ieee754_rem_pio2+0x3e0>)
 800073c:	f001 fde0 	bl	8002300 <__aeabi_dmul>
 8000740:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8000744:	ae06      	add	r6, sp, #24
 8000746:	2703      	movs	r7, #3
 8000748:	46b0      	mov	r8, r6
 800074a:	f04f 0a00 	mov.w	sl, #0
 800074e:	f04f 0b00 	mov.w	fp, #0
 8000752:	3e08      	subs	r6, #8
 8000754:	4652      	mov	r2, sl
 8000756:	465b      	mov	r3, fp
 8000758:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 800075c:	f107 39ff 	add.w	r9, r7, #4294967295	; 0xffffffff
 8000760:	f002 f836 	bl	80027d0 <__aeabi_dcmpeq>
 8000764:	b9b0      	cbnz	r0, 8000794 <__ieee754_rem_pio2+0x3dc>
 8000766:	4b0d      	ldr	r3, [pc, #52]	; (800079c <__ieee754_rem_pio2+0x3e4>)
 8000768:	9301      	str	r3, [sp, #4]
 800076a:	2302      	movs	r3, #2
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	462a      	mov	r2, r5
 8000770:	463b      	mov	r3, r7
 8000772:	4621      	mov	r1, r4
 8000774:	4640      	mov	r0, r8
 8000776:	f000 f8db 	bl	8000930 <__kernel_rem_pio2>
 800077a:	9b04      	ldr	r3, [sp, #16]
 800077c:	2b00      	cmp	r3, #0
 800077e:	4605      	mov	r5, r0
 8000780:	f6bf ae56 	bge.w	8000430 <__ieee754_rem_pio2+0x78>
 8000784:	6863      	ldr	r3, [r4, #4]
 8000786:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800078a:	6063      	str	r3, [r4, #4]
 800078c:	68e3      	ldr	r3, [r4, #12]
 800078e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8000792:	e744      	b.n	800061e <__ieee754_rem_pio2+0x266>
 8000794:	464f      	mov	r7, r9
 8000796:	e7dc      	b.n	8000752 <__ieee754_rem_pio2+0x39a>
 8000798:	41700000 	.word	0x41700000
 800079c:	08007be0 	.word	0x08007be0

080007a0 <__kernel_cos>:
 80007a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007a4:	ec59 8b10 	vmov	r8, r9, d0
 80007a8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80007ac:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80007b0:	ed2d 8b02 	vpush	{d8}
 80007b4:	eeb0 8a41 	vmov.f32	s16, s2
 80007b8:	eef0 8a61 	vmov.f32	s17, s3
 80007bc:	da07      	bge.n	80007ce <__kernel_cos+0x2e>
 80007be:	ee10 0a10 	vmov	r0, s0
 80007c2:	4649      	mov	r1, r9
 80007c4:	f003 ff2c 	bl	8004620 <__aeabi_d2iz>
 80007c8:	2800      	cmp	r0, #0
 80007ca:	f000 8089 	beq.w	80008e0 <__kernel_cos+0x140>
 80007ce:	4642      	mov	r2, r8
 80007d0:	464b      	mov	r3, r9
 80007d2:	4640      	mov	r0, r8
 80007d4:	4649      	mov	r1, r9
 80007d6:	f001 fd93 	bl	8002300 <__aeabi_dmul>
 80007da:	2200      	movs	r2, #0
 80007dc:	4b4e      	ldr	r3, [pc, #312]	; (8000918 <__kernel_cos+0x178>)
 80007de:	4604      	mov	r4, r0
 80007e0:	460d      	mov	r5, r1
 80007e2:	f001 fd8d 	bl	8002300 <__aeabi_dmul>
 80007e6:	a340      	add	r3, pc, #256	; (adr r3, 80008e8 <__kernel_cos+0x148>)
 80007e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ec:	4682      	mov	sl, r0
 80007ee:	468b      	mov	fp, r1
 80007f0:	4620      	mov	r0, r4
 80007f2:	4629      	mov	r1, r5
 80007f4:	f001 fd84 	bl	8002300 <__aeabi_dmul>
 80007f8:	a33d      	add	r3, pc, #244	; (adr r3, 80008f0 <__kernel_cos+0x150>)
 80007fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007fe:	f001 fbc9 	bl	8001f94 <__adddf3>
 8000802:	4622      	mov	r2, r4
 8000804:	462b      	mov	r3, r5
 8000806:	f001 fd7b 	bl	8002300 <__aeabi_dmul>
 800080a:	a33b      	add	r3, pc, #236	; (adr r3, 80008f8 <__kernel_cos+0x158>)
 800080c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000810:	f001 fbbe 	bl	8001f90 <__aeabi_dsub>
 8000814:	4622      	mov	r2, r4
 8000816:	462b      	mov	r3, r5
 8000818:	f001 fd72 	bl	8002300 <__aeabi_dmul>
 800081c:	a338      	add	r3, pc, #224	; (adr r3, 8000900 <__kernel_cos+0x160>)
 800081e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000822:	f001 fbb7 	bl	8001f94 <__adddf3>
 8000826:	4622      	mov	r2, r4
 8000828:	462b      	mov	r3, r5
 800082a:	f001 fd69 	bl	8002300 <__aeabi_dmul>
 800082e:	a336      	add	r3, pc, #216	; (adr r3, 8000908 <__kernel_cos+0x168>)
 8000830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000834:	f001 fbac 	bl	8001f90 <__aeabi_dsub>
 8000838:	4622      	mov	r2, r4
 800083a:	462b      	mov	r3, r5
 800083c:	f001 fd60 	bl	8002300 <__aeabi_dmul>
 8000840:	a333      	add	r3, pc, #204	; (adr r3, 8000910 <__kernel_cos+0x170>)
 8000842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000846:	f001 fba5 	bl	8001f94 <__adddf3>
 800084a:	4622      	mov	r2, r4
 800084c:	462b      	mov	r3, r5
 800084e:	f001 fd57 	bl	8002300 <__aeabi_dmul>
 8000852:	4622      	mov	r2, r4
 8000854:	462b      	mov	r3, r5
 8000856:	f001 fd53 	bl	8002300 <__aeabi_dmul>
 800085a:	ec53 2b18 	vmov	r2, r3, d8
 800085e:	4604      	mov	r4, r0
 8000860:	460d      	mov	r5, r1
 8000862:	4640      	mov	r0, r8
 8000864:	4649      	mov	r1, r9
 8000866:	f001 fd4b 	bl	8002300 <__aeabi_dmul>
 800086a:	460b      	mov	r3, r1
 800086c:	4602      	mov	r2, r0
 800086e:	4629      	mov	r1, r5
 8000870:	4620      	mov	r0, r4
 8000872:	f001 fb8d 	bl	8001f90 <__aeabi_dsub>
 8000876:	4b29      	ldr	r3, [pc, #164]	; (800091c <__kernel_cos+0x17c>)
 8000878:	429e      	cmp	r6, r3
 800087a:	4680      	mov	r8, r0
 800087c:	4689      	mov	r9, r1
 800087e:	dc11      	bgt.n	80008a4 <__kernel_cos+0x104>
 8000880:	4602      	mov	r2, r0
 8000882:	460b      	mov	r3, r1
 8000884:	4650      	mov	r0, sl
 8000886:	4659      	mov	r1, fp
 8000888:	f001 fb82 	bl	8001f90 <__aeabi_dsub>
 800088c:	460b      	mov	r3, r1
 800088e:	4924      	ldr	r1, [pc, #144]	; (8000920 <__kernel_cos+0x180>)
 8000890:	4602      	mov	r2, r0
 8000892:	2000      	movs	r0, #0
 8000894:	f001 fb7c 	bl	8001f90 <__aeabi_dsub>
 8000898:	ecbd 8b02 	vpop	{d8}
 800089c:	ec41 0b10 	vmov	d0, r0, r1
 80008a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008a4:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <__kernel_cos+0x184>)
 80008a6:	491e      	ldr	r1, [pc, #120]	; (8000920 <__kernel_cos+0x180>)
 80008a8:	429e      	cmp	r6, r3
 80008aa:	bfcc      	ite	gt
 80008ac:	4d1e      	ldrgt	r5, [pc, #120]	; (8000928 <__kernel_cos+0x188>)
 80008ae:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80008b2:	2400      	movs	r4, #0
 80008b4:	4622      	mov	r2, r4
 80008b6:	462b      	mov	r3, r5
 80008b8:	2000      	movs	r0, #0
 80008ba:	f001 fb69 	bl	8001f90 <__aeabi_dsub>
 80008be:	4622      	mov	r2, r4
 80008c0:	4606      	mov	r6, r0
 80008c2:	460f      	mov	r7, r1
 80008c4:	462b      	mov	r3, r5
 80008c6:	4650      	mov	r0, sl
 80008c8:	4659      	mov	r1, fp
 80008ca:	f001 fb61 	bl	8001f90 <__aeabi_dsub>
 80008ce:	4642      	mov	r2, r8
 80008d0:	464b      	mov	r3, r9
 80008d2:	f001 fb5d 	bl	8001f90 <__aeabi_dsub>
 80008d6:	4602      	mov	r2, r0
 80008d8:	460b      	mov	r3, r1
 80008da:	4630      	mov	r0, r6
 80008dc:	4639      	mov	r1, r7
 80008de:	e7d9      	b.n	8000894 <__kernel_cos+0xf4>
 80008e0:	2000      	movs	r0, #0
 80008e2:	490f      	ldr	r1, [pc, #60]	; (8000920 <__kernel_cos+0x180>)
 80008e4:	e7d8      	b.n	8000898 <__kernel_cos+0xf8>
 80008e6:	bf00      	nop
 80008e8:	be8838d4 	.word	0xbe8838d4
 80008ec:	bda8fae9 	.word	0xbda8fae9
 80008f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80008f4:	3e21ee9e 	.word	0x3e21ee9e
 80008f8:	809c52ad 	.word	0x809c52ad
 80008fc:	3e927e4f 	.word	0x3e927e4f
 8000900:	19cb1590 	.word	0x19cb1590
 8000904:	3efa01a0 	.word	0x3efa01a0
 8000908:	16c15177 	.word	0x16c15177
 800090c:	3f56c16c 	.word	0x3f56c16c
 8000910:	5555554c 	.word	0x5555554c
 8000914:	3fa55555 	.word	0x3fa55555
 8000918:	3fe00000 	.word	0x3fe00000
 800091c:	3fd33332 	.word	0x3fd33332
 8000920:	3ff00000 	.word	0x3ff00000
 8000924:	3fe90000 	.word	0x3fe90000
 8000928:	3fd20000 	.word	0x3fd20000
 800092c:	00000000 	.word	0x00000000

08000930 <__kernel_rem_pio2>:
 8000930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000934:	ed2d 8b02 	vpush	{d8}
 8000938:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800093c:	f112 0f14 	cmn.w	r2, #20
 8000940:	9308      	str	r3, [sp, #32]
 8000942:	9104      	str	r1, [sp, #16]
 8000944:	4bc6      	ldr	r3, [pc, #792]	; (8000c60 <__kernel_rem_pio2+0x330>)
 8000946:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8000948:	9009      	str	r0, [sp, #36]	; 0x24
 800094a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800094e:	9302      	str	r3, [sp, #8]
 8000950:	9b08      	ldr	r3, [sp, #32]
 8000952:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8000956:	bfa8      	it	ge
 8000958:	1ed4      	subge	r4, r2, #3
 800095a:	9306      	str	r3, [sp, #24]
 800095c:	bfb2      	itee	lt
 800095e:	2400      	movlt	r4, #0
 8000960:	2318      	movge	r3, #24
 8000962:	fb94 f4f3 	sdivge	r4, r4, r3
 8000966:	f06f 0317 	mvn.w	r3, #23
 800096a:	fb04 3303 	mla	r3, r4, r3, r3
 800096e:	eb03 0b02 	add.w	fp, r3, r2
 8000972:	9b02      	ldr	r3, [sp, #8]
 8000974:	9a06      	ldr	r2, [sp, #24]
 8000976:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8000c50 <__kernel_rem_pio2+0x320>
 800097a:	eb03 0802 	add.w	r8, r3, r2
 800097e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8000980:	1aa7      	subs	r7, r4, r2
 8000982:	ae20      	add	r6, sp, #128	; 0x80
 8000984:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8000988:	2500      	movs	r5, #0
 800098a:	4545      	cmp	r5, r8
 800098c:	dd13      	ble.n	80009b6 <__kernel_rem_pio2+0x86>
 800098e:	9b08      	ldr	r3, [sp, #32]
 8000990:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8000c50 <__kernel_rem_pio2+0x320>
 8000994:	aa20      	add	r2, sp, #128	; 0x80
 8000996:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800099a:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800099e:	f04f 0800 	mov.w	r8, #0
 80009a2:	9b02      	ldr	r3, [sp, #8]
 80009a4:	4598      	cmp	r8, r3
 80009a6:	dc2f      	bgt.n	8000a08 <__kernel_rem_pio2+0xd8>
 80009a8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80009ac:	462f      	mov	r7, r5
 80009ae:	ed8d 8b00 	vstr	d8, [sp]
 80009b2:	2600      	movs	r6, #0
 80009b4:	e01b      	b.n	80009ee <__kernel_rem_pio2+0xbe>
 80009b6:	42ef      	cmn	r7, r5
 80009b8:	d407      	bmi.n	80009ca <__kernel_rem_pio2+0x9a>
 80009ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80009be:	f001 fc35 	bl	800222c <__aeabi_i2d>
 80009c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 80009c6:	3501      	adds	r5, #1
 80009c8:	e7df      	b.n	800098a <__kernel_rem_pio2+0x5a>
 80009ca:	ec51 0b18 	vmov	r0, r1, d8
 80009ce:	e7f8      	b.n	80009c2 <__kernel_rem_pio2+0x92>
 80009d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80009d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80009d8:	f001 fc92 	bl	8002300 <__aeabi_dmul>
 80009dc:	4602      	mov	r2, r0
 80009de:	460b      	mov	r3, r1
 80009e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80009e4:	f001 fad6 	bl	8001f94 <__adddf3>
 80009e8:	e9cd 0100 	strd	r0, r1, [sp]
 80009ec:	3601      	adds	r6, #1
 80009ee:	9b06      	ldr	r3, [sp, #24]
 80009f0:	429e      	cmp	r6, r3
 80009f2:	f1a7 0708 	sub.w	r7, r7, #8
 80009f6:	ddeb      	ble.n	80009d0 <__kernel_rem_pio2+0xa0>
 80009f8:	ed9d 7b00 	vldr	d7, [sp]
 80009fc:	f108 0801 	add.w	r8, r8, #1
 8000a00:	ecaa 7b02 	vstmia	sl!, {d7}
 8000a04:	3508      	adds	r5, #8
 8000a06:	e7cc      	b.n	80009a2 <__kernel_rem_pio2+0x72>
 8000a08:	9b02      	ldr	r3, [sp, #8]
 8000a0a:	aa0c      	add	r2, sp, #48	; 0x30
 8000a0c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8000a10:	930b      	str	r3, [sp, #44]	; 0x2c
 8000a12:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8000a14:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8000a18:	9c02      	ldr	r4, [sp, #8]
 8000a1a:	930a      	str	r3, [sp, #40]	; 0x28
 8000a1c:	ab98      	add	r3, sp, #608	; 0x260
 8000a1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000a22:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8000a26:	ad0c      	add	r5, sp, #48	; 0x30
 8000a28:	46a9      	mov	r9, r5
 8000a2a:	46a0      	mov	r8, r4
 8000a2c:	f1b8 0f00 	cmp.w	r8, #0
 8000a30:	dc78      	bgt.n	8000b24 <__kernel_rem_pio2+0x1f4>
 8000a32:	4658      	mov	r0, fp
 8000a34:	ec47 6b10 	vmov	d0, r6, r7
 8000a38:	f000 fbee 	bl	8001218 <scalbn>
 8000a3c:	ec57 6b10 	vmov	r6, r7, d0
 8000a40:	2200      	movs	r2, #0
 8000a42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8000a46:	ee10 0a10 	vmov	r0, s0
 8000a4a:	4639      	mov	r1, r7
 8000a4c:	f001 fc58 	bl	8002300 <__aeabi_dmul>
 8000a50:	ec41 0b10 	vmov	d0, r0, r1
 8000a54:	f000 fb60 	bl	8001118 <floor>
 8000a58:	2200      	movs	r2, #0
 8000a5a:	ec51 0b10 	vmov	r0, r1, d0
 8000a5e:	4b81      	ldr	r3, [pc, #516]	; (8000c64 <__kernel_rem_pio2+0x334>)
 8000a60:	f001 fc4e 	bl	8002300 <__aeabi_dmul>
 8000a64:	4602      	mov	r2, r0
 8000a66:	460b      	mov	r3, r1
 8000a68:	4630      	mov	r0, r6
 8000a6a:	4639      	mov	r1, r7
 8000a6c:	f001 fa90 	bl	8001f90 <__aeabi_dsub>
 8000a70:	460f      	mov	r7, r1
 8000a72:	4606      	mov	r6, r0
 8000a74:	f003 fdd4 	bl	8004620 <__aeabi_d2iz>
 8000a78:	9005      	str	r0, [sp, #20]
 8000a7a:	f001 fbd7 	bl	800222c <__aeabi_i2d>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	460b      	mov	r3, r1
 8000a82:	4630      	mov	r0, r6
 8000a84:	4639      	mov	r1, r7
 8000a86:	f001 fa83 	bl	8001f90 <__aeabi_dsub>
 8000a8a:	f1bb 0f00 	cmp.w	fp, #0
 8000a8e:	4680      	mov	r8, r0
 8000a90:	4689      	mov	r9, r1
 8000a92:	dd6f      	ble.n	8000b74 <__kernel_rem_pio2+0x244>
 8000a94:	1e62      	subs	r2, r4, #1
 8000a96:	ab0c      	add	r3, sp, #48	; 0x30
 8000a98:	f1cb 0118 	rsb	r1, fp, #24
 8000a9c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8000aa0:	9e05      	ldr	r6, [sp, #20]
 8000aa2:	fa40 f301 	asr.w	r3, r0, r1
 8000aa6:	441e      	add	r6, r3
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	1ac0      	subs	r0, r0, r3
 8000aac:	ab0c      	add	r3, sp, #48	; 0x30
 8000aae:	9605      	str	r6, [sp, #20]
 8000ab0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000ab4:	f1cb 0317 	rsb	r3, fp, #23
 8000ab8:	fa40 f303 	asr.w	r3, r0, r3
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	9b00      	ldr	r3, [sp, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	dd65      	ble.n	8000b90 <__kernel_rem_pio2+0x260>
 8000ac4:	9b05      	ldr	r3, [sp, #20]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	3301      	adds	r3, #1
 8000aca:	9305      	str	r3, [sp, #20]
 8000acc:	4616      	mov	r6, r2
 8000ace:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8000ad2:	4294      	cmp	r4, r2
 8000ad4:	f300 8099 	bgt.w	8000c0a <__kernel_rem_pio2+0x2da>
 8000ad8:	f1bb 0f00 	cmp.w	fp, #0
 8000adc:	dd07      	ble.n	8000aee <__kernel_rem_pio2+0x1be>
 8000ade:	f1bb 0f01 	cmp.w	fp, #1
 8000ae2:	f000 80a1 	beq.w	8000c28 <__kernel_rem_pio2+0x2f8>
 8000ae6:	f1bb 0f02 	cmp.w	fp, #2
 8000aea:	f000 80a7 	beq.w	8000c3c <__kernel_rem_pio2+0x30c>
 8000aee:	9b00      	ldr	r3, [sp, #0]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d14d      	bne.n	8000b90 <__kernel_rem_pio2+0x260>
 8000af4:	4642      	mov	r2, r8
 8000af6:	464b      	mov	r3, r9
 8000af8:	2000      	movs	r0, #0
 8000afa:	495b      	ldr	r1, [pc, #364]	; (8000c68 <__kernel_rem_pio2+0x338>)
 8000afc:	f001 fa48 	bl	8001f90 <__aeabi_dsub>
 8000b00:	4680      	mov	r8, r0
 8000b02:	4689      	mov	r9, r1
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d043      	beq.n	8000b90 <__kernel_rem_pio2+0x260>
 8000b08:	4658      	mov	r0, fp
 8000b0a:	ed9f 0b53 	vldr	d0, [pc, #332]	; 8000c58 <__kernel_rem_pio2+0x328>
 8000b0e:	f000 fb83 	bl	8001218 <scalbn>
 8000b12:	4640      	mov	r0, r8
 8000b14:	4649      	mov	r1, r9
 8000b16:	ec53 2b10 	vmov	r2, r3, d0
 8000b1a:	f001 fa39 	bl	8001f90 <__aeabi_dsub>
 8000b1e:	4680      	mov	r8, r0
 8000b20:	4689      	mov	r9, r1
 8000b22:	e035      	b.n	8000b90 <__kernel_rem_pio2+0x260>
 8000b24:	2200      	movs	r2, #0
 8000b26:	4b51      	ldr	r3, [pc, #324]	; (8000c6c <__kernel_rem_pio2+0x33c>)
 8000b28:	4630      	mov	r0, r6
 8000b2a:	4639      	mov	r1, r7
 8000b2c:	f001 fbe8 	bl	8002300 <__aeabi_dmul>
 8000b30:	f003 fd76 	bl	8004620 <__aeabi_d2iz>
 8000b34:	f001 fb7a 	bl	800222c <__aeabi_i2d>
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4b4d      	ldr	r3, [pc, #308]	; (8000c70 <__kernel_rem_pio2+0x340>)
 8000b3c:	e9cd 0100 	strd	r0, r1, [sp]
 8000b40:	f001 fbde 	bl	8002300 <__aeabi_dmul>
 8000b44:	4602      	mov	r2, r0
 8000b46:	460b      	mov	r3, r1
 8000b48:	4630      	mov	r0, r6
 8000b4a:	4639      	mov	r1, r7
 8000b4c:	f001 fa20 	bl	8001f90 <__aeabi_dsub>
 8000b50:	f003 fd66 	bl	8004620 <__aeabi_d2iz>
 8000b54:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000b58:	ab70      	add	r3, sp, #448	; 0x1c0
 8000b5a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8000b5e:	f849 0b04 	str.w	r0, [r9], #4
 8000b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b66:	e9dd 0100 	ldrd	r0, r1, [sp]
 8000b6a:	f001 fa13 	bl	8001f94 <__adddf3>
 8000b6e:	4606      	mov	r6, r0
 8000b70:	460f      	mov	r7, r1
 8000b72:	e75b      	b.n	8000a2c <__kernel_rem_pio2+0xfc>
 8000b74:	d105      	bne.n	8000b82 <__kernel_rem_pio2+0x252>
 8000b76:	1e63      	subs	r3, r4, #1
 8000b78:	aa0c      	add	r2, sp, #48	; 0x30
 8000b7a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b7e:	15c3      	asrs	r3, r0, #23
 8000b80:	e79c      	b.n	8000abc <__kernel_rem_pio2+0x18c>
 8000b82:	2200      	movs	r2, #0
 8000b84:	4b3b      	ldr	r3, [pc, #236]	; (8000c74 <__kernel_rem_pio2+0x344>)
 8000b86:	f001 fe41 	bl	800280c <__aeabi_dcmpge>
 8000b8a:	2800      	cmp	r0, #0
 8000b8c:	d13a      	bne.n	8000c04 <__kernel_rem_pio2+0x2d4>
 8000b8e:	9000      	str	r0, [sp, #0]
 8000b90:	2200      	movs	r2, #0
 8000b92:	2300      	movs	r3, #0
 8000b94:	4640      	mov	r0, r8
 8000b96:	4649      	mov	r1, r9
 8000b98:	f001 fe1a 	bl	80027d0 <__aeabi_dcmpeq>
 8000b9c:	2800      	cmp	r0, #0
 8000b9e:	f000 80b3 	beq.w	8000d08 <__kernel_rem_pio2+0x3d8>
 8000ba2:	f104 3aff 	add.w	sl, r4, #4294967295	; 0xffffffff
 8000ba6:	4653      	mov	r3, sl
 8000ba8:	2200      	movs	r2, #0
 8000baa:	9902      	ldr	r1, [sp, #8]
 8000bac:	428b      	cmp	r3, r1
 8000bae:	da65      	bge.n	8000c7c <__kernel_rem_pio2+0x34c>
 8000bb0:	2a00      	cmp	r2, #0
 8000bb2:	f000 8091 	beq.w	8000cd8 <__kernel_rem_pio2+0x3a8>
 8000bb6:	ab0c      	add	r3, sp, #48	; 0x30
 8000bb8:	f1ab 0b18 	sub.w	fp, fp, #24
 8000bbc:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	f000 809e 	beq.w	8000d02 <__kernel_rem_pio2+0x3d2>
 8000bc6:	4658      	mov	r0, fp
 8000bc8:	ed9f 0b23 	vldr	d0, [pc, #140]	; 8000c58 <__kernel_rem_pio2+0x328>
 8000bcc:	f000 fb24 	bl	8001218 <scalbn>
 8000bd0:	4f26      	ldr	r7, [pc, #152]	; (8000c6c <__kernel_rem_pio2+0x33c>)
 8000bd2:	ec55 4b10 	vmov	r4, r5, d0
 8000bd6:	46d0      	mov	r8, sl
 8000bd8:	2600      	movs	r6, #0
 8000bda:	f1b8 0f00 	cmp.w	r8, #0
 8000bde:	f280 80cd 	bge.w	8000d7c <__kernel_rem_pio2+0x44c>
 8000be2:	ed9f 8b1b 	vldr	d8, [pc, #108]	; 8000c50 <__kernel_rem_pio2+0x320>
 8000be6:	4655      	mov	r5, sl
 8000be8:	f04f 0800 	mov.w	r8, #0
 8000bec:	2d00      	cmp	r5, #0
 8000bee:	f2c0 80fb 	blt.w	8000de8 <__kernel_rem_pio2+0x4b8>
 8000bf2:	ab70      	add	r3, sp, #448	; 0x1c0
 8000bf4:	f8df b080 	ldr.w	fp, [pc, #128]	; 8000c78 <__kernel_rem_pio2+0x348>
 8000bf8:	eb03 09c5 	add.w	r9, r3, r5, lsl #3
 8000bfc:	ec57 6b18 	vmov	r6, r7, d8
 8000c00:	2400      	movs	r4, #0
 8000c02:	e0e3      	b.n	8000dcc <__kernel_rem_pio2+0x49c>
 8000c04:	2302      	movs	r3, #2
 8000c06:	9300      	str	r3, [sp, #0]
 8000c08:	e75c      	b.n	8000ac4 <__kernel_rem_pio2+0x194>
 8000c0a:	682b      	ldr	r3, [r5, #0]
 8000c0c:	b946      	cbnz	r6, 8000c20 <__kernel_rem_pio2+0x2f0>
 8000c0e:	b11b      	cbz	r3, 8000c18 <__kernel_rem_pio2+0x2e8>
 8000c10:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8000c14:	602b      	str	r3, [r5, #0]
 8000c16:	2301      	movs	r3, #1
 8000c18:	3201      	adds	r2, #1
 8000c1a:	3504      	adds	r5, #4
 8000c1c:	461e      	mov	r6, r3
 8000c1e:	e758      	b.n	8000ad2 <__kernel_rem_pio2+0x1a2>
 8000c20:	1acb      	subs	r3, r1, r3
 8000c22:	602b      	str	r3, [r5, #0]
 8000c24:	4633      	mov	r3, r6
 8000c26:	e7f7      	b.n	8000c18 <__kernel_rem_pio2+0x2e8>
 8000c28:	1e62      	subs	r2, r4, #1
 8000c2a:	ab0c      	add	r3, sp, #48	; 0x30
 8000c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c30:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8000c34:	a90c      	add	r1, sp, #48	; 0x30
 8000c36:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8000c3a:	e758      	b.n	8000aee <__kernel_rem_pio2+0x1be>
 8000c3c:	1e62      	subs	r2, r4, #1
 8000c3e:	ab0c      	add	r3, sp, #48	; 0x30
 8000c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c44:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8000c48:	e7f4      	b.n	8000c34 <__kernel_rem_pio2+0x304>
 8000c4a:	bf00      	nop
 8000c4c:	f3af 8000 	nop.w
	...
 8000c5c:	3ff00000 	.word	0x3ff00000
 8000c60:	080079e0 	.word	0x080079e0
 8000c64:	40200000 	.word	0x40200000
 8000c68:	3ff00000 	.word	0x3ff00000
 8000c6c:	3e700000 	.word	0x3e700000
 8000c70:	41700000 	.word	0x41700000
 8000c74:	3fe00000 	.word	0x3fe00000
 8000c78:	080079f0 	.word	0x080079f0
 8000c7c:	a90c      	add	r1, sp, #48	; 0x30
 8000c7e:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8000c82:	3b01      	subs	r3, #1
 8000c84:	430a      	orrs	r2, r1
 8000c86:	e790      	b.n	8000baa <__kernel_rem_pio2+0x27a>
 8000c88:	3301      	adds	r3, #1
 8000c8a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8000c8e:	2900      	cmp	r1, #0
 8000c90:	d0fa      	beq.n	8000c88 <__kernel_rem_pio2+0x358>
 8000c92:	9a08      	ldr	r2, [sp, #32]
 8000c94:	18a6      	adds	r6, r4, r2
 8000c96:	aa20      	add	r2, sp, #128	; 0x80
 8000c98:	1c65      	adds	r5, r4, #1
 8000c9a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8000c9e:	441c      	add	r4, r3
 8000ca0:	42ac      	cmp	r4, r5
 8000ca2:	f6ff aebb 	blt.w	8000a1c <__kernel_rem_pio2+0xec>
 8000ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000ca8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8000cac:	f001 fabe 	bl	800222c <__aeabi_i2d>
 8000cb0:	e8e6 0102 	strd	r0, r1, [r6], #8
 8000cb4:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 8000cb8:	9600      	str	r6, [sp, #0]
 8000cba:	2700      	movs	r7, #0
 8000cbc:	f04f 0800 	mov.w	r8, #0
 8000cc0:	f04f 0900 	mov.w	r9, #0
 8000cc4:	9b06      	ldr	r3, [sp, #24]
 8000cc6:	429f      	cmp	r7, r3
 8000cc8:	dd09      	ble.n	8000cde <__kernel_rem_pio2+0x3ae>
 8000cca:	ab70      	add	r3, sp, #448	; 0x1c0
 8000ccc:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8000cd0:	e9c3 8900 	strd	r8, r9, [r3]
 8000cd4:	3501      	adds	r5, #1
 8000cd6:	e7e3      	b.n	8000ca0 <__kernel_rem_pio2+0x370>
 8000cd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e7d5      	b.n	8000c8a <__kernel_rem_pio2+0x35a>
 8000cde:	9900      	ldr	r1, [sp, #0]
 8000ce0:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8000ce4:	9100      	str	r1, [sp, #0]
 8000ce6:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8000cea:	f001 fb09 	bl	8002300 <__aeabi_dmul>
 8000cee:	4602      	mov	r2, r0
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	4640      	mov	r0, r8
 8000cf4:	4649      	mov	r1, r9
 8000cf6:	f001 f94d 	bl	8001f94 <__adddf3>
 8000cfa:	3701      	adds	r7, #1
 8000cfc:	4680      	mov	r8, r0
 8000cfe:	4689      	mov	r9, r1
 8000d00:	e7e0      	b.n	8000cc4 <__kernel_rem_pio2+0x394>
 8000d02:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000d06:	e756      	b.n	8000bb6 <__kernel_rem_pio2+0x286>
 8000d08:	f1cb 0000 	rsb	r0, fp, #0
 8000d0c:	ec49 8b10 	vmov	d0, r8, r9
 8000d10:	f000 fa82 	bl	8001218 <scalbn>
 8000d14:	ec57 6b10 	vmov	r6, r7, d0
 8000d18:	2200      	movs	r2, #0
 8000d1a:	4b9f      	ldr	r3, [pc, #636]	; (8000f98 <__kernel_rem_pio2+0x668>)
 8000d1c:	ee10 0a10 	vmov	r0, s0
 8000d20:	4639      	mov	r1, r7
 8000d22:	f001 fd73 	bl	800280c <__aeabi_dcmpge>
 8000d26:	b300      	cbz	r0, 8000d6a <__kernel_rem_pio2+0x43a>
 8000d28:	2200      	movs	r2, #0
 8000d2a:	4b9c      	ldr	r3, [pc, #624]	; (8000f9c <__kernel_rem_pio2+0x66c>)
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f001 fae6 	bl	8002300 <__aeabi_dmul>
 8000d34:	f003 fc74 	bl	8004620 <__aeabi_d2iz>
 8000d38:	4605      	mov	r5, r0
 8000d3a:	f001 fa77 	bl	800222c <__aeabi_i2d>
 8000d3e:	2200      	movs	r2, #0
 8000d40:	4b95      	ldr	r3, [pc, #596]	; (8000f98 <__kernel_rem_pio2+0x668>)
 8000d42:	f001 fadd 	bl	8002300 <__aeabi_dmul>
 8000d46:	460b      	mov	r3, r1
 8000d48:	4602      	mov	r2, r0
 8000d4a:	4639      	mov	r1, r7
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	f001 f91f 	bl	8001f90 <__aeabi_dsub>
 8000d52:	f003 fc65 	bl	8004620 <__aeabi_d2iz>
 8000d56:	f104 0a01 	add.w	sl, r4, #1
 8000d5a:	ab0c      	add	r3, sp, #48	; 0x30
 8000d5c:	f10b 0b18 	add.w	fp, fp, #24
 8000d60:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8000d64:	f843 502a 	str.w	r5, [r3, sl, lsl #2]
 8000d68:	e72d      	b.n	8000bc6 <__kernel_rem_pio2+0x296>
 8000d6a:	4630      	mov	r0, r6
 8000d6c:	4639      	mov	r1, r7
 8000d6e:	f003 fc57 	bl	8004620 <__aeabi_d2iz>
 8000d72:	ab0c      	add	r3, sp, #48	; 0x30
 8000d74:	46a2      	mov	sl, r4
 8000d76:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8000d7a:	e724      	b.n	8000bc6 <__kernel_rem_pio2+0x296>
 8000d7c:	ab70      	add	r3, sp, #448	; 0x1c0
 8000d7e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8000d82:	ab0c      	add	r3, sp, #48	; 0x30
 8000d84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8000d88:	f001 fa50 	bl	800222c <__aeabi_i2d>
 8000d8c:	4622      	mov	r2, r4
 8000d8e:	462b      	mov	r3, r5
 8000d90:	f001 fab6 	bl	8002300 <__aeabi_dmul>
 8000d94:	4632      	mov	r2, r6
 8000d96:	e9c9 0100 	strd	r0, r1, [r9]
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	4629      	mov	r1, r5
 8000da0:	f001 faae 	bl	8002300 <__aeabi_dmul>
 8000da4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8000da8:	4604      	mov	r4, r0
 8000daa:	460d      	mov	r5, r1
 8000dac:	e715      	b.n	8000bda <__kernel_rem_pio2+0x2aa>
 8000dae:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8000db2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8000db6:	f001 faa3 	bl	8002300 <__aeabi_dmul>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	4630      	mov	r0, r6
 8000dc0:	4639      	mov	r1, r7
 8000dc2:	f001 f8e7 	bl	8001f94 <__adddf3>
 8000dc6:	3401      	adds	r4, #1
 8000dc8:	4606      	mov	r6, r0
 8000dca:	460f      	mov	r7, r1
 8000dcc:	9b02      	ldr	r3, [sp, #8]
 8000dce:	429c      	cmp	r4, r3
 8000dd0:	dc01      	bgt.n	8000dd6 <__kernel_rem_pio2+0x4a6>
 8000dd2:	45a0      	cmp	r8, r4
 8000dd4:	daeb      	bge.n	8000dae <__kernel_rem_pio2+0x47e>
 8000dd6:	ab48      	add	r3, sp, #288	; 0x120
 8000dd8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8000ddc:	e9c3 6700 	strd	r6, r7, [r3]
 8000de0:	3d01      	subs	r5, #1
 8000de2:	f108 0801 	add.w	r8, r8, #1
 8000de6:	e701      	b.n	8000bec <__kernel_rem_pio2+0x2bc>
 8000de8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8000dea:	2b03      	cmp	r3, #3
 8000dec:	d83d      	bhi.n	8000e6a <__kernel_rem_pio2+0x53a>
 8000dee:	e8df f003 	tbb	[pc, r3]
 8000df2:	6d45      	.short	0x6d45
 8000df4:	026d      	.short	0x026d
 8000df6:	ab48      	add	r3, sp, #288	; 0x120
 8000df8:	eb03 05ca 	add.w	r5, r3, sl, lsl #3
 8000dfc:	46a8      	mov	r8, r5
 8000dfe:	46d1      	mov	r9, sl
 8000e00:	f1b9 0f00 	cmp.w	r9, #0
 8000e04:	f1a8 0808 	sub.w	r8, r8, #8
 8000e08:	dc6d      	bgt.n	8000ee6 <__kernel_rem_pio2+0x5b6>
 8000e0a:	4654      	mov	r4, sl
 8000e0c:	2c01      	cmp	r4, #1
 8000e0e:	f1a5 0508 	sub.w	r5, r5, #8
 8000e12:	f300 8089 	bgt.w	8000f28 <__kernel_rem_pio2+0x5f8>
 8000e16:	2000      	movs	r0, #0
 8000e18:	2100      	movs	r1, #0
 8000e1a:	f1ba 0f01 	cmp.w	sl, #1
 8000e1e:	f300 80a1 	bgt.w	8000f64 <__kernel_rem_pio2+0x634>
 8000e22:	9b00      	ldr	r3, [sp, #0]
 8000e24:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8000e28:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 80a3 	bne.w	8000f78 <__kernel_rem_pio2+0x648>
 8000e32:	9b04      	ldr	r3, [sp, #16]
 8000e34:	e9c3 5600 	strd	r5, r6, [r3]
 8000e38:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8000e3c:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8000e40:	e013      	b.n	8000e6a <__kernel_rem_pio2+0x53a>
 8000e42:	ab48      	add	r3, sp, #288	; 0x120
 8000e44:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4c:	f001 f8a2 	bl	8001f94 <__adddf3>
 8000e50:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000e54:	f1ba 0f00 	cmp.w	sl, #0
 8000e58:	daf3      	bge.n	8000e42 <__kernel_rem_pio2+0x512>
 8000e5a:	9b00      	ldr	r3, [sp, #0]
 8000e5c:	b113      	cbz	r3, 8000e64 <__kernel_rem_pio2+0x534>
 8000e5e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000e62:	4619      	mov	r1, r3
 8000e64:	9b04      	ldr	r3, [sp, #16]
 8000e66:	e9c3 0100 	strd	r0, r1, [r3]
 8000e6a:	9b05      	ldr	r3, [sp, #20]
 8000e6c:	f003 0007 	and.w	r0, r3, #7
 8000e70:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8000e74:	ecbd 8b02 	vpop	{d8}
 8000e78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	e7e8      	b.n	8000e54 <__kernel_rem_pio2+0x524>
 8000e82:	ab48      	add	r3, sp, #288	; 0x120
 8000e84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8000e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8c:	f001 f882 	bl	8001f94 <__adddf3>
 8000e90:	3c01      	subs	r4, #1
 8000e92:	2c00      	cmp	r4, #0
 8000e94:	daf5      	bge.n	8000e82 <__kernel_rem_pio2+0x552>
 8000e96:	9b00      	ldr	r3, [sp, #0]
 8000e98:	b1e3      	cbz	r3, 8000ed4 <__kernel_rem_pio2+0x5a4>
 8000e9a:	4602      	mov	r2, r0
 8000e9c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000ea0:	9c04      	ldr	r4, [sp, #16]
 8000ea2:	e9c4 2300 	strd	r2, r3, [r4]
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8000eae:	f001 f86f 	bl	8001f90 <__aeabi_dsub>
 8000eb2:	ad4a      	add	r5, sp, #296	; 0x128
 8000eb4:	2401      	movs	r4, #1
 8000eb6:	45a2      	cmp	sl, r4
 8000eb8:	da0f      	bge.n	8000eda <__kernel_rem_pio2+0x5aa>
 8000eba:	9b00      	ldr	r3, [sp, #0]
 8000ebc:	b113      	cbz	r3, 8000ec4 <__kernel_rem_pio2+0x594>
 8000ebe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	9b04      	ldr	r3, [sp, #16]
 8000ec6:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8000eca:	e7ce      	b.n	8000e6a <__kernel_rem_pio2+0x53a>
 8000ecc:	4654      	mov	r4, sl
 8000ece:	2000      	movs	r0, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	e7de      	b.n	8000e92 <__kernel_rem_pio2+0x562>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	e7e2      	b.n	8000ea0 <__kernel_rem_pio2+0x570>
 8000eda:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8000ede:	f001 f859 	bl	8001f94 <__adddf3>
 8000ee2:	3401      	adds	r4, #1
 8000ee4:	e7e7      	b.n	8000eb6 <__kernel_rem_pio2+0x586>
 8000ee6:	ed98 7b00 	vldr	d7, [r8]
 8000eea:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000eee:	ed98 7b02 	vldr	d7, [r8, #8]
 8000ef2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000ef6:	ec53 2b17 	vmov	r2, r3, d7
 8000efa:	ed8d 7b06 	vstr	d7, [sp, #24]
 8000efe:	f001 f849 	bl	8001f94 <__adddf3>
 8000f02:	4602      	mov	r2, r0
 8000f04:	460b      	mov	r3, r1
 8000f06:	4606      	mov	r6, r0
 8000f08:	460f      	mov	r7, r1
 8000f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8000f0e:	f001 f83f 	bl	8001f90 <__aeabi_dsub>
 8000f12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8000f16:	f001 f83d 	bl	8001f94 <__adddf3>
 8000f1a:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8000f1e:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8000f22:	e9c8 6700 	strd	r6, r7, [r8]
 8000f26:	e76b      	b.n	8000e00 <__kernel_rem_pio2+0x4d0>
 8000f28:	e9d5 8900 	ldrd	r8, r9, [r5]
 8000f2c:	e9d5 6702 	ldrd	r6, r7, [r5, #8]
 8000f30:	4640      	mov	r0, r8
 8000f32:	4632      	mov	r2, r6
 8000f34:	463b      	mov	r3, r7
 8000f36:	4649      	mov	r1, r9
 8000f38:	f001 f82c 	bl	8001f94 <__adddf3>
 8000f3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8000f40:	4602      	mov	r2, r0
 8000f42:	460b      	mov	r3, r1
 8000f44:	4640      	mov	r0, r8
 8000f46:	4649      	mov	r1, r9
 8000f48:	f001 f822 	bl	8001f90 <__aeabi_dsub>
 8000f4c:	4632      	mov	r2, r6
 8000f4e:	463b      	mov	r3, r7
 8000f50:	f001 f820 	bl	8001f94 <__adddf3>
 8000f54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8000f58:	3c01      	subs	r4, #1
 8000f5a:	e9c5 0102 	strd	r0, r1, [r5, #8]
 8000f5e:	ed85 7b00 	vstr	d7, [r5]
 8000f62:	e753      	b.n	8000e0c <__kernel_rem_pio2+0x4dc>
 8000f64:	ab48      	add	r3, sp, #288	; 0x120
 8000f66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8000f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6e:	f001 f811 	bl	8001f94 <__adddf3>
 8000f72:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8000f76:	e750      	b.n	8000e1a <__kernel_rem_pio2+0x4ea>
 8000f78:	9b04      	ldr	r3, [sp, #16]
 8000f7a:	9a04      	ldr	r2, [sp, #16]
 8000f7c:	601d      	str	r5, [r3, #0]
 8000f7e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8000f82:	605c      	str	r4, [r3, #4]
 8000f84:	609f      	str	r7, [r3, #8]
 8000f86:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8000f8a:	60d3      	str	r3, [r2, #12]
 8000f8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8000f90:	6110      	str	r0, [r2, #16]
 8000f92:	6153      	str	r3, [r2, #20]
 8000f94:	e769      	b.n	8000e6a <__kernel_rem_pio2+0x53a>
 8000f96:	bf00      	nop
 8000f98:	41700000 	.word	0x41700000
 8000f9c:	3e700000 	.word	0x3e700000

08000fa0 <__kernel_sin>:
 8000fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fa4:	ec55 4b10 	vmov	r4, r5, d0
 8000fa8:	b085      	sub	sp, #20
 8000faa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8000fae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8000fb2:	ed8d 1b00 	vstr	d1, [sp]
 8000fb6:	9002      	str	r0, [sp, #8]
 8000fb8:	da06      	bge.n	8000fc8 <__kernel_sin+0x28>
 8000fba:	ee10 0a10 	vmov	r0, s0
 8000fbe:	4629      	mov	r1, r5
 8000fc0:	f003 fb2e 	bl	8004620 <__aeabi_d2iz>
 8000fc4:	2800      	cmp	r0, #0
 8000fc6:	d051      	beq.n	800106c <__kernel_sin+0xcc>
 8000fc8:	4622      	mov	r2, r4
 8000fca:	462b      	mov	r3, r5
 8000fcc:	4620      	mov	r0, r4
 8000fce:	4629      	mov	r1, r5
 8000fd0:	f001 f996 	bl	8002300 <__aeabi_dmul>
 8000fd4:	4682      	mov	sl, r0
 8000fd6:	468b      	mov	fp, r1
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4620      	mov	r0, r4
 8000fde:	4629      	mov	r1, r5
 8000fe0:	f001 f98e 	bl	8002300 <__aeabi_dmul>
 8000fe4:	a341      	add	r3, pc, #260	; (adr r3, 80010ec <__kernel_sin+0x14c>)
 8000fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fea:	4680      	mov	r8, r0
 8000fec:	4689      	mov	r9, r1
 8000fee:	4650      	mov	r0, sl
 8000ff0:	4659      	mov	r1, fp
 8000ff2:	f001 f985 	bl	8002300 <__aeabi_dmul>
 8000ff6:	a33f      	add	r3, pc, #252	; (adr r3, 80010f4 <__kernel_sin+0x154>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f000 ffc8 	bl	8001f90 <__aeabi_dsub>
 8001000:	4652      	mov	r2, sl
 8001002:	465b      	mov	r3, fp
 8001004:	f001 f97c 	bl	8002300 <__aeabi_dmul>
 8001008:	a33c      	add	r3, pc, #240	; (adr r3, 80010fc <__kernel_sin+0x15c>)
 800100a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100e:	f000 ffc1 	bl	8001f94 <__adddf3>
 8001012:	4652      	mov	r2, sl
 8001014:	465b      	mov	r3, fp
 8001016:	f001 f973 	bl	8002300 <__aeabi_dmul>
 800101a:	a33a      	add	r3, pc, #232	; (adr r3, 8001104 <__kernel_sin+0x164>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f000 ffb6 	bl	8001f90 <__aeabi_dsub>
 8001024:	4652      	mov	r2, sl
 8001026:	465b      	mov	r3, fp
 8001028:	f001 f96a 	bl	8002300 <__aeabi_dmul>
 800102c:	a337      	add	r3, pc, #220	; (adr r3, 800110c <__kernel_sin+0x16c>)
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	f000 ffaf 	bl	8001f94 <__adddf3>
 8001036:	9b02      	ldr	r3, [sp, #8]
 8001038:	4606      	mov	r6, r0
 800103a:	460f      	mov	r7, r1
 800103c:	b9db      	cbnz	r3, 8001076 <__kernel_sin+0xd6>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4650      	mov	r0, sl
 8001044:	4659      	mov	r1, fp
 8001046:	f001 f95b 	bl	8002300 <__aeabi_dmul>
 800104a:	a325      	add	r3, pc, #148	; (adr r3, 80010e0 <__kernel_sin+0x140>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f000 ff9e 	bl	8001f90 <__aeabi_dsub>
 8001054:	4642      	mov	r2, r8
 8001056:	464b      	mov	r3, r9
 8001058:	f001 f952 	bl	8002300 <__aeabi_dmul>
 800105c:	4602      	mov	r2, r0
 800105e:	460b      	mov	r3, r1
 8001060:	4620      	mov	r0, r4
 8001062:	4629      	mov	r1, r5
 8001064:	f000 ff96 	bl	8001f94 <__adddf3>
 8001068:	4604      	mov	r4, r0
 800106a:	460d      	mov	r5, r1
 800106c:	ec45 4b10 	vmov	d0, r4, r5
 8001070:	b005      	add	sp, #20
 8001072:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001076:	2200      	movs	r2, #0
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <__kernel_sin+0x148>)
 800107a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800107e:	f001 f93f 	bl	8002300 <__aeabi_dmul>
 8001082:	4632      	mov	r2, r6
 8001084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8001088:	463b      	mov	r3, r7
 800108a:	4640      	mov	r0, r8
 800108c:	4649      	mov	r1, r9
 800108e:	f001 f937 	bl	8002300 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800109a:	f000 ff79 	bl	8001f90 <__aeabi_dsub>
 800109e:	4652      	mov	r2, sl
 80010a0:	465b      	mov	r3, fp
 80010a2:	f001 f92d 	bl	8002300 <__aeabi_dmul>
 80010a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80010aa:	f000 ff71 	bl	8001f90 <__aeabi_dsub>
 80010ae:	a30c      	add	r3, pc, #48	; (adr r3, 80010e0 <__kernel_sin+0x140>)
 80010b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b4:	4606      	mov	r6, r0
 80010b6:	460f      	mov	r7, r1
 80010b8:	4640      	mov	r0, r8
 80010ba:	4649      	mov	r1, r9
 80010bc:	f001 f920 	bl	8002300 <__aeabi_dmul>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	4630      	mov	r0, r6
 80010c6:	4639      	mov	r1, r7
 80010c8:	f000 ff64 	bl	8001f94 <__adddf3>
 80010cc:	4602      	mov	r2, r0
 80010ce:	460b      	mov	r3, r1
 80010d0:	4620      	mov	r0, r4
 80010d2:	4629      	mov	r1, r5
 80010d4:	f000 ff5c 	bl	8001f90 <__aeabi_dsub>
 80010d8:	e7c6      	b.n	8001068 <__kernel_sin+0xc8>
 80010da:	bf00      	nop
 80010dc:	f3af 8000 	nop.w
 80010e0:	55555549 	.word	0x55555549
 80010e4:	3fc55555 	.word	0x3fc55555
 80010e8:	3fe00000 	.word	0x3fe00000
 80010ec:	5acfd57c 	.word	0x5acfd57c
 80010f0:	3de5d93a 	.word	0x3de5d93a
 80010f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80010f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80010fc:	57b1fe7d 	.word	0x57b1fe7d
 8001100:	3ec71de3 	.word	0x3ec71de3
 8001104:	19c161d5 	.word	0x19c161d5
 8001108:	3f2a01a0 	.word	0x3f2a01a0
 800110c:	1110f8a6 	.word	0x1110f8a6
 8001110:	3f811111 	.word	0x3f811111
 8001114:	00000000 	.word	0x00000000

08001118 <floor>:
 8001118:	ec51 0b10 	vmov	r0, r1, d0
 800111c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001120:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8001124:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8001128:	2e13      	cmp	r6, #19
 800112a:	460c      	mov	r4, r1
 800112c:	ee10 5a10 	vmov	r5, s0
 8001130:	4680      	mov	r8, r0
 8001132:	dc32      	bgt.n	800119a <floor+0x82>
 8001134:	2e00      	cmp	r6, #0
 8001136:	da14      	bge.n	8001162 <floor+0x4a>
 8001138:	a333      	add	r3, pc, #204	; (adr r3, 8001208 <floor+0xf0>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f000 ff29 	bl	8001f94 <__adddf3>
 8001142:	2200      	movs	r2, #0
 8001144:	2300      	movs	r3, #0
 8001146:	f001 fb6b 	bl	8002820 <__aeabi_dcmpgt>
 800114a:	b138      	cbz	r0, 800115c <floor+0x44>
 800114c:	2c00      	cmp	r4, #0
 800114e:	da57      	bge.n	8001200 <floor+0xe8>
 8001150:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8001154:	431d      	orrs	r5, r3
 8001156:	d001      	beq.n	800115c <floor+0x44>
 8001158:	4c2d      	ldr	r4, [pc, #180]	; (8001210 <floor+0xf8>)
 800115a:	2500      	movs	r5, #0
 800115c:	4621      	mov	r1, r4
 800115e:	4628      	mov	r0, r5
 8001160:	e025      	b.n	80011ae <floor+0x96>
 8001162:	4f2c      	ldr	r7, [pc, #176]	; (8001214 <floor+0xfc>)
 8001164:	4137      	asrs	r7, r6
 8001166:	ea07 0301 	and.w	r3, r7, r1
 800116a:	4303      	orrs	r3, r0
 800116c:	d01f      	beq.n	80011ae <floor+0x96>
 800116e:	a326      	add	r3, pc, #152	; (adr r3, 8001208 <floor+0xf0>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f000 ff0e 	bl	8001f94 <__adddf3>
 8001178:	2200      	movs	r2, #0
 800117a:	2300      	movs	r3, #0
 800117c:	f001 fb50 	bl	8002820 <__aeabi_dcmpgt>
 8001180:	2800      	cmp	r0, #0
 8001182:	d0eb      	beq.n	800115c <floor+0x44>
 8001184:	2c00      	cmp	r4, #0
 8001186:	bfbe      	ittt	lt
 8001188:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800118c:	fa43 f606 	asrlt.w	r6, r3, r6
 8001190:	19a4      	addlt	r4, r4, r6
 8001192:	ea24 0407 	bic.w	r4, r4, r7
 8001196:	2500      	movs	r5, #0
 8001198:	e7e0      	b.n	800115c <floor+0x44>
 800119a:	2e33      	cmp	r6, #51	; 0x33
 800119c:	dd0b      	ble.n	80011b6 <floor+0x9e>
 800119e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80011a2:	d104      	bne.n	80011ae <floor+0x96>
 80011a4:	ee10 2a10 	vmov	r2, s0
 80011a8:	460b      	mov	r3, r1
 80011aa:	f000 fef3 	bl	8001f94 <__adddf3>
 80011ae:	ec41 0b10 	vmov	d0, r0, r1
 80011b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011b6:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80011ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011be:	fa23 f707 	lsr.w	r7, r3, r7
 80011c2:	4207      	tst	r7, r0
 80011c4:	d0f3      	beq.n	80011ae <floor+0x96>
 80011c6:	a310      	add	r3, pc, #64	; (adr r3, 8001208 <floor+0xf0>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f000 fee2 	bl	8001f94 <__adddf3>
 80011d0:	2200      	movs	r2, #0
 80011d2:	2300      	movs	r3, #0
 80011d4:	f001 fb24 	bl	8002820 <__aeabi_dcmpgt>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d0bf      	beq.n	800115c <floor+0x44>
 80011dc:	2c00      	cmp	r4, #0
 80011de:	da02      	bge.n	80011e6 <floor+0xce>
 80011e0:	2e14      	cmp	r6, #20
 80011e2:	d103      	bne.n	80011ec <floor+0xd4>
 80011e4:	3401      	adds	r4, #1
 80011e6:	ea25 0507 	bic.w	r5, r5, r7
 80011ea:	e7b7      	b.n	800115c <floor+0x44>
 80011ec:	2301      	movs	r3, #1
 80011ee:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80011f2:	fa03 f606 	lsl.w	r6, r3, r6
 80011f6:	4435      	add	r5, r6
 80011f8:	45a8      	cmp	r8, r5
 80011fa:	bf88      	it	hi
 80011fc:	18e4      	addhi	r4, r4, r3
 80011fe:	e7f2      	b.n	80011e6 <floor+0xce>
 8001200:	2500      	movs	r5, #0
 8001202:	462c      	mov	r4, r5
 8001204:	e7aa      	b.n	800115c <floor+0x44>
 8001206:	bf00      	nop
 8001208:	8800759c 	.word	0x8800759c
 800120c:	7e37e43c 	.word	0x7e37e43c
 8001210:	bff00000 	.word	0xbff00000
 8001214:	000fffff 	.word	0x000fffff

08001218 <scalbn>:
 8001218:	b570      	push	{r4, r5, r6, lr}
 800121a:	ec55 4b10 	vmov	r4, r5, d0
 800121e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8001222:	4606      	mov	r6, r0
 8001224:	462b      	mov	r3, r5
 8001226:	b99a      	cbnz	r2, 8001250 <scalbn+0x38>
 8001228:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800122c:	4323      	orrs	r3, r4
 800122e:	d036      	beq.n	800129e <scalbn+0x86>
 8001230:	4b39      	ldr	r3, [pc, #228]	; (8001318 <scalbn+0x100>)
 8001232:	4629      	mov	r1, r5
 8001234:	2200      	movs	r2, #0
 8001236:	ee10 0a10 	vmov	r0, s0
 800123a:	f001 f861 	bl	8002300 <__aeabi_dmul>
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <scalbn+0x104>)
 8001240:	429e      	cmp	r6, r3
 8001242:	4604      	mov	r4, r0
 8001244:	460d      	mov	r5, r1
 8001246:	da10      	bge.n	800126a <scalbn+0x52>
 8001248:	a32b      	add	r3, pc, #172	; (adr r3, 80012f8 <scalbn+0xe0>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	e03a      	b.n	80012c6 <scalbn+0xae>
 8001250:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8001254:	428a      	cmp	r2, r1
 8001256:	d10c      	bne.n	8001272 <scalbn+0x5a>
 8001258:	ee10 2a10 	vmov	r2, s0
 800125c:	4620      	mov	r0, r4
 800125e:	4629      	mov	r1, r5
 8001260:	f000 fe98 	bl	8001f94 <__adddf3>
 8001264:	4604      	mov	r4, r0
 8001266:	460d      	mov	r5, r1
 8001268:	e019      	b.n	800129e <scalbn+0x86>
 800126a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800126e:	460b      	mov	r3, r1
 8001270:	3a36      	subs	r2, #54	; 0x36
 8001272:	4432      	add	r2, r6
 8001274:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8001278:	428a      	cmp	r2, r1
 800127a:	dd08      	ble.n	800128e <scalbn+0x76>
 800127c:	2d00      	cmp	r5, #0
 800127e:	a120      	add	r1, pc, #128	; (adr r1, 8001300 <scalbn+0xe8>)
 8001280:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001284:	da1c      	bge.n	80012c0 <scalbn+0xa8>
 8001286:	a120      	add	r1, pc, #128	; (adr r1, 8001308 <scalbn+0xf0>)
 8001288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800128c:	e018      	b.n	80012c0 <scalbn+0xa8>
 800128e:	2a00      	cmp	r2, #0
 8001290:	dd08      	ble.n	80012a4 <scalbn+0x8c>
 8001292:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8001296:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800129a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800129e:	ec45 4b10 	vmov	d0, r4, r5
 80012a2:	bd70      	pop	{r4, r5, r6, pc}
 80012a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80012a8:	da19      	bge.n	80012de <scalbn+0xc6>
 80012aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 80012ae:	429e      	cmp	r6, r3
 80012b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80012b4:	dd0a      	ble.n	80012cc <scalbn+0xb4>
 80012b6:	a112      	add	r1, pc, #72	; (adr r1, 8001300 <scalbn+0xe8>)
 80012b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1e2      	bne.n	8001286 <scalbn+0x6e>
 80012c0:	a30f      	add	r3, pc, #60	; (adr r3, 8001300 <scalbn+0xe8>)
 80012c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c6:	f001 f81b 	bl	8002300 <__aeabi_dmul>
 80012ca:	e7cb      	b.n	8001264 <scalbn+0x4c>
 80012cc:	a10a      	add	r1, pc, #40	; (adr r1, 80012f8 <scalbn+0xe0>)
 80012ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d0b8      	beq.n	8001248 <scalbn+0x30>
 80012d6:	a10e      	add	r1, pc, #56	; (adr r1, 8001310 <scalbn+0xf8>)
 80012d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80012dc:	e7b4      	b.n	8001248 <scalbn+0x30>
 80012de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80012e2:	3236      	adds	r2, #54	; 0x36
 80012e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80012e8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80012ec:	4620      	mov	r0, r4
 80012ee:	4629      	mov	r1, r5
 80012f0:	2200      	movs	r2, #0
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <scalbn+0x108>)
 80012f4:	e7e7      	b.n	80012c6 <scalbn+0xae>
 80012f6:	bf00      	nop
 80012f8:	c2f8f359 	.word	0xc2f8f359
 80012fc:	01a56e1f 	.word	0x01a56e1f
 8001300:	8800759c 	.word	0x8800759c
 8001304:	7e37e43c 	.word	0x7e37e43c
 8001308:	8800759c 	.word	0x8800759c
 800130c:	fe37e43c 	.word	0xfe37e43c
 8001310:	c2f8f359 	.word	0xc2f8f359
 8001314:	81a56e1f 	.word	0x81a56e1f
 8001318:	43500000 	.word	0x43500000
 800131c:	ffff3cb0 	.word	0xffff3cb0
 8001320:	3c900000 	.word	0x3c900000
 8001324:	00000000 	.word	0x00000000

08001328 <quorem>:
 8001328:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800132c:	6903      	ldr	r3, [r0, #16]
 800132e:	690c      	ldr	r4, [r1, #16]
 8001330:	42a3      	cmp	r3, r4
 8001332:	4680      	mov	r8, r0
 8001334:	db7f      	blt.n	8001436 <quorem+0x10e>
 8001336:	3c01      	subs	r4, #1
 8001338:	f101 0714 	add.w	r7, r1, #20
 800133c:	00a0      	lsls	r0, r4, #2
 800133e:	f108 0514 	add.w	r5, r8, #20
 8001342:	182b      	adds	r3, r5, r0
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
 800134a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800134e:	3301      	adds	r3, #1
 8001350:	429a      	cmp	r2, r3
 8001352:	eb07 0900 	add.w	r9, r7, r0
 8001356:	fbb2 f6f3 	udiv	r6, r2, r3
 800135a:	d331      	bcc.n	80013c0 <quorem+0x98>
 800135c:	f04f 0a00 	mov.w	sl, #0
 8001360:	46bc      	mov	ip, r7
 8001362:	46ae      	mov	lr, r5
 8001364:	46d3      	mov	fp, sl
 8001366:	f85c 2b04 	ldr.w	r2, [ip], #4
 800136a:	b293      	uxth	r3, r2
 800136c:	fb06 a303 	mla	r3, r6, r3, sl
 8001370:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8001374:	b29b      	uxth	r3, r3
 8001376:	ebab 0303 	sub.w	r3, fp, r3
 800137a:	0c12      	lsrs	r2, r2, #16
 800137c:	f8de b000 	ldr.w	fp, [lr]
 8001380:	fb06 a202 	mla	r2, r6, r2, sl
 8001384:	fa13 f38b 	uxtah	r3, r3, fp
 8001388:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800138c:	fa1f fb82 	uxth.w	fp, r2
 8001390:	f8de 2000 	ldr.w	r2, [lr]
 8001394:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8001398:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800139c:	b29b      	uxth	r3, r3
 800139e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013a2:	45e1      	cmp	r9, ip
 80013a4:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80013a8:	f84e 3b04 	str.w	r3, [lr], #4
 80013ac:	d2db      	bcs.n	8001366 <quorem+0x3e>
 80013ae:	582b      	ldr	r3, [r5, r0]
 80013b0:	b933      	cbnz	r3, 80013c0 <quorem+0x98>
 80013b2:	9b01      	ldr	r3, [sp, #4]
 80013b4:	3b04      	subs	r3, #4
 80013b6:	429d      	cmp	r5, r3
 80013b8:	461a      	mov	r2, r3
 80013ba:	d330      	bcc.n	800141e <quorem+0xf6>
 80013bc:	f8c8 4010 	str.w	r4, [r8, #16]
 80013c0:	4640      	mov	r0, r8
 80013c2:	f002 f918 	bl	80035f6 <__mcmp>
 80013c6:	2800      	cmp	r0, #0
 80013c8:	db25      	blt.n	8001416 <quorem+0xee>
 80013ca:	3601      	adds	r6, #1
 80013cc:	4628      	mov	r0, r5
 80013ce:	f04f 0c00 	mov.w	ip, #0
 80013d2:	f857 2b04 	ldr.w	r2, [r7], #4
 80013d6:	f8d0 e000 	ldr.w	lr, [r0]
 80013da:	b293      	uxth	r3, r2
 80013dc:	ebac 0303 	sub.w	r3, ip, r3
 80013e0:	0c12      	lsrs	r2, r2, #16
 80013e2:	fa13 f38e 	uxtah	r3, r3, lr
 80013e6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80013ea:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80013f4:	45b9      	cmp	r9, r7
 80013f6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80013fa:	f840 3b04 	str.w	r3, [r0], #4
 80013fe:	d2e8      	bcs.n	80013d2 <quorem+0xaa>
 8001400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8001404:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8001408:	b92a      	cbnz	r2, 8001416 <quorem+0xee>
 800140a:	3b04      	subs	r3, #4
 800140c:	429d      	cmp	r5, r3
 800140e:	461a      	mov	r2, r3
 8001410:	d30b      	bcc.n	800142a <quorem+0x102>
 8001412:	f8c8 4010 	str.w	r4, [r8, #16]
 8001416:	4630      	mov	r0, r6
 8001418:	b003      	add	sp, #12
 800141a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800141e:	6812      	ldr	r2, [r2, #0]
 8001420:	3b04      	subs	r3, #4
 8001422:	2a00      	cmp	r2, #0
 8001424:	d1ca      	bne.n	80013bc <quorem+0x94>
 8001426:	3c01      	subs	r4, #1
 8001428:	e7c5      	b.n	80013b6 <quorem+0x8e>
 800142a:	6812      	ldr	r2, [r2, #0]
 800142c:	3b04      	subs	r3, #4
 800142e:	2a00      	cmp	r2, #0
 8001430:	d1ef      	bne.n	8001412 <quorem+0xea>
 8001432:	3c01      	subs	r4, #1
 8001434:	e7ea      	b.n	800140c <quorem+0xe4>
 8001436:	2000      	movs	r0, #0
 8001438:	e7ee      	b.n	8001418 <quorem+0xf0>

0800143a <_dtoa_r>:
 800143a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800143e:	b099      	sub	sp, #100	; 0x64
 8001440:	ec55 4b10 	vmov	r4, r5, d0
 8001444:	9108      	str	r1, [sp, #32]
 8001446:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001448:	920d      	str	r2, [sp, #52]	; 0x34
 800144a:	4683      	mov	fp, r0
 800144c:	9314      	str	r3, [sp, #80]	; 0x50
 800144e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8001450:	e9cd 4500 	strd	r4, r5, [sp]
 8001454:	b149      	cbz	r1, 800146a <_dtoa_r+0x30>
 8001456:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8001458:	604a      	str	r2, [r1, #4]
 800145a:	2301      	movs	r3, #1
 800145c:	4093      	lsls	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
 8001460:	f001 fecb 	bl	80031fa <_Bfree>
 8001464:	2300      	movs	r3, #0
 8001466:	f8cb 3040 	str.w	r3, [fp, #64]	; 0x40
 800146a:	1e2b      	subs	r3, r5, #0
 800146c:	bfb9      	ittee	lt
 800146e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8001472:	9301      	strlt	r3, [sp, #4]
 8001474:	2300      	movge	r3, #0
 8001476:	6033      	strge	r3, [r6, #0]
 8001478:	9c01      	ldr	r4, [sp, #4]
 800147a:	4bb3      	ldr	r3, [pc, #716]	; (8001748 <_dtoa_r+0x30e>)
 800147c:	bfbc      	itt	lt
 800147e:	2201      	movlt	r2, #1
 8001480:	6032      	strlt	r2, [r6, #0]
 8001482:	43a3      	bics	r3, r4
 8001484:	d11a      	bne.n	80014bc <_dtoa_r+0x82>
 8001486:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001488:	f242 730f 	movw	r3, #9999	; 0x270f
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	9a00      	ldr	r2, [sp, #0]
 8001490:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8001494:	4313      	orrs	r3, r2
 8001496:	f000 854e 	beq.w	8001f36 <_dtoa_r+0xafc>
 800149a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800149c:	b90b      	cbnz	r3, 80014a2 <_dtoa_r+0x68>
 800149e:	4bab      	ldr	r3, [pc, #684]	; (800174c <_dtoa_r+0x312>)
 80014a0:	e023      	b.n	80014ea <_dtoa_r+0xb0>
 80014a2:	4baa      	ldr	r3, [pc, #680]	; (800174c <_dtoa_r+0x312>)
 80014a4:	9303      	str	r3, [sp, #12]
 80014a6:	3303      	adds	r3, #3
 80014a8:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80014aa:	6013      	str	r3, [r2, #0]
 80014ac:	9803      	ldr	r0, [sp, #12]
 80014ae:	b019      	add	sp, #100	; 0x64
 80014b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80014b4:	4ba6      	ldr	r3, [pc, #664]	; (8001750 <_dtoa_r+0x316>)
 80014b6:	9303      	str	r3, [sp, #12]
 80014b8:	3308      	adds	r3, #8
 80014ba:	e7f5      	b.n	80014a8 <_dtoa_r+0x6e>
 80014bc:	ed9d 7b00 	vldr	d7, [sp]
 80014c0:	2200      	movs	r2, #0
 80014c2:	2300      	movs	r3, #0
 80014c4:	ec51 0b17 	vmov	r0, r1, d7
 80014c8:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 80014cc:	f001 f980 	bl	80027d0 <__aeabi_dcmpeq>
 80014d0:	4607      	mov	r7, r0
 80014d2:	b160      	cbz	r0, 80014ee <_dtoa_r+0xb4>
 80014d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80014d6:	2301      	movs	r3, #1
 80014d8:	6013      	str	r3, [r2, #0]
 80014da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f000 8527 	beq.w	8001f30 <_dtoa_r+0xaf6>
 80014e2:	4b9c      	ldr	r3, [pc, #624]	; (8001754 <_dtoa_r+0x31a>)
 80014e4:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	3b01      	subs	r3, #1
 80014ea:	9303      	str	r3, [sp, #12]
 80014ec:	e7de      	b.n	80014ac <_dtoa_r+0x72>
 80014ee:	aa16      	add	r2, sp, #88	; 0x58
 80014f0:	a917      	add	r1, sp, #92	; 0x5c
 80014f2:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 80014f6:	4658      	mov	r0, fp
 80014f8:	f002 f96a 	bl	80037d0 <__d2b>
 80014fc:	f3c4 560a 	ubfx	r6, r4, #20, #11
 8001500:	4680      	mov	r8, r0
 8001502:	2e00      	cmp	r6, #0
 8001504:	d07f      	beq.n	8001606 <_dtoa_r+0x1cc>
 8001506:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001508:	9715      	str	r7, [sp, #84]	; 0x54
 800150a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800150e:	e9dd 450e 	ldrd	r4, r5, [sp, #56]	; 0x38
 8001512:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8001516:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800151a:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 800151e:	2200      	movs	r2, #0
 8001520:	4b8d      	ldr	r3, [pc, #564]	; (8001758 <_dtoa_r+0x31e>)
 8001522:	4620      	mov	r0, r4
 8001524:	4629      	mov	r1, r5
 8001526:	f000 fd33 	bl	8001f90 <__aeabi_dsub>
 800152a:	a381      	add	r3, pc, #516	; (adr r3, 8001730 <_dtoa_r+0x2f6>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f000 fee6 	bl	8002300 <__aeabi_dmul>
 8001534:	a380      	add	r3, pc, #512	; (adr r3, 8001738 <_dtoa_r+0x2fe>)
 8001536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800153a:	f000 fd2b 	bl	8001f94 <__adddf3>
 800153e:	4604      	mov	r4, r0
 8001540:	4630      	mov	r0, r6
 8001542:	460d      	mov	r5, r1
 8001544:	f000 fe72 	bl	800222c <__aeabi_i2d>
 8001548:	a37d      	add	r3, pc, #500	; (adr r3, 8001740 <_dtoa_r+0x306>)
 800154a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154e:	f000 fed7 	bl	8002300 <__aeabi_dmul>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	4620      	mov	r0, r4
 8001558:	4629      	mov	r1, r5
 800155a:	f000 fd1b 	bl	8001f94 <__adddf3>
 800155e:	4604      	mov	r4, r0
 8001560:	460d      	mov	r5, r1
 8001562:	f003 f85d 	bl	8004620 <__aeabi_d2iz>
 8001566:	2200      	movs	r2, #0
 8001568:	4682      	mov	sl, r0
 800156a:	2300      	movs	r3, #0
 800156c:	4620      	mov	r0, r4
 800156e:	4629      	mov	r1, r5
 8001570:	f001 f938 	bl	80027e4 <__aeabi_dcmplt>
 8001574:	b148      	cbz	r0, 800158a <_dtoa_r+0x150>
 8001576:	4650      	mov	r0, sl
 8001578:	f000 fe58 	bl	800222c <__aeabi_i2d>
 800157c:	4622      	mov	r2, r4
 800157e:	462b      	mov	r3, r5
 8001580:	f001 f926 	bl	80027d0 <__aeabi_dcmpeq>
 8001584:	b908      	cbnz	r0, 800158a <_dtoa_r+0x150>
 8001586:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800158a:	f1ba 0f16 	cmp.w	sl, #22
 800158e:	d859      	bhi.n	8001644 <_dtoa_r+0x20a>
 8001590:	4b72      	ldr	r3, [pc, #456]	; (800175c <_dtoa_r+0x322>)
 8001592:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8001596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800159a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800159e:	f001 f921 	bl	80027e4 <__aeabi_dcmplt>
 80015a2:	2800      	cmp	r0, #0
 80015a4:	d050      	beq.n	8001648 <_dtoa_r+0x20e>
 80015a6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80015aa:	2300      	movs	r3, #0
 80015ac:	9311      	str	r3, [sp, #68]	; 0x44
 80015ae:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80015b0:	1b9e      	subs	r6, r3, r6
 80015b2:	1e73      	subs	r3, r6, #1
 80015b4:	9307      	str	r3, [sp, #28]
 80015b6:	bf45      	ittet	mi
 80015b8:	f1c6 0301 	rsbmi	r3, r6, #1
 80015bc:	9306      	strmi	r3, [sp, #24]
 80015be:	2300      	movpl	r3, #0
 80015c0:	2300      	movmi	r3, #0
 80015c2:	bf4c      	ite	mi
 80015c4:	9307      	strmi	r3, [sp, #28]
 80015c6:	9306      	strpl	r3, [sp, #24]
 80015c8:	f1ba 0f00 	cmp.w	sl, #0
 80015cc:	db3e      	blt.n	800164c <_dtoa_r+0x212>
 80015ce:	9b07      	ldr	r3, [sp, #28]
 80015d0:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
 80015d4:	4453      	add	r3, sl
 80015d6:	9307      	str	r3, [sp, #28]
 80015d8:	2300      	movs	r3, #0
 80015da:	9309      	str	r3, [sp, #36]	; 0x24
 80015dc:	9b08      	ldr	r3, [sp, #32]
 80015de:	2b09      	cmp	r3, #9
 80015e0:	f200 808d 	bhi.w	80016fe <_dtoa_r+0x2c4>
 80015e4:	2b05      	cmp	r3, #5
 80015e6:	bfc4      	itt	gt
 80015e8:	3b04      	subgt	r3, #4
 80015ea:	9308      	strgt	r3, [sp, #32]
 80015ec:	9b08      	ldr	r3, [sp, #32]
 80015ee:	f1a3 0302 	sub.w	r3, r3, #2
 80015f2:	bfcc      	ite	gt
 80015f4:	2400      	movgt	r4, #0
 80015f6:	2401      	movle	r4, #1
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	f200 808b 	bhi.w	8001714 <_dtoa_r+0x2da>
 80015fe:	e8df f003 	tbb	[pc, r3]
 8001602:	3c2f      	.short	0x3c2f
 8001604:	7c3a      	.short	0x7c3a
 8001606:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	; 0x58
 800160a:	441e      	add	r6, r3
 800160c:	f206 4032 	addw	r0, r6, #1074	; 0x432
 8001610:	2820      	cmp	r0, #32
 8001612:	dd11      	ble.n	8001638 <_dtoa_r+0x1fe>
 8001614:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 8001618:	9b00      	ldr	r3, [sp, #0]
 800161a:	4084      	lsls	r4, r0
 800161c:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8001620:	fa23 f000 	lsr.w	r0, r3, r0
 8001624:	4320      	orrs	r0, r4
 8001626:	f000 fdf1 	bl	800220c <__aeabi_ui2d>
 800162a:	2301      	movs	r3, #1
 800162c:	4604      	mov	r4, r0
 800162e:	f1a1 75f8 	sub.w	r5, r1, #32505856	; 0x1f00000
 8001632:	3e01      	subs	r6, #1
 8001634:	9315      	str	r3, [sp, #84]	; 0x54
 8001636:	e772      	b.n	800151e <_dtoa_r+0xe4>
 8001638:	9b00      	ldr	r3, [sp, #0]
 800163a:	f1c0 0020 	rsb	r0, r0, #32
 800163e:	fa03 f000 	lsl.w	r0, r3, r0
 8001642:	e7f0      	b.n	8001626 <_dtoa_r+0x1ec>
 8001644:	2301      	movs	r3, #1
 8001646:	e7b1      	b.n	80015ac <_dtoa_r+0x172>
 8001648:	9011      	str	r0, [sp, #68]	; 0x44
 800164a:	e7b0      	b.n	80015ae <_dtoa_r+0x174>
 800164c:	9b06      	ldr	r3, [sp, #24]
 800164e:	eba3 030a 	sub.w	r3, r3, sl
 8001652:	9306      	str	r3, [sp, #24]
 8001654:	f1ca 0300 	rsb	r3, sl, #0
 8001658:	9309      	str	r3, [sp, #36]	; 0x24
 800165a:	2300      	movs	r3, #0
 800165c:	9310      	str	r3, [sp, #64]	; 0x40
 800165e:	e7bd      	b.n	80015dc <_dtoa_r+0x1a2>
 8001660:	2300      	movs	r3, #0
 8001662:	930c      	str	r3, [sp, #48]	; 0x30
 8001664:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001666:	2b00      	cmp	r3, #0
 8001668:	dc57      	bgt.n	800171a <_dtoa_r+0x2e0>
 800166a:	2301      	movs	r3, #1
 800166c:	9304      	str	r3, [sp, #16]
 800166e:	4699      	mov	r9, r3
 8001670:	461a      	mov	r2, r3
 8001672:	920d      	str	r2, [sp, #52]	; 0x34
 8001674:	e00c      	b.n	8001690 <_dtoa_r+0x256>
 8001676:	2301      	movs	r3, #1
 8001678:	e7f3      	b.n	8001662 <_dtoa_r+0x228>
 800167a:	2300      	movs	r3, #0
 800167c:	930c      	str	r3, [sp, #48]	; 0x30
 800167e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001680:	4453      	add	r3, sl
 8001682:	f103 0901 	add.w	r9, r3, #1
 8001686:	9304      	str	r3, [sp, #16]
 8001688:	464b      	mov	r3, r9
 800168a:	2b01      	cmp	r3, #1
 800168c:	bfb8      	it	lt
 800168e:	2301      	movlt	r3, #1
 8001690:	2200      	movs	r2, #0
 8001692:	f8cb 2044 	str.w	r2, [fp, #68]	; 0x44
 8001696:	2204      	movs	r2, #4
 8001698:	f102 0014 	add.w	r0, r2, #20
 800169c:	4298      	cmp	r0, r3
 800169e:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 80016a2:	d93e      	bls.n	8001722 <_dtoa_r+0x2e8>
 80016a4:	4658      	mov	r0, fp
 80016a6:	f001 fd83 	bl	80031b0 <_Balloc>
 80016aa:	f1b9 0f0e 	cmp.w	r9, #14
 80016ae:	9003      	str	r0, [sp, #12]
 80016b0:	f8cb 0040 	str.w	r0, [fp, #64]	; 0x40
 80016b4:	f200 80d7 	bhi.w	8001866 <_dtoa_r+0x42c>
 80016b8:	2c00      	cmp	r4, #0
 80016ba:	f000 80d4 	beq.w	8001866 <_dtoa_r+0x42c>
 80016be:	f1ba 0f00 	cmp.w	sl, #0
 80016c2:	dd69      	ble.n	8001798 <_dtoa_r+0x35e>
 80016c4:	4a25      	ldr	r2, [pc, #148]	; (800175c <_dtoa_r+0x322>)
 80016c6:	f00a 030f 	and.w	r3, sl, #15
 80016ca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80016ce:	ed93 7b00 	vldr	d7, [r3]
 80016d2:	ea4f 142a 	mov.w	r4, sl, asr #4
 80016d6:	06e2      	lsls	r2, r4, #27
 80016d8:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80016dc:	d55a      	bpl.n	8001794 <_dtoa_r+0x35a>
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <_dtoa_r+0x326>)
 80016e0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80016e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80016e8:	f000 ff34 	bl	8002554 <__aeabi_ddiv>
 80016ec:	e9cd 0100 	strd	r0, r1, [sp]
 80016f0:	f004 040f 	and.w	r4, r4, #15
 80016f4:	2603      	movs	r6, #3
 80016f6:	4d1a      	ldr	r5, [pc, #104]	; (8001760 <_dtoa_r+0x326>)
 80016f8:	e041      	b.n	800177e <_dtoa_r+0x344>
 80016fa:	2301      	movs	r3, #1
 80016fc:	e7be      	b.n	800167c <_dtoa_r+0x242>
 80016fe:	2401      	movs	r4, #1
 8001700:	2300      	movs	r3, #0
 8001702:	9308      	str	r3, [sp, #32]
 8001704:	940c      	str	r4, [sp, #48]	; 0x30
 8001706:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800170a:	9304      	str	r3, [sp, #16]
 800170c:	4699      	mov	r9, r3
 800170e:	2200      	movs	r2, #0
 8001710:	2312      	movs	r3, #18
 8001712:	e7ae      	b.n	8001672 <_dtoa_r+0x238>
 8001714:	2301      	movs	r3, #1
 8001716:	930c      	str	r3, [sp, #48]	; 0x30
 8001718:	e7f5      	b.n	8001706 <_dtoa_r+0x2cc>
 800171a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800171c:	9304      	str	r3, [sp, #16]
 800171e:	4699      	mov	r9, r3
 8001720:	e7b6      	b.n	8001690 <_dtoa_r+0x256>
 8001722:	3101      	adds	r1, #1
 8001724:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8001728:	0052      	lsls	r2, r2, #1
 800172a:	e7b5      	b.n	8001698 <_dtoa_r+0x25e>
 800172c:	f3af 8000 	nop.w
 8001730:	636f4361 	.word	0x636f4361
 8001734:	3fd287a7 	.word	0x3fd287a7
 8001738:	8b60c8b3 	.word	0x8b60c8b3
 800173c:	3fc68a28 	.word	0x3fc68a28
 8001740:	509f79fb 	.word	0x509f79fb
 8001744:	3fd34413 	.word	0x3fd34413
 8001748:	7ff00000 	.word	0x7ff00000
 800174c:	08008022 	.word	0x08008022
 8001750:	08008026 	.word	0x08008026
 8001754:	08007f33 	.word	0x08007f33
 8001758:	3ff80000 	.word	0x3ff80000
 800175c:	08007a40 	.word	0x08007a40
 8001760:	08007b30 	.word	0x08007b30
 8001764:	07e3      	lsls	r3, r4, #31
 8001766:	d508      	bpl.n	800177a <_dtoa_r+0x340>
 8001768:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800176c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8001770:	f000 fdc6 	bl	8002300 <__aeabi_dmul>
 8001774:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8001778:	3601      	adds	r6, #1
 800177a:	1064      	asrs	r4, r4, #1
 800177c:	3508      	adds	r5, #8
 800177e:	2c00      	cmp	r4, #0
 8001780:	d1f0      	bne.n	8001764 <_dtoa_r+0x32a>
 8001782:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8001786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800178a:	f000 fee3 	bl	8002554 <__aeabi_ddiv>
 800178e:	e9cd 0100 	strd	r0, r1, [sp]
 8001792:	e01a      	b.n	80017ca <_dtoa_r+0x390>
 8001794:	2602      	movs	r6, #2
 8001796:	e7ae      	b.n	80016f6 <_dtoa_r+0x2bc>
 8001798:	f000 809f 	beq.w	80018da <_dtoa_r+0x4a0>
 800179c:	f1ca 0400 	rsb	r4, sl, #0
 80017a0:	4b9e      	ldr	r3, [pc, #632]	; (8001a1c <_dtoa_r+0x5e2>)
 80017a2:	4d9f      	ldr	r5, [pc, #636]	; (8001a20 <_dtoa_r+0x5e6>)
 80017a4:	f004 020f 	and.w	r2, r4, #15
 80017a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80017ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80017b4:	f000 fda4 	bl	8002300 <__aeabi_dmul>
 80017b8:	e9cd 0100 	strd	r0, r1, [sp]
 80017bc:	1124      	asrs	r4, r4, #4
 80017be:	2300      	movs	r3, #0
 80017c0:	2602      	movs	r6, #2
 80017c2:	2c00      	cmp	r4, #0
 80017c4:	d17e      	bne.n	80018c4 <_dtoa_r+0x48a>
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1e1      	bne.n	800178e <_dtoa_r+0x354>
 80017ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	f000 8086 	beq.w	80018de <_dtoa_r+0x4a4>
 80017d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80017d6:	2200      	movs	r2, #0
 80017d8:	4b92      	ldr	r3, [pc, #584]	; (8001a24 <_dtoa_r+0x5ea>)
 80017da:	4620      	mov	r0, r4
 80017dc:	4629      	mov	r1, r5
 80017de:	f001 f801 	bl	80027e4 <__aeabi_dcmplt>
 80017e2:	2800      	cmp	r0, #0
 80017e4:	d07b      	beq.n	80018de <_dtoa_r+0x4a4>
 80017e6:	f1b9 0f00 	cmp.w	r9, #0
 80017ea:	d078      	beq.n	80018de <_dtoa_r+0x4a4>
 80017ec:	9b04      	ldr	r3, [sp, #16]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	dd35      	ble.n	800185e <_dtoa_r+0x424>
 80017f2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80017f6:	930a      	str	r3, [sp, #40]	; 0x28
 80017f8:	4620      	mov	r0, r4
 80017fa:	2200      	movs	r2, #0
 80017fc:	4b8a      	ldr	r3, [pc, #552]	; (8001a28 <_dtoa_r+0x5ee>)
 80017fe:	4629      	mov	r1, r5
 8001800:	f000 fd7e 	bl	8002300 <__aeabi_dmul>
 8001804:	e9cd 0100 	strd	r0, r1, [sp]
 8001808:	9c04      	ldr	r4, [sp, #16]
 800180a:	3601      	adds	r6, #1
 800180c:	4630      	mov	r0, r6
 800180e:	f000 fd0d 	bl	800222c <__aeabi_i2d>
 8001812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001816:	f000 fd73 	bl	8002300 <__aeabi_dmul>
 800181a:	2200      	movs	r2, #0
 800181c:	4b83      	ldr	r3, [pc, #524]	; (8001a2c <_dtoa_r+0x5f2>)
 800181e:	f000 fbb9 	bl	8001f94 <__adddf3>
 8001822:	4606      	mov	r6, r0
 8001824:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
 8001828:	2c00      	cmp	r4, #0
 800182a:	d15c      	bne.n	80018e6 <_dtoa_r+0x4ac>
 800182c:	2200      	movs	r2, #0
 800182e:	4b80      	ldr	r3, [pc, #512]	; (8001a30 <_dtoa_r+0x5f6>)
 8001830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001834:	f000 fbac 	bl	8001f90 <__aeabi_dsub>
 8001838:	4632      	mov	r2, r6
 800183a:	463b      	mov	r3, r7
 800183c:	e9cd 0100 	strd	r0, r1, [sp]
 8001840:	f000 ffee 	bl	8002820 <__aeabi_dcmpgt>
 8001844:	2800      	cmp	r0, #0
 8001846:	f040 828a 	bne.w	8001d5e <_dtoa_r+0x924>
 800184a:	4632      	mov	r2, r6
 800184c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8001850:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001854:	f000 ffc6 	bl	80027e4 <__aeabi_dcmplt>
 8001858:	2800      	cmp	r0, #0
 800185a:	f040 827e 	bne.w	8001d5a <_dtoa_r+0x920>
 800185e:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8001862:	e9cd 3400 	strd	r3, r4, [sp]
 8001866:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001868:	2b00      	cmp	r3, #0
 800186a:	f2c0 814d 	blt.w	8001b08 <_dtoa_r+0x6ce>
 800186e:	f1ba 0f0e 	cmp.w	sl, #14
 8001872:	f300 8149 	bgt.w	8001b08 <_dtoa_r+0x6ce>
 8001876:	4b69      	ldr	r3, [pc, #420]	; (8001a1c <_dtoa_r+0x5e2>)
 8001878:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800187c:	ed93 7b00 	vldr	d7, [r3]
 8001880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001882:	2b00      	cmp	r3, #0
 8001884:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001888:	f280 80d6 	bge.w	8001a38 <_dtoa_r+0x5fe>
 800188c:	f1b9 0f00 	cmp.w	r9, #0
 8001890:	f300 80d2 	bgt.w	8001a38 <_dtoa_r+0x5fe>
 8001894:	f040 8260 	bne.w	8001d58 <_dtoa_r+0x91e>
 8001898:	2200      	movs	r2, #0
 800189a:	4b65      	ldr	r3, [pc, #404]	; (8001a30 <_dtoa_r+0x5f6>)
 800189c:	ec51 0b17 	vmov	r0, r1, d7
 80018a0:	f000 fd2e 	bl	8002300 <__aeabi_dmul>
 80018a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80018a8:	f000 ffb0 	bl	800280c <__aeabi_dcmpge>
 80018ac:	464c      	mov	r4, r9
 80018ae:	464e      	mov	r6, r9
 80018b0:	2800      	cmp	r0, #0
 80018b2:	f040 8239 	bne.w	8001d28 <_dtoa_r+0x8ee>
 80018b6:	9d03      	ldr	r5, [sp, #12]
 80018b8:	2331      	movs	r3, #49	; 0x31
 80018ba:	f805 3b01 	strb.w	r3, [r5], #1
 80018be:	f10a 0a01 	add.w	sl, sl, #1
 80018c2:	e235      	b.n	8001d30 <_dtoa_r+0x8f6>
 80018c4:	07e7      	lsls	r7, r4, #31
 80018c6:	d505      	bpl.n	80018d4 <_dtoa_r+0x49a>
 80018c8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80018cc:	f000 fd18 	bl	8002300 <__aeabi_dmul>
 80018d0:	3601      	adds	r6, #1
 80018d2:	2301      	movs	r3, #1
 80018d4:	1064      	asrs	r4, r4, #1
 80018d6:	3508      	adds	r5, #8
 80018d8:	e773      	b.n	80017c2 <_dtoa_r+0x388>
 80018da:	2602      	movs	r6, #2
 80018dc:	e775      	b.n	80017ca <_dtoa_r+0x390>
 80018de:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80018e2:	464c      	mov	r4, r9
 80018e4:	e792      	b.n	800180c <_dtoa_r+0x3d2>
 80018e6:	9903      	ldr	r1, [sp, #12]
 80018e8:	4b4c      	ldr	r3, [pc, #304]	; (8001a1c <_dtoa_r+0x5e2>)
 80018ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80018ee:	440c      	add	r4, r1
 80018f0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80018f2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80018f6:	2900      	cmp	r1, #0
 80018f8:	d044      	beq.n	8001984 <_dtoa_r+0x54a>
 80018fa:	2000      	movs	r0, #0
 80018fc:	494d      	ldr	r1, [pc, #308]	; (8001a34 <_dtoa_r+0x5fa>)
 80018fe:	f000 fe29 	bl	8002554 <__aeabi_ddiv>
 8001902:	4632      	mov	r2, r6
 8001904:	463b      	mov	r3, r7
 8001906:	f000 fb43 	bl	8001f90 <__aeabi_dsub>
 800190a:	9d03      	ldr	r5, [sp, #12]
 800190c:	4606      	mov	r6, r0
 800190e:	460f      	mov	r7, r1
 8001910:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001914:	f002 fe84 	bl	8004620 <__aeabi_d2iz>
 8001918:	9012      	str	r0, [sp, #72]	; 0x48
 800191a:	f000 fc87 	bl	800222c <__aeabi_i2d>
 800191e:	4602      	mov	r2, r0
 8001920:	460b      	mov	r3, r1
 8001922:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001926:	f000 fb33 	bl	8001f90 <__aeabi_dsub>
 800192a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800192c:	3330      	adds	r3, #48	; 0x30
 800192e:	f805 3b01 	strb.w	r3, [r5], #1
 8001932:	4632      	mov	r2, r6
 8001934:	463b      	mov	r3, r7
 8001936:	e9cd 0100 	strd	r0, r1, [sp]
 800193a:	f000 ff53 	bl	80027e4 <__aeabi_dcmplt>
 800193e:	2800      	cmp	r0, #0
 8001940:	d160      	bne.n	8001a04 <_dtoa_r+0x5ca>
 8001942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8001946:	2000      	movs	r0, #0
 8001948:	4936      	ldr	r1, [pc, #216]	; (8001a24 <_dtoa_r+0x5ea>)
 800194a:	f000 fb21 	bl	8001f90 <__aeabi_dsub>
 800194e:	4632      	mov	r2, r6
 8001950:	463b      	mov	r3, r7
 8001952:	f000 ff47 	bl	80027e4 <__aeabi_dcmplt>
 8001956:	2800      	cmp	r0, #0
 8001958:	f040 80b4 	bne.w	8001ac4 <_dtoa_r+0x68a>
 800195c:	42a5      	cmp	r5, r4
 800195e:	f43f af7e 	beq.w	800185e <_dtoa_r+0x424>
 8001962:	2200      	movs	r2, #0
 8001964:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <_dtoa_r+0x5ee>)
 8001966:	4630      	mov	r0, r6
 8001968:	4639      	mov	r1, r7
 800196a:	f000 fcc9 	bl	8002300 <__aeabi_dmul>
 800196e:	2200      	movs	r2, #0
 8001970:	4606      	mov	r6, r0
 8001972:	460f      	mov	r7, r1
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <_dtoa_r+0x5ee>)
 8001976:	e9dd 0100 	ldrd	r0, r1, [sp]
 800197a:	f000 fcc1 	bl	8002300 <__aeabi_dmul>
 800197e:	e9cd 0100 	strd	r0, r1, [sp]
 8001982:	e7c5      	b.n	8001910 <_dtoa_r+0x4d6>
 8001984:	4630      	mov	r0, r6
 8001986:	4639      	mov	r1, r7
 8001988:	f000 fcba 	bl	8002300 <__aeabi_dmul>
 800198c:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8001990:	9e03      	ldr	r6, [sp, #12]
 8001992:	4625      	mov	r5, r4
 8001994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8001998:	f002 fe42 	bl	8004620 <__aeabi_d2iz>
 800199c:	4607      	mov	r7, r0
 800199e:	f000 fc45 	bl	800222c <__aeabi_i2d>
 80019a2:	3730      	adds	r7, #48	; 0x30
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80019ac:	f000 faf0 	bl	8001f90 <__aeabi_dsub>
 80019b0:	f806 7b01 	strb.w	r7, [r6], #1
 80019b4:	42a6      	cmp	r6, r4
 80019b6:	e9cd 0100 	strd	r0, r1, [sp]
 80019ba:	f04f 0200 	mov.w	r2, #0
 80019be:	d126      	bne.n	8001a0e <_dtoa_r+0x5d4>
 80019c0:	4b1c      	ldr	r3, [pc, #112]	; (8001a34 <_dtoa_r+0x5fa>)
 80019c2:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 80019c6:	f000 fae5 	bl	8001f94 <__adddf3>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9dd 0100 	ldrd	r0, r1, [sp]
 80019d2:	f000 ff25 	bl	8002820 <__aeabi_dcmpgt>
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d174      	bne.n	8001ac4 <_dtoa_r+0x68a>
 80019da:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80019de:	2000      	movs	r0, #0
 80019e0:	4914      	ldr	r1, [pc, #80]	; (8001a34 <_dtoa_r+0x5fa>)
 80019e2:	f000 fad5 	bl	8001f90 <__aeabi_dsub>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80019ee:	f000 fef9 	bl	80027e4 <__aeabi_dcmplt>
 80019f2:	2800      	cmp	r0, #0
 80019f4:	f43f af33 	beq.w	800185e <_dtoa_r+0x424>
 80019f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80019fc:	2b30      	cmp	r3, #48	; 0x30
 80019fe:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8001a02:	d002      	beq.n	8001a0a <_dtoa_r+0x5d0>
 8001a04:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001a08:	e04a      	b.n	8001aa0 <_dtoa_r+0x666>
 8001a0a:	4615      	mov	r5, r2
 8001a0c:	e7f4      	b.n	80019f8 <_dtoa_r+0x5be>
 8001a0e:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <_dtoa_r+0x5ee>)
 8001a10:	f000 fc76 	bl	8002300 <__aeabi_dmul>
 8001a14:	e9cd 0100 	strd	r0, r1, [sp]
 8001a18:	e7bc      	b.n	8001994 <_dtoa_r+0x55a>
 8001a1a:	bf00      	nop
 8001a1c:	08007a40 	.word	0x08007a40
 8001a20:	08007b30 	.word	0x08007b30
 8001a24:	3ff00000 	.word	0x3ff00000
 8001a28:	40240000 	.word	0x40240000
 8001a2c:	401c0000 	.word	0x401c0000
 8001a30:	40140000 	.word	0x40140000
 8001a34:	3fe00000 	.word	0x3fe00000
 8001a38:	e9dd 6700 	ldrd	r6, r7, [sp]
 8001a3c:	9d03      	ldr	r5, [sp, #12]
 8001a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a42:	4630      	mov	r0, r6
 8001a44:	4639      	mov	r1, r7
 8001a46:	f000 fd85 	bl	8002554 <__aeabi_ddiv>
 8001a4a:	f002 fde9 	bl	8004620 <__aeabi_d2iz>
 8001a4e:	4604      	mov	r4, r0
 8001a50:	f000 fbec 	bl	800222c <__aeabi_i2d>
 8001a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a58:	f000 fc52 	bl	8002300 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4630      	mov	r0, r6
 8001a62:	4639      	mov	r1, r7
 8001a64:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8001a68:	f000 fa92 	bl	8001f90 <__aeabi_dsub>
 8001a6c:	f805 6b01 	strb.w	r6, [r5], #1
 8001a70:	9e03      	ldr	r6, [sp, #12]
 8001a72:	1bae      	subs	r6, r5, r6
 8001a74:	45b1      	cmp	r9, r6
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	d138      	bne.n	8001aee <_dtoa_r+0x6b4>
 8001a7c:	f000 fa8a 	bl	8001f94 <__adddf3>
 8001a80:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a84:	4606      	mov	r6, r0
 8001a86:	460f      	mov	r7, r1
 8001a88:	f000 feca 	bl	8002820 <__aeabi_dcmpgt>
 8001a8c:	b9c0      	cbnz	r0, 8001ac0 <_dtoa_r+0x686>
 8001a8e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8001a92:	4630      	mov	r0, r6
 8001a94:	4639      	mov	r1, r7
 8001a96:	f000 fe9b 	bl	80027d0 <__aeabi_dcmpeq>
 8001a9a:	b108      	cbz	r0, 8001aa0 <_dtoa_r+0x666>
 8001a9c:	07e1      	lsls	r1, r4, #31
 8001a9e:	d40f      	bmi.n	8001ac0 <_dtoa_r+0x686>
 8001aa0:	4641      	mov	r1, r8
 8001aa2:	4658      	mov	r0, fp
 8001aa4:	f001 fba9 	bl	80031fa <_Bfree>
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001aac:	702b      	strb	r3, [r5, #0]
 8001aae:	f10a 0301 	add.w	r3, sl, #1
 8001ab2:	6013      	str	r3, [r2, #0]
 8001ab4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f43f acf8 	beq.w	80014ac <_dtoa_r+0x72>
 8001abc:	601d      	str	r5, [r3, #0]
 8001abe:	e4f5      	b.n	80014ac <_dtoa_r+0x72>
 8001ac0:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8001ac4:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8001ac8:	2a39      	cmp	r2, #57	; 0x39
 8001aca:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 8001ace:	d108      	bne.n	8001ae2 <_dtoa_r+0x6a8>
 8001ad0:	9a03      	ldr	r2, [sp, #12]
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d109      	bne.n	8001aea <_dtoa_r+0x6b0>
 8001ad6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001ad8:	9903      	ldr	r1, [sp, #12]
 8001ada:	3201      	adds	r2, #1
 8001adc:	920a      	str	r2, [sp, #40]	; 0x28
 8001ade:	2230      	movs	r2, #48	; 0x30
 8001ae0:	700a      	strb	r2, [r1, #0]
 8001ae2:	781a      	ldrb	r2, [r3, #0]
 8001ae4:	3201      	adds	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
 8001ae8:	e78c      	b.n	8001a04 <_dtoa_r+0x5ca>
 8001aea:	461d      	mov	r5, r3
 8001aec:	e7ea      	b.n	8001ac4 <_dtoa_r+0x68a>
 8001aee:	2200      	movs	r2, #0
 8001af0:	4b9d      	ldr	r3, [pc, #628]	; (8001d68 <_dtoa_r+0x92e>)
 8001af2:	f000 fc05 	bl	8002300 <__aeabi_dmul>
 8001af6:	2200      	movs	r2, #0
 8001af8:	2300      	movs	r3, #0
 8001afa:	4606      	mov	r6, r0
 8001afc:	460f      	mov	r7, r1
 8001afe:	f000 fe67 	bl	80027d0 <__aeabi_dcmpeq>
 8001b02:	2800      	cmp	r0, #0
 8001b04:	d09b      	beq.n	8001a3e <_dtoa_r+0x604>
 8001b06:	e7cb      	b.n	8001aa0 <_dtoa_r+0x666>
 8001b08:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b0a:	2a00      	cmp	r2, #0
 8001b0c:	f000 80cb 	beq.w	8001ca6 <_dtoa_r+0x86c>
 8001b10:	9a08      	ldr	r2, [sp, #32]
 8001b12:	2a01      	cmp	r2, #1
 8001b14:	f300 80ae 	bgt.w	8001c74 <_dtoa_r+0x83a>
 8001b18:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001b1a:	2a00      	cmp	r2, #0
 8001b1c:	f000 80a6 	beq.w	8001c6c <_dtoa_r+0x832>
 8001b20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8001b24:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001b26:	9d06      	ldr	r5, [sp, #24]
 8001b28:	9a06      	ldr	r2, [sp, #24]
 8001b2a:	441a      	add	r2, r3
 8001b2c:	9206      	str	r2, [sp, #24]
 8001b2e:	9a07      	ldr	r2, [sp, #28]
 8001b30:	2101      	movs	r1, #1
 8001b32:	441a      	add	r2, r3
 8001b34:	4658      	mov	r0, fp
 8001b36:	9207      	str	r2, [sp, #28]
 8001b38:	f001 fc31 	bl	800339e <__i2b>
 8001b3c:	4606      	mov	r6, r0
 8001b3e:	2d00      	cmp	r5, #0
 8001b40:	dd0c      	ble.n	8001b5c <_dtoa_r+0x722>
 8001b42:	9b07      	ldr	r3, [sp, #28]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	dd09      	ble.n	8001b5c <_dtoa_r+0x722>
 8001b48:	42ab      	cmp	r3, r5
 8001b4a:	9a06      	ldr	r2, [sp, #24]
 8001b4c:	bfa8      	it	ge
 8001b4e:	462b      	movge	r3, r5
 8001b50:	1ad2      	subs	r2, r2, r3
 8001b52:	9206      	str	r2, [sp, #24]
 8001b54:	9a07      	ldr	r2, [sp, #28]
 8001b56:	1aed      	subs	r5, r5, r3
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	9307      	str	r3, [sp, #28]
 8001b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b5e:	b1f3      	cbz	r3, 8001b9e <_dtoa_r+0x764>
 8001b60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 80a3 	beq.w	8001cae <_dtoa_r+0x874>
 8001b68:	2c00      	cmp	r4, #0
 8001b6a:	dd10      	ble.n	8001b8e <_dtoa_r+0x754>
 8001b6c:	4631      	mov	r1, r6
 8001b6e:	4622      	mov	r2, r4
 8001b70:	4658      	mov	r0, fp
 8001b72:	f001 fcad 	bl	80034d0 <__pow5mult>
 8001b76:	4642      	mov	r2, r8
 8001b78:	4601      	mov	r1, r0
 8001b7a:	4606      	mov	r6, r0
 8001b7c:	4658      	mov	r0, fp
 8001b7e:	f001 fc17 	bl	80033b0 <__multiply>
 8001b82:	4641      	mov	r1, r8
 8001b84:	4607      	mov	r7, r0
 8001b86:	4658      	mov	r0, fp
 8001b88:	f001 fb37 	bl	80031fa <_Bfree>
 8001b8c:	46b8      	mov	r8, r7
 8001b8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001b90:	1b1a      	subs	r2, r3, r4
 8001b92:	d004      	beq.n	8001b9e <_dtoa_r+0x764>
 8001b94:	4641      	mov	r1, r8
 8001b96:	4658      	mov	r0, fp
 8001b98:	f001 fc9a 	bl	80034d0 <__pow5mult>
 8001b9c:	4680      	mov	r8, r0
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	4658      	mov	r0, fp
 8001ba2:	f001 fbfc 	bl	800339e <__i2b>
 8001ba6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	4604      	mov	r4, r0
 8001bac:	f340 8081 	ble.w	8001cb2 <_dtoa_r+0x878>
 8001bb0:	461a      	mov	r2, r3
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	4658      	mov	r0, fp
 8001bb6:	f001 fc8b 	bl	80034d0 <__pow5mult>
 8001bba:	9b08      	ldr	r3, [sp, #32]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	4604      	mov	r4, r0
 8001bc0:	dd7a      	ble.n	8001cb8 <_dtoa_r+0x87e>
 8001bc2:	2700      	movs	r7, #0
 8001bc4:	6923      	ldr	r3, [r4, #16]
 8001bc6:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8001bca:	6918      	ldr	r0, [r3, #16]
 8001bcc:	f001 fb97 	bl	80032fe <__hi0bits>
 8001bd0:	f1c0 0020 	rsb	r0, r0, #32
 8001bd4:	9b07      	ldr	r3, [sp, #28]
 8001bd6:	4418      	add	r0, r3
 8001bd8:	f010 001f 	ands.w	r0, r0, #31
 8001bdc:	f000 808b 	beq.w	8001cf6 <_dtoa_r+0x8bc>
 8001be0:	f1c0 0320 	rsb	r3, r0, #32
 8001be4:	2b04      	cmp	r3, #4
 8001be6:	f340 8084 	ble.w	8001cf2 <_dtoa_r+0x8b8>
 8001bea:	f1c0 001c 	rsb	r0, r0, #28
 8001bee:	9b06      	ldr	r3, [sp, #24]
 8001bf0:	4403      	add	r3, r0
 8001bf2:	9306      	str	r3, [sp, #24]
 8001bf4:	9b07      	ldr	r3, [sp, #28]
 8001bf6:	4403      	add	r3, r0
 8001bf8:	4405      	add	r5, r0
 8001bfa:	9307      	str	r3, [sp, #28]
 8001bfc:	9b06      	ldr	r3, [sp, #24]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	dd05      	ble.n	8001c0e <_dtoa_r+0x7d4>
 8001c02:	4641      	mov	r1, r8
 8001c04:	461a      	mov	r2, r3
 8001c06:	4658      	mov	r0, fp
 8001c08:	f001 fca2 	bl	8003550 <__lshift>
 8001c0c:	4680      	mov	r8, r0
 8001c0e:	9b07      	ldr	r3, [sp, #28]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	dd05      	ble.n	8001c20 <_dtoa_r+0x7e6>
 8001c14:	4621      	mov	r1, r4
 8001c16:	461a      	mov	r2, r3
 8001c18:	4658      	mov	r0, fp
 8001c1a:	f001 fc99 	bl	8003550 <__lshift>
 8001c1e:	4604      	mov	r4, r0
 8001c20:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d069      	beq.n	8001cfa <_dtoa_r+0x8c0>
 8001c26:	4621      	mov	r1, r4
 8001c28:	4640      	mov	r0, r8
 8001c2a:	f001 fce4 	bl	80035f6 <__mcmp>
 8001c2e:	2800      	cmp	r0, #0
 8001c30:	da63      	bge.n	8001cfa <_dtoa_r+0x8c0>
 8001c32:	2300      	movs	r3, #0
 8001c34:	4641      	mov	r1, r8
 8001c36:	220a      	movs	r2, #10
 8001c38:	4658      	mov	r0, fp
 8001c3a:	f001 fae7 	bl	800320c <__multadd>
 8001c3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001c40:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8001c44:	4680      	mov	r8, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 817c 	beq.w	8001f44 <_dtoa_r+0xb0a>
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	4631      	mov	r1, r6
 8001c50:	220a      	movs	r2, #10
 8001c52:	4658      	mov	r0, fp
 8001c54:	f001 fada 	bl	800320c <__multadd>
 8001c58:	9b04      	ldr	r3, [sp, #16]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	4606      	mov	r6, r0
 8001c5e:	f300 808b 	bgt.w	8001d78 <_dtoa_r+0x93e>
 8001c62:	9b08      	ldr	r3, [sp, #32]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	f340 8087 	ble.w	8001d78 <_dtoa_r+0x93e>
 8001c6a:	e04e      	b.n	8001d0a <_dtoa_r+0x8d0>
 8001c6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001c6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8001c72:	e757      	b.n	8001b24 <_dtoa_r+0x6ea>
 8001c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001c76:	f109 34ff 	add.w	r4, r9, #4294967295	; 0xffffffff
 8001c7a:	42a3      	cmp	r3, r4
 8001c7c:	bfbf      	itttt	lt
 8001c7e:	9b09      	ldrlt	r3, [sp, #36]	; 0x24
 8001c80:	9409      	strlt	r4, [sp, #36]	; 0x24
 8001c82:	1ae2      	sublt	r2, r4, r3
 8001c84:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
 8001c86:	bfbb      	ittet	lt
 8001c88:	189b      	addlt	r3, r3, r2
 8001c8a:	9310      	strlt	r3, [sp, #64]	; 0x40
 8001c8c:	1b1c      	subge	r4, r3, r4
 8001c8e:	2400      	movlt	r4, #0
 8001c90:	f1b9 0f00 	cmp.w	r9, #0
 8001c94:	bfb5      	itete	lt
 8001c96:	9b06      	ldrlt	r3, [sp, #24]
 8001c98:	9d06      	ldrge	r5, [sp, #24]
 8001c9a:	eba3 0509 	sublt.w	r5, r3, r9
 8001c9e:	464b      	movge	r3, r9
 8001ca0:	bfb8      	it	lt
 8001ca2:	2300      	movlt	r3, #0
 8001ca4:	e740      	b.n	8001b28 <_dtoa_r+0x6ee>
 8001ca6:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8001ca8:	9d06      	ldr	r5, [sp, #24]
 8001caa:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8001cac:	e747      	b.n	8001b3e <_dtoa_r+0x704>
 8001cae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001cb0:	e770      	b.n	8001b94 <_dtoa_r+0x75a>
 8001cb2:	9b08      	ldr	r3, [sp, #32]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	dc18      	bgt.n	8001cea <_dtoa_r+0x8b0>
 8001cb8:	9b00      	ldr	r3, [sp, #0]
 8001cba:	b9b3      	cbnz	r3, 8001cea <_dtoa_r+0x8b0>
 8001cbc:	9b01      	ldr	r3, [sp, #4]
 8001cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001cc2:	b9a3      	cbnz	r3, 8001cee <_dtoa_r+0x8b4>
 8001cc4:	9b01      	ldr	r3, [sp, #4]
 8001cc6:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8001cca:	0d3f      	lsrs	r7, r7, #20
 8001ccc:	053f      	lsls	r7, r7, #20
 8001cce:	b137      	cbz	r7, 8001cde <_dtoa_r+0x8a4>
 8001cd0:	9b06      	ldr	r3, [sp, #24]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	9306      	str	r3, [sp, #24]
 8001cd6:	9b07      	ldr	r3, [sp, #28]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	9307      	str	r3, [sp, #28]
 8001cdc:	2701      	movs	r7, #1
 8001cde:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	f47f af6f 	bne.w	8001bc4 <_dtoa_r+0x78a>
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	e774      	b.n	8001bd4 <_dtoa_r+0x79a>
 8001cea:	2700      	movs	r7, #0
 8001cec:	e7f7      	b.n	8001cde <_dtoa_r+0x8a4>
 8001cee:	9f00      	ldr	r7, [sp, #0]
 8001cf0:	e7f5      	b.n	8001cde <_dtoa_r+0x8a4>
 8001cf2:	d083      	beq.n	8001bfc <_dtoa_r+0x7c2>
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	301c      	adds	r0, #28
 8001cf8:	e779      	b.n	8001bee <_dtoa_r+0x7b4>
 8001cfa:	f1b9 0f00 	cmp.w	r9, #0
 8001cfe:	dc35      	bgt.n	8001d6c <_dtoa_r+0x932>
 8001d00:	9b08      	ldr	r3, [sp, #32]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	dd32      	ble.n	8001d6c <_dtoa_r+0x932>
 8001d06:	f8cd 9010 	str.w	r9, [sp, #16]
 8001d0a:	9b04      	ldr	r3, [sp, #16]
 8001d0c:	b963      	cbnz	r3, 8001d28 <_dtoa_r+0x8ee>
 8001d0e:	4621      	mov	r1, r4
 8001d10:	2205      	movs	r2, #5
 8001d12:	4658      	mov	r0, fp
 8001d14:	f001 fa7a 	bl	800320c <__multadd>
 8001d18:	4601      	mov	r1, r0
 8001d1a:	4604      	mov	r4, r0
 8001d1c:	4640      	mov	r0, r8
 8001d1e:	f001 fc6a 	bl	80035f6 <__mcmp>
 8001d22:	2800      	cmp	r0, #0
 8001d24:	f73f adc7 	bgt.w	80018b6 <_dtoa_r+0x47c>
 8001d28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001d2a:	9d03      	ldr	r5, [sp, #12]
 8001d2c:	ea6f 0a03 	mvn.w	sl, r3
 8001d30:	2700      	movs	r7, #0
 8001d32:	4621      	mov	r1, r4
 8001d34:	4658      	mov	r0, fp
 8001d36:	f001 fa60 	bl	80031fa <_Bfree>
 8001d3a:	2e00      	cmp	r6, #0
 8001d3c:	f43f aeb0 	beq.w	8001aa0 <_dtoa_r+0x666>
 8001d40:	b12f      	cbz	r7, 8001d4e <_dtoa_r+0x914>
 8001d42:	42b7      	cmp	r7, r6
 8001d44:	d003      	beq.n	8001d4e <_dtoa_r+0x914>
 8001d46:	4639      	mov	r1, r7
 8001d48:	4658      	mov	r0, fp
 8001d4a:	f001 fa56 	bl	80031fa <_Bfree>
 8001d4e:	4631      	mov	r1, r6
 8001d50:	4658      	mov	r0, fp
 8001d52:	f001 fa52 	bl	80031fa <_Bfree>
 8001d56:	e6a3      	b.n	8001aa0 <_dtoa_r+0x666>
 8001d58:	2400      	movs	r4, #0
 8001d5a:	4626      	mov	r6, r4
 8001d5c:	e7e4      	b.n	8001d28 <_dtoa_r+0x8ee>
 8001d5e:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8001d62:	4626      	mov	r6, r4
 8001d64:	e5a7      	b.n	80018b6 <_dtoa_r+0x47c>
 8001d66:	bf00      	nop
 8001d68:	40240000 	.word	0x40240000
 8001d6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001d6e:	f8cd 9010 	str.w	r9, [sp, #16]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 80ed 	beq.w	8001f52 <_dtoa_r+0xb18>
 8001d78:	2d00      	cmp	r5, #0
 8001d7a:	dd05      	ble.n	8001d88 <_dtoa_r+0x94e>
 8001d7c:	4631      	mov	r1, r6
 8001d7e:	462a      	mov	r2, r5
 8001d80:	4658      	mov	r0, fp
 8001d82:	f001 fbe5 	bl	8003550 <__lshift>
 8001d86:	4606      	mov	r6, r0
 8001d88:	2f00      	cmp	r7, #0
 8001d8a:	d056      	beq.n	8001e3a <_dtoa_r+0xa00>
 8001d8c:	6871      	ldr	r1, [r6, #4]
 8001d8e:	4658      	mov	r0, fp
 8001d90:	f001 fa0e 	bl	80031b0 <_Balloc>
 8001d94:	6932      	ldr	r2, [r6, #16]
 8001d96:	3202      	adds	r2, #2
 8001d98:	4605      	mov	r5, r0
 8001d9a:	0092      	lsls	r2, r2, #2
 8001d9c:	f106 010c 	add.w	r1, r6, #12
 8001da0:	300c      	adds	r0, #12
 8001da2:	f002 fc6e 	bl	8004682 <memcpy>
 8001da6:	2201      	movs	r2, #1
 8001da8:	4629      	mov	r1, r5
 8001daa:	4658      	mov	r0, fp
 8001dac:	f001 fbd0 	bl	8003550 <__lshift>
 8001db0:	9b03      	ldr	r3, [sp, #12]
 8001db2:	f103 0901 	add.w	r9, r3, #1
 8001db6:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
 8001dba:	4413      	add	r3, r2
 8001dbc:	9309      	str	r3, [sp, #36]	; 0x24
 8001dbe:	9b00      	ldr	r3, [sp, #0]
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	4637      	mov	r7, r6
 8001dc6:	9307      	str	r3, [sp, #28]
 8001dc8:	4606      	mov	r6, r0
 8001dca:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8001dce:	4621      	mov	r1, r4
 8001dd0:	4640      	mov	r0, r8
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f7ff faa8 	bl	8001328 <quorem>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	3330      	adds	r3, #48	; 0x30
 8001ddc:	9004      	str	r0, [sp, #16]
 8001dde:	4639      	mov	r1, r7
 8001de0:	4640      	mov	r0, r8
 8001de2:	930a      	str	r3, [sp, #40]	; 0x28
 8001de4:	f001 fc07 	bl	80035f6 <__mcmp>
 8001de8:	4632      	mov	r2, r6
 8001dea:	9006      	str	r0, [sp, #24]
 8001dec:	4621      	mov	r1, r4
 8001dee:	4658      	mov	r0, fp
 8001df0:	f001 fc1b 	bl	800362a <__mdiff>
 8001df4:	68c2      	ldr	r2, [r0, #12]
 8001df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001df8:	4605      	mov	r5, r0
 8001dfa:	bb02      	cbnz	r2, 8001e3e <_dtoa_r+0xa04>
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	4640      	mov	r0, r8
 8001e00:	f001 fbf9 	bl	80035f6 <__mcmp>
 8001e04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e06:	4602      	mov	r2, r0
 8001e08:	4629      	mov	r1, r5
 8001e0a:	4658      	mov	r0, fp
 8001e0c:	920c      	str	r2, [sp, #48]	; 0x30
 8001e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8001e10:	f001 f9f3 	bl	80031fa <_Bfree>
 8001e14:	9b08      	ldr	r3, [sp, #32]
 8001e16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001e18:	ea43 0102 	orr.w	r1, r3, r2
 8001e1c:	9b07      	ldr	r3, [sp, #28]
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	464d      	mov	r5, r9
 8001e22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001e24:	d10d      	bne.n	8001e42 <_dtoa_r+0xa08>
 8001e26:	2b39      	cmp	r3, #57	; 0x39
 8001e28:	d027      	beq.n	8001e7a <_dtoa_r+0xa40>
 8001e2a:	9a06      	ldr	r2, [sp, #24]
 8001e2c:	2a00      	cmp	r2, #0
 8001e2e:	dd01      	ble.n	8001e34 <_dtoa_r+0x9fa>
 8001e30:	9b04      	ldr	r3, [sp, #16]
 8001e32:	3331      	adds	r3, #49	; 0x31
 8001e34:	9a00      	ldr	r2, [sp, #0]
 8001e36:	7013      	strb	r3, [r2, #0]
 8001e38:	e77b      	b.n	8001d32 <_dtoa_r+0x8f8>
 8001e3a:	4630      	mov	r0, r6
 8001e3c:	e7b8      	b.n	8001db0 <_dtoa_r+0x976>
 8001e3e:	2201      	movs	r2, #1
 8001e40:	e7e2      	b.n	8001e08 <_dtoa_r+0x9ce>
 8001e42:	9906      	ldr	r1, [sp, #24]
 8001e44:	2900      	cmp	r1, #0
 8001e46:	db04      	blt.n	8001e52 <_dtoa_r+0xa18>
 8001e48:	9808      	ldr	r0, [sp, #32]
 8001e4a:	4301      	orrs	r1, r0
 8001e4c:	9807      	ldr	r0, [sp, #28]
 8001e4e:	4301      	orrs	r1, r0
 8001e50:	d11e      	bne.n	8001e90 <_dtoa_r+0xa56>
 8001e52:	2a00      	cmp	r2, #0
 8001e54:	ddee      	ble.n	8001e34 <_dtoa_r+0x9fa>
 8001e56:	4641      	mov	r1, r8
 8001e58:	2201      	movs	r2, #1
 8001e5a:	4658      	mov	r0, fp
 8001e5c:	9306      	str	r3, [sp, #24]
 8001e5e:	f001 fb77 	bl	8003550 <__lshift>
 8001e62:	4621      	mov	r1, r4
 8001e64:	4680      	mov	r8, r0
 8001e66:	f001 fbc6 	bl	80035f6 <__mcmp>
 8001e6a:	2800      	cmp	r0, #0
 8001e6c:	9b06      	ldr	r3, [sp, #24]
 8001e6e:	dc02      	bgt.n	8001e76 <_dtoa_r+0xa3c>
 8001e70:	d1e0      	bne.n	8001e34 <_dtoa_r+0x9fa>
 8001e72:	07da      	lsls	r2, r3, #31
 8001e74:	d5de      	bpl.n	8001e34 <_dtoa_r+0x9fa>
 8001e76:	2b39      	cmp	r3, #57	; 0x39
 8001e78:	d1da      	bne.n	8001e30 <_dtoa_r+0x9f6>
 8001e7a:	9a00      	ldr	r2, [sp, #0]
 8001e7c:	2339      	movs	r3, #57	; 0x39
 8001e7e:	7013      	strb	r3, [r2, #0]
 8001e80:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8001e84:	2b39      	cmp	r3, #57	; 0x39
 8001e86:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8001e8a:	d047      	beq.n	8001f1c <_dtoa_r+0xae2>
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	e7d2      	b.n	8001e36 <_dtoa_r+0x9fc>
 8001e90:	2a00      	cmp	r2, #0
 8001e92:	dd03      	ble.n	8001e9c <_dtoa_r+0xa62>
 8001e94:	2b39      	cmp	r3, #57	; 0x39
 8001e96:	d0f0      	beq.n	8001e7a <_dtoa_r+0xa40>
 8001e98:	3301      	adds	r3, #1
 8001e9a:	e7cb      	b.n	8001e34 <_dtoa_r+0x9fa>
 8001e9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001e9e:	f809 3c01 	strb.w	r3, [r9, #-1]
 8001ea2:	4591      	cmp	r9, r2
 8001ea4:	d021      	beq.n	8001eea <_dtoa_r+0xab0>
 8001ea6:	4641      	mov	r1, r8
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	220a      	movs	r2, #10
 8001eac:	4658      	mov	r0, fp
 8001eae:	f001 f9ad 	bl	800320c <__multadd>
 8001eb2:	42b7      	cmp	r7, r6
 8001eb4:	4680      	mov	r8, r0
 8001eb6:	f04f 0300 	mov.w	r3, #0
 8001eba:	f04f 020a 	mov.w	r2, #10
 8001ebe:	4639      	mov	r1, r7
 8001ec0:	4658      	mov	r0, fp
 8001ec2:	d106      	bne.n	8001ed2 <_dtoa_r+0xa98>
 8001ec4:	f001 f9a2 	bl	800320c <__multadd>
 8001ec8:	4607      	mov	r7, r0
 8001eca:	4606      	mov	r6, r0
 8001ecc:	f109 0901 	add.w	r9, r9, #1
 8001ed0:	e77b      	b.n	8001dca <_dtoa_r+0x990>
 8001ed2:	f001 f99b 	bl	800320c <__multadd>
 8001ed6:	4631      	mov	r1, r6
 8001ed8:	4607      	mov	r7, r0
 8001eda:	2300      	movs	r3, #0
 8001edc:	220a      	movs	r2, #10
 8001ede:	4658      	mov	r0, fp
 8001ee0:	f001 f994 	bl	800320c <__multadd>
 8001ee4:	4606      	mov	r6, r0
 8001ee6:	e7f1      	b.n	8001ecc <_dtoa_r+0xa92>
 8001ee8:	2700      	movs	r7, #0
 8001eea:	4641      	mov	r1, r8
 8001eec:	2201      	movs	r2, #1
 8001eee:	4658      	mov	r0, fp
 8001ef0:	9300      	str	r3, [sp, #0]
 8001ef2:	f001 fb2d 	bl	8003550 <__lshift>
 8001ef6:	4621      	mov	r1, r4
 8001ef8:	4680      	mov	r8, r0
 8001efa:	f001 fb7c 	bl	80035f6 <__mcmp>
 8001efe:	2800      	cmp	r0, #0
 8001f00:	dcbe      	bgt.n	8001e80 <_dtoa_r+0xa46>
 8001f02:	d102      	bne.n	8001f0a <_dtoa_r+0xad0>
 8001f04:	9b00      	ldr	r3, [sp, #0]
 8001f06:	07db      	lsls	r3, r3, #31
 8001f08:	d4ba      	bmi.n	8001e80 <_dtoa_r+0xa46>
 8001f0a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8001f0e:	2b30      	cmp	r3, #48	; 0x30
 8001f10:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8001f14:	f47f af0d 	bne.w	8001d32 <_dtoa_r+0x8f8>
 8001f18:	4615      	mov	r5, r2
 8001f1a:	e7f6      	b.n	8001f0a <_dtoa_r+0xad0>
 8001f1c:	9b03      	ldr	r3, [sp, #12]
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d104      	bne.n	8001f2c <_dtoa_r+0xaf2>
 8001f22:	f10a 0a01 	add.w	sl, sl, #1
 8001f26:	2331      	movs	r3, #49	; 0x31
 8001f28:	9a03      	ldr	r2, [sp, #12]
 8001f2a:	e784      	b.n	8001e36 <_dtoa_r+0x9fc>
 8001f2c:	4615      	mov	r5, r2
 8001f2e:	e7a7      	b.n	8001e80 <_dtoa_r+0xa46>
 8001f30:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <_dtoa_r+0xb46>)
 8001f32:	f7ff bada 	b.w	80014ea <_dtoa_r+0xb0>
 8001f36:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f47f aabb 	bne.w	80014b4 <_dtoa_r+0x7a>
 8001f3e:	4b11      	ldr	r3, [pc, #68]	; (8001f84 <_dtoa_r+0xb4a>)
 8001f40:	f7ff bad3 	b.w	80014ea <_dtoa_r+0xb0>
 8001f44:	9b04      	ldr	r3, [sp, #16]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	dc03      	bgt.n	8001f52 <_dtoa_r+0xb18>
 8001f4a:	9b08      	ldr	r3, [sp, #32]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	f73f aedc 	bgt.w	8001d0a <_dtoa_r+0x8d0>
 8001f52:	9d03      	ldr	r5, [sp, #12]
 8001f54:	4621      	mov	r1, r4
 8001f56:	4640      	mov	r0, r8
 8001f58:	f7ff f9e6 	bl	8001328 <quorem>
 8001f5c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8001f60:	f805 3b01 	strb.w	r3, [r5], #1
 8001f64:	9a03      	ldr	r2, [sp, #12]
 8001f66:	9904      	ldr	r1, [sp, #16]
 8001f68:	1aaa      	subs	r2, r5, r2
 8001f6a:	4291      	cmp	r1, r2
 8001f6c:	ddbc      	ble.n	8001ee8 <_dtoa_r+0xaae>
 8001f6e:	4641      	mov	r1, r8
 8001f70:	2300      	movs	r3, #0
 8001f72:	220a      	movs	r2, #10
 8001f74:	4658      	mov	r0, fp
 8001f76:	f001 f949 	bl	800320c <__multadd>
 8001f7a:	4680      	mov	r8, r0
 8001f7c:	e7ea      	b.n	8001f54 <_dtoa_r+0xb1a>
 8001f7e:	bf00      	nop
 8001f80:	08007f32 	.word	0x08007f32
 8001f84:	08008026 	.word	0x08008026

08001f88 <__aeabi_drsub>:
 8001f88:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8001f8c:	e002      	b.n	8001f94 <__adddf3>
 8001f8e:	bf00      	nop

08001f90 <__aeabi_dsub>:
 8001f90:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08001f94 <__adddf3>:
 8001f94:	b530      	push	{r4, r5, lr}
 8001f96:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8001f9a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8001f9e:	ea94 0f05 	teq	r4, r5
 8001fa2:	bf08      	it	eq
 8001fa4:	ea90 0f02 	teqeq	r0, r2
 8001fa8:	bf1f      	itttt	ne
 8001faa:	ea54 0c00 	orrsne.w	ip, r4, r0
 8001fae:	ea55 0c02 	orrsne.w	ip, r5, r2
 8001fb2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8001fb6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8001fba:	f000 80e2 	beq.w	8002182 <__adddf3+0x1ee>
 8001fbe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8001fc2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8001fc6:	bfb8      	it	lt
 8001fc8:	426d      	neglt	r5, r5
 8001fca:	dd0c      	ble.n	8001fe6 <__adddf3+0x52>
 8001fcc:	442c      	add	r4, r5
 8001fce:	ea80 0202 	eor.w	r2, r0, r2
 8001fd2:	ea81 0303 	eor.w	r3, r1, r3
 8001fd6:	ea82 0000 	eor.w	r0, r2, r0
 8001fda:	ea83 0101 	eor.w	r1, r3, r1
 8001fde:	ea80 0202 	eor.w	r2, r0, r2
 8001fe2:	ea81 0303 	eor.w	r3, r1, r3
 8001fe6:	2d36      	cmp	r5, #54	; 0x36
 8001fe8:	bf88      	it	hi
 8001fea:	bd30      	pophi	{r4, r5, pc}
 8001fec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8001ff0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8001ff4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8001ff8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8001ffc:	d002      	beq.n	8002004 <__adddf3+0x70>
 8001ffe:	4240      	negs	r0, r0
 8002000:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002004:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002008:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800200c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002010:	d002      	beq.n	8002018 <__adddf3+0x84>
 8002012:	4252      	negs	r2, r2
 8002014:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002018:	ea94 0f05 	teq	r4, r5
 800201c:	f000 80a7 	beq.w	800216e <__adddf3+0x1da>
 8002020:	f1a4 0401 	sub.w	r4, r4, #1
 8002024:	f1d5 0e20 	rsbs	lr, r5, #32
 8002028:	db0d      	blt.n	8002046 <__adddf3+0xb2>
 800202a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800202e:	fa22 f205 	lsr.w	r2, r2, r5
 8002032:	1880      	adds	r0, r0, r2
 8002034:	f141 0100 	adc.w	r1, r1, #0
 8002038:	fa03 f20e 	lsl.w	r2, r3, lr
 800203c:	1880      	adds	r0, r0, r2
 800203e:	fa43 f305 	asr.w	r3, r3, r5
 8002042:	4159      	adcs	r1, r3
 8002044:	e00e      	b.n	8002064 <__adddf3+0xd0>
 8002046:	f1a5 0520 	sub.w	r5, r5, #32
 800204a:	f10e 0e20 	add.w	lr, lr, #32
 800204e:	2a01      	cmp	r2, #1
 8002050:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002054:	bf28      	it	cs
 8002056:	f04c 0c02 	orrcs.w	ip, ip, #2
 800205a:	fa43 f305 	asr.w	r3, r3, r5
 800205e:	18c0      	adds	r0, r0, r3
 8002060:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002064:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002068:	d507      	bpl.n	800207a <__adddf3+0xe6>
 800206a:	f04f 0e00 	mov.w	lr, #0
 800206e:	f1dc 0c00 	rsbs	ip, ip, #0
 8002072:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002076:	eb6e 0101 	sbc.w	r1, lr, r1
 800207a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800207e:	d31b      	bcc.n	80020b8 <__adddf3+0x124>
 8002080:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002084:	d30c      	bcc.n	80020a0 <__adddf3+0x10c>
 8002086:	0849      	lsrs	r1, r1, #1
 8002088:	ea5f 0030 	movs.w	r0, r0, rrx
 800208c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002090:	f104 0401 	add.w	r4, r4, #1
 8002094:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002098:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800209c:	f080 809a 	bcs.w	80021d4 <__adddf3+0x240>
 80020a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80020a4:	bf08      	it	eq
 80020a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80020aa:	f150 0000 	adcs.w	r0, r0, #0
 80020ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80020b2:	ea41 0105 	orr.w	r1, r1, r5
 80020b6:	bd30      	pop	{r4, r5, pc}
 80020b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80020bc:	4140      	adcs	r0, r0
 80020be:	eb41 0101 	adc.w	r1, r1, r1
 80020c2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80020c6:	f1a4 0401 	sub.w	r4, r4, #1
 80020ca:	d1e9      	bne.n	80020a0 <__adddf3+0x10c>
 80020cc:	f091 0f00 	teq	r1, #0
 80020d0:	bf04      	itt	eq
 80020d2:	4601      	moveq	r1, r0
 80020d4:	2000      	moveq	r0, #0
 80020d6:	fab1 f381 	clz	r3, r1
 80020da:	bf08      	it	eq
 80020dc:	3320      	addeq	r3, #32
 80020de:	f1a3 030b 	sub.w	r3, r3, #11
 80020e2:	f1b3 0220 	subs.w	r2, r3, #32
 80020e6:	da0c      	bge.n	8002102 <__adddf3+0x16e>
 80020e8:	320c      	adds	r2, #12
 80020ea:	dd08      	ble.n	80020fe <__adddf3+0x16a>
 80020ec:	f102 0c14 	add.w	ip, r2, #20
 80020f0:	f1c2 020c 	rsb	r2, r2, #12
 80020f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80020f8:	fa21 f102 	lsr.w	r1, r1, r2
 80020fc:	e00c      	b.n	8002118 <__adddf3+0x184>
 80020fe:	f102 0214 	add.w	r2, r2, #20
 8002102:	bfd8      	it	le
 8002104:	f1c2 0c20 	rsble	ip, r2, #32
 8002108:	fa01 f102 	lsl.w	r1, r1, r2
 800210c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002110:	bfdc      	itt	le
 8002112:	ea41 010c 	orrle.w	r1, r1, ip
 8002116:	4090      	lslle	r0, r2
 8002118:	1ae4      	subs	r4, r4, r3
 800211a:	bfa2      	ittt	ge
 800211c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002120:	4329      	orrge	r1, r5
 8002122:	bd30      	popge	{r4, r5, pc}
 8002124:	ea6f 0404 	mvn.w	r4, r4
 8002128:	3c1f      	subs	r4, #31
 800212a:	da1c      	bge.n	8002166 <__adddf3+0x1d2>
 800212c:	340c      	adds	r4, #12
 800212e:	dc0e      	bgt.n	800214e <__adddf3+0x1ba>
 8002130:	f104 0414 	add.w	r4, r4, #20
 8002134:	f1c4 0220 	rsb	r2, r4, #32
 8002138:	fa20 f004 	lsr.w	r0, r0, r4
 800213c:	fa01 f302 	lsl.w	r3, r1, r2
 8002140:	ea40 0003 	orr.w	r0, r0, r3
 8002144:	fa21 f304 	lsr.w	r3, r1, r4
 8002148:	ea45 0103 	orr.w	r1, r5, r3
 800214c:	bd30      	pop	{r4, r5, pc}
 800214e:	f1c4 040c 	rsb	r4, r4, #12
 8002152:	f1c4 0220 	rsb	r2, r4, #32
 8002156:	fa20 f002 	lsr.w	r0, r0, r2
 800215a:	fa01 f304 	lsl.w	r3, r1, r4
 800215e:	ea40 0003 	orr.w	r0, r0, r3
 8002162:	4629      	mov	r1, r5
 8002164:	bd30      	pop	{r4, r5, pc}
 8002166:	fa21 f004 	lsr.w	r0, r1, r4
 800216a:	4629      	mov	r1, r5
 800216c:	bd30      	pop	{r4, r5, pc}
 800216e:	f094 0f00 	teq	r4, #0
 8002172:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002176:	bf06      	itte	eq
 8002178:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800217c:	3401      	addeq	r4, #1
 800217e:	3d01      	subne	r5, #1
 8002180:	e74e      	b.n	8002020 <__adddf3+0x8c>
 8002182:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002186:	bf18      	it	ne
 8002188:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800218c:	d029      	beq.n	80021e2 <__adddf3+0x24e>
 800218e:	ea94 0f05 	teq	r4, r5
 8002192:	bf08      	it	eq
 8002194:	ea90 0f02 	teqeq	r0, r2
 8002198:	d005      	beq.n	80021a6 <__adddf3+0x212>
 800219a:	ea54 0c00 	orrs.w	ip, r4, r0
 800219e:	bf04      	itt	eq
 80021a0:	4619      	moveq	r1, r3
 80021a2:	4610      	moveq	r0, r2
 80021a4:	bd30      	pop	{r4, r5, pc}
 80021a6:	ea91 0f03 	teq	r1, r3
 80021aa:	bf1e      	ittt	ne
 80021ac:	2100      	movne	r1, #0
 80021ae:	2000      	movne	r0, #0
 80021b0:	bd30      	popne	{r4, r5, pc}
 80021b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80021b6:	d105      	bne.n	80021c4 <__adddf3+0x230>
 80021b8:	0040      	lsls	r0, r0, #1
 80021ba:	4149      	adcs	r1, r1
 80021bc:	bf28      	it	cs
 80021be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80021c2:	bd30      	pop	{r4, r5, pc}
 80021c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80021c8:	bf3c      	itt	cc
 80021ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80021ce:	bd30      	popcc	{r4, r5, pc}
 80021d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80021d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80021d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80021dc:	f04f 0000 	mov.w	r0, #0
 80021e0:	bd30      	pop	{r4, r5, pc}
 80021e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80021e6:	bf1a      	itte	ne
 80021e8:	4619      	movne	r1, r3
 80021ea:	4610      	movne	r0, r2
 80021ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80021f0:	bf1c      	itt	ne
 80021f2:	460b      	movne	r3, r1
 80021f4:	4602      	movne	r2, r0
 80021f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80021fa:	bf06      	itte	eq
 80021fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002200:	ea91 0f03 	teqeq	r1, r3
 8002204:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002208:	bd30      	pop	{r4, r5, pc}
 800220a:	bf00      	nop

0800220c <__aeabi_ui2d>:
 800220c:	f090 0f00 	teq	r0, #0
 8002210:	bf04      	itt	eq
 8002212:	2100      	moveq	r1, #0
 8002214:	4770      	bxeq	lr
 8002216:	b530      	push	{r4, r5, lr}
 8002218:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800221c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002220:	f04f 0500 	mov.w	r5, #0
 8002224:	f04f 0100 	mov.w	r1, #0
 8002228:	e750      	b.n	80020cc <__adddf3+0x138>
 800222a:	bf00      	nop

0800222c <__aeabi_i2d>:
 800222c:	f090 0f00 	teq	r0, #0
 8002230:	bf04      	itt	eq
 8002232:	2100      	moveq	r1, #0
 8002234:	4770      	bxeq	lr
 8002236:	b530      	push	{r4, r5, lr}
 8002238:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800223c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002240:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002244:	bf48      	it	mi
 8002246:	4240      	negmi	r0, r0
 8002248:	f04f 0100 	mov.w	r1, #0
 800224c:	e73e      	b.n	80020cc <__adddf3+0x138>
 800224e:	bf00      	nop

08002250 <__aeabi_f2d>:
 8002250:	0042      	lsls	r2, r0, #1
 8002252:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002256:	ea4f 0131 	mov.w	r1, r1, rrx
 800225a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800225e:	bf1f      	itttt	ne
 8002260:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002264:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002268:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800226c:	4770      	bxne	lr
 800226e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002272:	bf08      	it	eq
 8002274:	4770      	bxeq	lr
 8002276:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800227a:	bf04      	itt	eq
 800227c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002280:	4770      	bxeq	lr
 8002282:	b530      	push	{r4, r5, lr}
 8002284:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002288:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800228c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002290:	e71c      	b.n	80020cc <__adddf3+0x138>
 8002292:	bf00      	nop

08002294 <__aeabi_ul2d>:
 8002294:	ea50 0201 	orrs.w	r2, r0, r1
 8002298:	bf08      	it	eq
 800229a:	4770      	bxeq	lr
 800229c:	b530      	push	{r4, r5, lr}
 800229e:	f04f 0500 	mov.w	r5, #0
 80022a2:	e00a      	b.n	80022ba <__aeabi_l2d+0x16>

080022a4 <__aeabi_l2d>:
 80022a4:	ea50 0201 	orrs.w	r2, r0, r1
 80022a8:	bf08      	it	eq
 80022aa:	4770      	bxeq	lr
 80022ac:	b530      	push	{r4, r5, lr}
 80022ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80022b2:	d502      	bpl.n	80022ba <__aeabi_l2d+0x16>
 80022b4:	4240      	negs	r0, r0
 80022b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80022ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80022be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80022c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80022c6:	f43f aed8 	beq.w	800207a <__adddf3+0xe6>
 80022ca:	f04f 0203 	mov.w	r2, #3
 80022ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80022d2:	bf18      	it	ne
 80022d4:	3203      	addne	r2, #3
 80022d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80022da:	bf18      	it	ne
 80022dc:	3203      	addne	r2, #3
 80022de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80022e2:	f1c2 0320 	rsb	r3, r2, #32
 80022e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80022ea:	fa20 f002 	lsr.w	r0, r0, r2
 80022ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80022f2:	ea40 000e 	orr.w	r0, r0, lr
 80022f6:	fa21 f102 	lsr.w	r1, r1, r2
 80022fa:	4414      	add	r4, r2
 80022fc:	e6bd      	b.n	800207a <__adddf3+0xe6>
 80022fe:	bf00      	nop

08002300 <__aeabi_dmul>:
 8002300:	b570      	push	{r4, r5, r6, lr}
 8002302:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002306:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800230a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800230e:	bf1d      	ittte	ne
 8002310:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002314:	ea94 0f0c 	teqne	r4, ip
 8002318:	ea95 0f0c 	teqne	r5, ip
 800231c:	f000 f8de 	bleq	80024dc <__aeabi_dmul+0x1dc>
 8002320:	442c      	add	r4, r5
 8002322:	ea81 0603 	eor.w	r6, r1, r3
 8002326:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800232a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800232e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002332:	bf18      	it	ne
 8002334:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002338:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800233c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002340:	d038      	beq.n	80023b4 <__aeabi_dmul+0xb4>
 8002342:	fba0 ce02 	umull	ip, lr, r0, r2
 8002346:	f04f 0500 	mov.w	r5, #0
 800234a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800234e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002352:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002356:	f04f 0600 	mov.w	r6, #0
 800235a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800235e:	f09c 0f00 	teq	ip, #0
 8002362:	bf18      	it	ne
 8002364:	f04e 0e01 	orrne.w	lr, lr, #1
 8002368:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800236c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002370:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002374:	d204      	bcs.n	8002380 <__aeabi_dmul+0x80>
 8002376:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800237a:	416d      	adcs	r5, r5
 800237c:	eb46 0606 	adc.w	r6, r6, r6
 8002380:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002384:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002388:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800238c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002390:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002394:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002398:	bf88      	it	hi
 800239a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800239e:	d81e      	bhi.n	80023de <__aeabi_dmul+0xde>
 80023a0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80023a4:	bf08      	it	eq
 80023a6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80023aa:	f150 0000 	adcs.w	r0, r0, #0
 80023ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80023b2:	bd70      	pop	{r4, r5, r6, pc}
 80023b4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80023b8:	ea46 0101 	orr.w	r1, r6, r1
 80023bc:	ea40 0002 	orr.w	r0, r0, r2
 80023c0:	ea81 0103 	eor.w	r1, r1, r3
 80023c4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80023c8:	bfc2      	ittt	gt
 80023ca:	ebd4 050c 	rsbsgt	r5, r4, ip
 80023ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80023d2:	bd70      	popgt	{r4, r5, r6, pc}
 80023d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80023d8:	f04f 0e00 	mov.w	lr, #0
 80023dc:	3c01      	subs	r4, #1
 80023de:	f300 80ab 	bgt.w	8002538 <__aeabi_dmul+0x238>
 80023e2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80023e6:	bfde      	ittt	le
 80023e8:	2000      	movle	r0, #0
 80023ea:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80023ee:	bd70      	pople	{r4, r5, r6, pc}
 80023f0:	f1c4 0400 	rsb	r4, r4, #0
 80023f4:	3c20      	subs	r4, #32
 80023f6:	da35      	bge.n	8002464 <__aeabi_dmul+0x164>
 80023f8:	340c      	adds	r4, #12
 80023fa:	dc1b      	bgt.n	8002434 <__aeabi_dmul+0x134>
 80023fc:	f104 0414 	add.w	r4, r4, #20
 8002400:	f1c4 0520 	rsb	r5, r4, #32
 8002404:	fa00 f305 	lsl.w	r3, r0, r5
 8002408:	fa20 f004 	lsr.w	r0, r0, r4
 800240c:	fa01 f205 	lsl.w	r2, r1, r5
 8002410:	ea40 0002 	orr.w	r0, r0, r2
 8002414:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002418:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800241c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002420:	fa21 f604 	lsr.w	r6, r1, r4
 8002424:	eb42 0106 	adc.w	r1, r2, r6
 8002428:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800242c:	bf08      	it	eq
 800242e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002432:	bd70      	pop	{r4, r5, r6, pc}
 8002434:	f1c4 040c 	rsb	r4, r4, #12
 8002438:	f1c4 0520 	rsb	r5, r4, #32
 800243c:	fa00 f304 	lsl.w	r3, r0, r4
 8002440:	fa20 f005 	lsr.w	r0, r0, r5
 8002444:	fa01 f204 	lsl.w	r2, r1, r4
 8002448:	ea40 0002 	orr.w	r0, r0, r2
 800244c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002450:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002454:	f141 0100 	adc.w	r1, r1, #0
 8002458:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800245c:	bf08      	it	eq
 800245e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	f1c4 0520 	rsb	r5, r4, #32
 8002468:	fa00 f205 	lsl.w	r2, r0, r5
 800246c:	ea4e 0e02 	orr.w	lr, lr, r2
 8002470:	fa20 f304 	lsr.w	r3, r0, r4
 8002474:	fa01 f205 	lsl.w	r2, r1, r5
 8002478:	ea43 0302 	orr.w	r3, r3, r2
 800247c:	fa21 f004 	lsr.w	r0, r1, r4
 8002480:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002484:	fa21 f204 	lsr.w	r2, r1, r4
 8002488:	ea20 0002 	bic.w	r0, r0, r2
 800248c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002490:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002494:	bf08      	it	eq
 8002496:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800249a:	bd70      	pop	{r4, r5, r6, pc}
 800249c:	f094 0f00 	teq	r4, #0
 80024a0:	d10f      	bne.n	80024c2 <__aeabi_dmul+0x1c2>
 80024a2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80024a6:	0040      	lsls	r0, r0, #1
 80024a8:	eb41 0101 	adc.w	r1, r1, r1
 80024ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80024b0:	bf08      	it	eq
 80024b2:	3c01      	subeq	r4, #1
 80024b4:	d0f7      	beq.n	80024a6 <__aeabi_dmul+0x1a6>
 80024b6:	ea41 0106 	orr.w	r1, r1, r6
 80024ba:	f095 0f00 	teq	r5, #0
 80024be:	bf18      	it	ne
 80024c0:	4770      	bxne	lr
 80024c2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80024c6:	0052      	lsls	r2, r2, #1
 80024c8:	eb43 0303 	adc.w	r3, r3, r3
 80024cc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80024d0:	bf08      	it	eq
 80024d2:	3d01      	subeq	r5, #1
 80024d4:	d0f7      	beq.n	80024c6 <__aeabi_dmul+0x1c6>
 80024d6:	ea43 0306 	orr.w	r3, r3, r6
 80024da:	4770      	bx	lr
 80024dc:	ea94 0f0c 	teq	r4, ip
 80024e0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80024e4:	bf18      	it	ne
 80024e6:	ea95 0f0c 	teqne	r5, ip
 80024ea:	d00c      	beq.n	8002506 <__aeabi_dmul+0x206>
 80024ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80024f0:	bf18      	it	ne
 80024f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80024f6:	d1d1      	bne.n	800249c <__aeabi_dmul+0x19c>
 80024f8:	ea81 0103 	eor.w	r1, r1, r3
 80024fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002500:	f04f 0000 	mov.w	r0, #0
 8002504:	bd70      	pop	{r4, r5, r6, pc}
 8002506:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800250a:	bf06      	itte	eq
 800250c:	4610      	moveq	r0, r2
 800250e:	4619      	moveq	r1, r3
 8002510:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002514:	d019      	beq.n	800254a <__aeabi_dmul+0x24a>
 8002516:	ea94 0f0c 	teq	r4, ip
 800251a:	d102      	bne.n	8002522 <__aeabi_dmul+0x222>
 800251c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002520:	d113      	bne.n	800254a <__aeabi_dmul+0x24a>
 8002522:	ea95 0f0c 	teq	r5, ip
 8002526:	d105      	bne.n	8002534 <__aeabi_dmul+0x234>
 8002528:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800252c:	bf1c      	itt	ne
 800252e:	4610      	movne	r0, r2
 8002530:	4619      	movne	r1, r3
 8002532:	d10a      	bne.n	800254a <__aeabi_dmul+0x24a>
 8002534:	ea81 0103 	eor.w	r1, r1, r3
 8002538:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800253c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002544:	f04f 0000 	mov.w	r0, #0
 8002548:	bd70      	pop	{r4, r5, r6, pc}
 800254a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800254e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002552:	bd70      	pop	{r4, r5, r6, pc}

08002554 <__aeabi_ddiv>:
 8002554:	b570      	push	{r4, r5, r6, lr}
 8002556:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800255a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800255e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002562:	bf1d      	ittte	ne
 8002564:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002568:	ea94 0f0c 	teqne	r4, ip
 800256c:	ea95 0f0c 	teqne	r5, ip
 8002570:	f000 f8a7 	bleq	80026c2 <__aeabi_ddiv+0x16e>
 8002574:	eba4 0405 	sub.w	r4, r4, r5
 8002578:	ea81 0e03 	eor.w	lr, r1, r3
 800257c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002580:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002584:	f000 8088 	beq.w	8002698 <__aeabi_ddiv+0x144>
 8002588:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800258c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002590:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002594:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002598:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800259c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80025a0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80025a4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80025a8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80025ac:	429d      	cmp	r5, r3
 80025ae:	bf08      	it	eq
 80025b0:	4296      	cmpeq	r6, r2
 80025b2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80025b6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80025ba:	d202      	bcs.n	80025c2 <__aeabi_ddiv+0x6e>
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	ea4f 0232 	mov.w	r2, r2, rrx
 80025c2:	1ab6      	subs	r6, r6, r2
 80025c4:	eb65 0503 	sbc.w	r5, r5, r3
 80025c8:	085b      	lsrs	r3, r3, #1
 80025ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80025ce:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80025d2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80025d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80025da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80025de:	bf22      	ittt	cs
 80025e0:	1ab6      	subcs	r6, r6, r2
 80025e2:	4675      	movcs	r5, lr
 80025e4:	ea40 000c 	orrcs.w	r0, r0, ip
 80025e8:	085b      	lsrs	r3, r3, #1
 80025ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80025ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80025f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80025f6:	bf22      	ittt	cs
 80025f8:	1ab6      	subcs	r6, r6, r2
 80025fa:	4675      	movcs	r5, lr
 80025fc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	ea4f 0232 	mov.w	r2, r2, rrx
 8002606:	ebb6 0e02 	subs.w	lr, r6, r2
 800260a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800260e:	bf22      	ittt	cs
 8002610:	1ab6      	subcs	r6, r6, r2
 8002612:	4675      	movcs	r5, lr
 8002614:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	ea4f 0232 	mov.w	r2, r2, rrx
 800261e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002622:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002626:	bf22      	ittt	cs
 8002628:	1ab6      	subcs	r6, r6, r2
 800262a:	4675      	movcs	r5, lr
 800262c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002630:	ea55 0e06 	orrs.w	lr, r5, r6
 8002634:	d018      	beq.n	8002668 <__aeabi_ddiv+0x114>
 8002636:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800263a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800263e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002642:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002646:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800264a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800264e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002652:	d1c0      	bne.n	80025d6 <__aeabi_ddiv+0x82>
 8002654:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002658:	d10b      	bne.n	8002672 <__aeabi_ddiv+0x11e>
 800265a:	ea41 0100 	orr.w	r1, r1, r0
 800265e:	f04f 0000 	mov.w	r0, #0
 8002662:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002666:	e7b6      	b.n	80025d6 <__aeabi_ddiv+0x82>
 8002668:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800266c:	bf04      	itt	eq
 800266e:	4301      	orreq	r1, r0
 8002670:	2000      	moveq	r0, #0
 8002672:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002676:	bf88      	it	hi
 8002678:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800267c:	f63f aeaf 	bhi.w	80023de <__aeabi_dmul+0xde>
 8002680:	ebb5 0c03 	subs.w	ip, r5, r3
 8002684:	bf04      	itt	eq
 8002686:	ebb6 0c02 	subseq.w	ip, r6, r2
 800268a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800268e:	f150 0000 	adcs.w	r0, r0, #0
 8002692:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002696:	bd70      	pop	{r4, r5, r6, pc}
 8002698:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800269c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80026a0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80026a4:	bfc2      	ittt	gt
 80026a6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80026aa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80026ae:	bd70      	popgt	{r4, r5, r6, pc}
 80026b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80026b4:	f04f 0e00 	mov.w	lr, #0
 80026b8:	3c01      	subs	r4, #1
 80026ba:	e690      	b.n	80023de <__aeabi_dmul+0xde>
 80026bc:	ea45 0e06 	orr.w	lr, r5, r6
 80026c0:	e68d      	b.n	80023de <__aeabi_dmul+0xde>
 80026c2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80026c6:	ea94 0f0c 	teq	r4, ip
 80026ca:	bf08      	it	eq
 80026cc:	ea95 0f0c 	teqeq	r5, ip
 80026d0:	f43f af3b 	beq.w	800254a <__aeabi_dmul+0x24a>
 80026d4:	ea94 0f0c 	teq	r4, ip
 80026d8:	d10a      	bne.n	80026f0 <__aeabi_ddiv+0x19c>
 80026da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80026de:	f47f af34 	bne.w	800254a <__aeabi_dmul+0x24a>
 80026e2:	ea95 0f0c 	teq	r5, ip
 80026e6:	f47f af25 	bne.w	8002534 <__aeabi_dmul+0x234>
 80026ea:	4610      	mov	r0, r2
 80026ec:	4619      	mov	r1, r3
 80026ee:	e72c      	b.n	800254a <__aeabi_dmul+0x24a>
 80026f0:	ea95 0f0c 	teq	r5, ip
 80026f4:	d106      	bne.n	8002704 <__aeabi_ddiv+0x1b0>
 80026f6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80026fa:	f43f aefd 	beq.w	80024f8 <__aeabi_dmul+0x1f8>
 80026fe:	4610      	mov	r0, r2
 8002700:	4619      	mov	r1, r3
 8002702:	e722      	b.n	800254a <__aeabi_dmul+0x24a>
 8002704:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002708:	bf18      	it	ne
 800270a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800270e:	f47f aec5 	bne.w	800249c <__aeabi_dmul+0x19c>
 8002712:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002716:	f47f af0d 	bne.w	8002534 <__aeabi_dmul+0x234>
 800271a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800271e:	f47f aeeb 	bne.w	80024f8 <__aeabi_dmul+0x1f8>
 8002722:	e712      	b.n	800254a <__aeabi_dmul+0x24a>

08002724 <__gedf2>:
 8002724:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8002728:	e006      	b.n	8002738 <__cmpdf2+0x4>
 800272a:	bf00      	nop

0800272c <__ledf2>:
 800272c:	f04f 0c01 	mov.w	ip, #1
 8002730:	e002      	b.n	8002738 <__cmpdf2+0x4>
 8002732:	bf00      	nop

08002734 <__cmpdf2>:
 8002734:	f04f 0c01 	mov.w	ip, #1
 8002738:	f84d cd04 	str.w	ip, [sp, #-4]!
 800273c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002740:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002744:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002748:	bf18      	it	ne
 800274a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800274e:	d01b      	beq.n	8002788 <__cmpdf2+0x54>
 8002750:	b001      	add	sp, #4
 8002752:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002756:	bf0c      	ite	eq
 8002758:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800275c:	ea91 0f03 	teqne	r1, r3
 8002760:	bf02      	ittt	eq
 8002762:	ea90 0f02 	teqeq	r0, r2
 8002766:	2000      	moveq	r0, #0
 8002768:	4770      	bxeq	lr
 800276a:	f110 0f00 	cmn.w	r0, #0
 800276e:	ea91 0f03 	teq	r1, r3
 8002772:	bf58      	it	pl
 8002774:	4299      	cmppl	r1, r3
 8002776:	bf08      	it	eq
 8002778:	4290      	cmpeq	r0, r2
 800277a:	bf2c      	ite	cs
 800277c:	17d8      	asrcs	r0, r3, #31
 800277e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002782:	f040 0001 	orr.w	r0, r0, #1
 8002786:	4770      	bx	lr
 8002788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800278c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002790:	d102      	bne.n	8002798 <__cmpdf2+0x64>
 8002792:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002796:	d107      	bne.n	80027a8 <__cmpdf2+0x74>
 8002798:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800279c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80027a0:	d1d6      	bne.n	8002750 <__cmpdf2+0x1c>
 80027a2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80027a6:	d0d3      	beq.n	8002750 <__cmpdf2+0x1c>
 80027a8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <__aeabi_cdrcmple>:
 80027b0:	4684      	mov	ip, r0
 80027b2:	4610      	mov	r0, r2
 80027b4:	4662      	mov	r2, ip
 80027b6:	468c      	mov	ip, r1
 80027b8:	4619      	mov	r1, r3
 80027ba:	4663      	mov	r3, ip
 80027bc:	e000      	b.n	80027c0 <__aeabi_cdcmpeq>
 80027be:	bf00      	nop

080027c0 <__aeabi_cdcmpeq>:
 80027c0:	b501      	push	{r0, lr}
 80027c2:	f7ff ffb7 	bl	8002734 <__cmpdf2>
 80027c6:	2800      	cmp	r0, #0
 80027c8:	bf48      	it	mi
 80027ca:	f110 0f00 	cmnmi.w	r0, #0
 80027ce:	bd01      	pop	{r0, pc}

080027d0 <__aeabi_dcmpeq>:
 80027d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027d4:	f7ff fff4 	bl	80027c0 <__aeabi_cdcmpeq>
 80027d8:	bf0c      	ite	eq
 80027da:	2001      	moveq	r0, #1
 80027dc:	2000      	movne	r0, #0
 80027de:	f85d fb08 	ldr.w	pc, [sp], #8
 80027e2:	bf00      	nop

080027e4 <__aeabi_dcmplt>:
 80027e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027e8:	f7ff ffea 	bl	80027c0 <__aeabi_cdcmpeq>
 80027ec:	bf34      	ite	cc
 80027ee:	2001      	movcc	r0, #1
 80027f0:	2000      	movcs	r0, #0
 80027f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80027f6:	bf00      	nop

080027f8 <__aeabi_dcmple>:
 80027f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80027fc:	f7ff ffe0 	bl	80027c0 <__aeabi_cdcmpeq>
 8002800:	bf94      	ite	ls
 8002802:	2001      	movls	r0, #1
 8002804:	2000      	movhi	r0, #0
 8002806:	f85d fb08 	ldr.w	pc, [sp], #8
 800280a:	bf00      	nop

0800280c <__aeabi_dcmpge>:
 800280c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002810:	f7ff ffce 	bl	80027b0 <__aeabi_cdrcmple>
 8002814:	bf94      	ite	ls
 8002816:	2001      	movls	r0, #1
 8002818:	2000      	movhi	r0, #0
 800281a:	f85d fb08 	ldr.w	pc, [sp], #8
 800281e:	bf00      	nop

08002820 <__aeabi_dcmpgt>:
 8002820:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002824:	f7ff ffc4 	bl	80027b0 <__aeabi_cdrcmple>
 8002828:	bf34      	ite	cc
 800282a:	2001      	movcc	r0, #1
 800282c:	2000      	movcs	r0, #0
 800282e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002832:	bf00      	nop

08002834 <__aeabi_d2f>:
 8002834:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002838:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800283c:	bf24      	itt	cs
 800283e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8002842:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002846:	d90d      	bls.n	8002864 <__aeabi_d2f+0x30>
 8002848:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800284c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002850:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002854:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002858:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800285c:	bf08      	it	eq
 800285e:	f020 0001 	biceq.w	r0, r0, #1
 8002862:	4770      	bx	lr
 8002864:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002868:	d121      	bne.n	80028ae <__aeabi_d2f+0x7a>
 800286a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800286e:	bfbc      	itt	lt
 8002870:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002874:	4770      	bxlt	lr
 8002876:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800287a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800287e:	f1c2 0218 	rsb	r2, r2, #24
 8002882:	f1c2 0c20 	rsb	ip, r2, #32
 8002886:	fa10 f30c 	lsls.w	r3, r0, ip
 800288a:	fa20 f002 	lsr.w	r0, r0, r2
 800288e:	bf18      	it	ne
 8002890:	f040 0001 	orrne.w	r0, r0, #1
 8002894:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002898:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800289c:	fa03 fc0c 	lsl.w	ip, r3, ip
 80028a0:	ea40 000c 	orr.w	r0, r0, ip
 80028a4:	fa23 f302 	lsr.w	r3, r3, r2
 80028a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80028ac:	e7cc      	b.n	8002848 <__aeabi_d2f+0x14>
 80028ae:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80028b2:	d107      	bne.n	80028c4 <__aeabi_d2f+0x90>
 80028b4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80028b8:	bf1e      	ittt	ne
 80028ba:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80028be:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80028c2:	4770      	bxne	lr
 80028c4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80028c8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80028cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop

080028d4 <__cvt>:
 80028d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028d8:	ec55 4b10 	vmov	r4, r5, d0
 80028dc:	2d00      	cmp	r5, #0
 80028de:	460e      	mov	r6, r1
 80028e0:	4691      	mov	r9, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	da03      	bge.n	80028f6 <__cvt+0x22>
 80028ee:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 80028f2:	461d      	mov	r5, r3
 80028f4:	222d      	movs	r2, #45	; 0x2d
 80028f6:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80028f8:	700a      	strb	r2, [r1, #0]
 80028fa:	f027 0720 	bic.w	r7, r7, #32
 80028fe:	2f46      	cmp	r7, #70	; 0x46
 8002900:	d004      	beq.n	800290c <__cvt+0x38>
 8002902:	2f45      	cmp	r7, #69	; 0x45
 8002904:	d100      	bne.n	8002908 <__cvt+0x34>
 8002906:	3601      	adds	r6, #1
 8002908:	2102      	movs	r1, #2
 800290a:	e000      	b.n	800290e <__cvt+0x3a>
 800290c:	2103      	movs	r1, #3
 800290e:	ab03      	add	r3, sp, #12
 8002910:	9301      	str	r3, [sp, #4]
 8002912:	ab02      	add	r3, sp, #8
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	4632      	mov	r2, r6
 8002918:	4653      	mov	r3, sl
 800291a:	ec45 4b10 	vmov	d0, r4, r5
 800291e:	f7fe fd8c 	bl	800143a <_dtoa_r>
 8002922:	2f47      	cmp	r7, #71	; 0x47
 8002924:	4680      	mov	r8, r0
 8002926:	d102      	bne.n	800292e <__cvt+0x5a>
 8002928:	f019 0f01 	tst.w	r9, #1
 800292c:	d022      	beq.n	8002974 <__cvt+0xa0>
 800292e:	2f46      	cmp	r7, #70	; 0x46
 8002930:	eb08 0906 	add.w	r9, r8, r6
 8002934:	d111      	bne.n	800295a <__cvt+0x86>
 8002936:	f898 3000 	ldrb.w	r3, [r8]
 800293a:	2b30      	cmp	r3, #48	; 0x30
 800293c:	d10a      	bne.n	8002954 <__cvt+0x80>
 800293e:	2200      	movs	r2, #0
 8002940:	2300      	movs	r3, #0
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7ff ff43 	bl	80027d0 <__aeabi_dcmpeq>
 800294a:	b918      	cbnz	r0, 8002954 <__cvt+0x80>
 800294c:	f1c6 0601 	rsb	r6, r6, #1
 8002950:	f8ca 6000 	str.w	r6, [sl]
 8002954:	f8da 3000 	ldr.w	r3, [sl]
 8002958:	4499      	add	r9, r3
 800295a:	2200      	movs	r2, #0
 800295c:	2300      	movs	r3, #0
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7ff ff35 	bl	80027d0 <__aeabi_dcmpeq>
 8002966:	b108      	cbz	r0, 800296c <__cvt+0x98>
 8002968:	f8cd 900c 	str.w	r9, [sp, #12]
 800296c:	2230      	movs	r2, #48	; 0x30
 800296e:	9b03      	ldr	r3, [sp, #12]
 8002970:	454b      	cmp	r3, r9
 8002972:	d308      	bcc.n	8002986 <__cvt+0xb2>
 8002974:	9b03      	ldr	r3, [sp, #12]
 8002976:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8002978:	eba3 0308 	sub.w	r3, r3, r8
 800297c:	4640      	mov	r0, r8
 800297e:	6013      	str	r3, [r2, #0]
 8002980:	b004      	add	sp, #16
 8002982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002986:	1c59      	adds	r1, r3, #1
 8002988:	9103      	str	r1, [sp, #12]
 800298a:	701a      	strb	r2, [r3, #0]
 800298c:	e7ef      	b.n	800296e <__cvt+0x9a>

0800298e <__exponent>:
 800298e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002990:	2900      	cmp	r1, #0
 8002992:	bfba      	itte	lt
 8002994:	4249      	neglt	r1, r1
 8002996:	232d      	movlt	r3, #45	; 0x2d
 8002998:	232b      	movge	r3, #43	; 0x2b
 800299a:	2909      	cmp	r1, #9
 800299c:	7002      	strb	r2, [r0, #0]
 800299e:	7043      	strb	r3, [r0, #1]
 80029a0:	dd21      	ble.n	80029e6 <__exponent+0x58>
 80029a2:	f10d 0307 	add.w	r3, sp, #7
 80029a6:	461f      	mov	r7, r3
 80029a8:	260a      	movs	r6, #10
 80029aa:	fb91 f2f6 	sdiv	r2, r1, r6
 80029ae:	fb06 1412 	mls	r4, r6, r2, r1
 80029b2:	3430      	adds	r4, #48	; 0x30
 80029b4:	2963      	cmp	r1, #99	; 0x63
 80029b6:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80029ba:	f803 4c01 	strb.w	r4, [r3, #-1]
 80029be:	dc0a      	bgt.n	80029d6 <__exponent+0x48>
 80029c0:	3230      	adds	r2, #48	; 0x30
 80029c2:	f805 2c01 	strb.w	r2, [r5, #-1]
 80029c6:	3b02      	subs	r3, #2
 80029c8:	1c82      	adds	r2, r0, #2
 80029ca:	42bb      	cmp	r3, r7
 80029cc:	4614      	mov	r4, r2
 80029ce:	d305      	bcc.n	80029dc <__exponent+0x4e>
 80029d0:	1a20      	subs	r0, r4, r0
 80029d2:	b003      	add	sp, #12
 80029d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80029d6:	462b      	mov	r3, r5
 80029d8:	4611      	mov	r1, r2
 80029da:	e7e6      	b.n	80029aa <__exponent+0x1c>
 80029dc:	f813 1b01 	ldrb.w	r1, [r3], #1
 80029e0:	f802 1b01 	strb.w	r1, [r2], #1
 80029e4:	e7f1      	b.n	80029ca <__exponent+0x3c>
 80029e6:	2330      	movs	r3, #48	; 0x30
 80029e8:	4419      	add	r1, r3
 80029ea:	7083      	strb	r3, [r0, #2]
 80029ec:	1d04      	adds	r4, r0, #4
 80029ee:	70c1      	strb	r1, [r0, #3]
 80029f0:	e7ee      	b.n	80029d0 <__exponent+0x42>

080029f2 <_printf_float>:
 80029f2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029f6:	b08d      	sub	sp, #52	; 0x34
 80029f8:	460c      	mov	r4, r1
 80029fa:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80029fe:	4616      	mov	r6, r2
 8002a00:	461f      	mov	r7, r3
 8002a02:	4605      	mov	r5, r0
 8002a04:	f000 fbcc 	bl	80031a0 <_localeconv_r>
 8002a08:	6803      	ldr	r3, [r0, #0]
 8002a0a:	9306      	str	r3, [sp, #24]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f001 fe58 	bl	80046c2 <strlen>
 8002a12:	2300      	movs	r3, #0
 8002a14:	930a      	str	r3, [sp, #40]	; 0x28
 8002a16:	f8d8 3000 	ldr.w	r3, [r8]
 8002a1a:	9007      	str	r0, [sp, #28]
 8002a1c:	3307      	adds	r3, #7
 8002a1e:	f023 0307 	bic.w	r3, r3, #7
 8002a22:	f103 0208 	add.w	r2, r3, #8
 8002a26:	f894 a018 	ldrb.w	sl, [r4, #24]
 8002a2a:	f8d4 b000 	ldr.w	fp, [r4]
 8002a2e:	f8c8 2000 	str.w	r2, [r8]
 8002a32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a36:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8002a3a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8002a3e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002a42:	e9dd 8304 	ldrd	r8, r3, [sp, #16]
 8002a46:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 8002a4a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a4e:	4ba7      	ldr	r3, [pc, #668]	; (8002cec <_printf_float+0x2fa>)
 8002a50:	4640      	mov	r0, r8
 8002a52:	4649      	mov	r1, r9
 8002a54:	f001 fdce 	bl	80045f4 <__aeabi_dcmpun>
 8002a58:	bb70      	cbnz	r0, 8002ab8 <_printf_float+0xc6>
 8002a5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a5e:	4ba3      	ldr	r3, [pc, #652]	; (8002cec <_printf_float+0x2fa>)
 8002a60:	4640      	mov	r0, r8
 8002a62:	4649      	mov	r1, r9
 8002a64:	f7ff fec8 	bl	80027f8 <__aeabi_dcmple>
 8002a68:	bb30      	cbnz	r0, 8002ab8 <_printf_float+0xc6>
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002a72:	f7ff feb7 	bl	80027e4 <__aeabi_dcmplt>
 8002a76:	b110      	cbz	r0, 8002a7e <_printf_float+0x8c>
 8002a78:	232d      	movs	r3, #45	; 0x2d
 8002a7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a7e:	4a9c      	ldr	r2, [pc, #624]	; (8002cf0 <_printf_float+0x2fe>)
 8002a80:	4b9c      	ldr	r3, [pc, #624]	; (8002cf4 <_printf_float+0x302>)
 8002a82:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8002a86:	bf94      	ite	ls
 8002a88:	4690      	movls	r8, r2
 8002a8a:	4698      	movhi	r8, r3
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	f02b 0204 	bic.w	r2, fp, #4
 8002a92:	6123      	str	r3, [r4, #16]
 8002a94:	6022      	str	r2, [r4, #0]
 8002a96:	f04f 0900 	mov.w	r9, #0
 8002a9a:	9700      	str	r7, [sp, #0]
 8002a9c:	4633      	mov	r3, r6
 8002a9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8002aa0:	4621      	mov	r1, r4
 8002aa2:	4628      	mov	r0, r5
 8002aa4:	f000 f9d0 	bl	8002e48 <_printf_common>
 8002aa8:	3001      	adds	r0, #1
 8002aaa:	f040 808c 	bne.w	8002bc6 <_printf_float+0x1d4>
 8002aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002ab2:	b00d      	add	sp, #52	; 0x34
 8002ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f001 fd98 	bl	80045f4 <__aeabi_dcmpun>
 8002ac4:	b140      	cbz	r0, 8002ad8 <_printf_float+0xe6>
 8002ac6:	9b05      	ldr	r3, [sp, #20]
 8002ac8:	4a8b      	ldr	r2, [pc, #556]	; (8002cf8 <_printf_float+0x306>)
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	bfbc      	itt	lt
 8002ace:	232d      	movlt	r3, #45	; 0x2d
 8002ad0:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8002ad4:	4b89      	ldr	r3, [pc, #548]	; (8002cfc <_printf_float+0x30a>)
 8002ad6:	e7d4      	b.n	8002a82 <_printf_float+0x90>
 8002ad8:	6863      	ldr	r3, [r4, #4]
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	f00a 09df 	and.w	r9, sl, #223	; 0xdf
 8002ae0:	d13e      	bne.n	8002b60 <_printf_float+0x16e>
 8002ae2:	2306      	movs	r3, #6
 8002ae4:	6063      	str	r3, [r4, #4]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9303      	str	r3, [sp, #12]
 8002aea:	ab0a      	add	r3, sp, #40	; 0x28
 8002aec:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8002af0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8002af4:	ab09      	add	r3, sp, #36	; 0x24
 8002af6:	9300      	str	r3, [sp, #0]
 8002af8:	6861      	ldr	r1, [r4, #4]
 8002afa:	6022      	str	r2, [r4, #0]
 8002afc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8002b00:	ed9d 0b04 	vldr	d0, [sp, #16]
 8002b04:	4628      	mov	r0, r5
 8002b06:	f7ff fee5 	bl	80028d4 <__cvt>
 8002b0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002b0e:	4680      	mov	r8, r0
 8002b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8002b12:	d108      	bne.n	8002b26 <_printf_float+0x134>
 8002b14:	1cc8      	adds	r0, r1, #3
 8002b16:	db02      	blt.n	8002b1e <_printf_float+0x12c>
 8002b18:	6863      	ldr	r3, [r4, #4]
 8002b1a:	4299      	cmp	r1, r3
 8002b1c:	dd41      	ble.n	8002ba2 <_printf_float+0x1b0>
 8002b1e:	f1aa 0a02 	sub.w	sl, sl, #2
 8002b22:	fa5f fa8a 	uxtb.w	sl, sl
 8002b26:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002b2a:	d820      	bhi.n	8002b6e <_printf_float+0x17c>
 8002b2c:	3901      	subs	r1, #1
 8002b2e:	4652      	mov	r2, sl
 8002b30:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8002b34:	9109      	str	r1, [sp, #36]	; 0x24
 8002b36:	f7ff ff2a 	bl	800298e <__exponent>
 8002b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002b3c:	1813      	adds	r3, r2, r0
 8002b3e:	2a01      	cmp	r2, #1
 8002b40:	4681      	mov	r9, r0
 8002b42:	6123      	str	r3, [r4, #16]
 8002b44:	dc02      	bgt.n	8002b4c <_printf_float+0x15a>
 8002b46:	6822      	ldr	r2, [r4, #0]
 8002b48:	07d2      	lsls	r2, r2, #31
 8002b4a:	d501      	bpl.n	8002b50 <_printf_float+0x15e>
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	6123      	str	r3, [r4, #16]
 8002b50:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0a0      	beq.n	8002a9a <_printf_float+0xa8>
 8002b58:	232d      	movs	r3, #45	; 0x2d
 8002b5a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002b5e:	e79c      	b.n	8002a9a <_printf_float+0xa8>
 8002b60:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8002b64:	d1bf      	bne.n	8002ae6 <_printf_float+0xf4>
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d1bd      	bne.n	8002ae6 <_printf_float+0xf4>
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e7ba      	b.n	8002ae4 <_printf_float+0xf2>
 8002b6e:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8002b72:	d118      	bne.n	8002ba6 <_printf_float+0x1b4>
 8002b74:	2900      	cmp	r1, #0
 8002b76:	6863      	ldr	r3, [r4, #4]
 8002b78:	dd0b      	ble.n	8002b92 <_printf_float+0x1a0>
 8002b7a:	6121      	str	r1, [r4, #16]
 8002b7c:	b913      	cbnz	r3, 8002b84 <_printf_float+0x192>
 8002b7e:	6822      	ldr	r2, [r4, #0]
 8002b80:	07d0      	lsls	r0, r2, #31
 8002b82:	d502      	bpl.n	8002b8a <_printf_float+0x198>
 8002b84:	3301      	adds	r3, #1
 8002b86:	440b      	add	r3, r1
 8002b88:	6123      	str	r3, [r4, #16]
 8002b8a:	65a1      	str	r1, [r4, #88]	; 0x58
 8002b8c:	f04f 0900 	mov.w	r9, #0
 8002b90:	e7de      	b.n	8002b50 <_printf_float+0x15e>
 8002b92:	b913      	cbnz	r3, 8002b9a <_printf_float+0x1a8>
 8002b94:	6822      	ldr	r2, [r4, #0]
 8002b96:	07d2      	lsls	r2, r2, #31
 8002b98:	d501      	bpl.n	8002b9e <_printf_float+0x1ac>
 8002b9a:	3302      	adds	r3, #2
 8002b9c:	e7f4      	b.n	8002b88 <_printf_float+0x196>
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e7f2      	b.n	8002b88 <_printf_float+0x196>
 8002ba2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8002ba6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ba8:	4299      	cmp	r1, r3
 8002baa:	db05      	blt.n	8002bb8 <_printf_float+0x1c6>
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	6121      	str	r1, [r4, #16]
 8002bb0:	07d8      	lsls	r0, r3, #31
 8002bb2:	d5ea      	bpl.n	8002b8a <_printf_float+0x198>
 8002bb4:	1c4b      	adds	r3, r1, #1
 8002bb6:	e7e7      	b.n	8002b88 <_printf_float+0x196>
 8002bb8:	2900      	cmp	r1, #0
 8002bba:	bfd4      	ite	le
 8002bbc:	f1c1 0202 	rsble	r2, r1, #2
 8002bc0:	2201      	movgt	r2, #1
 8002bc2:	4413      	add	r3, r2
 8002bc4:	e7e0      	b.n	8002b88 <_printf_float+0x196>
 8002bc6:	6823      	ldr	r3, [r4, #0]
 8002bc8:	055a      	lsls	r2, r3, #21
 8002bca:	d407      	bmi.n	8002bdc <_printf_float+0x1ea>
 8002bcc:	6923      	ldr	r3, [r4, #16]
 8002bce:	4642      	mov	r2, r8
 8002bd0:	4631      	mov	r1, r6
 8002bd2:	4628      	mov	r0, r5
 8002bd4:	47b8      	blx	r7
 8002bd6:	3001      	adds	r0, #1
 8002bd8:	d12b      	bne.n	8002c32 <_printf_float+0x240>
 8002bda:	e768      	b.n	8002aae <_printf_float+0xbc>
 8002bdc:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8002be0:	f240 80dd 	bls.w	8002d9e <_printf_float+0x3ac>
 8002be4:	2200      	movs	r2, #0
 8002be6:	2300      	movs	r3, #0
 8002be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002bec:	f7ff fdf0 	bl	80027d0 <__aeabi_dcmpeq>
 8002bf0:	2800      	cmp	r0, #0
 8002bf2:	d033      	beq.n	8002c5c <_printf_float+0x26a>
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	4a42      	ldr	r2, [pc, #264]	; (8002d00 <_printf_float+0x30e>)
 8002bf8:	4631      	mov	r1, r6
 8002bfa:	4628      	mov	r0, r5
 8002bfc:	47b8      	blx	r7
 8002bfe:	3001      	adds	r0, #1
 8002c00:	f43f af55 	beq.w	8002aae <_printf_float+0xbc>
 8002c04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	db02      	blt.n	8002c12 <_printf_float+0x220>
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	07d8      	lsls	r0, r3, #31
 8002c10:	d50f      	bpl.n	8002c32 <_printf_float+0x240>
 8002c12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002c16:	4631      	mov	r1, r6
 8002c18:	4628      	mov	r0, r5
 8002c1a:	47b8      	blx	r7
 8002c1c:	3001      	adds	r0, #1
 8002c1e:	f43f af46 	beq.w	8002aae <_printf_float+0xbc>
 8002c22:	f04f 0800 	mov.w	r8, #0
 8002c26:	f104 091a 	add.w	r9, r4, #26
 8002c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002c2c:	3b01      	subs	r3, #1
 8002c2e:	4543      	cmp	r3, r8
 8002c30:	dc09      	bgt.n	8002c46 <_printf_float+0x254>
 8002c32:	6823      	ldr	r3, [r4, #0]
 8002c34:	079b      	lsls	r3, r3, #30
 8002c36:	f100 8102 	bmi.w	8002e3e <_printf_float+0x44c>
 8002c3a:	68e0      	ldr	r0, [r4, #12]
 8002c3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002c3e:	4298      	cmp	r0, r3
 8002c40:	bfb8      	it	lt
 8002c42:	4618      	movlt	r0, r3
 8002c44:	e735      	b.n	8002ab2 <_printf_float+0xc0>
 8002c46:	2301      	movs	r3, #1
 8002c48:	464a      	mov	r2, r9
 8002c4a:	4631      	mov	r1, r6
 8002c4c:	4628      	mov	r0, r5
 8002c4e:	47b8      	blx	r7
 8002c50:	3001      	adds	r0, #1
 8002c52:	f43f af2c 	beq.w	8002aae <_printf_float+0xbc>
 8002c56:	f108 0801 	add.w	r8, r8, #1
 8002c5a:	e7e6      	b.n	8002c2a <_printf_float+0x238>
 8002c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	dc2b      	bgt.n	8002cba <_printf_float+0x2c8>
 8002c62:	2301      	movs	r3, #1
 8002c64:	4a26      	ldr	r2, [pc, #152]	; (8002d00 <_printf_float+0x30e>)
 8002c66:	4631      	mov	r1, r6
 8002c68:	4628      	mov	r0, r5
 8002c6a:	47b8      	blx	r7
 8002c6c:	3001      	adds	r0, #1
 8002c6e:	f43f af1e 	beq.w	8002aae <_printf_float+0xbc>
 8002c72:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002c76:	4313      	orrs	r3, r2
 8002c78:	d102      	bne.n	8002c80 <_printf_float+0x28e>
 8002c7a:	6823      	ldr	r3, [r4, #0]
 8002c7c:	07d9      	lsls	r1, r3, #31
 8002c7e:	d5d8      	bpl.n	8002c32 <_printf_float+0x240>
 8002c80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002c84:	4631      	mov	r1, r6
 8002c86:	4628      	mov	r0, r5
 8002c88:	47b8      	blx	r7
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	f43f af0f 	beq.w	8002aae <_printf_float+0xbc>
 8002c90:	f04f 0900 	mov.w	r9, #0
 8002c94:	f104 0a1a 	add.w	sl, r4, #26
 8002c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002c9a:	425b      	negs	r3, r3
 8002c9c:	454b      	cmp	r3, r9
 8002c9e:	dc01      	bgt.n	8002ca4 <_printf_float+0x2b2>
 8002ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002ca2:	e794      	b.n	8002bce <_printf_float+0x1dc>
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	4652      	mov	r2, sl
 8002ca8:	4631      	mov	r1, r6
 8002caa:	4628      	mov	r0, r5
 8002cac:	47b8      	blx	r7
 8002cae:	3001      	adds	r0, #1
 8002cb0:	f43f aefd 	beq.w	8002aae <_printf_float+0xbc>
 8002cb4:	f109 0901 	add.w	r9, r9, #1
 8002cb8:	e7ee      	b.n	8002c98 <_printf_float+0x2a6>
 8002cba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002cbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	bfa8      	it	ge
 8002cc2:	461a      	movge	r2, r3
 8002cc4:	2a00      	cmp	r2, #0
 8002cc6:	4691      	mov	r9, r2
 8002cc8:	dd07      	ble.n	8002cda <_printf_float+0x2e8>
 8002cca:	4613      	mov	r3, r2
 8002ccc:	4631      	mov	r1, r6
 8002cce:	4642      	mov	r2, r8
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	47b8      	blx	r7
 8002cd4:	3001      	adds	r0, #1
 8002cd6:	f43f aeea 	beq.w	8002aae <_printf_float+0xbc>
 8002cda:	f104 031a 	add.w	r3, r4, #26
 8002cde:	f04f 0b00 	mov.w	fp, #0
 8002ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002ce6:	9304      	str	r3, [sp, #16]
 8002ce8:	e016      	b.n	8002d18 <_printf_float+0x326>
 8002cea:	bf00      	nop
 8002cec:	7fefffff 	.word	0x7fefffff
 8002cf0:	08007ff0 	.word	0x08007ff0
 8002cf4:	08007ff4 	.word	0x08007ff4
 8002cf8:	08007ff8 	.word	0x08007ff8
 8002cfc:	08007ffc 	.word	0x08007ffc
 8002d00:	08007f32 	.word	0x08007f32
 8002d04:	2301      	movs	r3, #1
 8002d06:	9a04      	ldr	r2, [sp, #16]
 8002d08:	4631      	mov	r1, r6
 8002d0a:	4628      	mov	r0, r5
 8002d0c:	47b8      	blx	r7
 8002d0e:	3001      	adds	r0, #1
 8002d10:	f43f aecd 	beq.w	8002aae <_printf_float+0xbc>
 8002d14:	f10b 0b01 	add.w	fp, fp, #1
 8002d18:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8002d1c:	ebaa 0309 	sub.w	r3, sl, r9
 8002d20:	455b      	cmp	r3, fp
 8002d22:	dcef      	bgt.n	8002d04 <_printf_float+0x312>
 8002d24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	db1b      	blt.n	8002d64 <_printf_float+0x372>
 8002d2c:	6823      	ldr	r3, [r4, #0]
 8002d2e:	07da      	lsls	r2, r3, #31
 8002d30:	d418      	bmi.n	8002d64 <_printf_float+0x372>
 8002d32:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d36:	4592      	cmp	sl, r2
 8002d38:	db1c      	blt.n	8002d74 <_printf_float+0x382>
 8002d3a:	eba3 090a 	sub.w	r9, r3, sl
 8002d3e:	f1b9 0f00 	cmp.w	r9, #0
 8002d42:	dd08      	ble.n	8002d56 <_printf_float+0x364>
 8002d44:	464b      	mov	r3, r9
 8002d46:	eb08 020a 	add.w	r2, r8, sl
 8002d4a:	4631      	mov	r1, r6
 8002d4c:	4628      	mov	r0, r5
 8002d4e:	47b8      	blx	r7
 8002d50:	3001      	adds	r0, #1
 8002d52:	f43f aeac 	beq.w	8002aae <_printf_float+0xbc>
 8002d56:	f04f 0800 	mov.w	r8, #0
 8002d5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8002d5e:	f104 0a1a 	add.w	sl, r4, #26
 8002d62:	e014      	b.n	8002d8e <_printf_float+0x39c>
 8002d64:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002d68:	4631      	mov	r1, r6
 8002d6a:	4628      	mov	r0, r5
 8002d6c:	47b8      	blx	r7
 8002d6e:	3001      	adds	r0, #1
 8002d70:	d1df      	bne.n	8002d32 <_printf_float+0x340>
 8002d72:	e69c      	b.n	8002aae <_printf_float+0xbc>
 8002d74:	eba3 0902 	sub.w	r9, r3, r2
 8002d78:	e7e1      	b.n	8002d3e <_printf_float+0x34c>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	4652      	mov	r2, sl
 8002d7e:	4631      	mov	r1, r6
 8002d80:	4628      	mov	r0, r5
 8002d82:	47b8      	blx	r7
 8002d84:	3001      	adds	r0, #1
 8002d86:	f43f ae92 	beq.w	8002aae <_printf_float+0xbc>
 8002d8a:	f108 0801 	add.w	r8, r8, #1
 8002d8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	eba3 0309 	sub.w	r3, r3, r9
 8002d98:	4543      	cmp	r3, r8
 8002d9a:	dcee      	bgt.n	8002d7a <_printf_float+0x388>
 8002d9c:	e749      	b.n	8002c32 <_printf_float+0x240>
 8002d9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002da0:	2a01      	cmp	r2, #1
 8002da2:	dc01      	bgt.n	8002da8 <_printf_float+0x3b6>
 8002da4:	07db      	lsls	r3, r3, #31
 8002da6:	d537      	bpl.n	8002e18 <_printf_float+0x426>
 8002da8:	2301      	movs	r3, #1
 8002daa:	4642      	mov	r2, r8
 8002dac:	4631      	mov	r1, r6
 8002dae:	4628      	mov	r0, r5
 8002db0:	47b8      	blx	r7
 8002db2:	3001      	adds	r0, #1
 8002db4:	f43f ae7b 	beq.w	8002aae <_printf_float+0xbc>
 8002db8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8002dbc:	4631      	mov	r1, r6
 8002dbe:	4628      	mov	r0, r5
 8002dc0:	47b8      	blx	r7
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	f43f ae73 	beq.w	8002aae <_printf_float+0xbc>
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2300      	movs	r3, #0
 8002dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8002dd0:	f7ff fcfe 	bl	80027d0 <__aeabi_dcmpeq>
 8002dd4:	b9d8      	cbnz	r0, 8002e0e <_printf_float+0x41c>
 8002dd6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002dd8:	f108 0201 	add.w	r2, r8, #1
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	4631      	mov	r1, r6
 8002de0:	4628      	mov	r0, r5
 8002de2:	47b8      	blx	r7
 8002de4:	3001      	adds	r0, #1
 8002de6:	d10e      	bne.n	8002e06 <_printf_float+0x414>
 8002de8:	e661      	b.n	8002aae <_printf_float+0xbc>
 8002dea:	2301      	movs	r3, #1
 8002dec:	4652      	mov	r2, sl
 8002dee:	4631      	mov	r1, r6
 8002df0:	4628      	mov	r0, r5
 8002df2:	47b8      	blx	r7
 8002df4:	3001      	adds	r0, #1
 8002df6:	f43f ae5a 	beq.w	8002aae <_printf_float+0xbc>
 8002dfa:	f108 0801 	add.w	r8, r8, #1
 8002dfe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002e00:	3b01      	subs	r3, #1
 8002e02:	4543      	cmp	r3, r8
 8002e04:	dcf1      	bgt.n	8002dea <_printf_float+0x3f8>
 8002e06:	464b      	mov	r3, r9
 8002e08:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8002e0c:	e6e0      	b.n	8002bd0 <_printf_float+0x1de>
 8002e0e:	f04f 0800 	mov.w	r8, #0
 8002e12:	f104 0a1a 	add.w	sl, r4, #26
 8002e16:	e7f2      	b.n	8002dfe <_printf_float+0x40c>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	4642      	mov	r2, r8
 8002e1c:	e7df      	b.n	8002dde <_printf_float+0x3ec>
 8002e1e:	2301      	movs	r3, #1
 8002e20:	464a      	mov	r2, r9
 8002e22:	4631      	mov	r1, r6
 8002e24:	4628      	mov	r0, r5
 8002e26:	47b8      	blx	r7
 8002e28:	3001      	adds	r0, #1
 8002e2a:	f43f ae40 	beq.w	8002aae <_printf_float+0xbc>
 8002e2e:	f108 0801 	add.w	r8, r8, #1
 8002e32:	68e3      	ldr	r3, [r4, #12]
 8002e34:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	4543      	cmp	r3, r8
 8002e3a:	dcf0      	bgt.n	8002e1e <_printf_float+0x42c>
 8002e3c:	e6fd      	b.n	8002c3a <_printf_float+0x248>
 8002e3e:	f04f 0800 	mov.w	r8, #0
 8002e42:	f104 0919 	add.w	r9, r4, #25
 8002e46:	e7f4      	b.n	8002e32 <_printf_float+0x440>

08002e48 <_printf_common>:
 8002e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e4c:	4691      	mov	r9, r2
 8002e4e:	461f      	mov	r7, r3
 8002e50:	688a      	ldr	r2, [r1, #8]
 8002e52:	690b      	ldr	r3, [r1, #16]
 8002e54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	bfb8      	it	lt
 8002e5c:	4613      	movlt	r3, r2
 8002e5e:	f8c9 3000 	str.w	r3, [r9]
 8002e62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e66:	4606      	mov	r6, r0
 8002e68:	460c      	mov	r4, r1
 8002e6a:	b112      	cbz	r2, 8002e72 <_printf_common+0x2a>
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	f8c9 3000 	str.w	r3, [r9]
 8002e72:	6823      	ldr	r3, [r4, #0]
 8002e74:	0699      	lsls	r1, r3, #26
 8002e76:	bf42      	ittt	mi
 8002e78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002e7c:	3302      	addmi	r3, #2
 8002e7e:	f8c9 3000 	strmi.w	r3, [r9]
 8002e82:	6825      	ldr	r5, [r4, #0]
 8002e84:	f015 0506 	ands.w	r5, r5, #6
 8002e88:	d107      	bne.n	8002e9a <_printf_common+0x52>
 8002e8a:	f104 0a19 	add.w	sl, r4, #25
 8002e8e:	68e3      	ldr	r3, [r4, #12]
 8002e90:	f8d9 2000 	ldr.w	r2, [r9]
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	42ab      	cmp	r3, r5
 8002e98:	dc28      	bgt.n	8002eec <_printf_common+0xa4>
 8002e9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002e9e:	6822      	ldr	r2, [r4, #0]
 8002ea0:	3300      	adds	r3, #0
 8002ea2:	bf18      	it	ne
 8002ea4:	2301      	movne	r3, #1
 8002ea6:	0692      	lsls	r2, r2, #26
 8002ea8:	d42d      	bmi.n	8002f06 <_printf_common+0xbe>
 8002eaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002eae:	4639      	mov	r1, r7
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	47c0      	blx	r8
 8002eb4:	3001      	adds	r0, #1
 8002eb6:	d020      	beq.n	8002efa <_printf_common+0xb2>
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	68e5      	ldr	r5, [r4, #12]
 8002ebc:	f8d9 2000 	ldr.w	r2, [r9]
 8002ec0:	f003 0306 	and.w	r3, r3, #6
 8002ec4:	2b04      	cmp	r3, #4
 8002ec6:	bf08      	it	eq
 8002ec8:	1aad      	subeq	r5, r5, r2
 8002eca:	68a3      	ldr	r3, [r4, #8]
 8002ecc:	6922      	ldr	r2, [r4, #16]
 8002ece:	bf0c      	ite	eq
 8002ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ed4:	2500      	movne	r5, #0
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	bfc4      	itt	gt
 8002eda:	1a9b      	subgt	r3, r3, r2
 8002edc:	18ed      	addgt	r5, r5, r3
 8002ede:	f04f 0900 	mov.w	r9, #0
 8002ee2:	341a      	adds	r4, #26
 8002ee4:	454d      	cmp	r5, r9
 8002ee6:	d11a      	bne.n	8002f1e <_printf_common+0xd6>
 8002ee8:	2000      	movs	r0, #0
 8002eea:	e008      	b.n	8002efe <_printf_common+0xb6>
 8002eec:	2301      	movs	r3, #1
 8002eee:	4652      	mov	r2, sl
 8002ef0:	4639      	mov	r1, r7
 8002ef2:	4630      	mov	r0, r6
 8002ef4:	47c0      	blx	r8
 8002ef6:	3001      	adds	r0, #1
 8002ef8:	d103      	bne.n	8002f02 <_printf_common+0xba>
 8002efa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f02:	3501      	adds	r5, #1
 8002f04:	e7c3      	b.n	8002e8e <_printf_common+0x46>
 8002f06:	18e1      	adds	r1, r4, r3
 8002f08:	1c5a      	adds	r2, r3, #1
 8002f0a:	2030      	movs	r0, #48	; 0x30
 8002f0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f10:	4422      	add	r2, r4
 8002f12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	e7c5      	b.n	8002eaa <_printf_common+0x62>
 8002f1e:	2301      	movs	r3, #1
 8002f20:	4622      	mov	r2, r4
 8002f22:	4639      	mov	r1, r7
 8002f24:	4630      	mov	r0, r6
 8002f26:	47c0      	blx	r8
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d0e6      	beq.n	8002efa <_printf_common+0xb2>
 8002f2c:	f109 0901 	add.w	r9, r9, #1
 8002f30:	e7d8      	b.n	8002ee4 <_printf_common+0x9c>

08002f32 <_printf_i>:
 8002f32:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f36:	4606      	mov	r6, r0
 8002f38:	460c      	mov	r4, r1
 8002f3a:	f101 0043 	add.w	r0, r1, #67	; 0x43
 8002f3e:	7e09      	ldrb	r1, [r1, #24]
 8002f40:	b085      	sub	sp, #20
 8002f42:	296e      	cmp	r1, #110	; 0x6e
 8002f44:	4698      	mov	r8, r3
 8002f46:	4617      	mov	r7, r2
 8002f48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002f4a:	f000 80ba 	beq.w	80030c2 <_printf_i+0x190>
 8002f4e:	d824      	bhi.n	8002f9a <_printf_i+0x68>
 8002f50:	2963      	cmp	r1, #99	; 0x63
 8002f52:	d039      	beq.n	8002fc8 <_printf_i+0x96>
 8002f54:	d80a      	bhi.n	8002f6c <_printf_i+0x3a>
 8002f56:	2900      	cmp	r1, #0
 8002f58:	f000 80c3 	beq.w	80030e2 <_printf_i+0x1b0>
 8002f5c:	2958      	cmp	r1, #88	; 0x58
 8002f5e:	f000 8091 	beq.w	8003084 <_printf_i+0x152>
 8002f62:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f66:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002f6a:	e035      	b.n	8002fd8 <_printf_i+0xa6>
 8002f6c:	2964      	cmp	r1, #100	; 0x64
 8002f6e:	d001      	beq.n	8002f74 <_printf_i+0x42>
 8002f70:	2969      	cmp	r1, #105	; 0x69
 8002f72:	d1f6      	bne.n	8002f62 <_printf_i+0x30>
 8002f74:	6825      	ldr	r5, [r4, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	f015 0f80 	tst.w	r5, #128	; 0x80
 8002f7c:	f102 0104 	add.w	r1, r2, #4
 8002f80:	d02c      	beq.n	8002fdc <_printf_i+0xaa>
 8002f82:	6812      	ldr	r2, [r2, #0]
 8002f84:	6019      	str	r1, [r3, #0]
 8002f86:	2a00      	cmp	r2, #0
 8002f88:	da03      	bge.n	8002f92 <_printf_i+0x60>
 8002f8a:	232d      	movs	r3, #45	; 0x2d
 8002f8c:	4252      	negs	r2, r2
 8002f8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f92:	f8df c1c0 	ldr.w	ip, [pc, #448]	; 8003154 <_printf_i+0x222>
 8002f96:	230a      	movs	r3, #10
 8002f98:	e03f      	b.n	800301a <_printf_i+0xe8>
 8002f9a:	2973      	cmp	r1, #115	; 0x73
 8002f9c:	f000 80a5 	beq.w	80030ea <_printf_i+0x1b8>
 8002fa0:	d808      	bhi.n	8002fb4 <_printf_i+0x82>
 8002fa2:	296f      	cmp	r1, #111	; 0x6f
 8002fa4:	d021      	beq.n	8002fea <_printf_i+0xb8>
 8002fa6:	2970      	cmp	r1, #112	; 0x70
 8002fa8:	d1db      	bne.n	8002f62 <_printf_i+0x30>
 8002faa:	6822      	ldr	r2, [r4, #0]
 8002fac:	f042 0220 	orr.w	r2, r2, #32
 8002fb0:	6022      	str	r2, [r4, #0]
 8002fb2:	e003      	b.n	8002fbc <_printf_i+0x8a>
 8002fb4:	2975      	cmp	r1, #117	; 0x75
 8002fb6:	d018      	beq.n	8002fea <_printf_i+0xb8>
 8002fb8:	2978      	cmp	r1, #120	; 0x78
 8002fba:	d1d2      	bne.n	8002f62 <_printf_i+0x30>
 8002fbc:	2278      	movs	r2, #120	; 0x78
 8002fbe:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002fc2:	f8df c194 	ldr.w	ip, [pc, #404]	; 8003158 <_printf_i+0x226>
 8002fc6:	e061      	b.n	800308c <_printf_i+0x15a>
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	1d11      	adds	r1, r2, #4
 8002fcc:	6019      	str	r1, [r3, #0]
 8002fce:	6813      	ldr	r3, [r2, #0]
 8002fd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fd4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e093      	b.n	8003104 <_printf_i+0x1d2>
 8002fdc:	6812      	ldr	r2, [r2, #0]
 8002fde:	6019      	str	r1, [r3, #0]
 8002fe0:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002fe4:	bf18      	it	ne
 8002fe6:	b212      	sxthne	r2, r2
 8002fe8:	e7cd      	b.n	8002f86 <_printf_i+0x54>
 8002fea:	f8d4 c000 	ldr.w	ip, [r4]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	f01c 0f80 	tst.w	ip, #128	; 0x80
 8002ff4:	f102 0504 	add.w	r5, r2, #4
 8002ff8:	601d      	str	r5, [r3, #0]
 8002ffa:	d001      	beq.n	8003000 <_printf_i+0xce>
 8002ffc:	6812      	ldr	r2, [r2, #0]
 8002ffe:	e003      	b.n	8003008 <_printf_i+0xd6>
 8003000:	f01c 0f40 	tst.w	ip, #64	; 0x40
 8003004:	d0fa      	beq.n	8002ffc <_printf_i+0xca>
 8003006:	8812      	ldrh	r2, [r2, #0]
 8003008:	f8df c148 	ldr.w	ip, [pc, #328]	; 8003154 <_printf_i+0x222>
 800300c:	296f      	cmp	r1, #111	; 0x6f
 800300e:	bf0c      	ite	eq
 8003010:	2308      	moveq	r3, #8
 8003012:	230a      	movne	r3, #10
 8003014:	2100      	movs	r1, #0
 8003016:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800301a:	6865      	ldr	r5, [r4, #4]
 800301c:	60a5      	str	r5, [r4, #8]
 800301e:	2d00      	cmp	r5, #0
 8003020:	bfa2      	ittt	ge
 8003022:	6821      	ldrge	r1, [r4, #0]
 8003024:	f021 0104 	bicge.w	r1, r1, #4
 8003028:	6021      	strge	r1, [r4, #0]
 800302a:	b90a      	cbnz	r2, 8003030 <_printf_i+0xfe>
 800302c:	2d00      	cmp	r5, #0
 800302e:	d046      	beq.n	80030be <_printf_i+0x18c>
 8003030:	4605      	mov	r5, r0
 8003032:	fbb2 f1f3 	udiv	r1, r2, r3
 8003036:	fb03 2e11 	mls	lr, r3, r1, r2
 800303a:	4293      	cmp	r3, r2
 800303c:	f81c e00e 	ldrb.w	lr, [ip, lr]
 8003040:	f805 ed01 	strb.w	lr, [r5, #-1]!
 8003044:	d939      	bls.n	80030ba <_printf_i+0x188>
 8003046:	2b08      	cmp	r3, #8
 8003048:	d10b      	bne.n	8003062 <_printf_i+0x130>
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	07da      	lsls	r2, r3, #31
 800304e:	d508      	bpl.n	8003062 <_printf_i+0x130>
 8003050:	6923      	ldr	r3, [r4, #16]
 8003052:	6862      	ldr	r2, [r4, #4]
 8003054:	429a      	cmp	r2, r3
 8003056:	bfde      	ittt	le
 8003058:	2330      	movle	r3, #48	; 0x30
 800305a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800305e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8003062:	1b40      	subs	r0, r0, r5
 8003064:	6120      	str	r0, [r4, #16]
 8003066:	f8cd 8000 	str.w	r8, [sp]
 800306a:	463b      	mov	r3, r7
 800306c:	aa03      	add	r2, sp, #12
 800306e:	4621      	mov	r1, r4
 8003070:	4630      	mov	r0, r6
 8003072:	f7ff fee9 	bl	8002e48 <_printf_common>
 8003076:	3001      	adds	r0, #1
 8003078:	d149      	bne.n	800310e <_printf_i+0x1dc>
 800307a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800307e:	b005      	add	sp, #20
 8003080:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003084:	f8df c0cc 	ldr.w	ip, [pc, #204]	; 8003154 <_printf_i+0x222>
 8003088:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800308c:	681d      	ldr	r5, [r3, #0]
 800308e:	6821      	ldr	r1, [r4, #0]
 8003090:	f855 2b04 	ldr.w	r2, [r5], #4
 8003094:	601d      	str	r5, [r3, #0]
 8003096:	060d      	lsls	r5, r1, #24
 8003098:	d50b      	bpl.n	80030b2 <_printf_i+0x180>
 800309a:	07cd      	lsls	r5, r1, #31
 800309c:	bf44      	itt	mi
 800309e:	f041 0120 	orrmi.w	r1, r1, #32
 80030a2:	6021      	strmi	r1, [r4, #0]
 80030a4:	b91a      	cbnz	r2, 80030ae <_printf_i+0x17c>
 80030a6:	6823      	ldr	r3, [r4, #0]
 80030a8:	f023 0320 	bic.w	r3, r3, #32
 80030ac:	6023      	str	r3, [r4, #0]
 80030ae:	2310      	movs	r3, #16
 80030b0:	e7b0      	b.n	8003014 <_printf_i+0xe2>
 80030b2:	064b      	lsls	r3, r1, #25
 80030b4:	bf48      	it	mi
 80030b6:	b292      	uxthmi	r2, r2
 80030b8:	e7ef      	b.n	800309a <_printf_i+0x168>
 80030ba:	460a      	mov	r2, r1
 80030bc:	e7b9      	b.n	8003032 <_printf_i+0x100>
 80030be:	4605      	mov	r5, r0
 80030c0:	e7c1      	b.n	8003046 <_printf_i+0x114>
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	f8d4 c000 	ldr.w	ip, [r4]
 80030c8:	6961      	ldr	r1, [r4, #20]
 80030ca:	1d15      	adds	r5, r2, #4
 80030cc:	601d      	str	r5, [r3, #0]
 80030ce:	f01c 0f80 	tst.w	ip, #128	; 0x80
 80030d2:	6813      	ldr	r3, [r2, #0]
 80030d4:	d001      	beq.n	80030da <_printf_i+0x1a8>
 80030d6:	6019      	str	r1, [r3, #0]
 80030d8:	e003      	b.n	80030e2 <_printf_i+0x1b0>
 80030da:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80030de:	d0fa      	beq.n	80030d6 <_printf_i+0x1a4>
 80030e0:	8019      	strh	r1, [r3, #0]
 80030e2:	2300      	movs	r3, #0
 80030e4:	6123      	str	r3, [r4, #16]
 80030e6:	4605      	mov	r5, r0
 80030e8:	e7bd      	b.n	8003066 <_printf_i+0x134>
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	1d11      	adds	r1, r2, #4
 80030ee:	6019      	str	r1, [r3, #0]
 80030f0:	6815      	ldr	r5, [r2, #0]
 80030f2:	6862      	ldr	r2, [r4, #4]
 80030f4:	2100      	movs	r1, #0
 80030f6:	4628      	mov	r0, r5
 80030f8:	f7fd f86a 	bl	80001d0 <memchr>
 80030fc:	b108      	cbz	r0, 8003102 <_printf_i+0x1d0>
 80030fe:	1b40      	subs	r0, r0, r5
 8003100:	6060      	str	r0, [r4, #4]
 8003102:	6863      	ldr	r3, [r4, #4]
 8003104:	6123      	str	r3, [r4, #16]
 8003106:	2300      	movs	r3, #0
 8003108:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800310c:	e7ab      	b.n	8003066 <_printf_i+0x134>
 800310e:	6923      	ldr	r3, [r4, #16]
 8003110:	462a      	mov	r2, r5
 8003112:	4639      	mov	r1, r7
 8003114:	4630      	mov	r0, r6
 8003116:	47c0      	blx	r8
 8003118:	3001      	adds	r0, #1
 800311a:	d0ae      	beq.n	800307a <_printf_i+0x148>
 800311c:	6823      	ldr	r3, [r4, #0]
 800311e:	079b      	lsls	r3, r3, #30
 8003120:	d413      	bmi.n	800314a <_printf_i+0x218>
 8003122:	68e0      	ldr	r0, [r4, #12]
 8003124:	9b03      	ldr	r3, [sp, #12]
 8003126:	4298      	cmp	r0, r3
 8003128:	bfb8      	it	lt
 800312a:	4618      	movlt	r0, r3
 800312c:	e7a7      	b.n	800307e <_printf_i+0x14c>
 800312e:	2301      	movs	r3, #1
 8003130:	464a      	mov	r2, r9
 8003132:	4639      	mov	r1, r7
 8003134:	4630      	mov	r0, r6
 8003136:	47c0      	blx	r8
 8003138:	3001      	adds	r0, #1
 800313a:	d09e      	beq.n	800307a <_printf_i+0x148>
 800313c:	3501      	adds	r5, #1
 800313e:	68e3      	ldr	r3, [r4, #12]
 8003140:	9a03      	ldr	r2, [sp, #12]
 8003142:	1a9b      	subs	r3, r3, r2
 8003144:	42ab      	cmp	r3, r5
 8003146:	dcf2      	bgt.n	800312e <_printf_i+0x1fc>
 8003148:	e7eb      	b.n	8003122 <_printf_i+0x1f0>
 800314a:	2500      	movs	r5, #0
 800314c:	f104 0919 	add.w	r9, r4, #25
 8003150:	e7f5      	b.n	800313e <_printf_i+0x20c>
 8003152:	bf00      	nop
 8003154:	08008000 	.word	0x08008000
 8003158:	08008011 	.word	0x08008011

0800315c <_iprintf_r>:
 800315c:	b40e      	push	{r1, r2, r3}
 800315e:	b503      	push	{r0, r1, lr}
 8003160:	ab03      	add	r3, sp, #12
 8003162:	6881      	ldr	r1, [r0, #8]
 8003164:	f853 2b04 	ldr.w	r2, [r3], #4
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	f000 fc97 	bl	8003a9c <_vfiprintf_r>
 800316e:	b002      	add	sp, #8
 8003170:	f85d eb04 	ldr.w	lr, [sp], #4
 8003174:	b003      	add	sp, #12
 8003176:	4770      	bx	lr

08003178 <iprintf>:
 8003178:	b40f      	push	{r0, r1, r2, r3}
 800317a:	b507      	push	{r0, r1, r2, lr}
 800317c:	4906      	ldr	r1, [pc, #24]	; (8003198 <iprintf+0x20>)
 800317e:	ab04      	add	r3, sp, #16
 8003180:	6808      	ldr	r0, [r1, #0]
 8003182:	f853 2b04 	ldr.w	r2, [r3], #4
 8003186:	6881      	ldr	r1, [r0, #8]
 8003188:	9301      	str	r3, [sp, #4]
 800318a:	f000 fc87 	bl	8003a9c <_vfiprintf_r>
 800318e:	b003      	add	sp, #12
 8003190:	f85d eb04 	ldr.w	lr, [sp], #4
 8003194:	b004      	add	sp, #16
 8003196:	4770      	bx	lr
 8003198:	20001040 	.word	0x20001040

0800319c <__localeconv_l>:
 800319c:	30f0      	adds	r0, #240	; 0xf0
 800319e:	4770      	bx	lr

080031a0 <_localeconv_r>:
 80031a0:	4800      	ldr	r0, [pc, #0]	; (80031a4 <_localeconv_r+0x4>)
 80031a2:	4770      	bx	lr
 80031a4:	200013c0 	.word	0x200013c0

080031a8 <localeconv>:
 80031a8:	4800      	ldr	r0, [pc, #0]	; (80031ac <localeconv+0x4>)
 80031aa:	4770      	bx	lr
 80031ac:	200013c0 	.word	0x200013c0

080031b0 <_Balloc>:
 80031b0:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80031b2:	b570      	push	{r4, r5, r6, lr}
 80031b4:	4605      	mov	r5, r0
 80031b6:	460c      	mov	r4, r1
 80031b8:	b17b      	cbz	r3, 80031da <_Balloc+0x2a>
 80031ba:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 80031bc:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80031c0:	b9a0      	cbnz	r0, 80031ec <_Balloc+0x3c>
 80031c2:	2101      	movs	r1, #1
 80031c4:	fa01 f604 	lsl.w	r6, r1, r4
 80031c8:	1d72      	adds	r2, r6, #5
 80031ca:	0092      	lsls	r2, r2, #2
 80031cc:	4628      	mov	r0, r5
 80031ce:	f001 fa80 	bl	80046d2 <_calloc_r>
 80031d2:	b148      	cbz	r0, 80031e8 <_Balloc+0x38>
 80031d4:	e9c0 4601 	strd	r4, r6, [r0, #4]
 80031d8:	e00b      	b.n	80031f2 <_Balloc+0x42>
 80031da:	2221      	movs	r2, #33	; 0x21
 80031dc:	2104      	movs	r1, #4
 80031de:	f001 fa78 	bl	80046d2 <_calloc_r>
 80031e2:	64e8      	str	r0, [r5, #76]	; 0x4c
 80031e4:	2800      	cmp	r0, #0
 80031e6:	d1e8      	bne.n	80031ba <_Balloc+0xa>
 80031e8:	2000      	movs	r0, #0
 80031ea:	bd70      	pop	{r4, r5, r6, pc}
 80031ec:	6802      	ldr	r2, [r0, #0]
 80031ee:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 80031f2:	2300      	movs	r3, #0
 80031f4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80031f8:	e7f7      	b.n	80031ea <_Balloc+0x3a>

080031fa <_Bfree>:
 80031fa:	b131      	cbz	r1, 800320a <_Bfree+0x10>
 80031fc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80031fe:	684a      	ldr	r2, [r1, #4]
 8003200:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8003204:	6008      	str	r0, [r1, #0]
 8003206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800320a:	4770      	bx	lr

0800320c <__multadd>:
 800320c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003210:	690d      	ldr	r5, [r1, #16]
 8003212:	461f      	mov	r7, r3
 8003214:	4606      	mov	r6, r0
 8003216:	460c      	mov	r4, r1
 8003218:	f101 0c14 	add.w	ip, r1, #20
 800321c:	2300      	movs	r3, #0
 800321e:	f8dc 0000 	ldr.w	r0, [ip]
 8003222:	b281      	uxth	r1, r0
 8003224:	fb02 7101 	mla	r1, r2, r1, r7
 8003228:	0c0f      	lsrs	r7, r1, #16
 800322a:	0c00      	lsrs	r0, r0, #16
 800322c:	fb02 7000 	mla	r0, r2, r0, r7
 8003230:	b289      	uxth	r1, r1
 8003232:	3301      	adds	r3, #1
 8003234:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8003238:	429d      	cmp	r5, r3
 800323a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800323e:	f84c 1b04 	str.w	r1, [ip], #4
 8003242:	dcec      	bgt.n	800321e <__multadd+0x12>
 8003244:	b1d7      	cbz	r7, 800327c <__multadd+0x70>
 8003246:	68a3      	ldr	r3, [r4, #8]
 8003248:	42ab      	cmp	r3, r5
 800324a:	dc12      	bgt.n	8003272 <__multadd+0x66>
 800324c:	6861      	ldr	r1, [r4, #4]
 800324e:	4630      	mov	r0, r6
 8003250:	3101      	adds	r1, #1
 8003252:	f7ff ffad 	bl	80031b0 <_Balloc>
 8003256:	6922      	ldr	r2, [r4, #16]
 8003258:	3202      	adds	r2, #2
 800325a:	f104 010c 	add.w	r1, r4, #12
 800325e:	4680      	mov	r8, r0
 8003260:	0092      	lsls	r2, r2, #2
 8003262:	300c      	adds	r0, #12
 8003264:	f001 fa0d 	bl	8004682 <memcpy>
 8003268:	4621      	mov	r1, r4
 800326a:	4630      	mov	r0, r6
 800326c:	f7ff ffc5 	bl	80031fa <_Bfree>
 8003270:	4644      	mov	r4, r8
 8003272:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8003276:	3501      	adds	r5, #1
 8003278:	615f      	str	r7, [r3, #20]
 800327a:	6125      	str	r5, [r4, #16]
 800327c:	4620      	mov	r0, r4
 800327e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003282 <__s2b>:
 8003282:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003286:	460c      	mov	r4, r1
 8003288:	4615      	mov	r5, r2
 800328a:	461f      	mov	r7, r3
 800328c:	2209      	movs	r2, #9
 800328e:	3308      	adds	r3, #8
 8003290:	4606      	mov	r6, r0
 8003292:	fb93 f3f2 	sdiv	r3, r3, r2
 8003296:	2100      	movs	r1, #0
 8003298:	2201      	movs	r2, #1
 800329a:	429a      	cmp	r2, r3
 800329c:	db20      	blt.n	80032e0 <__s2b+0x5e>
 800329e:	4630      	mov	r0, r6
 80032a0:	f7ff ff86 	bl	80031b0 <_Balloc>
 80032a4:	9b08      	ldr	r3, [sp, #32]
 80032a6:	6143      	str	r3, [r0, #20]
 80032a8:	2d09      	cmp	r5, #9
 80032aa:	f04f 0301 	mov.w	r3, #1
 80032ae:	6103      	str	r3, [r0, #16]
 80032b0:	dd19      	ble.n	80032e6 <__s2b+0x64>
 80032b2:	f104 0909 	add.w	r9, r4, #9
 80032b6:	46c8      	mov	r8, r9
 80032b8:	442c      	add	r4, r5
 80032ba:	f818 3b01 	ldrb.w	r3, [r8], #1
 80032be:	4601      	mov	r1, r0
 80032c0:	3b30      	subs	r3, #48	; 0x30
 80032c2:	220a      	movs	r2, #10
 80032c4:	4630      	mov	r0, r6
 80032c6:	f7ff ffa1 	bl	800320c <__multadd>
 80032ca:	45a0      	cmp	r8, r4
 80032cc:	d1f5      	bne.n	80032ba <__s2b+0x38>
 80032ce:	f1a5 0408 	sub.w	r4, r5, #8
 80032d2:	444c      	add	r4, r9
 80032d4:	1b2d      	subs	r5, r5, r4
 80032d6:	1963      	adds	r3, r4, r5
 80032d8:	42bb      	cmp	r3, r7
 80032da:	db07      	blt.n	80032ec <__s2b+0x6a>
 80032dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80032e0:	0052      	lsls	r2, r2, #1
 80032e2:	3101      	adds	r1, #1
 80032e4:	e7d9      	b.n	800329a <__s2b+0x18>
 80032e6:	340a      	adds	r4, #10
 80032e8:	2509      	movs	r5, #9
 80032ea:	e7f3      	b.n	80032d4 <__s2b+0x52>
 80032ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80032f0:	4601      	mov	r1, r0
 80032f2:	3b30      	subs	r3, #48	; 0x30
 80032f4:	220a      	movs	r2, #10
 80032f6:	4630      	mov	r0, r6
 80032f8:	f7ff ff88 	bl	800320c <__multadd>
 80032fc:	e7eb      	b.n	80032d6 <__s2b+0x54>

080032fe <__hi0bits>:
 80032fe:	0c02      	lsrs	r2, r0, #16
 8003300:	0412      	lsls	r2, r2, #16
 8003302:	4603      	mov	r3, r0
 8003304:	b9ca      	cbnz	r2, 800333a <__hi0bits+0x3c>
 8003306:	0403      	lsls	r3, r0, #16
 8003308:	2010      	movs	r0, #16
 800330a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800330e:	bf04      	itt	eq
 8003310:	021b      	lsleq	r3, r3, #8
 8003312:	3008      	addeq	r0, #8
 8003314:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8003318:	bf04      	itt	eq
 800331a:	011b      	lsleq	r3, r3, #4
 800331c:	3004      	addeq	r0, #4
 800331e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8003322:	bf04      	itt	eq
 8003324:	009b      	lsleq	r3, r3, #2
 8003326:	3002      	addeq	r0, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	db05      	blt.n	8003338 <__hi0bits+0x3a>
 800332c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8003330:	f100 0001 	add.w	r0, r0, #1
 8003334:	bf08      	it	eq
 8003336:	2020      	moveq	r0, #32
 8003338:	4770      	bx	lr
 800333a:	2000      	movs	r0, #0
 800333c:	e7e5      	b.n	800330a <__hi0bits+0xc>

0800333e <__lo0bits>:
 800333e:	6803      	ldr	r3, [r0, #0]
 8003340:	f013 0207 	ands.w	r2, r3, #7
 8003344:	4601      	mov	r1, r0
 8003346:	d00b      	beq.n	8003360 <__lo0bits+0x22>
 8003348:	07da      	lsls	r2, r3, #31
 800334a:	d424      	bmi.n	8003396 <__lo0bits+0x58>
 800334c:	0798      	lsls	r0, r3, #30
 800334e:	bf49      	itett	mi
 8003350:	085b      	lsrmi	r3, r3, #1
 8003352:	089b      	lsrpl	r3, r3, #2
 8003354:	2001      	movmi	r0, #1
 8003356:	600b      	strmi	r3, [r1, #0]
 8003358:	bf5c      	itt	pl
 800335a:	600b      	strpl	r3, [r1, #0]
 800335c:	2002      	movpl	r0, #2
 800335e:	4770      	bx	lr
 8003360:	b298      	uxth	r0, r3
 8003362:	b9b0      	cbnz	r0, 8003392 <__lo0bits+0x54>
 8003364:	0c1b      	lsrs	r3, r3, #16
 8003366:	2010      	movs	r0, #16
 8003368:	f013 0fff 	tst.w	r3, #255	; 0xff
 800336c:	bf04      	itt	eq
 800336e:	0a1b      	lsreq	r3, r3, #8
 8003370:	3008      	addeq	r0, #8
 8003372:	071a      	lsls	r2, r3, #28
 8003374:	bf04      	itt	eq
 8003376:	091b      	lsreq	r3, r3, #4
 8003378:	3004      	addeq	r0, #4
 800337a:	079a      	lsls	r2, r3, #30
 800337c:	bf04      	itt	eq
 800337e:	089b      	lsreq	r3, r3, #2
 8003380:	3002      	addeq	r0, #2
 8003382:	07da      	lsls	r2, r3, #31
 8003384:	d403      	bmi.n	800338e <__lo0bits+0x50>
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	f100 0001 	add.w	r0, r0, #1
 800338c:	d005      	beq.n	800339a <__lo0bits+0x5c>
 800338e:	600b      	str	r3, [r1, #0]
 8003390:	4770      	bx	lr
 8003392:	4610      	mov	r0, r2
 8003394:	e7e8      	b.n	8003368 <__lo0bits+0x2a>
 8003396:	2000      	movs	r0, #0
 8003398:	4770      	bx	lr
 800339a:	2020      	movs	r0, #32
 800339c:	4770      	bx	lr

0800339e <__i2b>:
 800339e:	b510      	push	{r4, lr}
 80033a0:	460c      	mov	r4, r1
 80033a2:	2101      	movs	r1, #1
 80033a4:	f7ff ff04 	bl	80031b0 <_Balloc>
 80033a8:	2201      	movs	r2, #1
 80033aa:	6144      	str	r4, [r0, #20]
 80033ac:	6102      	str	r2, [r0, #16]
 80033ae:	bd10      	pop	{r4, pc}

080033b0 <__multiply>:
 80033b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80033b4:	4690      	mov	r8, r2
 80033b6:	690a      	ldr	r2, [r1, #16]
 80033b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80033bc:	429a      	cmp	r2, r3
 80033be:	bfb8      	it	lt
 80033c0:	460b      	movlt	r3, r1
 80033c2:	460c      	mov	r4, r1
 80033c4:	bfbc      	itt	lt
 80033c6:	4644      	movlt	r4, r8
 80033c8:	4698      	movlt	r8, r3
 80033ca:	6927      	ldr	r7, [r4, #16]
 80033cc:	f8d8 9010 	ldr.w	r9, [r8, #16]
 80033d0:	68a3      	ldr	r3, [r4, #8]
 80033d2:	6861      	ldr	r1, [r4, #4]
 80033d4:	eb07 0609 	add.w	r6, r7, r9
 80033d8:	42b3      	cmp	r3, r6
 80033da:	bfb8      	it	lt
 80033dc:	3101      	addlt	r1, #1
 80033de:	f7ff fee7 	bl	80031b0 <_Balloc>
 80033e2:	f100 0514 	add.w	r5, r0, #20
 80033e6:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80033ea:	462b      	mov	r3, r5
 80033ec:	2200      	movs	r2, #0
 80033ee:	4573      	cmp	r3, lr
 80033f0:	d316      	bcc.n	8003420 <__multiply+0x70>
 80033f2:	f104 0314 	add.w	r3, r4, #20
 80033f6:	f108 0214 	add.w	r2, r8, #20
 80033fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80033fe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8003402:	9300      	str	r3, [sp, #0]
 8003404:	9b00      	ldr	r3, [sp, #0]
 8003406:	9201      	str	r2, [sp, #4]
 8003408:	4293      	cmp	r3, r2
 800340a:	d80c      	bhi.n	8003426 <__multiply+0x76>
 800340c:	2e00      	cmp	r6, #0
 800340e:	dd03      	ble.n	8003418 <__multiply+0x68>
 8003410:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8003414:	2b00      	cmp	r3, #0
 8003416:	d059      	beq.n	80034cc <__multiply+0x11c>
 8003418:	6106      	str	r6, [r0, #16]
 800341a:	b003      	add	sp, #12
 800341c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003420:	f843 2b04 	str.w	r2, [r3], #4
 8003424:	e7e3      	b.n	80033ee <__multiply+0x3e>
 8003426:	f8b2 a000 	ldrh.w	sl, [r2]
 800342a:	f1ba 0f00 	cmp.w	sl, #0
 800342e:	d023      	beq.n	8003478 <__multiply+0xc8>
 8003430:	f104 0914 	add.w	r9, r4, #20
 8003434:	46ac      	mov	ip, r5
 8003436:	f04f 0800 	mov.w	r8, #0
 800343a:	f859 1b04 	ldr.w	r1, [r9], #4
 800343e:	f8dc b000 	ldr.w	fp, [ip]
 8003442:	b28b      	uxth	r3, r1
 8003444:	fa1f fb8b 	uxth.w	fp, fp
 8003448:	fb0a b303 	mla	r3, sl, r3, fp
 800344c:	ea4f 4b11 	mov.w	fp, r1, lsr #16
 8003450:	f8dc 1000 	ldr.w	r1, [ip]
 8003454:	4443      	add	r3, r8
 8003456:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800345a:	fb0a 810b 	mla	r1, sl, fp, r8
 800345e:	eb01 4113 	add.w	r1, r1, r3, lsr #16
 8003462:	b29b      	uxth	r3, r3
 8003464:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003468:	454f      	cmp	r7, r9
 800346a:	ea4f 4811 	mov.w	r8, r1, lsr #16
 800346e:	f84c 3b04 	str.w	r3, [ip], #4
 8003472:	d8e2      	bhi.n	800343a <__multiply+0x8a>
 8003474:	f8cc 8000 	str.w	r8, [ip]
 8003478:	9b01      	ldr	r3, [sp, #4]
 800347a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800347e:	3204      	adds	r2, #4
 8003480:	f1b9 0f00 	cmp.w	r9, #0
 8003484:	d020      	beq.n	80034c8 <__multiply+0x118>
 8003486:	682b      	ldr	r3, [r5, #0]
 8003488:	f104 0814 	add.w	r8, r4, #20
 800348c:	46ac      	mov	ip, r5
 800348e:	f04f 0a00 	mov.w	sl, #0
 8003492:	f8b8 1000 	ldrh.w	r1, [r8]
 8003496:	f8bc b002 	ldrh.w	fp, [ip, #2]
 800349a:	fb09 b101 	mla	r1, r9, r1, fp
 800349e:	448a      	add	sl, r1
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80034a6:	f84c 3b04 	str.w	r3, [ip], #4
 80034aa:	f858 3b04 	ldr.w	r3, [r8], #4
 80034ae:	f8bc 1000 	ldrh.w	r1, [ip]
 80034b2:	0c1b      	lsrs	r3, r3, #16
 80034b4:	fb09 1303 	mla	r3, r9, r3, r1
 80034b8:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80034bc:	4547      	cmp	r7, r8
 80034be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80034c2:	d8e6      	bhi.n	8003492 <__multiply+0xe2>
 80034c4:	f8cc 3000 	str.w	r3, [ip]
 80034c8:	3504      	adds	r5, #4
 80034ca:	e79b      	b.n	8003404 <__multiply+0x54>
 80034cc:	3e01      	subs	r6, #1
 80034ce:	e79d      	b.n	800340c <__multiply+0x5c>

080034d0 <__pow5mult>:
 80034d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80034d4:	4615      	mov	r5, r2
 80034d6:	f012 0203 	ands.w	r2, r2, #3
 80034da:	4606      	mov	r6, r0
 80034dc:	460f      	mov	r7, r1
 80034de:	d007      	beq.n	80034f0 <__pow5mult+0x20>
 80034e0:	3a01      	subs	r2, #1
 80034e2:	4c1a      	ldr	r4, [pc, #104]	; (800354c <__pow5mult+0x7c>)
 80034e4:	2300      	movs	r3, #0
 80034e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80034ea:	f7ff fe8f 	bl	800320c <__multadd>
 80034ee:	4607      	mov	r7, r0
 80034f0:	10ad      	asrs	r5, r5, #2
 80034f2:	d027      	beq.n	8003544 <__pow5mult+0x74>
 80034f4:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 80034f6:	b944      	cbnz	r4, 800350a <__pow5mult+0x3a>
 80034f8:	f240 2171 	movw	r1, #625	; 0x271
 80034fc:	4630      	mov	r0, r6
 80034fe:	f7ff ff4e 	bl	800339e <__i2b>
 8003502:	2300      	movs	r3, #0
 8003504:	64b0      	str	r0, [r6, #72]	; 0x48
 8003506:	4604      	mov	r4, r0
 8003508:	6003      	str	r3, [r0, #0]
 800350a:	f04f 0800 	mov.w	r8, #0
 800350e:	07eb      	lsls	r3, r5, #31
 8003510:	d50a      	bpl.n	8003528 <__pow5mult+0x58>
 8003512:	4639      	mov	r1, r7
 8003514:	4622      	mov	r2, r4
 8003516:	4630      	mov	r0, r6
 8003518:	f7ff ff4a 	bl	80033b0 <__multiply>
 800351c:	4639      	mov	r1, r7
 800351e:	4681      	mov	r9, r0
 8003520:	4630      	mov	r0, r6
 8003522:	f7ff fe6a 	bl	80031fa <_Bfree>
 8003526:	464f      	mov	r7, r9
 8003528:	106d      	asrs	r5, r5, #1
 800352a:	d00b      	beq.n	8003544 <__pow5mult+0x74>
 800352c:	6820      	ldr	r0, [r4, #0]
 800352e:	b938      	cbnz	r0, 8003540 <__pow5mult+0x70>
 8003530:	4622      	mov	r2, r4
 8003532:	4621      	mov	r1, r4
 8003534:	4630      	mov	r0, r6
 8003536:	f7ff ff3b 	bl	80033b0 <__multiply>
 800353a:	6020      	str	r0, [r4, #0]
 800353c:	f8c0 8000 	str.w	r8, [r0]
 8003540:	4604      	mov	r4, r0
 8003542:	e7e4      	b.n	800350e <__pow5mult+0x3e>
 8003544:	4638      	mov	r0, r7
 8003546:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800354a:	bf00      	nop
 800354c:	08007a30 	.word	0x08007a30

08003550 <__lshift>:
 8003550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003554:	460c      	mov	r4, r1
 8003556:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800355a:	6923      	ldr	r3, [r4, #16]
 800355c:	6849      	ldr	r1, [r1, #4]
 800355e:	eb0a 0903 	add.w	r9, sl, r3
 8003562:	68a3      	ldr	r3, [r4, #8]
 8003564:	4607      	mov	r7, r0
 8003566:	4616      	mov	r6, r2
 8003568:	f109 0501 	add.w	r5, r9, #1
 800356c:	42ab      	cmp	r3, r5
 800356e:	db33      	blt.n	80035d8 <__lshift+0x88>
 8003570:	4638      	mov	r0, r7
 8003572:	f7ff fe1d 	bl	80031b0 <_Balloc>
 8003576:	2300      	movs	r3, #0
 8003578:	4680      	mov	r8, r0
 800357a:	f100 0114 	add.w	r1, r0, #20
 800357e:	f100 0210 	add.w	r2, r0, #16
 8003582:	4618      	mov	r0, r3
 8003584:	4553      	cmp	r3, sl
 8003586:	db2a      	blt.n	80035de <__lshift+0x8e>
 8003588:	6920      	ldr	r0, [r4, #16]
 800358a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800358e:	f104 0314 	add.w	r3, r4, #20
 8003592:	f016 021f 	ands.w	r2, r6, #31
 8003596:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800359a:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800359e:	d022      	beq.n	80035e6 <__lshift+0x96>
 80035a0:	f1c2 0e20 	rsb	lr, r2, #32
 80035a4:	2000      	movs	r0, #0
 80035a6:	681e      	ldr	r6, [r3, #0]
 80035a8:	4096      	lsls	r6, r2
 80035aa:	4330      	orrs	r0, r6
 80035ac:	f841 0b04 	str.w	r0, [r1], #4
 80035b0:	f853 0b04 	ldr.w	r0, [r3], #4
 80035b4:	459c      	cmp	ip, r3
 80035b6:	fa20 f00e 	lsr.w	r0, r0, lr
 80035ba:	d8f4      	bhi.n	80035a6 <__lshift+0x56>
 80035bc:	6008      	str	r0, [r1, #0]
 80035be:	b108      	cbz	r0, 80035c4 <__lshift+0x74>
 80035c0:	f109 0502 	add.w	r5, r9, #2
 80035c4:	3d01      	subs	r5, #1
 80035c6:	4638      	mov	r0, r7
 80035c8:	f8c8 5010 	str.w	r5, [r8, #16]
 80035cc:	4621      	mov	r1, r4
 80035ce:	f7ff fe14 	bl	80031fa <_Bfree>
 80035d2:	4640      	mov	r0, r8
 80035d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035d8:	3101      	adds	r1, #1
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	e7c6      	b.n	800356c <__lshift+0x1c>
 80035de:	f842 0f04 	str.w	r0, [r2, #4]!
 80035e2:	3301      	adds	r3, #1
 80035e4:	e7ce      	b.n	8003584 <__lshift+0x34>
 80035e6:	3904      	subs	r1, #4
 80035e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80035ec:	f841 2f04 	str.w	r2, [r1, #4]!
 80035f0:	459c      	cmp	ip, r3
 80035f2:	d8f9      	bhi.n	80035e8 <__lshift+0x98>
 80035f4:	e7e6      	b.n	80035c4 <__lshift+0x74>

080035f6 <__mcmp>:
 80035f6:	6903      	ldr	r3, [r0, #16]
 80035f8:	690a      	ldr	r2, [r1, #16]
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	b530      	push	{r4, r5, lr}
 80035fe:	d10c      	bne.n	800361a <__mcmp+0x24>
 8003600:	0092      	lsls	r2, r2, #2
 8003602:	3014      	adds	r0, #20
 8003604:	3114      	adds	r1, #20
 8003606:	1884      	adds	r4, r0, r2
 8003608:	4411      	add	r1, r2
 800360a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800360e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8003612:	4295      	cmp	r5, r2
 8003614:	d003      	beq.n	800361e <__mcmp+0x28>
 8003616:	d305      	bcc.n	8003624 <__mcmp+0x2e>
 8003618:	2301      	movs	r3, #1
 800361a:	4618      	mov	r0, r3
 800361c:	bd30      	pop	{r4, r5, pc}
 800361e:	42a0      	cmp	r0, r4
 8003620:	d3f3      	bcc.n	800360a <__mcmp+0x14>
 8003622:	e7fa      	b.n	800361a <__mcmp+0x24>
 8003624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003628:	e7f7      	b.n	800361a <__mcmp+0x24>

0800362a <__mdiff>:
 800362a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800362e:	460d      	mov	r5, r1
 8003630:	4607      	mov	r7, r0
 8003632:	4611      	mov	r1, r2
 8003634:	4628      	mov	r0, r5
 8003636:	4614      	mov	r4, r2
 8003638:	f7ff ffdd 	bl	80035f6 <__mcmp>
 800363c:	1e06      	subs	r6, r0, #0
 800363e:	d108      	bne.n	8003652 <__mdiff+0x28>
 8003640:	4631      	mov	r1, r6
 8003642:	4638      	mov	r0, r7
 8003644:	f7ff fdb4 	bl	80031b0 <_Balloc>
 8003648:	2301      	movs	r3, #1
 800364a:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800364e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003652:	bfa4      	itt	ge
 8003654:	4623      	movge	r3, r4
 8003656:	462c      	movge	r4, r5
 8003658:	4638      	mov	r0, r7
 800365a:	6861      	ldr	r1, [r4, #4]
 800365c:	bfa6      	itte	ge
 800365e:	461d      	movge	r5, r3
 8003660:	2600      	movge	r6, #0
 8003662:	2601      	movlt	r6, #1
 8003664:	f7ff fda4 	bl	80031b0 <_Balloc>
 8003668:	692b      	ldr	r3, [r5, #16]
 800366a:	60c6      	str	r6, [r0, #12]
 800366c:	6926      	ldr	r6, [r4, #16]
 800366e:	f105 0914 	add.w	r9, r5, #20
 8003672:	f104 0214 	add.w	r2, r4, #20
 8003676:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800367a:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800367e:	f100 0514 	add.w	r5, r0, #20
 8003682:	f04f 0e00 	mov.w	lr, #0
 8003686:	f852 ab04 	ldr.w	sl, [r2], #4
 800368a:	f859 4b04 	ldr.w	r4, [r9], #4
 800368e:	fa1e f18a 	uxtah	r1, lr, sl
 8003692:	b2a3      	uxth	r3, r4
 8003694:	1ac9      	subs	r1, r1, r3
 8003696:	0c23      	lsrs	r3, r4, #16
 8003698:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800369c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80036a0:	b289      	uxth	r1, r1
 80036a2:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80036a6:	45c8      	cmp	r8, r9
 80036a8:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80036ac:	4694      	mov	ip, r2
 80036ae:	f845 3b04 	str.w	r3, [r5], #4
 80036b2:	d8e8      	bhi.n	8003686 <__mdiff+0x5c>
 80036b4:	45bc      	cmp	ip, r7
 80036b6:	d304      	bcc.n	80036c2 <__mdiff+0x98>
 80036b8:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80036bc:	b183      	cbz	r3, 80036e0 <__mdiff+0xb6>
 80036be:	6106      	str	r6, [r0, #16]
 80036c0:	e7c5      	b.n	800364e <__mdiff+0x24>
 80036c2:	f85c 1b04 	ldr.w	r1, [ip], #4
 80036c6:	fa1e f381 	uxtah	r3, lr, r1
 80036ca:	141a      	asrs	r2, r3, #16
 80036cc:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80036d6:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80036da:	f845 3b04 	str.w	r3, [r5], #4
 80036de:	e7e9      	b.n	80036b4 <__mdiff+0x8a>
 80036e0:	3e01      	subs	r6, #1
 80036e2:	e7e9      	b.n	80036b8 <__mdiff+0x8e>

080036e4 <__ulp>:
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <__ulp+0x48>)
 80036e6:	ee10 2a90 	vmov	r2, s1
 80036ea:	401a      	ands	r2, r3
 80036ec:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	dd04      	ble.n	80036fe <__ulp+0x1a>
 80036f4:	2000      	movs	r0, #0
 80036f6:	4619      	mov	r1, r3
 80036f8:	ec41 0b10 	vmov	d0, r0, r1
 80036fc:	4770      	bx	lr
 80036fe:	425b      	negs	r3, r3
 8003700:	151b      	asrs	r3, r3, #20
 8003702:	2b13      	cmp	r3, #19
 8003704:	f04f 0000 	mov.w	r0, #0
 8003708:	f04f 0100 	mov.w	r1, #0
 800370c:	dc04      	bgt.n	8003718 <__ulp+0x34>
 800370e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003712:	fa42 f103 	asr.w	r1, r2, r3
 8003716:	e7ef      	b.n	80036f8 <__ulp+0x14>
 8003718:	3b14      	subs	r3, #20
 800371a:	2b1e      	cmp	r3, #30
 800371c:	bfda      	itte	le
 800371e:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8003722:	fa22 f303 	lsrle.w	r3, r2, r3
 8003726:	2301      	movgt	r3, #1
 8003728:	4618      	mov	r0, r3
 800372a:	e7e5      	b.n	80036f8 <__ulp+0x14>
 800372c:	7ff00000 	.word	0x7ff00000

08003730 <__b2d>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	6905      	ldr	r5, [r0, #16]
 8003734:	f100 0714 	add.w	r7, r0, #20
 8003738:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800373c:	1f2e      	subs	r6, r5, #4
 800373e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8003742:	4620      	mov	r0, r4
 8003744:	f7ff fddb 	bl	80032fe <__hi0bits>
 8003748:	f1c0 0320 	rsb	r3, r0, #32
 800374c:	280a      	cmp	r0, #10
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	f8df c078 	ldr.w	ip, [pc, #120]	; 80037cc <__b2d+0x9c>
 8003754:	dc14      	bgt.n	8003780 <__b2d+0x50>
 8003756:	f1c0 0e0b 	rsb	lr, r0, #11
 800375a:	fa24 f10e 	lsr.w	r1, r4, lr
 800375e:	42b7      	cmp	r7, r6
 8003760:	ea41 030c 	orr.w	r3, r1, ip
 8003764:	bf34      	ite	cc
 8003766:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800376a:	2100      	movcs	r1, #0
 800376c:	3015      	adds	r0, #21
 800376e:	fa04 f000 	lsl.w	r0, r4, r0
 8003772:	fa21 f10e 	lsr.w	r1, r1, lr
 8003776:	ea40 0201 	orr.w	r2, r0, r1
 800377a:	ec43 2b10 	vmov	d0, r2, r3
 800377e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003780:	42b7      	cmp	r7, r6
 8003782:	bf3a      	itte	cc
 8003784:	f1a5 0608 	subcc.w	r6, r5, #8
 8003788:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800378c:	2100      	movcs	r1, #0
 800378e:	380b      	subs	r0, #11
 8003790:	d017      	beq.n	80037c2 <__b2d+0x92>
 8003792:	f1c0 0c20 	rsb	ip, r0, #32
 8003796:	fa04 f500 	lsl.w	r5, r4, r0
 800379a:	42be      	cmp	r6, r7
 800379c:	fa21 f40c 	lsr.w	r4, r1, ip
 80037a0:	ea45 0504 	orr.w	r5, r5, r4
 80037a4:	bf8c      	ite	hi
 80037a6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80037aa:	2400      	movls	r4, #0
 80037ac:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80037b0:	fa01 f000 	lsl.w	r0, r1, r0
 80037b4:	fa24 f40c 	lsr.w	r4, r4, ip
 80037b8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80037bc:	ea40 0204 	orr.w	r2, r0, r4
 80037c0:	e7db      	b.n	800377a <__b2d+0x4a>
 80037c2:	ea44 030c 	orr.w	r3, r4, ip
 80037c6:	460a      	mov	r2, r1
 80037c8:	e7d7      	b.n	800377a <__b2d+0x4a>
 80037ca:	bf00      	nop
 80037cc:	3ff00000 	.word	0x3ff00000

080037d0 <__d2b>:
 80037d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80037d4:	460e      	mov	r6, r1
 80037d6:	2101      	movs	r1, #1
 80037d8:	ec59 8b10 	vmov	r8, r9, d0
 80037dc:	4615      	mov	r5, r2
 80037de:	f7ff fce7 	bl	80031b0 <_Balloc>
 80037e2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80037e6:	4607      	mov	r7, r0
 80037e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80037ec:	bb2c      	cbnz	r4, 800383a <__d2b+0x6a>
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	f1b8 0300 	subs.w	r3, r8, #0
 80037f4:	d026      	beq.n	8003844 <__d2b+0x74>
 80037f6:	4668      	mov	r0, sp
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	f7ff fda0 	bl	800333e <__lo0bits>
 80037fe:	9900      	ldr	r1, [sp, #0]
 8003800:	b1f0      	cbz	r0, 8003840 <__d2b+0x70>
 8003802:	9a01      	ldr	r2, [sp, #4]
 8003804:	f1c0 0320 	rsb	r3, r0, #32
 8003808:	fa02 f303 	lsl.w	r3, r2, r3
 800380c:	430b      	orrs	r3, r1
 800380e:	40c2      	lsrs	r2, r0
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	9201      	str	r2, [sp, #4]
 8003814:	9b01      	ldr	r3, [sp, #4]
 8003816:	61bb      	str	r3, [r7, #24]
 8003818:	2b00      	cmp	r3, #0
 800381a:	bf14      	ite	ne
 800381c:	2102      	movne	r1, #2
 800381e:	2101      	moveq	r1, #1
 8003820:	6139      	str	r1, [r7, #16]
 8003822:	b1c4      	cbz	r4, 8003856 <__d2b+0x86>
 8003824:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8003828:	4404      	add	r4, r0
 800382a:	6034      	str	r4, [r6, #0]
 800382c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8003830:	6028      	str	r0, [r5, #0]
 8003832:	4638      	mov	r0, r7
 8003834:	b003      	add	sp, #12
 8003836:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800383a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800383e:	e7d6      	b.n	80037ee <__d2b+0x1e>
 8003840:	6179      	str	r1, [r7, #20]
 8003842:	e7e7      	b.n	8003814 <__d2b+0x44>
 8003844:	a801      	add	r0, sp, #4
 8003846:	f7ff fd7a 	bl	800333e <__lo0bits>
 800384a:	9b01      	ldr	r3, [sp, #4]
 800384c:	617b      	str	r3, [r7, #20]
 800384e:	2101      	movs	r1, #1
 8003850:	6139      	str	r1, [r7, #16]
 8003852:	3020      	adds	r0, #32
 8003854:	e7e5      	b.n	8003822 <__d2b+0x52>
 8003856:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800385a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800385e:	6030      	str	r0, [r6, #0]
 8003860:	6918      	ldr	r0, [r3, #16]
 8003862:	f7ff fd4c 	bl	80032fe <__hi0bits>
 8003866:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800386a:	e7e1      	b.n	8003830 <__d2b+0x60>

0800386c <__ratio>:
 800386c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003870:	4688      	mov	r8, r1
 8003872:	4669      	mov	r1, sp
 8003874:	4681      	mov	r9, r0
 8003876:	f7ff ff5b 	bl	8003730 <__b2d>
 800387a:	a901      	add	r1, sp, #4
 800387c:	4640      	mov	r0, r8
 800387e:	ec57 6b10 	vmov	r6, r7, d0
 8003882:	f7ff ff55 	bl	8003730 <__b2d>
 8003886:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800388a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800388e:	eba3 0c02 	sub.w	ip, r3, r2
 8003892:	e9dd 3200 	ldrd	r3, r2, [sp]
 8003896:	1a9b      	subs	r3, r3, r2
 8003898:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800389c:	ec5b ab10 	vmov	sl, fp, d0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	bfce      	itee	gt
 80038a4:	463a      	movgt	r2, r7
 80038a6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80038aa:	465a      	movle	r2, fp
 80038ac:	4659      	mov	r1, fp
 80038ae:	463d      	mov	r5, r7
 80038b0:	bfd4      	ite	le
 80038b2:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80038b6:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80038ba:	4630      	mov	r0, r6
 80038bc:	ee10 2a10 	vmov	r2, s0
 80038c0:	460b      	mov	r3, r1
 80038c2:	4629      	mov	r1, r5
 80038c4:	f7fe fe46 	bl	8002554 <__aeabi_ddiv>
 80038c8:	ec41 0b10 	vmov	d0, r0, r1
 80038cc:	b003      	add	sp, #12
 80038ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080038d2 <_mprec_log10>:
 80038d2:	2817      	cmp	r0, #23
 80038d4:	b5d0      	push	{r4, r6, r7, lr}
 80038d6:	4604      	mov	r4, r0
 80038d8:	dc07      	bgt.n	80038ea <_mprec_log10+0x18>
 80038da:	4b09      	ldr	r3, [pc, #36]	; (8003900 <_mprec_log10+0x2e>)
 80038dc:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
 80038e0:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 80038e4:	ec41 0b10 	vmov	d0, r0, r1
 80038e8:	bdd0      	pop	{r4, r6, r7, pc}
 80038ea:	4906      	ldr	r1, [pc, #24]	; (8003904 <_mprec_log10+0x32>)
 80038ec:	4f06      	ldr	r7, [pc, #24]	; (8003908 <_mprec_log10+0x36>)
 80038ee:	2000      	movs	r0, #0
 80038f0:	2600      	movs	r6, #0
 80038f2:	4632      	mov	r2, r6
 80038f4:	463b      	mov	r3, r7
 80038f6:	f7fe fd03 	bl	8002300 <__aeabi_dmul>
 80038fa:	3c01      	subs	r4, #1
 80038fc:	d1f9      	bne.n	80038f2 <_mprec_log10+0x20>
 80038fe:	e7f1      	b.n	80038e4 <_mprec_log10+0x12>
 8003900:	08007a30 	.word	0x08007a30
 8003904:	3ff00000 	.word	0x3ff00000
 8003908:	40240000 	.word	0x40240000

0800390c <__copybits>:
 800390c:	3901      	subs	r1, #1
 800390e:	b510      	push	{r4, lr}
 8003910:	1149      	asrs	r1, r1, #5
 8003912:	6914      	ldr	r4, [r2, #16]
 8003914:	3101      	adds	r1, #1
 8003916:	f102 0314 	add.w	r3, r2, #20
 800391a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800391e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003922:	42a3      	cmp	r3, r4
 8003924:	4602      	mov	r2, r0
 8003926:	d303      	bcc.n	8003930 <__copybits+0x24>
 8003928:	2300      	movs	r3, #0
 800392a:	428a      	cmp	r2, r1
 800392c:	d305      	bcc.n	800393a <__copybits+0x2e>
 800392e:	bd10      	pop	{r4, pc}
 8003930:	f853 2b04 	ldr.w	r2, [r3], #4
 8003934:	f840 2b04 	str.w	r2, [r0], #4
 8003938:	e7f3      	b.n	8003922 <__copybits+0x16>
 800393a:	f842 3b04 	str.w	r3, [r2], #4
 800393e:	e7f4      	b.n	800392a <__copybits+0x1e>

08003940 <__any_on>:
 8003940:	f100 0214 	add.w	r2, r0, #20
 8003944:	6900      	ldr	r0, [r0, #16]
 8003946:	114b      	asrs	r3, r1, #5
 8003948:	4298      	cmp	r0, r3
 800394a:	b510      	push	{r4, lr}
 800394c:	db11      	blt.n	8003972 <__any_on+0x32>
 800394e:	dd0a      	ble.n	8003966 <__any_on+0x26>
 8003950:	f011 011f 	ands.w	r1, r1, #31
 8003954:	d007      	beq.n	8003966 <__any_on+0x26>
 8003956:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800395a:	fa24 f001 	lsr.w	r0, r4, r1
 800395e:	fa00 f101 	lsl.w	r1, r0, r1
 8003962:	428c      	cmp	r4, r1
 8003964:	d10b      	bne.n	800397e <__any_on+0x3e>
 8003966:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800396a:	4293      	cmp	r3, r2
 800396c:	d803      	bhi.n	8003976 <__any_on+0x36>
 800396e:	2000      	movs	r0, #0
 8003970:	bd10      	pop	{r4, pc}
 8003972:	4603      	mov	r3, r0
 8003974:	e7f7      	b.n	8003966 <__any_on+0x26>
 8003976:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800397a:	2900      	cmp	r1, #0
 800397c:	d0f5      	beq.n	800396a <__any_on+0x2a>
 800397e:	2001      	movs	r0, #1
 8003980:	e7f6      	b.n	8003970 <__any_on+0x30>
 8003982:	bf00      	nop

08003984 <_malloc_r>:
 8003984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003986:	1cce      	adds	r6, r1, #3
 8003988:	f026 0603 	bic.w	r6, r6, #3
 800398c:	3608      	adds	r6, #8
 800398e:	2e0c      	cmp	r6, #12
 8003990:	bf38      	it	cc
 8003992:	260c      	movcc	r6, #12
 8003994:	2e00      	cmp	r6, #0
 8003996:	4607      	mov	r7, r0
 8003998:	db01      	blt.n	800399e <_malloc_r+0x1a>
 800399a:	42b1      	cmp	r1, r6
 800399c:	d903      	bls.n	80039a6 <_malloc_r+0x22>
 800399e:	230c      	movs	r3, #12
 80039a0:	603b      	str	r3, [r7, #0]
 80039a2:	2000      	movs	r0, #0
 80039a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a6:	4d21      	ldr	r5, [pc, #132]	; (8003a2c <_malloc_r+0xa8>)
 80039a8:	f000 fef5 	bl	8004796 <__malloc_lock>
 80039ac:	682a      	ldr	r2, [r5, #0]
 80039ae:	4614      	mov	r4, r2
 80039b0:	b994      	cbnz	r4, 80039d8 <_malloc_r+0x54>
 80039b2:	686b      	ldr	r3, [r5, #4]
 80039b4:	b923      	cbnz	r3, 80039c0 <_malloc_r+0x3c>
 80039b6:	4621      	mov	r1, r4
 80039b8:	4638      	mov	r0, r7
 80039ba:	f000 f971 	bl	8003ca0 <_sbrk_r>
 80039be:	6068      	str	r0, [r5, #4]
 80039c0:	4631      	mov	r1, r6
 80039c2:	4638      	mov	r0, r7
 80039c4:	f000 f96c 	bl	8003ca0 <_sbrk_r>
 80039c8:	1c43      	adds	r3, r0, #1
 80039ca:	d123      	bne.n	8003a14 <_malloc_r+0x90>
 80039cc:	230c      	movs	r3, #12
 80039ce:	603b      	str	r3, [r7, #0]
 80039d0:	4638      	mov	r0, r7
 80039d2:	f000 fee1 	bl	8004798 <__malloc_unlock>
 80039d6:	e7e4      	b.n	80039a2 <_malloc_r+0x1e>
 80039d8:	6823      	ldr	r3, [r4, #0]
 80039da:	1b9b      	subs	r3, r3, r6
 80039dc:	d417      	bmi.n	8003a0e <_malloc_r+0x8a>
 80039de:	2b0b      	cmp	r3, #11
 80039e0:	d903      	bls.n	80039ea <_malloc_r+0x66>
 80039e2:	6023      	str	r3, [r4, #0]
 80039e4:	441c      	add	r4, r3
 80039e6:	6026      	str	r6, [r4, #0]
 80039e8:	e004      	b.n	80039f4 <_malloc_r+0x70>
 80039ea:	6863      	ldr	r3, [r4, #4]
 80039ec:	42a2      	cmp	r2, r4
 80039ee:	bf0c      	ite	eq
 80039f0:	602b      	streq	r3, [r5, #0]
 80039f2:	6053      	strne	r3, [r2, #4]
 80039f4:	4638      	mov	r0, r7
 80039f6:	f000 fecf 	bl	8004798 <__malloc_unlock>
 80039fa:	f104 000b 	add.w	r0, r4, #11
 80039fe:	1d23      	adds	r3, r4, #4
 8003a00:	f020 0007 	bic.w	r0, r0, #7
 8003a04:	1ac2      	subs	r2, r0, r3
 8003a06:	d0cd      	beq.n	80039a4 <_malloc_r+0x20>
 8003a08:	1a1b      	subs	r3, r3, r0
 8003a0a:	50a3      	str	r3, [r4, r2]
 8003a0c:	e7ca      	b.n	80039a4 <_malloc_r+0x20>
 8003a0e:	4622      	mov	r2, r4
 8003a10:	6864      	ldr	r4, [r4, #4]
 8003a12:	e7cd      	b.n	80039b0 <_malloc_r+0x2c>
 8003a14:	1cc4      	adds	r4, r0, #3
 8003a16:	f024 0403 	bic.w	r4, r4, #3
 8003a1a:	42a0      	cmp	r0, r4
 8003a1c:	d0e3      	beq.n	80039e6 <_malloc_r+0x62>
 8003a1e:	1a21      	subs	r1, r4, r0
 8003a20:	4638      	mov	r0, r7
 8003a22:	f000 f93d 	bl	8003ca0 <_sbrk_r>
 8003a26:	3001      	adds	r0, #1
 8003a28:	d1dd      	bne.n	80039e6 <_malloc_r+0x62>
 8003a2a:	e7cf      	b.n	80039cc <_malloc_r+0x48>
 8003a2c:	20000000 	.word	0x20000000

08003a30 <__sfputc_r>:
 8003a30:	6893      	ldr	r3, [r2, #8]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	b410      	push	{r4}
 8003a38:	6093      	str	r3, [r2, #8]
 8003a3a:	da08      	bge.n	8003a4e <__sfputc_r+0x1e>
 8003a3c:	6994      	ldr	r4, [r2, #24]
 8003a3e:	42a3      	cmp	r3, r4
 8003a40:	db01      	blt.n	8003a46 <__sfputc_r+0x16>
 8003a42:	290a      	cmp	r1, #10
 8003a44:	d103      	bne.n	8003a4e <__sfputc_r+0x1e>
 8003a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a4a:	f000 b939 	b.w	8003cc0 <__swbuf_r>
 8003a4e:	6813      	ldr	r3, [r2, #0]
 8003a50:	1c58      	adds	r0, r3, #1
 8003a52:	6010      	str	r0, [r2, #0]
 8003a54:	7019      	strb	r1, [r3, #0]
 8003a56:	4608      	mov	r0, r1
 8003a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003a5c:	4770      	bx	lr

08003a5e <__sfputs_r>:
 8003a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a60:	4606      	mov	r6, r0
 8003a62:	460f      	mov	r7, r1
 8003a64:	4614      	mov	r4, r2
 8003a66:	18d5      	adds	r5, r2, r3
 8003a68:	42ac      	cmp	r4, r5
 8003a6a:	d101      	bne.n	8003a70 <__sfputs_r+0x12>
 8003a6c:	2000      	movs	r0, #0
 8003a6e:	e007      	b.n	8003a80 <__sfputs_r+0x22>
 8003a70:	463a      	mov	r2, r7
 8003a72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a76:	4630      	mov	r0, r6
 8003a78:	f7ff ffda 	bl	8003a30 <__sfputc_r>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d1f3      	bne.n	8003a68 <__sfputs_r+0xa>
 8003a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003a82 <__sprint_r>:
 8003a82:	b538      	push	{r3, r4, r5, lr}
 8003a84:	6893      	ldr	r3, [r2, #8]
 8003a86:	4614      	mov	r4, r2
 8003a88:	2500      	movs	r5, #0
 8003a8a:	b913      	cbnz	r3, 8003a92 <__sprint_r+0x10>
 8003a8c:	6053      	str	r3, [r2, #4]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	bd38      	pop	{r3, r4, r5, pc}
 8003a92:	f000 fb09 	bl	80040a8 <__sfvwrite_r>
 8003a96:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003a9a:	e7f9      	b.n	8003a90 <__sprint_r+0xe>

08003a9c <_vfiprintf_r>:
 8003a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003aa0:	460e      	mov	r6, r1
 8003aa2:	b09d      	sub	sp, #116	; 0x74
 8003aa4:	4614      	mov	r4, r2
 8003aa6:	461d      	mov	r5, r3
 8003aa8:	4607      	mov	r7, r0
 8003aaa:	b118      	cbz	r0, 8003ab4 <_vfiprintf_r+0x18>
 8003aac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003aae:	b90b      	cbnz	r3, 8003ab4 <_vfiprintf_r+0x18>
 8003ab0:	f000 fa9c 	bl	8003fec <__sinit>
 8003ab4:	89b3      	ldrh	r3, [r6, #12]
 8003ab6:	0718      	lsls	r0, r3, #28
 8003ab8:	d556      	bpl.n	8003b68 <_vfiprintf_r+0xcc>
 8003aba:	6933      	ldr	r3, [r6, #16]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d053      	beq.n	8003b68 <_vfiprintf_r+0xcc>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	9309      	str	r3, [sp, #36]	; 0x24
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003aca:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8003c78 <_vfiprintf_r+0x1dc>
 8003ace:	9503      	str	r5, [sp, #12]
 8003ad0:	2330      	movs	r3, #48	; 0x30
 8003ad2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003ad6:	f04f 0a01 	mov.w	sl, #1
 8003ada:	4623      	mov	r3, r4
 8003adc:	461d      	mov	r5, r3
 8003ade:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003ae2:	b10a      	cbz	r2, 8003ae8 <_vfiprintf_r+0x4c>
 8003ae4:	2a25      	cmp	r2, #37	; 0x25
 8003ae6:	d1f9      	bne.n	8003adc <_vfiprintf_r+0x40>
 8003ae8:	ebb5 0b04 	subs.w	fp, r5, r4
 8003aec:	d00b      	beq.n	8003b06 <_vfiprintf_r+0x6a>
 8003aee:	465b      	mov	r3, fp
 8003af0:	4622      	mov	r2, r4
 8003af2:	4631      	mov	r1, r6
 8003af4:	4638      	mov	r0, r7
 8003af6:	f7ff ffb2 	bl	8003a5e <__sfputs_r>
 8003afa:	3001      	adds	r0, #1
 8003afc:	f000 80ae 	beq.w	8003c5c <_vfiprintf_r+0x1c0>
 8003b00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b02:	445b      	add	r3, fp
 8003b04:	9309      	str	r3, [sp, #36]	; 0x24
 8003b06:	782b      	ldrb	r3, [r5, #0]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	f000 80a7 	beq.w	8003c5c <_vfiprintf_r+0x1c0>
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003b14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b18:	3501      	adds	r5, #1
 8003b1a:	9304      	str	r3, [sp, #16]
 8003b1c:	9307      	str	r3, [sp, #28]
 8003b1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003b22:	931a      	str	r3, [sp, #104]	; 0x68
 8003b24:	462c      	mov	r4, r5
 8003b26:	2205      	movs	r2, #5
 8003b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b2c:	4852      	ldr	r0, [pc, #328]	; (8003c78 <_vfiprintf_r+0x1dc>)
 8003b2e:	f7fc fb4f 	bl	80001d0 <memchr>
 8003b32:	9b04      	ldr	r3, [sp, #16]
 8003b34:	bb18      	cbnz	r0, 8003b7e <_vfiprintf_r+0xe2>
 8003b36:	06d9      	lsls	r1, r3, #27
 8003b38:	bf44      	itt	mi
 8003b3a:	2220      	movmi	r2, #32
 8003b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b40:	071a      	lsls	r2, r3, #28
 8003b42:	bf44      	itt	mi
 8003b44:	222b      	movmi	r2, #43	; 0x2b
 8003b46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003b4a:	782a      	ldrb	r2, [r5, #0]
 8003b4c:	2a2a      	cmp	r2, #42	; 0x2a
 8003b4e:	d01e      	beq.n	8003b8e <_vfiprintf_r+0xf2>
 8003b50:	9a07      	ldr	r2, [sp, #28]
 8003b52:	462c      	mov	r4, r5
 8003b54:	2000      	movs	r0, #0
 8003b56:	250a      	movs	r5, #10
 8003b58:	4621      	mov	r1, r4
 8003b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b5e:	3b30      	subs	r3, #48	; 0x30
 8003b60:	2b09      	cmp	r3, #9
 8003b62:	d956      	bls.n	8003c12 <_vfiprintf_r+0x176>
 8003b64:	b9c8      	cbnz	r0, 8003b9a <_vfiprintf_r+0xfe>
 8003b66:	e01f      	b.n	8003ba8 <_vfiprintf_r+0x10c>
 8003b68:	4631      	mov	r1, r6
 8003b6a:	4638      	mov	r0, r7
 8003b6c:	f000 f8ee 	bl	8003d4c <__swsetup_r>
 8003b70:	2800      	cmp	r0, #0
 8003b72:	d0a5      	beq.n	8003ac0 <_vfiprintf_r+0x24>
 8003b74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003b78:	b01d      	add	sp, #116	; 0x74
 8003b7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b7e:	eba0 0009 	sub.w	r0, r0, r9
 8003b82:	fa0a f000 	lsl.w	r0, sl, r0
 8003b86:	4318      	orrs	r0, r3
 8003b88:	9004      	str	r0, [sp, #16]
 8003b8a:	4625      	mov	r5, r4
 8003b8c:	e7ca      	b.n	8003b24 <_vfiprintf_r+0x88>
 8003b8e:	9a03      	ldr	r2, [sp, #12]
 8003b90:	1d11      	adds	r1, r2, #4
 8003b92:	6812      	ldr	r2, [r2, #0]
 8003b94:	9103      	str	r1, [sp, #12]
 8003b96:	2a00      	cmp	r2, #0
 8003b98:	db01      	blt.n	8003b9e <_vfiprintf_r+0x102>
 8003b9a:	9207      	str	r2, [sp, #28]
 8003b9c:	e004      	b.n	8003ba8 <_vfiprintf_r+0x10c>
 8003b9e:	4252      	negs	r2, r2
 8003ba0:	f043 0302 	orr.w	r3, r3, #2
 8003ba4:	9207      	str	r2, [sp, #28]
 8003ba6:	9304      	str	r3, [sp, #16]
 8003ba8:	7823      	ldrb	r3, [r4, #0]
 8003baa:	2b2e      	cmp	r3, #46	; 0x2e
 8003bac:	d10c      	bne.n	8003bc8 <_vfiprintf_r+0x12c>
 8003bae:	7863      	ldrb	r3, [r4, #1]
 8003bb0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bb2:	d133      	bne.n	8003c1c <_vfiprintf_r+0x180>
 8003bb4:	9b03      	ldr	r3, [sp, #12]
 8003bb6:	1d1a      	adds	r2, r3, #4
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	9203      	str	r2, [sp, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	bfb8      	it	lt
 8003bc0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003bc4:	3402      	adds	r4, #2
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	4d2c      	ldr	r5, [pc, #176]	; (8003c7c <_vfiprintf_r+0x1e0>)
 8003bca:	7821      	ldrb	r1, [r4, #0]
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4628      	mov	r0, r5
 8003bd0:	f7fc fafe 	bl	80001d0 <memchr>
 8003bd4:	b138      	cbz	r0, 8003be6 <_vfiprintf_r+0x14a>
 8003bd6:	2340      	movs	r3, #64	; 0x40
 8003bd8:	1b40      	subs	r0, r0, r5
 8003bda:	fa03 f000 	lsl.w	r0, r3, r0
 8003bde:	9b04      	ldr	r3, [sp, #16]
 8003be0:	4303      	orrs	r3, r0
 8003be2:	3401      	adds	r4, #1
 8003be4:	9304      	str	r3, [sp, #16]
 8003be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bea:	4825      	ldr	r0, [pc, #148]	; (8003c80 <_vfiprintf_r+0x1e4>)
 8003bec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003bf0:	2206      	movs	r2, #6
 8003bf2:	f7fc faed 	bl	80001d0 <memchr>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d035      	beq.n	8003c66 <_vfiprintf_r+0x1ca>
 8003bfa:	4b22      	ldr	r3, [pc, #136]	; (8003c84 <_vfiprintf_r+0x1e8>)
 8003bfc:	bb13      	cbnz	r3, 8003c44 <_vfiprintf_r+0x1a8>
 8003bfe:	9b03      	ldr	r3, [sp, #12]
 8003c00:	3307      	adds	r3, #7
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	3308      	adds	r3, #8
 8003c08:	9303      	str	r3, [sp, #12]
 8003c0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c0c:	4443      	add	r3, r8
 8003c0e:	9309      	str	r3, [sp, #36]	; 0x24
 8003c10:	e763      	b.n	8003ada <_vfiprintf_r+0x3e>
 8003c12:	fb05 3202 	mla	r2, r5, r2, r3
 8003c16:	2001      	movs	r0, #1
 8003c18:	460c      	mov	r4, r1
 8003c1a:	e79d      	b.n	8003b58 <_vfiprintf_r+0xbc>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	3401      	adds	r4, #1
 8003c20:	9305      	str	r3, [sp, #20]
 8003c22:	4619      	mov	r1, r3
 8003c24:	250a      	movs	r5, #10
 8003c26:	4620      	mov	r0, r4
 8003c28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c2c:	3a30      	subs	r2, #48	; 0x30
 8003c2e:	2a09      	cmp	r2, #9
 8003c30:	d903      	bls.n	8003c3a <_vfiprintf_r+0x19e>
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0c8      	beq.n	8003bc8 <_vfiprintf_r+0x12c>
 8003c36:	9105      	str	r1, [sp, #20]
 8003c38:	e7c6      	b.n	8003bc8 <_vfiprintf_r+0x12c>
 8003c3a:	fb05 2101 	mla	r1, r5, r1, r2
 8003c3e:	2301      	movs	r3, #1
 8003c40:	4604      	mov	r4, r0
 8003c42:	e7f0      	b.n	8003c26 <_vfiprintf_r+0x18a>
 8003c44:	ab03      	add	r3, sp, #12
 8003c46:	9300      	str	r3, [sp, #0]
 8003c48:	4632      	mov	r2, r6
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	; (8003c88 <_vfiprintf_r+0x1ec>)
 8003c4c:	a904      	add	r1, sp, #16
 8003c4e:	4638      	mov	r0, r7
 8003c50:	f7fe fecf 	bl	80029f2 <_printf_float>
 8003c54:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8003c58:	4680      	mov	r8, r0
 8003c5a:	d1d6      	bne.n	8003c0a <_vfiprintf_r+0x16e>
 8003c5c:	89b3      	ldrh	r3, [r6, #12]
 8003c5e:	065b      	lsls	r3, r3, #25
 8003c60:	d488      	bmi.n	8003b74 <_vfiprintf_r+0xd8>
 8003c62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003c64:	e788      	b.n	8003b78 <_vfiprintf_r+0xdc>
 8003c66:	ab03      	add	r3, sp, #12
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	4b06      	ldr	r3, [pc, #24]	; (8003c88 <_vfiprintf_r+0x1ec>)
 8003c6e:	a904      	add	r1, sp, #16
 8003c70:	4638      	mov	r0, r7
 8003c72:	f7ff f95e 	bl	8002f32 <_printf_i>
 8003c76:	e7ed      	b.n	8003c54 <_vfiprintf_r+0x1b8>
 8003c78:	0800802f 	.word	0x0800802f
 8003c7c:	08008035 	.word	0x08008035
 8003c80:	08008039 	.word	0x08008039
 8003c84:	080029f3 	.word	0x080029f3
 8003c88:	08003a5f 	.word	0x08003a5f

08003c8c <vfiprintf>:
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	460a      	mov	r2, r1
 8003c90:	4601      	mov	r1, r0
 8003c92:	4802      	ldr	r0, [pc, #8]	; (8003c9c <vfiprintf+0x10>)
 8003c94:	6800      	ldr	r0, [r0, #0]
 8003c96:	f7ff bf01 	b.w	8003a9c <_vfiprintf_r>
 8003c9a:	bf00      	nop
 8003c9c:	20001040 	.word	0x20001040

08003ca0 <_sbrk_r>:
 8003ca0:	b538      	push	{r3, r4, r5, lr}
 8003ca2:	4c06      	ldr	r4, [pc, #24]	; (8003cbc <_sbrk_r+0x1c>)
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	4605      	mov	r5, r0
 8003ca8:	4608      	mov	r0, r1
 8003caa:	6023      	str	r3, [r4, #0]
 8003cac:	f001 fd1c 	bl	80056e8 <_sbrk>
 8003cb0:	1c43      	adds	r3, r0, #1
 8003cb2:	d102      	bne.n	8003cba <_sbrk_r+0x1a>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	b103      	cbz	r3, 8003cba <_sbrk_r+0x1a>
 8003cb8:	602b      	str	r3, [r5, #0]
 8003cba:	bd38      	pop	{r3, r4, r5, pc}
 8003cbc:	200002fc 	.word	0x200002fc

08003cc0 <__swbuf_r>:
 8003cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc2:	460d      	mov	r5, r1
 8003cc4:	4614      	mov	r4, r2
 8003cc6:	4606      	mov	r6, r0
 8003cc8:	b118      	cbz	r0, 8003cd2 <__swbuf_r+0x12>
 8003cca:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003ccc:	b90b      	cbnz	r3, 8003cd2 <__swbuf_r+0x12>
 8003cce:	f000 f98d 	bl	8003fec <__sinit>
 8003cd2:	69a3      	ldr	r3, [r4, #24]
 8003cd4:	60a3      	str	r3, [r4, #8]
 8003cd6:	89a3      	ldrh	r3, [r4, #12]
 8003cd8:	071a      	lsls	r2, r3, #28
 8003cda:	d525      	bpl.n	8003d28 <__swbuf_r+0x68>
 8003cdc:	6923      	ldr	r3, [r4, #16]
 8003cde:	b31b      	cbz	r3, 8003d28 <__swbuf_r+0x68>
 8003ce0:	6923      	ldr	r3, [r4, #16]
 8003ce2:	6820      	ldr	r0, [r4, #0]
 8003ce4:	1ac0      	subs	r0, r0, r3
 8003ce6:	6963      	ldr	r3, [r4, #20]
 8003ce8:	b2ed      	uxtb	r5, r5
 8003cea:	4283      	cmp	r3, r0
 8003cec:	462f      	mov	r7, r5
 8003cee:	dc04      	bgt.n	8003cfa <__swbuf_r+0x3a>
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	f000 f910 	bl	8003f18 <_fflush_r>
 8003cf8:	b9e0      	cbnz	r0, 8003d34 <__swbuf_r+0x74>
 8003cfa:	68a3      	ldr	r3, [r4, #8]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60a3      	str	r3, [r4, #8]
 8003d00:	6823      	ldr	r3, [r4, #0]
 8003d02:	1c5a      	adds	r2, r3, #1
 8003d04:	6022      	str	r2, [r4, #0]
 8003d06:	701d      	strb	r5, [r3, #0]
 8003d08:	6963      	ldr	r3, [r4, #20]
 8003d0a:	3001      	adds	r0, #1
 8003d0c:	4283      	cmp	r3, r0
 8003d0e:	d004      	beq.n	8003d1a <__swbuf_r+0x5a>
 8003d10:	89a3      	ldrh	r3, [r4, #12]
 8003d12:	07db      	lsls	r3, r3, #31
 8003d14:	d506      	bpl.n	8003d24 <__swbuf_r+0x64>
 8003d16:	2d0a      	cmp	r5, #10
 8003d18:	d104      	bne.n	8003d24 <__swbuf_r+0x64>
 8003d1a:	4621      	mov	r1, r4
 8003d1c:	4630      	mov	r0, r6
 8003d1e:	f000 f8fb 	bl	8003f18 <_fflush_r>
 8003d22:	b938      	cbnz	r0, 8003d34 <__swbuf_r+0x74>
 8003d24:	4638      	mov	r0, r7
 8003d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003d28:	4621      	mov	r1, r4
 8003d2a:	4630      	mov	r0, r6
 8003d2c:	f000 f80e 	bl	8003d4c <__swsetup_r>
 8003d30:	2800      	cmp	r0, #0
 8003d32:	d0d5      	beq.n	8003ce0 <__swbuf_r+0x20>
 8003d34:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8003d38:	e7f4      	b.n	8003d24 <__swbuf_r+0x64>

08003d3a <__swbuf>:
 8003d3a:	4b03      	ldr	r3, [pc, #12]	; (8003d48 <__swbuf+0xe>)
 8003d3c:	460a      	mov	r2, r1
 8003d3e:	4601      	mov	r1, r0
 8003d40:	6818      	ldr	r0, [r3, #0]
 8003d42:	f7ff bfbd 	b.w	8003cc0 <__swbuf_r>
 8003d46:	bf00      	nop
 8003d48:	20001040 	.word	0x20001040

08003d4c <__swsetup_r>:
 8003d4c:	b538      	push	{r3, r4, r5, lr}
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <__swsetup_r+0xac>)
 8003d50:	4605      	mov	r5, r0
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	460c      	mov	r4, r1
 8003d56:	b118      	cbz	r0, 8003d60 <__swsetup_r+0x14>
 8003d58:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003d5a:	b90b      	cbnz	r3, 8003d60 <__swsetup_r+0x14>
 8003d5c:	f000 f946 	bl	8003fec <__sinit>
 8003d60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d64:	b29a      	uxth	r2, r3
 8003d66:	0711      	lsls	r1, r2, #28
 8003d68:	d422      	bmi.n	8003db0 <__swsetup_r+0x64>
 8003d6a:	06d0      	lsls	r0, r2, #27
 8003d6c:	d407      	bmi.n	8003d7e <__swsetup_r+0x32>
 8003d6e:	2209      	movs	r2, #9
 8003d70:	602a      	str	r2, [r5, #0]
 8003d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d76:	81a3      	strh	r3, [r4, #12]
 8003d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d7c:	e034      	b.n	8003de8 <__swsetup_r+0x9c>
 8003d7e:	0751      	lsls	r1, r2, #29
 8003d80:	d512      	bpl.n	8003da8 <__swsetup_r+0x5c>
 8003d82:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003d84:	b141      	cbz	r1, 8003d98 <__swsetup_r+0x4c>
 8003d86:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003d8a:	4299      	cmp	r1, r3
 8003d8c:	d002      	beq.n	8003d94 <__swsetup_r+0x48>
 8003d8e:	4628      	mov	r0, r5
 8003d90:	f000 fb62 	bl	8004458 <_free_r>
 8003d94:	2300      	movs	r3, #0
 8003d96:	6323      	str	r3, [r4, #48]	; 0x30
 8003d98:	89a3      	ldrh	r3, [r4, #12]
 8003d9a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003d9e:	81a3      	strh	r3, [r4, #12]
 8003da0:	2300      	movs	r3, #0
 8003da2:	6063      	str	r3, [r4, #4]
 8003da4:	6923      	ldr	r3, [r4, #16]
 8003da6:	6023      	str	r3, [r4, #0]
 8003da8:	89a3      	ldrh	r3, [r4, #12]
 8003daa:	f043 0308 	orr.w	r3, r3, #8
 8003dae:	81a3      	strh	r3, [r4, #12]
 8003db0:	6923      	ldr	r3, [r4, #16]
 8003db2:	b94b      	cbnz	r3, 8003dc8 <__swsetup_r+0x7c>
 8003db4:	89a3      	ldrh	r3, [r4, #12]
 8003db6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003dba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003dbe:	d003      	beq.n	8003dc8 <__swsetup_r+0x7c>
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	4628      	mov	r0, r5
 8003dc4:	f000 faeb 	bl	800439e <__smakebuf_r>
 8003dc8:	89a2      	ldrh	r2, [r4, #12]
 8003dca:	f012 0301 	ands.w	r3, r2, #1
 8003dce:	d00c      	beq.n	8003dea <__swsetup_r+0x9e>
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	60a3      	str	r3, [r4, #8]
 8003dd4:	6963      	ldr	r3, [r4, #20]
 8003dd6:	425b      	negs	r3, r3
 8003dd8:	61a3      	str	r3, [r4, #24]
 8003dda:	6923      	ldr	r3, [r4, #16]
 8003ddc:	b953      	cbnz	r3, 8003df4 <__swsetup_r+0xa8>
 8003dde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003de2:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003de6:	d1c4      	bne.n	8003d72 <__swsetup_r+0x26>
 8003de8:	bd38      	pop	{r3, r4, r5, pc}
 8003dea:	0792      	lsls	r2, r2, #30
 8003dec:	bf58      	it	pl
 8003dee:	6963      	ldrpl	r3, [r4, #20]
 8003df0:	60a3      	str	r3, [r4, #8]
 8003df2:	e7f2      	b.n	8003dda <__swsetup_r+0x8e>
 8003df4:	2000      	movs	r0, #0
 8003df6:	e7f7      	b.n	8003de8 <__swsetup_r+0x9c>
 8003df8:	20001040 	.word	0x20001040

08003dfc <__sflush_r>:
 8003dfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003e00:	b293      	uxth	r3, r2
 8003e02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e06:	4605      	mov	r5, r0
 8003e08:	0718      	lsls	r0, r3, #28
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	d45f      	bmi.n	8003ece <__sflush_r+0xd2>
 8003e0e:	684b      	ldr	r3, [r1, #4]
 8003e10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	818a      	strh	r2, [r1, #12]
 8003e18:	dc05      	bgt.n	8003e26 <__sflush_r+0x2a>
 8003e1a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	dc02      	bgt.n	8003e26 <__sflush_r+0x2a>
 8003e20:	2000      	movs	r0, #0
 8003e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e26:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e28:	2e00      	cmp	r6, #0
 8003e2a:	d0f9      	beq.n	8003e20 <__sflush_r+0x24>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e32:	682f      	ldr	r7, [r5, #0]
 8003e34:	602b      	str	r3, [r5, #0]
 8003e36:	d036      	beq.n	8003ea6 <__sflush_r+0xaa>
 8003e38:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8003e3a:	89a3      	ldrh	r3, [r4, #12]
 8003e3c:	075a      	lsls	r2, r3, #29
 8003e3e:	d505      	bpl.n	8003e4c <__sflush_r+0x50>
 8003e40:	6863      	ldr	r3, [r4, #4]
 8003e42:	1ac0      	subs	r0, r0, r3
 8003e44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003e46:	b10b      	cbz	r3, 8003e4c <__sflush_r+0x50>
 8003e48:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003e4a:	1ac0      	subs	r0, r0, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	4602      	mov	r2, r0
 8003e50:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003e52:	69e1      	ldr	r1, [r4, #28]
 8003e54:	4628      	mov	r0, r5
 8003e56:	47b0      	blx	r6
 8003e58:	1c43      	adds	r3, r0, #1
 8003e5a:	89a3      	ldrh	r3, [r4, #12]
 8003e5c:	d106      	bne.n	8003e6c <__sflush_r+0x70>
 8003e5e:	6829      	ldr	r1, [r5, #0]
 8003e60:	291d      	cmp	r1, #29
 8003e62:	d830      	bhi.n	8003ec6 <__sflush_r+0xca>
 8003e64:	4a2b      	ldr	r2, [pc, #172]	; (8003f14 <__sflush_r+0x118>)
 8003e66:	40ca      	lsrs	r2, r1
 8003e68:	07d6      	lsls	r6, r2, #31
 8003e6a:	d52c      	bpl.n	8003ec6 <__sflush_r+0xca>
 8003e6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	2200      	movs	r2, #0
 8003e74:	6062      	str	r2, [r4, #4]
 8003e76:	04d9      	lsls	r1, r3, #19
 8003e78:	6922      	ldr	r2, [r4, #16]
 8003e7a:	81a3      	strh	r3, [r4, #12]
 8003e7c:	6022      	str	r2, [r4, #0]
 8003e7e:	d504      	bpl.n	8003e8a <__sflush_r+0x8e>
 8003e80:	1c42      	adds	r2, r0, #1
 8003e82:	d101      	bne.n	8003e88 <__sflush_r+0x8c>
 8003e84:	682b      	ldr	r3, [r5, #0]
 8003e86:	b903      	cbnz	r3, 8003e8a <__sflush_r+0x8e>
 8003e88:	6520      	str	r0, [r4, #80]	; 0x50
 8003e8a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003e8c:	602f      	str	r7, [r5, #0]
 8003e8e:	2900      	cmp	r1, #0
 8003e90:	d0c6      	beq.n	8003e20 <__sflush_r+0x24>
 8003e92:	f104 0340 	add.w	r3, r4, #64	; 0x40
 8003e96:	4299      	cmp	r1, r3
 8003e98:	d002      	beq.n	8003ea0 <__sflush_r+0xa4>
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	f000 fadc 	bl	8004458 <_free_r>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	6320      	str	r0, [r4, #48]	; 0x30
 8003ea4:	e7bd      	b.n	8003e22 <__sflush_r+0x26>
 8003ea6:	69e1      	ldr	r1, [r4, #28]
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	4628      	mov	r0, r5
 8003eac:	47b0      	blx	r6
 8003eae:	1c41      	adds	r1, r0, #1
 8003eb0:	d1c3      	bne.n	8003e3a <__sflush_r+0x3e>
 8003eb2:	682b      	ldr	r3, [r5, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0c0      	beq.n	8003e3a <__sflush_r+0x3e>
 8003eb8:	2b1d      	cmp	r3, #29
 8003eba:	d001      	beq.n	8003ec0 <__sflush_r+0xc4>
 8003ebc:	2b16      	cmp	r3, #22
 8003ebe:	d101      	bne.n	8003ec4 <__sflush_r+0xc8>
 8003ec0:	602f      	str	r7, [r5, #0]
 8003ec2:	e7ad      	b.n	8003e20 <__sflush_r+0x24>
 8003ec4:	89a3      	ldrh	r3, [r4, #12]
 8003ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	e7a9      	b.n	8003e22 <__sflush_r+0x26>
 8003ece:	690f      	ldr	r7, [r1, #16]
 8003ed0:	2f00      	cmp	r7, #0
 8003ed2:	d0a5      	beq.n	8003e20 <__sflush_r+0x24>
 8003ed4:	079b      	lsls	r3, r3, #30
 8003ed6:	680e      	ldr	r6, [r1, #0]
 8003ed8:	bf08      	it	eq
 8003eda:	694b      	ldreq	r3, [r1, #20]
 8003edc:	600f      	str	r7, [r1, #0]
 8003ede:	bf18      	it	ne
 8003ee0:	2300      	movne	r3, #0
 8003ee2:	eba6 0807 	sub.w	r8, r6, r7
 8003ee6:	608b      	str	r3, [r1, #8]
 8003ee8:	f1b8 0f00 	cmp.w	r8, #0
 8003eec:	dd98      	ble.n	8003e20 <__sflush_r+0x24>
 8003eee:	4643      	mov	r3, r8
 8003ef0:	463a      	mov	r2, r7
 8003ef2:	69e1      	ldr	r1, [r4, #28]
 8003ef4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003ef6:	4628      	mov	r0, r5
 8003ef8:	47b0      	blx	r6
 8003efa:	2800      	cmp	r0, #0
 8003efc:	dc06      	bgt.n	8003f0c <__sflush_r+0x110>
 8003efe:	89a3      	ldrh	r3, [r4, #12]
 8003f00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f04:	81a3      	strh	r3, [r4, #12]
 8003f06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f0a:	e78a      	b.n	8003e22 <__sflush_r+0x26>
 8003f0c:	4407      	add	r7, r0
 8003f0e:	eba8 0800 	sub.w	r8, r8, r0
 8003f12:	e7e9      	b.n	8003ee8 <__sflush_r+0xec>
 8003f14:	20400001 	.word	0x20400001

08003f18 <_fflush_r>:
 8003f18:	b538      	push	{r3, r4, r5, lr}
 8003f1a:	460d      	mov	r5, r1
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	b118      	cbz	r0, 8003f28 <_fflush_r+0x10>
 8003f20:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003f22:	b90b      	cbnz	r3, 8003f28 <_fflush_r+0x10>
 8003f24:	f000 f862 	bl	8003fec <__sinit>
 8003f28:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
 8003f2c:	b128      	cbz	r0, 8003f3a <_fflush_r+0x22>
 8003f2e:	4629      	mov	r1, r5
 8003f30:	4620      	mov	r0, r4
 8003f32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f36:	f7ff bf61 	b.w	8003dfc <__sflush_r>
 8003f3a:	bd38      	pop	{r3, r4, r5, pc}

08003f3c <fflush>:
 8003f3c:	4601      	mov	r1, r0
 8003f3e:	b920      	cbnz	r0, 8003f4a <fflush+0xe>
 8003f40:	4b04      	ldr	r3, [pc, #16]	; (8003f54 <fflush+0x18>)
 8003f42:	4905      	ldr	r1, [pc, #20]	; (8003f58 <fflush+0x1c>)
 8003f44:	6818      	ldr	r0, [r3, #0]
 8003f46:	f000 bbee 	b.w	8004726 <_fwalk_reent>
 8003f4a:	4b04      	ldr	r3, [pc, #16]	; (8003f5c <fflush+0x20>)
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	f7ff bfe3 	b.w	8003f18 <_fflush_r>
 8003f52:	bf00      	nop
 8003f54:	08007ce8 	.word	0x08007ce8
 8003f58:	08003f19 	.word	0x08003f19
 8003f5c:	20001040 	.word	0x20001040

08003f60 <std>:
 8003f60:	2300      	movs	r3, #0
 8003f62:	b510      	push	{r4, lr}
 8003f64:	4604      	mov	r4, r0
 8003f66:	e9c0 3300 	strd	r3, r3, [r0]
 8003f6a:	6083      	str	r3, [r0, #8]
 8003f6c:	8181      	strh	r1, [r0, #12]
 8003f6e:	6603      	str	r3, [r0, #96]	; 0x60
 8003f70:	81c2      	strh	r2, [r0, #14]
 8003f72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003f76:	6183      	str	r3, [r0, #24]
 8003f78:	4619      	mov	r1, r3
 8003f7a:	2208      	movs	r2, #8
 8003f7c:	3058      	adds	r0, #88	; 0x58
 8003f7e:	f000 fb8e 	bl	800469e <memset>
 8003f82:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <std+0x38>)
 8003f84:	6223      	str	r3, [r4, #32]
 8003f86:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <std+0x3c>)
 8003f88:	6263      	str	r3, [r4, #36]	; 0x24
 8003f8a:	4b05      	ldr	r3, [pc, #20]	; (8003fa0 <std+0x40>)
 8003f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003f8e:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <std+0x44>)
 8003f90:	61e4      	str	r4, [r4, #28]
 8003f92:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003f94:	bd10      	pop	{r4, pc}
 8003f96:	bf00      	nop
 8003f98:	080047e7 	.word	0x080047e7
 8003f9c:	0800480d 	.word	0x0800480d
 8003fa0:	08004845 	.word	0x08004845
 8003fa4:	08004869 	.word	0x08004869

08003fa8 <_cleanup_r>:
 8003fa8:	4901      	ldr	r1, [pc, #4]	; (8003fb0 <_cleanup_r+0x8>)
 8003faa:	f000 bbbc 	b.w	8004726 <_fwalk_reent>
 8003fae:	bf00      	nop
 8003fb0:	08003f19 	.word	0x08003f19

08003fb4 <__sfmoreglue>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	1e4a      	subs	r2, r1, #1
 8003fb8:	2564      	movs	r5, #100	; 0x64
 8003fba:	4355      	muls	r5, r2
 8003fbc:	460e      	mov	r6, r1
 8003fbe:	f105 0170 	add.w	r1, r5, #112	; 0x70
 8003fc2:	f7ff fcdf 	bl	8003984 <_malloc_r>
 8003fc6:	4604      	mov	r4, r0
 8003fc8:	b140      	cbz	r0, 8003fdc <__sfmoreglue+0x28>
 8003fca:	2100      	movs	r1, #0
 8003fcc:	e9c0 1600 	strd	r1, r6, [r0]
 8003fd0:	300c      	adds	r0, #12
 8003fd2:	60a0      	str	r0, [r4, #8]
 8003fd4:	f105 0264 	add.w	r2, r5, #100	; 0x64
 8003fd8:	f000 fb61 	bl	800469e <memset>
 8003fdc:	4620      	mov	r0, r4
 8003fde:	bd70      	pop	{r4, r5, r6, pc}

08003fe0 <_cleanup>:
 8003fe0:	4b01      	ldr	r3, [pc, #4]	; (8003fe8 <_cleanup+0x8>)
 8003fe2:	6818      	ldr	r0, [r3, #0]
 8003fe4:	f7ff bfe0 	b.w	8003fa8 <_cleanup_r>
 8003fe8:	08007ce8 	.word	0x08007ce8

08003fec <__sinit>:
 8003fec:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8003fee:	b510      	push	{r4, lr}
 8003ff0:	4604      	mov	r4, r0
 8003ff2:	b9d2      	cbnz	r2, 800402a <__sinit+0x3e>
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <__sinit+0x40>)
 8003ff6:	63c3      	str	r3, [r0, #60]	; 0x3c
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	f8c0 3150 	str.w	r3, [r0, #336]	; 0x150
 8003ffe:	f500 73ac 	add.w	r3, r0, #344	; 0x158
 8004002:	f8c0 3154 	str.w	r3, [r0, #340]	; 0x154
 8004006:	f8c0 214c 	str.w	r2, [r0, #332]	; 0x14c
 800400a:	2104      	movs	r1, #4
 800400c:	6840      	ldr	r0, [r0, #4]
 800400e:	f7ff ffa7 	bl	8003f60 <std>
 8004012:	2201      	movs	r2, #1
 8004014:	2109      	movs	r1, #9
 8004016:	68a0      	ldr	r0, [r4, #8]
 8004018:	f7ff ffa2 	bl	8003f60 <std>
 800401c:	2202      	movs	r2, #2
 800401e:	2112      	movs	r1, #18
 8004020:	68e0      	ldr	r0, [r4, #12]
 8004022:	f7ff ff9d 	bl	8003f60 <std>
 8004026:	2301      	movs	r3, #1
 8004028:	63a3      	str	r3, [r4, #56]	; 0x38
 800402a:	bd10      	pop	{r4, pc}
 800402c:	08003fa9 	.word	0x08003fa9

08004030 <__sfp>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <__sfp+0x70>)
 8004034:	681e      	ldr	r6, [r3, #0]
 8004036:	6bb3      	ldr	r3, [r6, #56]	; 0x38
 8004038:	4607      	mov	r7, r0
 800403a:	b913      	cbnz	r3, 8004042 <__sfp+0x12>
 800403c:	4630      	mov	r0, r6
 800403e:	f7ff ffd5 	bl	8003fec <__sinit>
 8004042:	f506 76a6 	add.w	r6, r6, #332	; 0x14c
 8004046:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800404a:	3b01      	subs	r3, #1
 800404c:	d503      	bpl.n	8004056 <__sfp+0x26>
 800404e:	6833      	ldr	r3, [r6, #0]
 8004050:	b1db      	cbz	r3, 800408a <__sfp+0x5a>
 8004052:	6836      	ldr	r6, [r6, #0]
 8004054:	e7f7      	b.n	8004046 <__sfp+0x16>
 8004056:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800405a:	b9a5      	cbnz	r5, 8004086 <__sfp+0x56>
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <__sfp+0x74>)
 800405e:	6625      	str	r5, [r4, #96]	; 0x60
 8004060:	e9c4 5500 	strd	r5, r5, [r4]
 8004064:	60a5      	str	r5, [r4, #8]
 8004066:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800406a:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800406e:	2208      	movs	r2, #8
 8004070:	4629      	mov	r1, r5
 8004072:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004076:	f000 fb12 	bl	800469e <memset>
 800407a:	e9c4 550c 	strd	r5, r5, [r4, #48]	; 0x30
 800407e:	e9c4 5511 	strd	r5, r5, [r4, #68]	; 0x44
 8004082:	4620      	mov	r0, r4
 8004084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004086:	3464      	adds	r4, #100	; 0x64
 8004088:	e7df      	b.n	800404a <__sfp+0x1a>
 800408a:	2104      	movs	r1, #4
 800408c:	4638      	mov	r0, r7
 800408e:	f7ff ff91 	bl	8003fb4 <__sfmoreglue>
 8004092:	4604      	mov	r4, r0
 8004094:	6030      	str	r0, [r6, #0]
 8004096:	2800      	cmp	r0, #0
 8004098:	d1db      	bne.n	8004052 <__sfp+0x22>
 800409a:	230c      	movs	r3, #12
 800409c:	603b      	str	r3, [r7, #0]
 800409e:	e7f0      	b.n	8004082 <__sfp+0x52>
 80040a0:	08007ce8 	.word	0x08007ce8
 80040a4:	ffff0001 	.word	0xffff0001

080040a8 <__sfvwrite_r>:
 80040a8:	6893      	ldr	r3, [r2, #8]
 80040aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ae:	4607      	mov	r7, r0
 80040b0:	460c      	mov	r4, r1
 80040b2:	4690      	mov	r8, r2
 80040b4:	b91b      	cbnz	r3, 80040be <__sfvwrite_r+0x16>
 80040b6:	2000      	movs	r0, #0
 80040b8:	b003      	add	sp, #12
 80040ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040be:	898b      	ldrh	r3, [r1, #12]
 80040c0:	0718      	lsls	r0, r3, #28
 80040c2:	d550      	bpl.n	8004166 <__sfvwrite_r+0xbe>
 80040c4:	690b      	ldr	r3, [r1, #16]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d04d      	beq.n	8004166 <__sfvwrite_r+0xbe>
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	f8d8 6000 	ldr.w	r6, [r8]
 80040d0:	f013 0902 	ands.w	r9, r3, #2
 80040d4:	d16c      	bne.n	80041b0 <__sfvwrite_r+0x108>
 80040d6:	f013 0301 	ands.w	r3, r3, #1
 80040da:	f000 809c 	beq.w	8004216 <__sfvwrite_r+0x16e>
 80040de:	4648      	mov	r0, r9
 80040e0:	46ca      	mov	sl, r9
 80040e2:	46cb      	mov	fp, r9
 80040e4:	f1bb 0f00 	cmp.w	fp, #0
 80040e8:	f000 8106 	beq.w	80042f8 <__sfvwrite_r+0x250>
 80040ec:	b950      	cbnz	r0, 8004104 <__sfvwrite_r+0x5c>
 80040ee:	465a      	mov	r2, fp
 80040f0:	210a      	movs	r1, #10
 80040f2:	4650      	mov	r0, sl
 80040f4:	f7fc f86c 	bl	80001d0 <memchr>
 80040f8:	2800      	cmp	r0, #0
 80040fa:	f000 8102 	beq.w	8004302 <__sfvwrite_r+0x25a>
 80040fe:	3001      	adds	r0, #1
 8004100:	eba0 090a 	sub.w	r9, r0, sl
 8004104:	6820      	ldr	r0, [r4, #0]
 8004106:	6921      	ldr	r1, [r4, #16]
 8004108:	6962      	ldr	r2, [r4, #20]
 800410a:	45d9      	cmp	r9, fp
 800410c:	464b      	mov	r3, r9
 800410e:	bf28      	it	cs
 8004110:	465b      	movcs	r3, fp
 8004112:	4288      	cmp	r0, r1
 8004114:	f240 80f8 	bls.w	8004308 <__sfvwrite_r+0x260>
 8004118:	68a5      	ldr	r5, [r4, #8]
 800411a:	4415      	add	r5, r2
 800411c:	42ab      	cmp	r3, r5
 800411e:	f340 80f3 	ble.w	8004308 <__sfvwrite_r+0x260>
 8004122:	4651      	mov	r1, sl
 8004124:	462a      	mov	r2, r5
 8004126:	f000 fb1c 	bl	8004762 <memmove>
 800412a:	6823      	ldr	r3, [r4, #0]
 800412c:	442b      	add	r3, r5
 800412e:	6023      	str	r3, [r4, #0]
 8004130:	4621      	mov	r1, r4
 8004132:	4638      	mov	r0, r7
 8004134:	f7ff fef0 	bl	8003f18 <_fflush_r>
 8004138:	2800      	cmp	r0, #0
 800413a:	d167      	bne.n	800420c <__sfvwrite_r+0x164>
 800413c:	ebb9 0905 	subs.w	r9, r9, r5
 8004140:	f040 80fc 	bne.w	800433c <__sfvwrite_r+0x294>
 8004144:	4621      	mov	r1, r4
 8004146:	4638      	mov	r0, r7
 8004148:	f7ff fee6 	bl	8003f18 <_fflush_r>
 800414c:	2800      	cmp	r0, #0
 800414e:	d15d      	bne.n	800420c <__sfvwrite_r+0x164>
 8004150:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004154:	44aa      	add	sl, r5
 8004156:	ebab 0b05 	sub.w	fp, fp, r5
 800415a:	1b5d      	subs	r5, r3, r5
 800415c:	f8c8 5008 	str.w	r5, [r8, #8]
 8004160:	2d00      	cmp	r5, #0
 8004162:	d1bf      	bne.n	80040e4 <__sfvwrite_r+0x3c>
 8004164:	e7a7      	b.n	80040b6 <__sfvwrite_r+0xe>
 8004166:	4621      	mov	r1, r4
 8004168:	4638      	mov	r0, r7
 800416a:	f7ff fdef 	bl	8003d4c <__swsetup_r>
 800416e:	2800      	cmp	r0, #0
 8004170:	d0ab      	beq.n	80040ca <__sfvwrite_r+0x22>
 8004172:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004176:	e79f      	b.n	80040b8 <__sfvwrite_r+0x10>
 8004178:	e9d6 a900 	ldrd	sl, r9, [r6]
 800417c:	3608      	adds	r6, #8
 800417e:	f1b9 0f00 	cmp.w	r9, #0
 8004182:	d0f9      	beq.n	8004178 <__sfvwrite_r+0xd0>
 8004184:	45d9      	cmp	r9, fp
 8004186:	464b      	mov	r3, r9
 8004188:	4652      	mov	r2, sl
 800418a:	bf28      	it	cs
 800418c:	465b      	movcs	r3, fp
 800418e:	69e1      	ldr	r1, [r4, #28]
 8004190:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8004192:	4638      	mov	r0, r7
 8004194:	47a8      	blx	r5
 8004196:	2800      	cmp	r0, #0
 8004198:	dd38      	ble.n	800420c <__sfvwrite_r+0x164>
 800419a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800419e:	4482      	add	sl, r0
 80041a0:	eba9 0900 	sub.w	r9, r9, r0
 80041a4:	1a18      	subs	r0, r3, r0
 80041a6:	f8c8 0008 	str.w	r0, [r8, #8]
 80041aa:	2800      	cmp	r0, #0
 80041ac:	d1e7      	bne.n	800417e <__sfvwrite_r+0xd6>
 80041ae:	e782      	b.n	80040b6 <__sfvwrite_r+0xe>
 80041b0:	f04f 0a00 	mov.w	sl, #0
 80041b4:	46d1      	mov	r9, sl
 80041b6:	f8df b18c 	ldr.w	fp, [pc, #396]	; 8004344 <__sfvwrite_r+0x29c>
 80041ba:	e7e0      	b.n	800417e <__sfvwrite_r+0xd6>
 80041bc:	e9d6 9a00 	ldrd	r9, sl, [r6]
 80041c0:	3608      	adds	r6, #8
 80041c2:	f1ba 0f00 	cmp.w	sl, #0
 80041c6:	d0f9      	beq.n	80041bc <__sfvwrite_r+0x114>
 80041c8:	89a2      	ldrh	r2, [r4, #12]
 80041ca:	68a3      	ldr	r3, [r4, #8]
 80041cc:	6820      	ldr	r0, [r4, #0]
 80041ce:	0591      	lsls	r1, r2, #22
 80041d0:	d564      	bpl.n	800429c <__sfvwrite_r+0x1f4>
 80041d2:	4553      	cmp	r3, sl
 80041d4:	d836      	bhi.n	8004244 <__sfvwrite_r+0x19c>
 80041d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80041da:	d033      	beq.n	8004244 <__sfvwrite_r+0x19c>
 80041dc:	6921      	ldr	r1, [r4, #16]
 80041de:	6965      	ldr	r5, [r4, #20]
 80041e0:	eba0 0b01 	sub.w	fp, r0, r1
 80041e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80041e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80041ec:	f10b 0301 	add.w	r3, fp, #1
 80041f0:	4453      	add	r3, sl
 80041f2:	106d      	asrs	r5, r5, #1
 80041f4:	429d      	cmp	r5, r3
 80041f6:	bf38      	it	cc
 80041f8:	461d      	movcc	r5, r3
 80041fa:	0553      	lsls	r3, r2, #21
 80041fc:	d53e      	bpl.n	800427c <__sfvwrite_r+0x1d4>
 80041fe:	4629      	mov	r1, r5
 8004200:	4638      	mov	r0, r7
 8004202:	f7ff fbbf 	bl	8003984 <_malloc_r>
 8004206:	b948      	cbnz	r0, 800421c <__sfvwrite_r+0x174>
 8004208:	230c      	movs	r3, #12
 800420a:	603b      	str	r3, [r7, #0]
 800420c:	89a3      	ldrh	r3, [r4, #12]
 800420e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004212:	81a3      	strh	r3, [r4, #12]
 8004214:	e7ad      	b.n	8004172 <__sfvwrite_r+0xca>
 8004216:	4699      	mov	r9, r3
 8004218:	469a      	mov	sl, r3
 800421a:	e7d2      	b.n	80041c2 <__sfvwrite_r+0x11a>
 800421c:	465a      	mov	r2, fp
 800421e:	6921      	ldr	r1, [r4, #16]
 8004220:	9001      	str	r0, [sp, #4]
 8004222:	f000 fa2e 	bl	8004682 <memcpy>
 8004226:	89a2      	ldrh	r2, [r4, #12]
 8004228:	9b01      	ldr	r3, [sp, #4]
 800422a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800422e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004232:	81a2      	strh	r2, [r4, #12]
 8004234:	6123      	str	r3, [r4, #16]
 8004236:	6165      	str	r5, [r4, #20]
 8004238:	445b      	add	r3, fp
 800423a:	eba5 050b 	sub.w	r5, r5, fp
 800423e:	6023      	str	r3, [r4, #0]
 8004240:	60a5      	str	r5, [r4, #8]
 8004242:	4653      	mov	r3, sl
 8004244:	4553      	cmp	r3, sl
 8004246:	bf28      	it	cs
 8004248:	4653      	movcs	r3, sl
 800424a:	461a      	mov	r2, r3
 800424c:	4649      	mov	r1, r9
 800424e:	6820      	ldr	r0, [r4, #0]
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	f000 fa86 	bl	8004762 <memmove>
 8004256:	68a2      	ldr	r2, [r4, #8]
 8004258:	9b01      	ldr	r3, [sp, #4]
 800425a:	1ad2      	subs	r2, r2, r3
 800425c:	60a2      	str	r2, [r4, #8]
 800425e:	6822      	ldr	r2, [r4, #0]
 8004260:	4413      	add	r3, r2
 8004262:	4655      	mov	r5, sl
 8004264:	6023      	str	r3, [r4, #0]
 8004266:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800426a:	44a9      	add	r9, r5
 800426c:	ebaa 0a05 	sub.w	sl, sl, r5
 8004270:	1b5d      	subs	r5, r3, r5
 8004272:	f8c8 5008 	str.w	r5, [r8, #8]
 8004276:	2d00      	cmp	r5, #0
 8004278:	d1a3      	bne.n	80041c2 <__sfvwrite_r+0x11a>
 800427a:	e71c      	b.n	80040b6 <__sfvwrite_r+0xe>
 800427c:	462a      	mov	r2, r5
 800427e:	4638      	mov	r0, r7
 8004280:	f000 fa8b 	bl	800479a <_realloc_r>
 8004284:	4603      	mov	r3, r0
 8004286:	2800      	cmp	r0, #0
 8004288:	d1d4      	bne.n	8004234 <__sfvwrite_r+0x18c>
 800428a:	6921      	ldr	r1, [r4, #16]
 800428c:	4638      	mov	r0, r7
 800428e:	f000 f8e3 	bl	8004458 <_free_r>
 8004292:	89a3      	ldrh	r3, [r4, #12]
 8004294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004298:	81a3      	strh	r3, [r4, #12]
 800429a:	e7b5      	b.n	8004208 <__sfvwrite_r+0x160>
 800429c:	6922      	ldr	r2, [r4, #16]
 800429e:	4282      	cmp	r2, r0
 80042a0:	d302      	bcc.n	80042a8 <__sfvwrite_r+0x200>
 80042a2:	6962      	ldr	r2, [r4, #20]
 80042a4:	4552      	cmp	r2, sl
 80042a6:	d916      	bls.n	80042d6 <__sfvwrite_r+0x22e>
 80042a8:	4553      	cmp	r3, sl
 80042aa:	bf28      	it	cs
 80042ac:	4653      	movcs	r3, sl
 80042ae:	461a      	mov	r2, r3
 80042b0:	4649      	mov	r1, r9
 80042b2:	461d      	mov	r5, r3
 80042b4:	f000 fa55 	bl	8004762 <memmove>
 80042b8:	68a3      	ldr	r3, [r4, #8]
 80042ba:	6822      	ldr	r2, [r4, #0]
 80042bc:	1b5b      	subs	r3, r3, r5
 80042be:	442a      	add	r2, r5
 80042c0:	60a3      	str	r3, [r4, #8]
 80042c2:	6022      	str	r2, [r4, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1ce      	bne.n	8004266 <__sfvwrite_r+0x1be>
 80042c8:	4621      	mov	r1, r4
 80042ca:	4638      	mov	r0, r7
 80042cc:	f7ff fe24 	bl	8003f18 <_fflush_r>
 80042d0:	2800      	cmp	r0, #0
 80042d2:	d0c8      	beq.n	8004266 <__sfvwrite_r+0x1be>
 80042d4:	e79a      	b.n	800420c <__sfvwrite_r+0x164>
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <__sfvwrite_r+0x298>)
 80042d8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80042da:	69e1      	ldr	r1, [r4, #28]
 80042dc:	459a      	cmp	sl, r3
 80042de:	bf94      	ite	ls
 80042e0:	4653      	movls	r3, sl
 80042e2:	f06f 4300 	mvnhi.w	r3, #2147483648	; 0x80000000
 80042e6:	4638      	mov	r0, r7
 80042e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80042ec:	4353      	muls	r3, r2
 80042ee:	464a      	mov	r2, r9
 80042f0:	47a8      	blx	r5
 80042f2:	1e05      	subs	r5, r0, #0
 80042f4:	dcb7      	bgt.n	8004266 <__sfvwrite_r+0x1be>
 80042f6:	e789      	b.n	800420c <__sfvwrite_r+0x164>
 80042f8:	e9d6 ab00 	ldrd	sl, fp, [r6]
 80042fc:	2000      	movs	r0, #0
 80042fe:	3608      	adds	r6, #8
 8004300:	e6f0      	b.n	80040e4 <__sfvwrite_r+0x3c>
 8004302:	f10b 0901 	add.w	r9, fp, #1
 8004306:	e6fd      	b.n	8004104 <__sfvwrite_r+0x5c>
 8004308:	429a      	cmp	r2, r3
 800430a:	dc09      	bgt.n	8004320 <__sfvwrite_r+0x278>
 800430c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800430e:	69e1      	ldr	r1, [r4, #28]
 8004310:	4613      	mov	r3, r2
 8004312:	4638      	mov	r0, r7
 8004314:	4652      	mov	r2, sl
 8004316:	47a8      	blx	r5
 8004318:	1e05      	subs	r5, r0, #0
 800431a:	f73f af0f 	bgt.w	800413c <__sfvwrite_r+0x94>
 800431e:	e775      	b.n	800420c <__sfvwrite_r+0x164>
 8004320:	461a      	mov	r2, r3
 8004322:	4651      	mov	r1, sl
 8004324:	9301      	str	r3, [sp, #4]
 8004326:	f000 fa1c 	bl	8004762 <memmove>
 800432a:	9b01      	ldr	r3, [sp, #4]
 800432c:	68a2      	ldr	r2, [r4, #8]
 800432e:	1ad2      	subs	r2, r2, r3
 8004330:	60a2      	str	r2, [r4, #8]
 8004332:	6822      	ldr	r2, [r4, #0]
 8004334:	441a      	add	r2, r3
 8004336:	6022      	str	r2, [r4, #0]
 8004338:	461d      	mov	r5, r3
 800433a:	e6ff      	b.n	800413c <__sfvwrite_r+0x94>
 800433c:	2001      	movs	r0, #1
 800433e:	e707      	b.n	8004150 <__sfvwrite_r+0xa8>
 8004340:	7ffffffe 	.word	0x7ffffffe
 8004344:	7ffffc00 	.word	0x7ffffc00

08004348 <__swhatbuf_r>:
 8004348:	b570      	push	{r4, r5, r6, lr}
 800434a:	460e      	mov	r6, r1
 800434c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004350:	2900      	cmp	r1, #0
 8004352:	b096      	sub	sp, #88	; 0x58
 8004354:	4614      	mov	r4, r2
 8004356:	461d      	mov	r5, r3
 8004358:	da09      	bge.n	800436e <__swhatbuf_r+0x26>
 800435a:	89b3      	ldrh	r3, [r6, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004362:	602a      	str	r2, [r5, #0]
 8004364:	d116      	bne.n	8004394 <__swhatbuf_r+0x4c>
 8004366:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800436a:	6023      	str	r3, [r4, #0]
 800436c:	e015      	b.n	800439a <__swhatbuf_r+0x52>
 800436e:	466a      	mov	r2, sp
 8004370:	f000 f8fa 	bl	8004568 <_fstat_r>
 8004374:	2800      	cmp	r0, #0
 8004376:	dbf0      	blt.n	800435a <__swhatbuf_r+0x12>
 8004378:	9a01      	ldr	r2, [sp, #4]
 800437a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800437e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004382:	425a      	negs	r2, r3
 8004384:	415a      	adcs	r2, r3
 8004386:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800438a:	602a      	str	r2, [r5, #0]
 800438c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004390:	6023      	str	r3, [r4, #0]
 8004392:	e002      	b.n	800439a <__swhatbuf_r+0x52>
 8004394:	2340      	movs	r3, #64	; 0x40
 8004396:	6023      	str	r3, [r4, #0]
 8004398:	4610      	mov	r0, r2
 800439a:	b016      	add	sp, #88	; 0x58
 800439c:	bd70      	pop	{r4, r5, r6, pc}

0800439e <__smakebuf_r>:
 800439e:	898b      	ldrh	r3, [r1, #12]
 80043a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80043a2:	079d      	lsls	r5, r3, #30
 80043a4:	4606      	mov	r6, r0
 80043a6:	460c      	mov	r4, r1
 80043a8:	d507      	bpl.n	80043ba <__smakebuf_r+0x1c>
 80043aa:	f104 0343 	add.w	r3, r4, #67	; 0x43
 80043ae:	6023      	str	r3, [r4, #0]
 80043b0:	6123      	str	r3, [r4, #16]
 80043b2:	2301      	movs	r3, #1
 80043b4:	6163      	str	r3, [r4, #20]
 80043b6:	b002      	add	sp, #8
 80043b8:	bd70      	pop	{r4, r5, r6, pc}
 80043ba:	ab01      	add	r3, sp, #4
 80043bc:	466a      	mov	r2, sp
 80043be:	f7ff ffc3 	bl	8004348 <__swhatbuf_r>
 80043c2:	9900      	ldr	r1, [sp, #0]
 80043c4:	4605      	mov	r5, r0
 80043c6:	4630      	mov	r0, r6
 80043c8:	f7ff fadc 	bl	8003984 <_malloc_r>
 80043cc:	b948      	cbnz	r0, 80043e2 <__smakebuf_r+0x44>
 80043ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043d2:	059a      	lsls	r2, r3, #22
 80043d4:	d4ef      	bmi.n	80043b6 <__smakebuf_r+0x18>
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	f043 0302 	orr.w	r3, r3, #2
 80043de:	81a3      	strh	r3, [r4, #12]
 80043e0:	e7e3      	b.n	80043aa <__smakebuf_r+0xc>
 80043e2:	4b0e      	ldr	r3, [pc, #56]	; (800441c <__smakebuf_r+0x7e>)
 80043e4:	63f3      	str	r3, [r6, #60]	; 0x3c
 80043e6:	89a3      	ldrh	r3, [r4, #12]
 80043e8:	6020      	str	r0, [r4, #0]
 80043ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ee:	81a3      	strh	r3, [r4, #12]
 80043f0:	9b00      	ldr	r3, [sp, #0]
 80043f2:	6163      	str	r3, [r4, #20]
 80043f4:	9b01      	ldr	r3, [sp, #4]
 80043f6:	6120      	str	r0, [r4, #16]
 80043f8:	b15b      	cbz	r3, 8004412 <__smakebuf_r+0x74>
 80043fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043fe:	4630      	mov	r0, r6
 8004400:	f000 f8c4 	bl	800458c <_isatty_r>
 8004404:	b128      	cbz	r0, 8004412 <__smakebuf_r+0x74>
 8004406:	89a3      	ldrh	r3, [r4, #12]
 8004408:	f023 0303 	bic.w	r3, r3, #3
 800440c:	f043 0301 	orr.w	r3, r3, #1
 8004410:	81a3      	strh	r3, [r4, #12]
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	431d      	orrs	r5, r3
 8004416:	81a5      	strh	r5, [r4, #12]
 8004418:	e7cd      	b.n	80043b6 <__smakebuf_r+0x18>
 800441a:	bf00      	nop
 800441c:	08003fa9 	.word	0x08003fa9

08004420 <_mbtowc_r>:
 8004420:	b410      	push	{r4}
 8004422:	4c03      	ldr	r4, [pc, #12]	; (8004430 <_mbtowc_r+0x10>)
 8004424:	f8d4 40e4 	ldr.w	r4, [r4, #228]	; 0xe4
 8004428:	46a4      	mov	ip, r4
 800442a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800442e:	4760      	bx	ip
 8004430:	200012d0 	.word	0x200012d0

08004434 <__ascii_mbtowc>:
 8004434:	b082      	sub	sp, #8
 8004436:	b901      	cbnz	r1, 800443a <__ascii_mbtowc+0x6>
 8004438:	a901      	add	r1, sp, #4
 800443a:	b142      	cbz	r2, 800444e <__ascii_mbtowc+0x1a>
 800443c:	b14b      	cbz	r3, 8004452 <__ascii_mbtowc+0x1e>
 800443e:	7813      	ldrb	r3, [r2, #0]
 8004440:	600b      	str	r3, [r1, #0]
 8004442:	7812      	ldrb	r2, [r2, #0]
 8004444:	1c10      	adds	r0, r2, #0
 8004446:	bf18      	it	ne
 8004448:	2001      	movne	r0, #1
 800444a:	b002      	add	sp, #8
 800444c:	4770      	bx	lr
 800444e:	4610      	mov	r0, r2
 8004450:	e7fb      	b.n	800444a <__ascii_mbtowc+0x16>
 8004452:	f06f 0001 	mvn.w	r0, #1
 8004456:	e7f8      	b.n	800444a <__ascii_mbtowc+0x16>

08004458 <_free_r>:
 8004458:	b538      	push	{r3, r4, r5, lr}
 800445a:	4605      	mov	r5, r0
 800445c:	2900      	cmp	r1, #0
 800445e:	d045      	beq.n	80044ec <_free_r+0x94>
 8004460:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004464:	1f0c      	subs	r4, r1, #4
 8004466:	2b00      	cmp	r3, #0
 8004468:	bfb8      	it	lt
 800446a:	18e4      	addlt	r4, r4, r3
 800446c:	f000 f993 	bl	8004796 <__malloc_lock>
 8004470:	4a1f      	ldr	r2, [pc, #124]	; (80044f0 <_free_r+0x98>)
 8004472:	6813      	ldr	r3, [r2, #0]
 8004474:	4610      	mov	r0, r2
 8004476:	b933      	cbnz	r3, 8004486 <_free_r+0x2e>
 8004478:	6063      	str	r3, [r4, #4]
 800447a:	6014      	str	r4, [r2, #0]
 800447c:	4628      	mov	r0, r5
 800447e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004482:	f000 b989 	b.w	8004798 <__malloc_unlock>
 8004486:	42a3      	cmp	r3, r4
 8004488:	d90c      	bls.n	80044a4 <_free_r+0x4c>
 800448a:	6821      	ldr	r1, [r4, #0]
 800448c:	1862      	adds	r2, r4, r1
 800448e:	4293      	cmp	r3, r2
 8004490:	bf04      	itt	eq
 8004492:	681a      	ldreq	r2, [r3, #0]
 8004494:	685b      	ldreq	r3, [r3, #4]
 8004496:	6063      	str	r3, [r4, #4]
 8004498:	bf04      	itt	eq
 800449a:	1852      	addeq	r2, r2, r1
 800449c:	6022      	streq	r2, [r4, #0]
 800449e:	6004      	str	r4, [r0, #0]
 80044a0:	e7ec      	b.n	800447c <_free_r+0x24>
 80044a2:	4613      	mov	r3, r2
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	b10a      	cbz	r2, 80044ac <_free_r+0x54>
 80044a8:	42a2      	cmp	r2, r4
 80044aa:	d9fa      	bls.n	80044a2 <_free_r+0x4a>
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	1858      	adds	r0, r3, r1
 80044b0:	42a0      	cmp	r0, r4
 80044b2:	d10b      	bne.n	80044cc <_free_r+0x74>
 80044b4:	6820      	ldr	r0, [r4, #0]
 80044b6:	4401      	add	r1, r0
 80044b8:	1858      	adds	r0, r3, r1
 80044ba:	4282      	cmp	r2, r0
 80044bc:	6019      	str	r1, [r3, #0]
 80044be:	d1dd      	bne.n	800447c <_free_r+0x24>
 80044c0:	6810      	ldr	r0, [r2, #0]
 80044c2:	6852      	ldr	r2, [r2, #4]
 80044c4:	605a      	str	r2, [r3, #4]
 80044c6:	4401      	add	r1, r0
 80044c8:	6019      	str	r1, [r3, #0]
 80044ca:	e7d7      	b.n	800447c <_free_r+0x24>
 80044cc:	d902      	bls.n	80044d4 <_free_r+0x7c>
 80044ce:	230c      	movs	r3, #12
 80044d0:	602b      	str	r3, [r5, #0]
 80044d2:	e7d3      	b.n	800447c <_free_r+0x24>
 80044d4:	6820      	ldr	r0, [r4, #0]
 80044d6:	1821      	adds	r1, r4, r0
 80044d8:	428a      	cmp	r2, r1
 80044da:	bf04      	itt	eq
 80044dc:	6811      	ldreq	r1, [r2, #0]
 80044de:	6852      	ldreq	r2, [r2, #4]
 80044e0:	6062      	str	r2, [r4, #4]
 80044e2:	bf04      	itt	eq
 80044e4:	1809      	addeq	r1, r1, r0
 80044e6:	6021      	streq	r1, [r4, #0]
 80044e8:	605c      	str	r4, [r3, #4]
 80044ea:	e7c7      	b.n	800447c <_free_r+0x24>
 80044ec:	bd38      	pop	{r3, r4, r5, pc}
 80044ee:	bf00      	nop
 80044f0:	20000000 	.word	0x20000000

080044f4 <_wctomb_r>:
 80044f4:	b410      	push	{r4}
 80044f6:	4c03      	ldr	r4, [pc, #12]	; (8004504 <_wctomb_r+0x10>)
 80044f8:	f8d4 40e0 	ldr.w	r4, [r4, #224]	; 0xe0
 80044fc:	46a4      	mov	ip, r4
 80044fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004502:	4760      	bx	ip
 8004504:	200012d0 	.word	0x200012d0

08004508 <__ascii_wctomb>:
 8004508:	b149      	cbz	r1, 800451e <__ascii_wctomb+0x16>
 800450a:	2aff      	cmp	r2, #255	; 0xff
 800450c:	bf85      	ittet	hi
 800450e:	238a      	movhi	r3, #138	; 0x8a
 8004510:	6003      	strhi	r3, [r0, #0]
 8004512:	700a      	strbls	r2, [r1, #0]
 8004514:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8004518:	bf98      	it	ls
 800451a:	2001      	movls	r0, #1
 800451c:	4770      	bx	lr
 800451e:	4608      	mov	r0, r1
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop

08004524 <_write_r>:
 8004524:	b538      	push	{r3, r4, r5, lr}
 8004526:	4c07      	ldr	r4, [pc, #28]	; (8004544 <_write_r+0x20>)
 8004528:	4605      	mov	r5, r0
 800452a:	4608      	mov	r0, r1
 800452c:	4611      	mov	r1, r2
 800452e:	2200      	movs	r2, #0
 8004530:	6022      	str	r2, [r4, #0]
 8004532:	461a      	mov	r2, r3
 8004534:	f002 fcb1 	bl	8006e9a <_write>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_write_r+0x1e>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	b103      	cbz	r3, 8004542 <_write_r+0x1e>
 8004540:	602b      	str	r3, [r5, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	200002fc 	.word	0x200002fc

08004548 <_close_r>:
 8004548:	b538      	push	{r3, r4, r5, lr}
 800454a:	4c06      	ldr	r4, [pc, #24]	; (8004564 <_close_r+0x1c>)
 800454c:	2300      	movs	r3, #0
 800454e:	4605      	mov	r5, r0
 8004550:	4608      	mov	r0, r1
 8004552:	6023      	str	r3, [r4, #0]
 8004554:	f002 fca5 	bl	8006ea2 <_close>
 8004558:	1c43      	adds	r3, r0, #1
 800455a:	d102      	bne.n	8004562 <_close_r+0x1a>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	b103      	cbz	r3, 8004562 <_close_r+0x1a>
 8004560:	602b      	str	r3, [r5, #0]
 8004562:	bd38      	pop	{r3, r4, r5, pc}
 8004564:	200002fc 	.word	0x200002fc

08004568 <_fstat_r>:
 8004568:	b538      	push	{r3, r4, r5, lr}
 800456a:	4c07      	ldr	r4, [pc, #28]	; (8004588 <_fstat_r+0x20>)
 800456c:	2300      	movs	r3, #0
 800456e:	4605      	mov	r5, r0
 8004570:	4608      	mov	r0, r1
 8004572:	4611      	mov	r1, r2
 8004574:	6023      	str	r3, [r4, #0]
 8004576:	f002 fc9b 	bl	8006eb0 <_fstat>
 800457a:	1c43      	adds	r3, r0, #1
 800457c:	d102      	bne.n	8004584 <_fstat_r+0x1c>
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	b103      	cbz	r3, 8004584 <_fstat_r+0x1c>
 8004582:	602b      	str	r3, [r5, #0]
 8004584:	bd38      	pop	{r3, r4, r5, pc}
 8004586:	bf00      	nop
 8004588:	200002fc 	.word	0x200002fc

0800458c <_isatty_r>:
 800458c:	b538      	push	{r3, r4, r5, lr}
 800458e:	4c06      	ldr	r4, [pc, #24]	; (80045a8 <_isatty_r+0x1c>)
 8004590:	2300      	movs	r3, #0
 8004592:	4605      	mov	r5, r0
 8004594:	4608      	mov	r0, r1
 8004596:	6023      	str	r3, [r4, #0]
 8004598:	f002 fc88 	bl	8006eac <_isatty>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_isatty_r+0x1a>
 80045a0:	6823      	ldr	r3, [r4, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_isatty_r+0x1a>
 80045a4:	602b      	str	r3, [r5, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200002fc 	.word	0x200002fc

080045ac <_lseek_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	4c07      	ldr	r4, [pc, #28]	; (80045cc <_lseek_r+0x20>)
 80045b0:	4605      	mov	r5, r0
 80045b2:	4608      	mov	r0, r1
 80045b4:	4611      	mov	r1, r2
 80045b6:	2200      	movs	r2, #0
 80045b8:	6022      	str	r2, [r4, #0]
 80045ba:	461a      	mov	r2, r3
 80045bc:	f002 fc74 	bl	8006ea8 <_lseek>
 80045c0:	1c43      	adds	r3, r0, #1
 80045c2:	d102      	bne.n	80045ca <_lseek_r+0x1e>
 80045c4:	6823      	ldr	r3, [r4, #0]
 80045c6:	b103      	cbz	r3, 80045ca <_lseek_r+0x1e>
 80045c8:	602b      	str	r3, [r5, #0]
 80045ca:	bd38      	pop	{r3, r4, r5, pc}
 80045cc:	200002fc 	.word	0x200002fc

080045d0 <_read_r>:
 80045d0:	b538      	push	{r3, r4, r5, lr}
 80045d2:	4c07      	ldr	r4, [pc, #28]	; (80045f0 <_read_r+0x20>)
 80045d4:	4605      	mov	r5, r0
 80045d6:	4608      	mov	r0, r1
 80045d8:	4611      	mov	r1, r2
 80045da:	2200      	movs	r2, #0
 80045dc:	6022      	str	r2, [r4, #0]
 80045de:	461a      	mov	r2, r3
 80045e0:	f002 fc57 	bl	8006e92 <_read>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_read_r+0x1e>
 80045e8:	6823      	ldr	r3, [r4, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_read_r+0x1e>
 80045ec:	602b      	str	r3, [r5, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	200002fc 	.word	0x200002fc

080045f4 <__aeabi_dcmpun>:
 80045f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80045f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80045fc:	d102      	bne.n	8004604 <__aeabi_dcmpun+0x10>
 80045fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8004602:	d10a      	bne.n	800461a <__aeabi_dcmpun+0x26>
 8004604:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004608:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800460c:	d102      	bne.n	8004614 <__aeabi_dcmpun+0x20>
 800460e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8004612:	d102      	bne.n	800461a <__aeabi_dcmpun+0x26>
 8004614:	f04f 0000 	mov.w	r0, #0
 8004618:	4770      	bx	lr
 800461a:	f04f 0001 	mov.w	r0, #1
 800461e:	4770      	bx	lr

08004620 <__aeabi_d2iz>:
 8004620:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8004624:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8004628:	d215      	bcs.n	8004656 <__aeabi_d2iz+0x36>
 800462a:	d511      	bpl.n	8004650 <__aeabi_d2iz+0x30>
 800462c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8004630:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8004634:	d912      	bls.n	800465c <__aeabi_d2iz+0x3c>
 8004636:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800463a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800463e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8004642:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8004646:	fa23 f002 	lsr.w	r0, r3, r2
 800464a:	bf18      	it	ne
 800464c:	4240      	negne	r0, r0
 800464e:	4770      	bx	lr
 8004650:	f04f 0000 	mov.w	r0, #0
 8004654:	4770      	bx	lr
 8004656:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800465a:	d105      	bne.n	8004668 <__aeabi_d2iz+0x48>
 800465c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8004660:	bf08      	it	eq
 8004662:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8004666:	4770      	bx	lr
 8004668:	f04f 0000 	mov.w	r0, #0
 800466c:	4770      	bx	lr
 800466e:	bf00      	nop

08004670 <fabs>:
 8004670:	ec51 0b10 	vmov	r0, r1, d0
 8004674:	ee10 2a10 	vmov	r2, s0
 8004678:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800467c:	ec43 2b10 	vmov	d0, r2, r3
 8004680:	4770      	bx	lr

08004682 <memcpy>:
 8004682:	440a      	add	r2, r1
 8004684:	4291      	cmp	r1, r2
 8004686:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800468a:	d100      	bne.n	800468e <memcpy+0xc>
 800468c:	4770      	bx	lr
 800468e:	b510      	push	{r4, lr}
 8004690:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004694:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004698:	4291      	cmp	r1, r2
 800469a:	d1f9      	bne.n	8004690 <memcpy+0xe>
 800469c:	bd10      	pop	{r4, pc}

0800469e <memset>:
 800469e:	4402      	add	r2, r0
 80046a0:	4603      	mov	r3, r0
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d100      	bne.n	80046a8 <memset+0xa>
 80046a6:	4770      	bx	lr
 80046a8:	f803 1b01 	strb.w	r1, [r3], #1
 80046ac:	e7f9      	b.n	80046a2 <memset+0x4>

080046ae <strcmp>:
 80046ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 80046b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80046b6:	2a01      	cmp	r2, #1
 80046b8:	bf28      	it	cs
 80046ba:	429a      	cmpcs	r2, r3
 80046bc:	d0f7      	beq.n	80046ae <strcmp>
 80046be:	1ad0      	subs	r0, r2, r3
 80046c0:	4770      	bx	lr

080046c2 <strlen>:
 80046c2:	4603      	mov	r3, r0
 80046c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80046c8:	2a00      	cmp	r2, #0
 80046ca:	d1fb      	bne.n	80046c4 <strlen+0x2>
 80046cc:	1a18      	subs	r0, r3, r0
 80046ce:	3801      	subs	r0, #1
 80046d0:	4770      	bx	lr

080046d2 <_calloc_r>:
 80046d2:	b538      	push	{r3, r4, r5, lr}
 80046d4:	fb02 f401 	mul.w	r4, r2, r1
 80046d8:	4621      	mov	r1, r4
 80046da:	f7ff f953 	bl	8003984 <_malloc_r>
 80046de:	4605      	mov	r5, r0
 80046e0:	b118      	cbz	r0, 80046ea <_calloc_r+0x18>
 80046e2:	4622      	mov	r2, r4
 80046e4:	2100      	movs	r1, #0
 80046e6:	f7ff ffda 	bl	800469e <memset>
 80046ea:	4628      	mov	r0, r5
 80046ec:	bd38      	pop	{r3, r4, r5, pc}

080046ee <_fwalk>:
 80046ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046f2:	4688      	mov	r8, r1
 80046f4:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
 80046f8:	2600      	movs	r6, #0
 80046fa:	b914      	cbnz	r4, 8004702 <_fwalk+0x14>
 80046fc:	4630      	mov	r0, r6
 80046fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004702:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004706:	3f01      	subs	r7, #1
 8004708:	d501      	bpl.n	800470e <_fwalk+0x20>
 800470a:	6824      	ldr	r4, [r4, #0]
 800470c:	e7f5      	b.n	80046fa <_fwalk+0xc>
 800470e:	89ab      	ldrh	r3, [r5, #12]
 8004710:	2b01      	cmp	r3, #1
 8004712:	d906      	bls.n	8004722 <_fwalk+0x34>
 8004714:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004718:	3301      	adds	r3, #1
 800471a:	d002      	beq.n	8004722 <_fwalk+0x34>
 800471c:	4628      	mov	r0, r5
 800471e:	47c0      	blx	r8
 8004720:	4306      	orrs	r6, r0
 8004722:	3564      	adds	r5, #100	; 0x64
 8004724:	e7ef      	b.n	8004706 <_fwalk+0x18>

08004726 <_fwalk_reent>:
 8004726:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800472a:	4680      	mov	r8, r0
 800472c:	4689      	mov	r9, r1
 800472e:	f500 74a6 	add.w	r4, r0, #332	; 0x14c
 8004732:	2600      	movs	r6, #0
 8004734:	b914      	cbnz	r4, 800473c <_fwalk_reent+0x16>
 8004736:	4630      	mov	r0, r6
 8004738:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800473c:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004740:	3f01      	subs	r7, #1
 8004742:	d501      	bpl.n	8004748 <_fwalk_reent+0x22>
 8004744:	6824      	ldr	r4, [r4, #0]
 8004746:	e7f5      	b.n	8004734 <_fwalk_reent+0xe>
 8004748:	89ab      	ldrh	r3, [r5, #12]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d907      	bls.n	800475e <_fwalk_reent+0x38>
 800474e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004752:	3301      	adds	r3, #1
 8004754:	d003      	beq.n	800475e <_fwalk_reent+0x38>
 8004756:	4629      	mov	r1, r5
 8004758:	4640      	mov	r0, r8
 800475a:	47c8      	blx	r9
 800475c:	4306      	orrs	r6, r0
 800475e:	3564      	adds	r5, #100	; 0x64
 8004760:	e7ee      	b.n	8004740 <_fwalk_reent+0x1a>

08004762 <memmove>:
 8004762:	4288      	cmp	r0, r1
 8004764:	b510      	push	{r4, lr}
 8004766:	eb01 0302 	add.w	r3, r1, r2
 800476a:	d902      	bls.n	8004772 <memmove+0x10>
 800476c:	4283      	cmp	r3, r0
 800476e:	461c      	mov	r4, r3
 8004770:	d807      	bhi.n	8004782 <memmove+0x20>
 8004772:	1e42      	subs	r2, r0, #1
 8004774:	4299      	cmp	r1, r3
 8004776:	d008      	beq.n	800478a <memmove+0x28>
 8004778:	f811 4b01 	ldrb.w	r4, [r1], #1
 800477c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004780:	e7f8      	b.n	8004774 <memmove+0x12>
 8004782:	1883      	adds	r3, r0, r2
 8004784:	1a9a      	subs	r2, r3, r2
 8004786:	429a      	cmp	r2, r3
 8004788:	d100      	bne.n	800478c <memmove+0x2a>
 800478a:	bd10      	pop	{r4, pc}
 800478c:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
 8004790:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8004794:	e7f7      	b.n	8004786 <memmove+0x24>

08004796 <__malloc_lock>:
 8004796:	4770      	bx	lr

08004798 <__malloc_unlock>:
 8004798:	4770      	bx	lr

0800479a <_realloc_r>:
 800479a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800479c:	4607      	mov	r7, r0
 800479e:	4614      	mov	r4, r2
 80047a0:	460e      	mov	r6, r1
 80047a2:	b921      	cbnz	r1, 80047ae <_realloc_r+0x14>
 80047a4:	4611      	mov	r1, r2
 80047a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047aa:	f7ff b8eb 	b.w	8003984 <_malloc_r>
 80047ae:	b922      	cbnz	r2, 80047ba <_realloc_r+0x20>
 80047b0:	f7ff fe52 	bl	8004458 <_free_r>
 80047b4:	4625      	mov	r5, r4
 80047b6:	4628      	mov	r0, r5
 80047b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047ba:	f000 f859 	bl	8004870 <_malloc_usable_size_r>
 80047be:	42a0      	cmp	r0, r4
 80047c0:	d20f      	bcs.n	80047e2 <_realloc_r+0x48>
 80047c2:	4621      	mov	r1, r4
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff f8dd 	bl	8003984 <_malloc_r>
 80047ca:	4605      	mov	r5, r0
 80047cc:	2800      	cmp	r0, #0
 80047ce:	d0f2      	beq.n	80047b6 <_realloc_r+0x1c>
 80047d0:	4631      	mov	r1, r6
 80047d2:	4622      	mov	r2, r4
 80047d4:	f7ff ff55 	bl	8004682 <memcpy>
 80047d8:	4631      	mov	r1, r6
 80047da:	4638      	mov	r0, r7
 80047dc:	f7ff fe3c 	bl	8004458 <_free_r>
 80047e0:	e7e9      	b.n	80047b6 <_realloc_r+0x1c>
 80047e2:	4635      	mov	r5, r6
 80047e4:	e7e7      	b.n	80047b6 <_realloc_r+0x1c>

080047e6 <__sread>:
 80047e6:	b510      	push	{r4, lr}
 80047e8:	460c      	mov	r4, r1
 80047ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ee:	f7ff feef 	bl	80045d0 <_read_r>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	bfab      	itete	ge
 80047f6:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 80047f8:	89a3      	ldrhlt	r3, [r4, #12]
 80047fa:	181b      	addge	r3, r3, r0
 80047fc:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004800:	bfac      	ite	ge
 8004802:	6523      	strge	r3, [r4, #80]	; 0x50
 8004804:	81a3      	strhlt	r3, [r4, #12]
 8004806:	bd10      	pop	{r4, pc}

08004808 <__seofread>:
 8004808:	2000      	movs	r0, #0
 800480a:	4770      	bx	lr

0800480c <__swrite>:
 800480c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004810:	461f      	mov	r7, r3
 8004812:	898b      	ldrh	r3, [r1, #12]
 8004814:	05db      	lsls	r3, r3, #23
 8004816:	4605      	mov	r5, r0
 8004818:	460c      	mov	r4, r1
 800481a:	4616      	mov	r6, r2
 800481c:	d505      	bpl.n	800482a <__swrite+0x1e>
 800481e:	2302      	movs	r3, #2
 8004820:	2200      	movs	r2, #0
 8004822:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004826:	f7ff fec1 	bl	80045ac <_lseek_r>
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004830:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004834:	81a3      	strh	r3, [r4, #12]
 8004836:	4632      	mov	r2, r6
 8004838:	463b      	mov	r3, r7
 800483a:	4628      	mov	r0, r5
 800483c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004840:	f7ff be70 	b.w	8004524 <_write_r>

08004844 <__sseek>:
 8004844:	b510      	push	{r4, lr}
 8004846:	460c      	mov	r4, r1
 8004848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484c:	f7ff feae 	bl	80045ac <_lseek_r>
 8004850:	1c43      	adds	r3, r0, #1
 8004852:	89a3      	ldrh	r3, [r4, #12]
 8004854:	bf15      	itete	ne
 8004856:	6520      	strne	r0, [r4, #80]	; 0x50
 8004858:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800485c:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004860:	81a3      	strheq	r3, [r4, #12]
 8004862:	bf18      	it	ne
 8004864:	81a3      	strhne	r3, [r4, #12]
 8004866:	bd10      	pop	{r4, pc}

08004868 <__sclose>:
 8004868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800486c:	f7ff be6c 	b.w	8004548 <_close_r>

08004870 <_malloc_usable_size_r>:
 8004870:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004874:	1f18      	subs	r0, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	bfbc      	itt	lt
 800487a:	580b      	ldrlt	r3, [r1, r0]
 800487c:	18c0      	addlt	r0, r0, r3
 800487e:	4770      	bx	lr

08004880 <translation>:


double_t absolut_pos[3] = { 5, 3, 1 };

void translation(s32_t dest_y, float_t angle)
{
 8004880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	float_t tmp[3][3] = { { (cos(DEG(angle))), (-sin(DEG(angle))), 5 },
 8004884:	eddf 7a42 	vldr	s15, [pc, #264]	; 8004990 <translation+0x110>
 8004888:	f8df b114 	ldr.w	fp, [pc, #276]	; 80049a0 <translation+0x120>
{
 800488c:	ed2d 8b02 	vpush	{d8}
	float_t tmp[3][3] = { { (cos(DEG(angle))), (-sin(DEG(angle))), 5 },
 8004890:	ee60 7a27 	vmul.f32	s15, s0, s15
{
 8004894:	b08d      	sub	sp, #52	; 0x34
 8004896:	4604      	mov	r4, r0
	float_t tmp[3][3] = { { (cos(DEG(angle))), (-sin(DEG(angle))), 5 },
 8004898:	ee17 0a90 	vmov	r0, s15
 800489c:	f7fd fcd8 	bl	8002250 <__aeabi_f2d>
 80048a0:	ec41 0b10 	vmov	d0, r0, r1
 80048a4:	ec41 0b18 	vmov	d8, r0, r1
 80048a8:	f7fb fce2 	bl	8000270 <cos>
 80048ac:	ec51 0b10 	vmov	r0, r1, d0
 80048b0:	f7fd ffc0 	bl	8002834 <__aeabi_d2f>
 80048b4:	eeb0 0a48 	vmov.f32	s0, s16
 80048b8:	eef0 0a68 	vmov.f32	s1, s17
 80048bc:	9003      	str	r0, [sp, #12]
 80048be:	f7fb fd27 	bl	8000310 <sin>
 80048c2:	ec51 0b10 	vmov	r0, r1, d0
 80048c6:	f7fd ffb5 	bl	8002834 <__aeabi_d2f>
			      { (sin(DEG(angle))), (cos(DEG(angle))), 3 },
 80048ca:	eeb0 0a48 	vmov.f32	s0, s16
 80048ce:	eef0 0a68 	vmov.f32	s1, s17
	float_t tmp[3][3] = { { (cos(DEG(angle))), (-sin(DEG(angle))), 5 },
 80048d2:	4b30      	ldr	r3, [pc, #192]	; (8004994 <translation+0x114>)
 80048d4:	9305      	str	r3, [sp, #20]
 80048d6:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80048da:	9004      	str	r0, [sp, #16]
			      { (sin(DEG(angle))), (cos(DEG(angle))), 3 },
 80048dc:	f7fb fd18 	bl	8000310 <sin>
 80048e0:	ec51 0b10 	vmov	r0, r1, d0
 80048e4:	f7fd ffa6 	bl	8002834 <__aeabi_d2f>
 80048e8:	eeb0 0a48 	vmov.f32	s0, s16
 80048ec:	eef0 0a68 	vmov.f32	s1, s17
 80048f0:	9006      	str	r0, [sp, #24]
 80048f2:	f7fb fcbd 	bl	8000270 <cos>
 80048f6:	ec51 0b10 	vmov	r0, r1, d0
 80048fa:	f7fd ff9b 	bl	8002834 <__aeabi_d2f>
	float_t tmp[3][3] = { { (cos(DEG(angle))), (-sin(DEG(angle))), 5 },
 80048fe:	4b26      	ldr	r3, [pc, #152]	; (8004998 <translation+0x118>)
 8004900:	9308      	str	r3, [sp, #32]
 8004902:	2300      	movs	r3, #0
 8004904:	9309      	str	r3, [sp, #36]	; 0x24
 8004906:	930a      	str	r3, [sp, #40]	; 0x28
 8004908:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800490c:	930b      	str	r3, [sp, #44]	; 0x2c
			      { 0, 0, 1 } };
	s32_t dest[3] = { 0, dest_y, 1 };

	for (u8_t i = 0; i < 3; i++) {
		double_t a = 0;
 800490e:	ed9f 8b1e 	vldr	d8, [pc, #120]	; 8004988 <translation+0x108>
	s32_t dest[3] = { 0, dest_y, 1 };
 8004912:	2300      	movs	r3, #0
 8004914:	e9cd 3400 	strd	r3, r4, [sp]
 8004918:	2301      	movs	r3, #1
			      { (sin(DEG(angle))), (cos(DEG(angle))), 3 },
 800491a:	9007      	str	r0, [sp, #28]
	s32_t dest[3] = { 0, dest_y, 1 };
 800491c:	9302      	str	r3, [sp, #8]
	for (u8_t i = 0; i < 3; i++) {
 800491e:	f10d 080c 	add.w	r8, sp, #12
	s32_t dest[3] = { 0, dest_y, 1 };
 8004922:	2503      	movs	r5, #3
		double_t a = 0;
 8004924:	ec57 6b18 	vmov	r6, r7, d8
 8004928:	46ea      	mov	sl, sp
{
 800492a:	46c1      	mov	r9, r8
 800492c:	2403      	movs	r4, #3
		for (u8_t j = 0; j < 3; j++) {
			a += tmp[i][j] * dest[j];
 800492e:	ecfa 7a01 	vldmia	sl!, {s15}
 8004932:	ecb9 7a01 	vldmia	r9!, {s14}
 8004936:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800493a:	3c01      	subs	r4, #1
 800493c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004940:	ee17 0a90 	vmov	r0, s15
 8004944:	f7fd fc84 	bl	8002250 <__aeabi_f2d>
 8004948:	4602      	mov	r2, r0
 800494a:	460b      	mov	r3, r1
 800494c:	4630      	mov	r0, r6
 800494e:	4639      	mov	r1, r7
 8004950:	f7fd fb20 	bl	8001f94 <__adddf3>
			printf("pos %lf\n", a);
 8004954:	4602      	mov	r2, r0
			a += tmp[i][j] * dest[j];
 8004956:	4606      	mov	r6, r0
			printf("pos %lf\n", a);
 8004958:	460b      	mov	r3, r1
 800495a:	4810      	ldr	r0, [pc, #64]	; (800499c <translation+0x11c>)
			a += tmp[i][j] * dest[j];
 800495c:	460f      	mov	r7, r1
			printf("pos %lf\n", a);
 800495e:	f7fe fc0b 	bl	8003178 <iprintf>
		for (u8_t j = 0; j < 3; j++) {
 8004962:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8004966:	d1e2      	bne.n	800492e <translation+0xae>
		}
		absolut_pos[i] = a;
 8004968:	3d01      	subs	r5, #1
	for (u8_t i = 0; i < 3; i++) {
 800496a:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
		absolut_pos[i] = a;
 800496e:	e8eb 6702 	strd	r6, r7, [fp], #8
 8004972:	f108 080c 	add.w	r8, r8, #12
	for (u8_t i = 0; i < 3; i++) {
 8004976:	d1d5      	bne.n	8004924 <translation+0xa4>
	}
}
 8004978:	b00d      	add	sp, #52	; 0x34
 800497a:	ecbd 8b02 	vpop	{d8}
 800497e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004982:	bf00      	nop
 8004984:	f3af 8000 	nop.w
	...
 8004990:	3c8efa35 	.word	0x3c8efa35
 8004994:	40a00000 	.word	0x40a00000
 8004998:	40400000 	.word	0x40400000
 800499c:	08007f23 	.word	0x08007f23
 80049a0:	20001440 	.word	0x20001440
 80049a4:	00000000 	.word	0x00000000

080049a8 <main>:

void main(void)
{
 80049a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	double a= (sin(DEG(30)));
 80049aa:	ed9f 0b13 	vldr	d0, [pc, #76]	; 80049f8 <main+0x50>
 80049ae:	f7fb fcaf 	bl	8000310 <sin>
 80049b2:	ec53 2b10 	vmov	r2, r3, d0
	printk("starting\n");
 80049b6:	4812      	ldr	r0, [pc, #72]	; (8004a00 <main+0x58>)
 80049b8:	4d12      	ldr	r5, [pc, #72]	; (8004a04 <main+0x5c>)
	printf("rad: %lf\n", a);

	translation(3, 30);
	for (u8_t i = 0; i < 3; i++) {
		printf(" %lf\n", absolut_pos[i]);
 80049ba:	4e13      	ldr	r6, [pc, #76]	; (8004a08 <main+0x60>)
	double a= (sin(DEG(30)));
 80049bc:	e9cd 2300 	strd	r2, r3, [sp]
	printk("starting\n");
 80049c0:	f002 f9c2 	bl	8006d48 <printk>
	printf("rad: %lf\n", a);
 80049c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049c8:	4810      	ldr	r0, [pc, #64]	; (8004a0c <main+0x64>)
 80049ca:	f7fe fbd5 	bl	8003178 <iprintf>
	translation(3, 30);
 80049ce:	eeb3 0a0e 	vmov.f32	s0, #62	; 0x41f00000  30.0
 80049d2:	2003      	movs	r0, #3
 80049d4:	f7ff ff54 	bl	8004880 <translation>
 80049d8:	2403      	movs	r4, #3
		printf(" %lf\n", absolut_pos[i]);
 80049da:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80049de:	4630      	mov	r0, r6
 80049e0:	3c01      	subs	r4, #1
 80049e2:	f7fe fbc9 	bl	8003178 <iprintf>
	for (u8_t i = 0; i < 3; i++) {
 80049e6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 80049ea:	d1f6      	bne.n	80049da <main+0x32>
	
	}
	printk("end\n");
 80049ec:	4808      	ldr	r0, [pc, #32]	; (8004a10 <main+0x68>)
 80049ee:	b002      	add	sp, #8
 80049f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	printk("end\n");
 80049f4:	f002 b9a8 	b.w	8006d48 <printk>
 80049f8:	40000000 	.word	0x40000000
 80049fc:	3fe0c152 	.word	0x3fe0c152
 8004a00:	08007f0a 	.word	0x08007f0a
 8004a04:	20001440 	.word	0x20001440
 8004a08:	08007f18 	.word	0x08007f18
 8004a0c:	08007f14 	.word	0x08007f14
 8004a10:	08007f1e 	.word	0x08007f1e

08004a14 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
 8004a14:	680b      	ldr	r3, [r1, #0]
 8004a16:	3301      	adds	r3, #1
 8004a18:	600b      	str	r3, [r1, #0]
	return _char_out(c);
 8004a1a:	4b01      	ldr	r3, [pc, #4]	; (8004a20 <char_out+0xc>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4718      	bx	r3
 8004a20:	20001458 	.word	0x20001458

08004a24 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
 8004a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a28:	b085      	sub	sp, #20
 8004a2a:	469b      	mov	fp, r3
 8004a2c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8004a2e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 8004ab8 <_printk_dec_ulong+0x94>
 8004a32:	2c01      	cmp	r4, #1
 8004a34:	bfb8      	it	lt
 8004a36:	2401      	movlt	r4, #1
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	bf0c      	ite	eq
 8004a3c:	2330      	moveq	r3, #48	; 0x30
 8004a3e:	2320      	movne	r3, #32
 8004a40:	4616      	mov	r6, r2
 8004a42:	4682      	mov	sl, r0
 8004a44:	4688      	mov	r8, r1
 8004a46:	9302      	str	r3, [sp, #8]
 8004a48:	2501      	movs	r5, #1
 8004a4a:	270a      	movs	r7, #10
 8004a4c:	2200      	movs	r2, #0
	if (min_width <= 0) {
		min_width = 1;
	}

	while (pos >= 10) {
		if (found_largest_digit != 0 || remainder >= pos) {
 8004a4e:	fbb6 f3f9 	udiv	r3, r6, r9
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	b90a      	cbnz	r2, 8004a5a <_printk_dec_ulong+0x36>
 8004a56:	45b1      	cmp	r9, r6
 8004a58:	d81d      	bhi.n	8004a96 <_printk_dec_ulong+0x72>
			found_largest_digit = 1;
			out((int)(remainder / pos + 48), ctx);
 8004a5a:	9b01      	ldr	r3, [sp, #4]
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8004a62:	47d0      	blx	sl
			digits++;
 8004a64:	3501      	adds	r5, #1
			found_largest_digit = 1;
 8004a66:	2201      	movs	r2, #1
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
		remainder %= pos;
 8004a68:	9b01      	ldr	r3, [sp, #4]
		remaining--;
 8004a6a:	3f01      	subs	r7, #1
	while (pos >= 10) {
 8004a6c:	2f01      	cmp	r7, #1
		remainder %= pos;
 8004a6e:	fb09 6613 	mls	r6, r9, r3, r6
		pos /= 10;
 8004a72:	f04f 030a 	mov.w	r3, #10
 8004a76:	fbb9 f9f3 	udiv	r9, r9, r3
	while (pos >= 10) {
 8004a7a:	d1e8      	bne.n	8004a4e <_printk_dec_ulong+0x2a>
	}
	out((int)(remainder + 48), ctx);
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	f106 0030 	add.w	r0, r6, #48	; 0x30
 8004a82:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
 8004a84:	f1bb 0f03 	cmp.w	fp, #3
 8004a88:	d102      	bne.n	8004a90 <_printk_dec_ulong+0x6c>
		remaining = min_width - digits;
 8004a8a:	1b64      	subs	r4, r4, r5
		while (remaining-- > 0) {
 8004a8c:	2c00      	cmp	r4, #0
 8004a8e:	dc0e      	bgt.n	8004aae <_printk_dec_ulong+0x8a>
			out(' ', ctx);
		}
	}
}
 8004a90:	b005      	add	sp, #20
 8004a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (remaining <= min_width
 8004a96:	42bc      	cmp	r4, r7
 8004a98:	dbe6      	blt.n	8004a68 <_printk_dec_ulong+0x44>
				&& padding < PAD_SPACE_AFTER) {
 8004a9a:	f1bb 0f02 	cmp.w	fp, #2
 8004a9e:	d8e3      	bhi.n	8004a68 <_printk_dec_ulong+0x44>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8004aa0:	4641      	mov	r1, r8
 8004aa2:	9802      	ldr	r0, [sp, #8]
 8004aa4:	9203      	str	r2, [sp, #12]
			digits++;
 8004aa6:	3501      	adds	r5, #1
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
 8004aa8:	47d0      	blx	sl
			digits++;
 8004aaa:	9a03      	ldr	r2, [sp, #12]
 8004aac:	e7dc      	b.n	8004a68 <_printk_dec_ulong+0x44>
			out(' ', ctx);
 8004aae:	4641      	mov	r1, r8
 8004ab0:	2020      	movs	r0, #32
 8004ab2:	47d0      	blx	sl
 8004ab4:	3c01      	subs	r4, #1
 8004ab6:	e7e9      	b.n	8004a8c <_printk_dec_ulong+0x68>
 8004ab8:	3b9aca00 	.word	0x3b9aca00

08004abc <__printk_hook_install>:
	_char_out = fn;
 8004abc:	4b01      	ldr	r3, [pc, #4]	; (8004ac4 <__printk_hook_install+0x8>)
 8004abe:	6018      	str	r0, [r3, #0]
}
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20001458 	.word	0x20001458

08004ac8 <vprintk>:
{
 8004ac8:	b507      	push	{r0, r1, r2, lr}
	struct out_context ctx = { 0 };
 8004aca:	2300      	movs	r3, #0
 8004acc:	9301      	str	r3, [sp, #4]
	z_vprintk(char_out, &ctx, fmt, ap);
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4803      	ldr	r0, [pc, #12]	; (8004ae0 <vprintk+0x18>)
 8004ad4:	a901      	add	r1, sp, #4
 8004ad6:	f001 ffc7 	bl	8006a68 <z_vprintk>
}
 8004ada:	b003      	add	sp, #12
 8004adc:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ae0:	08004a15 	.word	0x08004a15

08004ae4 <st_stm32f4_init>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
 8004ae4:	f04f 0210 	mov.w	r2, #16
 8004ae8:	f3ef 8311 	mrs	r3, BASEPRI
 8004aec:	f382 8811 	msr	BASEPRI, r2
 8004af0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	/* Update CMSIS SystemCoreClock variable (HCLK) */
	/* At reset, system core clock is set to 16 MHz from HSI */
	SystemCoreClock = 16000000;
 8004afc:	4b02      	ldr	r3, [pc, #8]	; (8004b08 <st_stm32f4_init+0x24>)
 8004afe:	4a03      	ldr	r2, [pc, #12]	; (8004b0c <st_stm32f4_init+0x28>)
 8004b00:	601a      	str	r2, [r3, #0]

	return 0;
}
 8004b02:	2000      	movs	r0, #0
 8004b04:	4770      	bx	lr
 8004b06:	bf00      	nop
 8004b08:	20001480 	.word	0x20001480
 8004b0c:	00f42400 	.word	0x00f42400

08004b10 <console_out>:
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
 8004b10:	280a      	cmp	r0, #10
{
 8004b12:	b538      	push	{r3, r4, r5, lr}
 8004b14:	4604      	mov	r4, r0
 8004b16:	4d07      	ldr	r5, [pc, #28]	; (8004b34 <console_out+0x24>)
	if ('\n' == c) {
 8004b18:	d104      	bne.n	8004b24 <console_out+0x14>
 8004b1a:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->driver_api;

	api->poll_out(dev, out_char);
 8004b1c:	6843      	ldr	r3, [r0, #4]
 8004b1e:	210d      	movs	r1, #13
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
 8004b24:	6828      	ldr	r0, [r5, #0]
 8004b26:	6843      	ldr	r3, [r0, #4]
 8004b28:	b2e1      	uxtb	r1, r4
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	4798      	blx	r3

	return c;
}
 8004b2e:	4620      	mov	r0, r4
 8004b30:	bd38      	pop	{r3, r4, r5, pc}
 8004b32:	bf00      	nop
 8004b34:	20000010 	.word	0x20000010

08004b38 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
 8004b38:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
 8004b3a:	4c04      	ldr	r4, [pc, #16]	; (8004b4c <uart_console_hook_install+0x14>)
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 fda1 	bl	8005684 <__stdout_hook_install>
	__printk_hook_install(console_out);
 8004b42:	4620      	mov	r0, r4
}
 8004b44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	__printk_hook_install(console_out);
 8004b48:	f7ff bfb8 	b.w	8004abc <__printk_hook_install>
 8004b4c:	08004b11 	.word	0x08004b11

08004b50 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
 8004b50:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
 8004b52:	4804      	ldr	r0, [pc, #16]	; (8004b64 <uart_console_init+0x14>)
 8004b54:	f001 faa8 	bl	80060a8 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <uart_console_init+0x18>)
 8004b5a:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
 8004b5c:	f7ff ffec 	bl	8004b38 <uart_console_hook_install>

	return 0;
}
 8004b60:	2000      	movs	r0, #0
 8004b62:	bd08      	pop	{r3, pc}
 8004b64:	08007f3a 	.word	0x08007f3a
 8004b68:	20000010 	.word	0x20000010

08004b6c <__stm32_exti_isr>:
 * @param arg isr argument
 * @param min low end of EXTI# range
 * @param max low end of EXTI# range
 */
static void __stm32_exti_isr(int min, int max, void *arg)
{
 8004b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct device *dev = arg;
	struct stm32_exti_data *data = dev->driver_data;
 8004b70:	6895      	ldr	r5, [r2, #8]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
  return (READ_BIT(EXTI->PR, ExtiLine) == (ExtiLine));
 8004b72:	4e0d      	ldr	r6, [pc, #52]	; (8004ba8 <__stm32_exti_isr+0x3c>)
{
 8004b74:	4604      	mov	r4, r0
 8004b76:	460f      	mov	r7, r1
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004b78:	f04f 0801 	mov.w	r8, #1
			/* run callback only if one is registered */
			if (!data->cb[line].cb) {
				continue;
			}

			data->cb[line].cb(line, data->cb[line].data);
 8004b7c:	f105 0904 	add.w	r9, r5, #4
	for (line = min; line < max; line++) {
 8004b80:	42bc      	cmp	r4, r7
 8004b82:	db01      	blt.n	8004b88 <__stm32_exti_isr+0x1c>
		}
	}
}
 8004b84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b88:	6972      	ldr	r2, [r6, #20]
		return LL_EXTI_IsActiveFlag_0_31(1 << line);
 8004b8a:	fa08 f304 	lsl.w	r3, r8, r4
		if (stm32_exti_is_pending(line)) {
 8004b8e:	ea33 0202 	bics.w	r2, r3, r2
 8004b92:	d107      	bne.n	8004ba4 <__stm32_exti_isr+0x38>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8004b94:	6173      	str	r3, [r6, #20]
			if (!data->cb[line].cb) {
 8004b96:	f855 3034 	ldr.w	r3, [r5, r4, lsl #3]
 8004b9a:	b11b      	cbz	r3, 8004ba4 <__stm32_exti_isr+0x38>
			data->cb[line].cb(line, data->cb[line].data);
 8004b9c:	f859 1034 	ldr.w	r1, [r9, r4, lsl #3]
 8004ba0:	4620      	mov	r0, r4
 8004ba2:	4798      	blx	r3
	for (line = min; line < max; line++) {
 8004ba4:	3401      	adds	r4, #1
 8004ba6:	e7eb      	b.n	8004b80 <__stm32_exti_isr+0x14>
 8004ba8:	40013c00 	.word	0x40013c00

08004bac <stm32_exti_enable>:
	if (line < 32) {
 8004bac:	281f      	cmp	r0, #31
{
 8004bae:	b508      	push	{r3, lr}
	if (line < 32) {
 8004bb0:	dd02      	ble.n	8004bb8 <stm32_exti_enable+0xc>
		return -ENOTSUP;
 8004bb2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004bb6:	bd08      	pop	{r3, pc}
  SET_BIT(EXTI->IMR, ExtiLine);
 8004bb8:	4a06      	ldr	r2, [pc, #24]	; (8004bd4 <stm32_exti_enable+0x28>)
		LL_EXTI_EnableIT_0_31(1 << line);
 8004bba:	2301      	movs	r3, #1
 8004bbc:	6811      	ldr	r1, [r2, #0]
 8004bbe:	4083      	lsls	r3, r0
 8004bc0:	430b      	orrs	r3, r1
	if (line < ARRAY_SIZE(exti_irq_table)) {
 8004bc2:	2816      	cmp	r0, #22
 8004bc4:	6013      	str	r3, [r2, #0]
 8004bc6:	dcf4      	bgt.n	8004bb2 <stm32_exti_enable+0x6>
	irq_enable(irqnum);
 8004bc8:	4b03      	ldr	r3, [pc, #12]	; (8004bd8 <stm32_exti_enable+0x2c>)
 8004bca:	5618      	ldrsb	r0, [r3, r0]
 8004bcc:	f000 fabe 	bl	800514c <arch_irq_enable>
	return 0;
 8004bd0:	2000      	movs	r0, #0
 8004bd2:	e7f0      	b.n	8004bb6 <stm32_exti_enable+0xa>
 8004bd4:	40013c00 	.word	0x40013c00
 8004bd8:	08007f41 	.word	0x08007f41

08004bdc <stm32_exti_disable>:
	if (line < 32) {
 8004bdc:	281f      	cmp	r0, #31
 8004bde:	dc06      	bgt.n	8004bee <stm32_exti_disable+0x12>
  CLEAR_BIT(EXTI->IMR, ExtiLine);
 8004be0:	4903      	ldr	r1, [pc, #12]	; (8004bf0 <stm32_exti_disable+0x14>)
		LL_EXTI_DisableIT_0_31(1 << line);
 8004be2:	2201      	movs	r2, #1
 8004be4:	680b      	ldr	r3, [r1, #0]
 8004be6:	4082      	lsls	r2, r0
 8004be8:	ea23 0302 	bic.w	r3, r3, r2
 8004bec:	600b      	str	r3, [r1, #0]
}
 8004bee:	4770      	bx	lr
 8004bf0:	40013c00 	.word	0x40013c00

08004bf4 <stm32_exti_trigger>:
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8004bf4:	07ca      	lsls	r2, r1, #31
{
 8004bf6:	b510      	push	{r4, lr}
	if (trigger & STM32_EXTI_TRIG_RISING) {
 8004bf8:	d507      	bpl.n	8004c0a <stm32_exti_trigger+0x16>
		if (line < 32) {
 8004bfa:	281f      	cmp	r0, #31
 8004bfc:	dc05      	bgt.n	8004c0a <stm32_exti_trigger+0x16>
  SET_BIT(EXTI->RTSR, ExtiLine);
 8004bfe:	4b08      	ldr	r3, [pc, #32]	; (8004c20 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableRisingTrig_0_31(1 << line);
 8004c00:	2201      	movs	r2, #1
 8004c02:	689c      	ldr	r4, [r3, #8]
 8004c04:	4082      	lsls	r2, r0
 8004c06:	4322      	orrs	r2, r4
 8004c08:	609a      	str	r2, [r3, #8]
	if (trigger & STM32_EXTI_TRIG_FALLING) {
 8004c0a:	078b      	lsls	r3, r1, #30
 8004c0c:	d507      	bpl.n	8004c1e <stm32_exti_trigger+0x2a>
		if (line < 32) {
 8004c0e:	281f      	cmp	r0, #31
 8004c10:	dc05      	bgt.n	8004c1e <stm32_exti_trigger+0x2a>
  SET_BIT(EXTI->FTSR, ExtiLine);
 8004c12:	4a03      	ldr	r2, [pc, #12]	; (8004c20 <stm32_exti_trigger+0x2c>)
			LL_EXTI_EnableFallingTrig_0_31(1 << line);
 8004c14:	2301      	movs	r3, #1
 8004c16:	68d1      	ldr	r1, [r2, #12]
 8004c18:	4083      	lsls	r3, r0
 8004c1a:	430b      	orrs	r3, r1
 8004c1c:	60d3      	str	r3, [r2, #12]
}
 8004c1e:	bd10      	pop	{r4, pc}
 8004c20:	40013c00 	.word	0x40013c00

08004c24 <stm32_exti_set_callback>:
				void *arg)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	if (data->cb[line].cb) {
 8004c24:	4907      	ldr	r1, [pc, #28]	; (8004c44 <stm32_exti_set_callback+0x20>)
{
 8004c26:	b530      	push	{r4, r5, lr}
 8004c28:	688c      	ldr	r4, [r1, #8]
	if (data->cb[line].cb) {
 8004c2a:	f854 1030 	ldr.w	r1, [r4, r0, lsl #3]
 8004c2e:	eb04 05c0 	add.w	r5, r4, r0, lsl #3
 8004c32:	b921      	cbnz	r1, 8004c3e <stm32_exti_set_callback+0x1a>
		return -EBUSY;
	}

	data->cb[line].cb = cb;
 8004c34:	f844 2030 	str.w	r2, [r4, r0, lsl #3]
	data->cb[line].data = arg;
 8004c38:	606b      	str	r3, [r5, #4]

	return 0;
 8004c3a:	4608      	mov	r0, r1
}
 8004c3c:	bd30      	pop	{r4, r5, pc}
		return -EBUSY;
 8004c3e:	f06f 000f 	mvn.w	r0, #15
 8004c42:	e7fb      	b.n	8004c3c <stm32_exti_set_callback+0x18>
 8004c44:	200014c8 	.word	0x200014c8

08004c48 <stm32_exti_unset_callback>:
void stm32_exti_unset_callback(int line)
{
	struct device *dev = DEVICE_GET(exti_stm32);
	struct stm32_exti_data *data = dev->driver_data;

	data->cb[line].cb = NULL;
 8004c48:	4b04      	ldr	r3, [pc, #16]	; (8004c5c <stm32_exti_unset_callback+0x14>)
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	eb02 01c0 	add.w	r1, r2, r0, lsl #3
 8004c50:	2300      	movs	r3, #0
 8004c52:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	data->cb[line].data = NULL;
 8004c56:	604b      	str	r3, [r1, #4]
}
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	200014c8 	.word	0x200014c8

08004c60 <stm32_clock_control_on>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004c60:	680b      	ldr	r3, [r1, #0]
{
 8004c62:	b084      	sub	sp, #16
	switch (pclken->bus) {
 8004c64:	2b03      	cmp	r3, #3
 8004c66:	d82d      	bhi.n	8004cc4 <stm32_clock_control_on+0x64>
 8004c68:	e8df f003 	tbb	[pc, r3]
 8004c6c:	22180e02 	.word	0x22180e02
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8004c70:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <stm32_clock_control_on+0x6c>)
	case STM32_CLOCK_BUS_AHB1:
		LL_AHB1_GRP1_EnableClock(pclken->enr);
 8004c72:	684b      	ldr	r3, [r1, #4]
 8004c74:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8004c76:	4319      	orrs	r1, r3
 8004c78:	6311      	str	r1, [r2, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8004c7a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8004c80:	9b00      	ldr	r3, [sp, #0]
#endif /* CONFIG_SOC_SERIES_STM32L0X || CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8004c82:	2000      	movs	r0, #0
}
 8004c84:	b004      	add	sp, #16
 8004c86:	4770      	bx	lr
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004c88:	4a10      	ldr	r2, [pc, #64]	; (8004ccc <stm32_clock_control_on+0x6c>)
		LL_AHB2_GRP1_EnableClock(pclken->enr);
 8004c8a:	684b      	ldr	r3, [r1, #4]
 8004c8c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8004c8e:	4319      	orrs	r1, r3
 8004c90:	6351      	str	r1, [r2, #52]	; 0x34
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004c92:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c94:	4013      	ands	r3, r2
 8004c96:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004c98:	9b01      	ldr	r3, [sp, #4]
 8004c9a:	e7f2      	b.n	8004c82 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8004c9c:	4a0b      	ldr	r2, [pc, #44]	; (8004ccc <stm32_clock_control_on+0x6c>)
		LL_APB1_GRP1_EnableClock(pclken->enr);
 8004c9e:	684b      	ldr	r3, [r1, #4]
 8004ca0:	6c11      	ldr	r1, [r2, #64]	; 0x40
 8004ca2:	4319      	orrs	r1, r3
 8004ca4:	6411      	str	r1, [r2, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004ca6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004ca8:	4013      	ands	r3, r2
 8004caa:	9302      	str	r3, [sp, #8]
  (void)tmpreg;
 8004cac:	9b02      	ldr	r3, [sp, #8]
 8004cae:	e7e8      	b.n	8004c82 <stm32_clock_control_on+0x22>
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8004cb0:	4a06      	ldr	r2, [pc, #24]	; (8004ccc <stm32_clock_control_on+0x6c>)
		LL_APB2_GRP1_EnableClock(pclken->enr);
 8004cb2:	684b      	ldr	r3, [r1, #4]
 8004cb4:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8004cb6:	4319      	orrs	r1, r3
 8004cb8:	6451      	str	r1, [r2, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8004cba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	9303      	str	r3, [sp, #12]
  (void)tmpreg;
 8004cc0:	9b03      	ldr	r3, [sp, #12]
 8004cc2:	e7de      	b.n	8004c82 <stm32_clock_control_on+0x22>
		return -ENOTSUP;
 8004cc4:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8004cc8:	e7dc      	b.n	8004c84 <stm32_clock_control_on+0x24>
 8004cca:	bf00      	nop
 8004ccc:	40023800 	.word	0x40023800

08004cd0 <stm32_clock_control_off>:
{
	struct stm32_pclken *pclken = (struct stm32_pclken *)(sub_system);

	ARG_UNUSED(dev);

	switch (pclken->bus) {
 8004cd0:	680b      	ldr	r3, [r1, #0]
 8004cd2:	2b03      	cmp	r3, #3
 8004cd4:	d820      	bhi.n	8004d18 <stm32_clock_control_off+0x48>
 8004cd6:	e8df f003 	tbb	[pc, r3]
 8004cda:	0a02      	.short	0x0a02
 8004cdc:	1811      	.short	0x1811
  CLEAR_BIT(RCC->AHB1ENR, Periphs);
 8004cde:	4a10      	ldr	r2, [pc, #64]	; (8004d20 <stm32_clock_control_off+0x50>)
 8004ce0:	6849      	ldr	r1, [r1, #4]
 8004ce2:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8004ce4:	ea23 0301 	bic.w	r3, r3, r1
 8004ce8:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* CONFIG_SOC_SERIES_STM32L0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8004cea:	2000      	movs	r0, #0
 8004cec:	4770      	bx	lr
  CLEAR_BIT(RCC->AHB2ENR, Periphs);
 8004cee:	4a0c      	ldr	r2, [pc, #48]	; (8004d20 <stm32_clock_control_off+0x50>)
 8004cf0:	6849      	ldr	r1, [r1, #4]
 8004cf2:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004cf4:	ea23 0301 	bic.w	r3, r3, r1
 8004cf8:	6353      	str	r3, [r2, #52]	; 0x34
 8004cfa:	e7f6      	b.n	8004cea <stm32_clock_control_off+0x1a>
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8004cfc:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <stm32_clock_control_off+0x50>)
 8004cfe:	6849      	ldr	r1, [r1, #4]
 8004d00:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d02:	ea23 0301 	bic.w	r3, r3, r1
 8004d06:	6413      	str	r3, [r2, #64]	; 0x40
 8004d08:	e7ef      	b.n	8004cea <stm32_clock_control_off+0x1a>
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8004d0a:	4a05      	ldr	r2, [pc, #20]	; (8004d20 <stm32_clock_control_off+0x50>)
 8004d0c:	6849      	ldr	r1, [r1, #4]
 8004d0e:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8004d10:	ea23 0301 	bic.w	r3, r3, r1
 8004d14:	6453      	str	r3, [r2, #68]	; 0x44
 8004d16:	e7e8      	b.n	8004cea <stm32_clock_control_off+0x1a>
		return -ENOTSUP;
 8004d18:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004d1c:	4770      	bx	lr
 8004d1e:	bf00      	nop
 8004d20:	40023800 	.word	0x40023800

08004d24 <stm32_clock_control_get_subsys_rate>:
	 * Get AHB Clock (= SystemCoreClock = SYSCLK/prescaler)
	 * SystemCoreClock is preferred to CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC
	 * since it will be updated after clock configuration and hence
	 * more likely to contain actual clock speed
	 */
	u32_t ahb_clock = SystemCoreClock;
 8004d24:	4b07      	ldr	r3, [pc, #28]	; (8004d44 <stm32_clock_control_get_subsys_rate+0x20>)
				CONFIG_CLOCK_STM32_APB2_PRESCALER);
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */

	ARG_UNUSED(clock);

	switch (pclken->bus) {
 8004d26:	6809      	ldr	r1, [r1, #0]
	u32_t ahb_clock = SystemCoreClock;
 8004d28:	681b      	ldr	r3, [r3, #0]
	switch (pclken->bus) {
 8004d2a:	2903      	cmp	r1, #3
 8004d2c:	d807      	bhi.n	8004d3e <stm32_clock_control_get_subsys_rate+0x1a>
 8004d2e:	e8df f001 	tbb	[pc, r1]
 8004d32:	0303      	.short	0x0303
 8004d34:	0302      	.short	0x0302
	return clock / prescaler;
 8004d36:	085b      	lsrs	r3, r3, #1
#endif
		*rate = apb1_clock;
		break;
#if !defined (CONFIG_SOC_SERIES_STM32F0X) && !defined (CONFIG_SOC_SERIES_STM32G0X)
	case STM32_CLOCK_BUS_APB2:
		*rate = apb2_clock;
 8004d38:	6013      	str	r3, [r2, #0]
#endif /* CONFIG_SOC_SERIES_STM32F0X && CONFIG_SOC_SERIES_STM32G0X */
	default:
		return -ENOTSUP;
	}

	return 0;
 8004d3a:	2000      	movs	r0, #0
		break;
 8004d3c:	4770      	bx	lr
		return -ENOTSUP;
 8004d3e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
 8004d42:	4770      	bx	lr
 8004d44:	20001480 	.word	0x20001480

08004d48 <stm32_clock_control_init>:
			 mco2_prescaler(CONFIG_CLOCK_STM32_MCO2_DIV));
#endif /* CONFIG_CLOCK_STM32_MCO2_SRC_NOCLOCK */
}

static int stm32_clock_control_init(struct device *dev)
{
 8004d48:	b530      	push	{r4, r5, lr}
 8004d4a:	b087      	sub	sp, #28
	clk_init->APB1CLKDivider = apb1_prescaler(
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d52:	e9cd 3200 	strd	r3, r2, [sp]
	clk_init->APB2CLKDivider = apb2_prescaler(
 8004d56:	9302      	str	r3, [sp, #8]
#else
	hclk_prescaler = s_ClkInitStruct.AHBCLKDivider;
#endif /* CONFIG_SOC_SERIES_STM32WBX */

	/* Some clocks would be activated by default */
	config_enable_default_clocks();
 8004d58:	f000 f838 	bl	8004dcc <config_enable_default_clocks>

#ifdef CONFIG_CLOCK_STM32_SYSCLK_SRC_PLL
	LL_UTILS_PLLInitTypeDef s_PLLInitStruct;

	/* configure PLL input settings */
	config_pll_init(&s_PLLInitStruct);
 8004d5c:	a803      	add	r0, sp, #12
 8004d5e:	f002 f872 	bl	8006e46 <config_pll_init>
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <stm32_clock_control_init+0x7c>)
 8004d64:	681a      	ldr	r2, [r3, #0]
	if (LL_RCC_HSI_IsReady() != 1) {
 8004d66:	0791      	lsls	r1, r2, #30
 8004d68:	d406      	bmi.n	8004d78 <stm32_clock_control_init+0x30>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	f042 0201 	orr.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8004d72:	681a      	ldr	r2, [r3, #0]
		while (LL_RCC_HSI_IsReady() != 1) {
 8004d74:	0792      	lsls	r2, r2, #30
 8004d76:	d5fc      	bpl.n	8004d72 <stm32_clock_control_init+0x2a>
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8004d78:	4c12      	ldr	r4, [pc, #72]	; (8004dc4 <stm32_clock_control_init+0x7c>)
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	f023 0303 	bic.w	r3, r3, #3
 8004d80:	60a3      	str	r3, [r4, #8]
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8004d82:	68a3      	ldr	r3, [r4, #8]
 8004d84:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004d88:	60a3      	str	r3, [r4, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004d8a:	68a5      	ldr	r5, [r4, #8]
	while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI) {
 8004d8c:	f015 050c 	ands.w	r5, r5, #12
 8004d90:	d1fb      	bne.n	8004d8a <stm32_clock_control_init+0x42>
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8004d92:	6823      	ldr	r3, [r4, #0]
#ifdef CONFIG_CLOCK_STM32_HSE_BYPASS
	hse_bypass = LL_UTILS_HSEBYPASS_ON;
#endif /* CONFIG_CLOCK_STM32_HSE_BYPASS */

	/* Switch to PLL with HSE as clock source */
	LL_PLL_ConfigSystemClock_HSE(
 8004d94:	480c      	ldr	r0, [pc, #48]	; (8004dc8 <stm32_clock_control_init+0x80>)
 8004d96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d9a:	6023      	str	r3, [r4, #0]
	MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ,
 8004d9c:	6863      	ldr	r3, [r4, #4]
 8004d9e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8004da2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004da6:	6063      	str	r3, [r4, #4]
	LL_PLL_ConfigSystemClock_HSE(
 8004da8:	aa03      	add	r2, sp, #12
 8004daa:	466b      	mov	r3, sp
 8004dac:	2101      	movs	r1, #1
 8004dae:	f001 f92b 	bl	8006008 <LL_PLL_ConfigSystemClock_HSE>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	f023 0301 	bic.w	r3, r3, #1
 8004db8:	6023      	str	r3, [r4, #0]
		&s_PLLInitStruct,
		&s_ClkInitStruct);

	/* Disable other clocks */
	LL_RCC_HSI_Disable();
	LL_RCC_MSI_Disable();
 8004dba:	f002 f84d 	bl	8006e58 <LL_RCC_MSI_Disable>

	/* configure MCO1/MCO2 based on Kconfig */
	stm32_clock_control_mco_init();

	return 0;
}
 8004dbe:	4628      	mov	r0, r5
 8004dc0:	b007      	add	sp, #28
 8004dc2:	bd30      	pop	{r4, r5, pc}
 8004dc4:	40023800 	.word	0x40023800
 8004dc8:	007a1200 	.word	0x007a1200

08004dcc <config_enable_default_clocks>:
  SET_BIT(RCC->APB1ENR, Periphs);
 8004dcc:	4b06      	ldr	r3, [pc, #24]	; (8004de8 <config_enable_default_clocks+0x1c>)
 8004dce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dd0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40

/**
 * @brief Activate default clocks
 */
void config_enable_default_clocks(void)
{
 8004dd8:	b082      	sub	sp, #8
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8004de0:	9b01      	ldr	r3, [sp, #4]
	/* Power Interface clock enabled by default */
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
}
 8004de2:	b002      	add	sp, #8
 8004de4:	4770      	bx	lr
 8004de6:	bf00      	nop
 8004de8:	40023800 	.word	0x40023800

08004dec <z_pinmux_stm32_set>:
 *
 * @return 0 on success, error otherwise
 */
int z_pinmux_stm32_set(u32_t pin, u32_t func,
				struct device *clk)
{
 8004dec:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004dee:	4604      	mov	r4, r0
	/* make sure to enable port clock first */
	if (enable_port(STM32_PORT(pin), clk)) {
 8004df0:	0906      	lsrs	r6, r0, #4
{
 8004df2:	460d      	mov	r5, r1
	if (!clk) {
 8004df4:	4610      	mov	r0, r2
 8004df6:	b912      	cbnz	r2, 8004dfe <z_pinmux_stm32_set+0x12>
 8004df8:	4811      	ldr	r0, [pc, #68]	; (8004e40 <z_pinmux_stm32_set+0x54>)
 8004dfa:	f001 f955 	bl	80060a8 <z_impl_device_get_binding>
	pclken.bus = STM32_CLOCK_BUS_GPIO;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	9300      	str	r3, [sp, #0]
	pclken.enr = ports_enable[port];
 8004e02:	4b10      	ldr	r3, [pc, #64]	; (8004e44 <z_pinmux_stm32_set+0x58>)
 8004e04:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8004e08:	9301      	str	r3, [sp, #4]
	if (pclken.enr == STM32_PORT_NOT_AVAILABLE) {
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	d102      	bne.n	8004e14 <z_pinmux_stm32_set+0x28>
		return -EIO;
 8004e0e:	f06f 0004 	mvn.w	r0, #4
 8004e12:	e012      	b.n	8004e3a <z_pinmux_stm32_set+0x4e>
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api =
		(const struct clock_control_driver_api *)dev->driver_api;

	return api->on(dev, sys);
 8004e14:	6843      	ldr	r3, [r0, #4]
 8004e16:	4669      	mov	r1, sp
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4798      	blx	r3
	if (enable_port(STM32_PORT(pin), clk)) {
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d1f6      	bne.n	8004e0e <z_pinmux_stm32_set+0x22>
	u32_t offset = STM32_PORT(pin) * GPIO_REG_SIZE;
 8004e20:	1120      	asrs	r0, r4, #4
 8004e22:	0280      	lsls	r0, r0, #10
	return gpio_stm32_configure((u32_t *)port_base,
 8004e24:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8004e28:	f005 030f 	and.w	r3, r5, #15
 8004e2c:	462a      	mov	r2, r5
 8004e2e:	f004 010f 	and.w	r1, r4, #15
 8004e32:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
 8004e36:	f002 f8db 	bl	8006ff0 <gpio_stm32_configure>
	}

	return stm32_pin_configure(pin, func, func & STM32_AFR_MASK);
}
 8004e3a:	b002      	add	sp, #8
 8004e3c:	bd70      	pop	{r4, r5, r6, pc}
 8004e3e:	bf00      	nop
 8004e40:	08007f63 	.word	0x08007f63
 8004e44:	08007e10 	.word	0x08007e10

08004e48 <stm32_setup_pins>:
 * @param pinconf  board pin configuration array
 * @param pins     array size
 */
void stm32_setup_pins(const struct pin_config *pinconf,
		      size_t pins)
{
 8004e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e4a:	4604      	mov	r4, r0
 8004e4c:	460e      	mov	r6, r1
 8004e4e:	4809      	ldr	r0, [pc, #36]	; (8004e74 <stm32_setup_pins+0x2c>)
 8004e50:	f001 f92a 	bl	80060a8 <z_impl_device_get_binding>
	struct device *clk;
	int i;

	clk = device_get_binding(STM32_CLOCK_CONTROL_NAME);

	for (i = 0; i < pins; i++) {
 8004e54:	2500      	movs	r5, #0
 8004e56:	4607      	mov	r7, r0
 8004e58:	42b5      	cmp	r5, r6
 8004e5a:	f104 0408 	add.w	r4, r4, #8
 8004e5e:	d100      	bne.n	8004e62 <stm32_setup_pins+0x1a>
		z_pinmux_stm32_set(pinconf[i].pin_num,
				  pinconf[i].mode,
				  clk);
	}
}
 8004e60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		z_pinmux_stm32_set(pinconf[i].pin_num,
 8004e62:	463a      	mov	r2, r7
 8004e64:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8004e68:	f814 0c08 	ldrb.w	r0, [r4, #-8]
 8004e6c:	f7ff ffbe 	bl	8004dec <z_pinmux_stm32_set>
	for (i = 0; i < pins; i++) {
 8004e70:	3501      	adds	r5, #1
 8004e72:	e7f1      	b.n	8004e58 <stm32_setup_pins+0x10>
 8004e74:	08007f63 	.word	0x08007f63

08004e78 <elapsed>:
	 * the double-overflow if called at the end of a cycle.  There
	 * is no safe algorithm here, so we split the difference by
	 * reading CTRL twice, suppressing the second overflow bit if
	 * VAL was "about to overflow".
	 */
	ctrl1 = SysTick->CTRL;
 8004e78:	4b0f      	ldr	r3, [pc, #60]	; (8004eb8 <elapsed+0x40>)
{
 8004e7a:	b530      	push	{r4, r5, lr}
	ctrl1 = SysTick->CTRL;
 8004e7c:	681a      	ldr	r2, [r3, #0]
	val = SysTick->VAL & COUNTER_MAX;
 8004e7e:	6899      	ldr	r1, [r3, #8]
	ctrl2 = SysTick->CTRL;
 8004e80:	681d      	ldr	r5, [r3, #0]
 8004e82:	4b0e      	ldr	r3, [pc, #56]	; (8004ebc <elapsed+0x44>)
 8004e84:	681c      	ldr	r4, [r3, #0]

	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8004e86:	4b0e      	ldr	r3, [pc, #56]	; (8004ec0 <elapsed+0x48>)
 8004e88:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	bf18      	it	ne
 8004e90:	4622      	movne	r2, r4
	val = SysTick->VAL & COUNTER_MAX;
 8004e92:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8004e96:	4402      	add	r2, r0
	if (val > VAL_ABOUT_TO_WRAP) {
 8004e98:	2908      	cmp	r1, #8
	overflow_cyc += (ctrl1 & SysTick_CTRL_COUNTFLAG_Msk) ? last_load : 0;
 8004e9a:	601a      	str	r2, [r3, #0]
	if (val > VAL_ABOUT_TO_WRAP) {
 8004e9c:	d907      	bls.n	8004eae <elapsed+0x36>
		int wrap = ctrl2 & SysTick_CTRL_COUNTFLAG_Msk;

		overflow_cyc += (wrap != 0) ? last_load : 0;
 8004e9e:	f415 3f80 	tst.w	r5, #65536	; 0x10000
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	bf14      	ite	ne
 8004ea6:	4620      	movne	r0, r4
 8004ea8:	2000      	moveq	r0, #0
 8004eaa:	4402      	add	r2, r0
 8004eac:	601a      	str	r2, [r3, #0]
	}

	return (last_load - val) + overflow_cyc;
 8004eae:	6818      	ldr	r0, [r3, #0]
 8004eb0:	4420      	add	r0, r4
}
 8004eb2:	1a40      	subs	r0, r0, r1
 8004eb4:	bd30      	pop	{r4, r5, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000e010 	.word	0xe000e010
 8004ebc:	200000d4 	.word	0x200000d4
 8004ec0:	200000d8 	.word	0x200000d8

08004ec4 <z_clock_isr>:

/* Callout out of platform assembly, not hooked via IRQ_CONNECT... */
void z_clock_isr(void *arg)
{
 8004ec4:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);
	u32_t dticks;

	cycle_count += last_load;
 8004ec6:	4a0e      	ldr	r2, [pc, #56]	; (8004f00 <z_clock_isr+0x3c>)
 8004ec8:	4b0e      	ldr	r3, [pc, #56]	; (8004f04 <z_clock_isr+0x40>)
 8004eca:	6812      	ldr	r2, [r2, #0]
 8004ecc:	6818      	ldr	r0, [r3, #0]
 8004ece:	4410      	add	r0, r2
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8004ed0:	4a0d      	ldr	r2, [pc, #52]	; (8004f08 <z_clock_isr+0x44>)
	cycle_count += last_load;
 8004ed2:	6018      	str	r0, [r3, #0]
	dticks = (cycle_count - announced_cycles) / CYC_PER_TICK;
 8004ed4:	6811      	ldr	r1, [r2, #0]
 8004ed6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004eda:	1a40      	subs	r0, r0, r1
 8004edc:	fbb0 f0f3 	udiv	r0, r0, r3
	announced_cycles += dticks * CYC_PER_TICK;
 8004ee0:	fb03 1300 	mla	r3, r3, r0, r1
 8004ee4:	6013      	str	r3, [r2, #0]

	overflow_cyc = SysTick->CTRL; /* Reset overflow flag */
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <z_clock_isr+0x48>)
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b09      	ldr	r3, [pc, #36]	; (8004f10 <z_clock_isr+0x4c>)
 8004eec:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8004eee:	2200      	movs	r2, #0
 8004ef0:	601a      	str	r2, [r3, #0]

	z_clock_announce(TICKLESS ? dticks : 1);
 8004ef2:	f001 fcef 	bl	80068d4 <z_clock_announce>
	z_arm_exc_exit();
}
 8004ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8004efa:	f000 b897 	b.w	800502c <z_arm_exc_exit>
 8004efe:	bf00      	nop
 8004f00:	200000d4 	.word	0x200000d4
 8004f04:	200000d0 	.word	0x200000d0
 8004f08:	200000cc 	.word	0x200000cc
 8004f0c:	e000e010 	.word	0xe000e010
 8004f10:	200000d8 	.word	0x200000d8

08004f14 <z_clock_driver_init>:
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f14:	4b09      	ldr	r3, [pc, #36]	; (8004f3c <z_clock_driver_init+0x28>)
 8004f16:	2210      	movs	r2, #16
 8004f18:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

int z_clock_driver_init(struct device *device)
{
	NVIC_SetPriority(SysTick_IRQn, _IRQ_PRIO_OFFSET);
	last_load = CYC_PER_TICK - 1;
 8004f1c:	4b08      	ldr	r3, [pc, #32]	; (8004f40 <z_clock_driver_init+0x2c>)
 8004f1e:	f242 527f 	movw	r2, #9599	; 0x257f
 8004f22:	601a      	str	r2, [r3, #0]
	overflow_cyc = 0U;
 8004f24:	4b07      	ldr	r3, [pc, #28]	; (8004f44 <z_clock_driver_init+0x30>)
 8004f26:	2000      	movs	r0, #0
 8004f28:	6018      	str	r0, [r3, #0]
	SysTick->LOAD = last_load;
 8004f2a:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <z_clock_driver_init+0x34>)
 8004f2c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8004f2e:	6098      	str	r0, [r3, #8]
	SysTick->CTRL |= (SysTick_CTRL_ENABLE_Msk |
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	f042 0207 	orr.w	r2, r2, #7
 8004f36:	601a      	str	r2, [r3, #0]
			  SysTick_CTRL_TICKINT_Msk |
			  SysTick_CTRL_CLKSOURCE_Msk);
	return 0;
}
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	e000ed00 	.word	0xe000ed00
 8004f40:	200000d4 	.word	0x200000d4
 8004f44:	200000d8 	.word	0x200000d8
 8004f48:	e000e010 	.word	0xe000e010

08004f4c <z_clock_set_timeout>:

void z_clock_set_timeout(s32_t ticks, bool idle)
{
 8004f4c:	b570      	push	{r4, r5, r6, lr}
 8004f4e:	4c23      	ldr	r4, [pc, #140]	; (8004fdc <z_clock_set_timeout+0x90>)
	 * need to wake up multiple times per second.  If the kernel
	 * allows us to miss tick announcements in idle, then shut off
	 * the counter. (Note: we can assume if idle==true that
	 * interrupts are already disabled)
	 */
	if (IS_ENABLED(CONFIG_TICKLESS_IDLE) && idle && ticks == K_FOREVER) {
 8004f50:	b151      	cbz	r1, 8004f68 <z_clock_set_timeout+0x1c>
 8004f52:	1c43      	adds	r3, r0, #1
 8004f54:	d108      	bne.n	8004f68 <z_clock_set_timeout+0x1c>
		SysTick->CTRL &= ~SysTick_CTRL_ENABLE_Msk;
 8004f56:	4a22      	ldr	r2, [pc, #136]	; (8004fe0 <z_clock_set_timeout+0x94>)
 8004f58:	6813      	ldr	r3, [r2, #0]
 8004f5a:	f023 0301 	bic.w	r3, r3, #1
 8004f5e:	6013      	str	r3, [r2, #0]
		last_load = TIMER_STOPPED;
 8004f60:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8004f64:	6023      	str	r3, [r4, #0]
	SysTick->LOAD = last_load - 1;
	SysTick->VAL = 0; /* resets timer to last_load */

	k_spin_unlock(&lock, key);
#endif
}
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 8004f68:	3801      	subs	r0, #1
 8004f6a:	f240 63d2 	movw	r3, #1746	; 0x6d2
 8004f6e:	4298      	cmp	r0, r3
 8004f70:	dc2e      	bgt.n	8004fd0 <z_clock_set_timeout+0x84>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8004f72:	2800      	cmp	r0, #0
 8004f74:	dd2e      	ble.n	8004fd4 <z_clock_set_timeout+0x88>
 8004f76:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8004f7a:	fb03 f600 	mul.w	r6, r3, r0
	__asm__ volatile(
 8004f7e:	f04f 0310 	mov.w	r3, #16
 8004f82:	f3ef 8511 	mrs	r5, BASEPRI
 8004f86:	f383 8811 	msr	BASEPRI, r3
 8004f8a:	f3bf 8f6f 	isb	sy
	cycle_count += elapsed();
 8004f8e:	f7ff ff73 	bl	8004e78 <elapsed>
 8004f92:	4b14      	ldr	r3, [pc, #80]	; (8004fe4 <z_clock_set_timeout+0x98>)
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	4410      	add	r0, r2
 8004f98:	6018      	str	r0, [r3, #0]
	delay = delay + (cycle_count - announced_cycles);
 8004f9a:	4b13      	ldr	r3, [pc, #76]	; (8004fe8 <z_clock_set_timeout+0x9c>)
 8004f9c:	681a      	ldr	r2, [r3, #0]
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8004f9e:	f5c2 5315 	rsb	r3, r2, #9536	; 0x2540
 8004fa2:	333f      	adds	r3, #63	; 0x3f
 8004fa4:	4433      	add	r3, r6
 8004fa6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8004faa:	4403      	add	r3, r0
	last_load = delay - (cycle_count - announced_cycles);
 8004fac:	1a10      	subs	r0, r2, r0
	delay = ((delay + CYC_PER_TICK - 1) / CYC_PER_TICK) * CYC_PER_TICK;
 8004fae:	fbb3 f3f1 	udiv	r3, r3, r1
	last_load = delay - (cycle_count - announced_cycles);
 8004fb2:	fb01 0003 	mla	r0, r1, r3, r0
	overflow_cyc = 0U;
 8004fb6:	4b0d      	ldr	r3, [pc, #52]	; (8004fec <z_clock_set_timeout+0xa0>)
	last_load = delay - (cycle_count - announced_cycles);
 8004fb8:	6020      	str	r0, [r4, #0]
	overflow_cyc = 0U;
 8004fba:	2200      	movs	r2, #0
 8004fbc:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = last_load - 1;
 8004fbe:	4b08      	ldr	r3, [pc, #32]	; (8004fe0 <z_clock_set_timeout+0x94>)
 8004fc0:	3801      	subs	r0, #1
 8004fc2:	6058      	str	r0, [r3, #4]
	SysTick->VAL = 0; /* resets timer to last_load */
 8004fc4:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
 8004fc6:	f385 8811 	msr	BASEPRI, r5
 8004fca:	f3bf 8f6f 	isb	sy
 8004fce:	e7ca      	b.n	8004f66 <z_clock_set_timeout+0x1a>
	ticks = MIN(MAX_TICKS, MAX(ticks - 1, 0));
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	e7d0      	b.n	8004f76 <z_clock_set_timeout+0x2a>
	delay = (ticks == 0) ? MIN_DELAY : ticks * CYC_PER_TICK;
 8004fd4:	f44f 6680 	mov.w	r6, #1024	; 0x400
 8004fd8:	e7d1      	b.n	8004f7e <z_clock_set_timeout+0x32>
 8004fda:	bf00      	nop
 8004fdc:	200000d4 	.word	0x200000d4
 8004fe0:	e000e010 	.word	0xe000e010
 8004fe4:	200000d0 	.word	0x200000d0
 8004fe8:	200000cc 	.word	0x200000cc
 8004fec:	200000d8 	.word	0x200000d8

08004ff0 <z_clock_elapsed>:

u32_t z_clock_elapsed(void)
{
 8004ff0:	b510      	push	{r4, lr}
	__asm__ volatile(
 8004ff2:	f04f 0310 	mov.w	r3, #16
 8004ff6:	f3ef 8411 	mrs	r4, BASEPRI
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
	if (!TICKLESS) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	u32_t cyc = elapsed() + cycle_count - announced_cycles;
 8005002:	f7ff ff39 	bl	8004e78 <elapsed>
 8005006:	4b07      	ldr	r3, [pc, #28]	; (8005024 <z_clock_elapsed+0x34>)
 8005008:	4a07      	ldr	r2, [pc, #28]	; (8005028 <z_clock_elapsed+0x38>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	1a9b      	subs	r3, r3, r2
 8005010:	4418      	add	r0, r3
	__asm__ volatile(
 8005012:	f384 8811 	msr	BASEPRI, r4
 8005016:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return cyc / CYC_PER_TICK;
}
 800501a:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800501e:	fbb0 f0f3 	udiv	r0, r0, r3
 8005022:	bd10      	pop	{r4, pc}
 8005024:	200000d0 	.word	0x200000d0
 8005028:	200000cc 	.word	0x200000cc

0800502c <z_arm_exc_exit>:
    /* r0 contains the caller mode */
    push {r0, lr}
#endif

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
 800502c:	4804      	ldr	r0, [pc, #16]	; (8005040 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
 800502e:	6881      	ldr	r1, [r0, #8]

    ldr r0, [r0, #_kernel_offset_to_ready_q_cache]
 8005030:	6a00      	ldr	r0, [r0, #32]
    cmp r0, r1
 8005032:	4288      	cmp	r0, r1
    beq _EXIT_EXC
 8005034:	d003      	beq.n	800503e <_EXIT_EXC>

#if defined(CONFIG_CPU_CORTEX_M)
    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
 8005036:	4903      	ldr	r1, [pc, #12]	; (8005044 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
 8005038:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
 800503c:	600a      	str	r2, [r1, #0]

0800503e <_EXIT_EXC>:
    bl z_check_stack_sentinel
#endif /* CONFIG_CPU_CORTEX_M */
#endif /* CONFIG_STACK_SENTINEL */

#if defined(CONFIG_CPU_CORTEX_M)
    bx lr
 800503e:	4770      	bx	lr
    ldr r0, =_kernel
 8005040:	200002b8 	.word	0x200002b8
    ldr r1, =_SCS_ICSR
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <arch_swap>:
#ifdef CONFIG_EXECUTION_BENCHMARKING
	read_timer_start_of_swap();
#endif

	/* store off key and return value */
	_current->arch.basepri = key;
 8005048:	4a09      	ldr	r2, [pc, #36]	; (8005070 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
 800504a:	490a      	ldr	r1, [pc, #40]	; (8005074 <arch_swap+0x2c>)
	_current->arch.basepri = key;
 800504c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
 800504e:	6809      	ldr	r1, [r1, #0]
 8005050:	6699      	str	r1, [r3, #104]	; 0x68

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005052:	4909      	ldr	r1, [pc, #36]	; (8005078 <arch_swap+0x30>)
	_current->arch.basepri = key;
 8005054:	6658      	str	r0, [r3, #100]	; 0x64
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 8005056:	684b      	ldr	r3, [r1, #4]
 8005058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800505c:	604b      	str	r3, [r1, #4]
 800505e:	2300      	movs	r3, #0
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
 8005068:	6893      	ldr	r3, [r2, #8]
}
 800506a:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	200002b8 	.word	0x200002b8
 8005074:	08007f00 	.word	0x08007f00
 8005078:	e000ed00 	.word	0xe000ed00

0800507c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
 800507c:	4929      	ldr	r1, [pc, #164]	; (8005124 <in_fp_endif+0x2c>)
    ldr r2, [r1, #_kernel_offset_to_current]
 800507e:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
 8005080:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
 8005084:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
 8005086:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
 800508a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-out thread had been using the FP registers. */
    ldr r0, =0x10 /* EXC_RETURN.F_Type Mask */
 800508e:	f04f 0010 	mov.w	r0, #16
    tst lr, r0    /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 8005092:	ea1e 0f00 	tst.w	lr, r0
    beq out_fp_active
 8005096:	d004      	beq.n	80050a2 <out_fp_active>
    /* FP context inactive: clear FP state */
    ldr r0, [r2, #_thread_offset_to_mode]
 8005098:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    bic r0, #0x4 /* _current->arch.mode &= ~(CONTROL_FPCA_Msk) */
 800509c:	f020 0004 	bic.w	r0, r0, #4
    b out_fp_endif
 80050a0:	e007      	b.n	80050b2 <out_fp_endif>

080050a2 <out_fp_active>:

out_fp_active:
    /* FP context active: set FP state and store callee-saved registers */
    add r0, r2, #_thread_offset_to_preempt_float
 80050a2:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vstmia r0, {s16-s31}
 80050a6:	ec80 8a10 	vstmia	r0, {s16-s31}
    ldr r0, [r2, #_thread_offset_to_mode]
 80050aa:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    orrs r0, r0, #0x4 /* _current->arch.mode |= CONTROL_FPCA_Msk */
 80050ae:	f050 0004 	orrs.w	r0, r0, #4

080050b2 <out_fp_endif>:

out_fp_endif:
    str r0, [r2, #_thread_offset_to_mode]
 80050b2:	f8c2 00ac 	str.w	r0, [r2, #172]	; 0xac

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80050b6:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80050b8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
 80050bc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
 80050c0:	4f19      	ldr	r7, [pc, #100]	; (8005128 <in_fp_endif+0x30>)
    ldr v3, =_SCS_ICSR_UNPENDSV
 80050c2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
 80050c6:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
 80050c8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
 80050ca:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
 80050cc:	6e50      	ldr	r0, [r2, #100]	; 0x64
    movs r3, #0
 80050ce:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
 80050d0:	6653      	str	r3, [r2, #100]	; 0x64
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
 80050d2:	f380 8811 	msr	BASEPRI, r0

#ifdef CONFIG_FP_SHARING
    /* Assess whether switched-in thread had been using the FP registers. */
    ldr r0, [r2, #_thread_offset_to_mode]
 80050d6:	f8d2 00ac 	ldr.w	r0, [r2, #172]	; 0xac
    tst r0, #0x04 /* thread.arch.mode & CONTROL.FPCA Msk */
 80050da:	f010 0f04 	tst.w	r0, #4
    bne in_fp_active
 80050de:	d105      	bne.n	80050ec <in_fp_active>
    /* FP context inactive for swapped-in thread:
     * - reset FPSCR to 0
     * - set EXC_RETURN.F_Type (prevents FP frame un-stacking when returning
     *   from pendSV)
     */
    movs.n r3, #0
 80050e0:	2300      	movs	r3, #0
    vmsr fpscr, r3
 80050e2:	eee1 3a10 	vmsr	fpscr, r3
    orrs lr, lr, #0x10 /* EXC_RETURN & EXC_RETURN.F_Type_Msk */
 80050e6:	f05e 0e10 	orrs.w	lr, lr, #16
    b in_fp_endif
 80050ea:	e005      	b.n	80050f8 <in_fp_endif>

080050ec <in_fp_active>:
    /* FP context active:
     * - clear EXC_RETURN.F_Type
     * - FPSCR and caller-saved registers will be restored automatically
     * - restore callee-saved FP registers
     */
    bic lr, #0x10 /* EXC_RETURN | (~EXC_RETURN.F_Type_Msk) */
 80050ec:	f02e 0e10 	bic.w	lr, lr, #16
    add r0, r2, #_thread_offset_to_preempt_float
 80050f0:	f102 006c 	add.w	r0, r2, #108	; 0x6c
    vldmia r0, {s16-s31}
 80050f4:	ec90 8a10 	vldmia	r0, {s16-s31}

080050f8 <in_fp_endif>:
in_fp_endif:
    /* Clear CONTROL.FPCA that may have been set by FP instructions */
    mrs r3, CONTROL
 80050f8:	f3ef 8314 	mrs	r3, CONTROL
    bic r3, #0x4 /* CONTROL.FPCA Msk */
 80050fc:	f023 0304 	bic.w	r3, r3, #4
    msr CONTROL, r3
 8005100:	f383 8814 	msr	CONTROL, r3
    isb
 8005104:	f3bf 8f6f 	isb	sy
#endif

#if defined (CONFIG_ARM_MPU)
    /* Re-program dynamic memory map */
    push {r2,lr}
 8005108:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
 800510a:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
 800510c:	f001 feb4 	bl	8006e78 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
 8005110:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
 8005114:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
 8005118:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
    mov r0, #0
    msr PSPLIM, r0
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
 800511c:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
 8005120:	4770      	bx	lr
 8005122:	0000      	.short	0x0000
    ldr r1, =_kernel
 8005124:	200002b8 	.word	0x200002b8
    ldr v4, =_SCS_ICSR
 8005128:	e000ed04 	.word	0xe000ed04

0800512c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
 800512c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
 8005130:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
 8005132:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
 8005136:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
 800513a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
 800513c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
 8005140:	2902      	cmp	r1, #2
    beq _oops
 8005142:	d0ff      	beq.n	8005144 <_oops>

08005144 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
 8005144:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
 8005146:	f001 fe8c 	bl	8006e62 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
 800514a:	bd01      	pop	{r0, pc}

0800514c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
 800514c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800514e:	2b00      	cmp	r3, #0
 8005150:	db08      	blt.n	8005164 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005152:	2201      	movs	r2, #1
 8005154:	f000 001f 	and.w	r0, r0, #31
 8005158:	fa02 f000 	lsl.w	r0, r2, r0
 800515c:	095b      	lsrs	r3, r3, #5
 800515e:	4a02      	ldr	r2, [pc, #8]	; (8005168 <arch_irq_enable+0x1c>)
 8005160:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
 8005164:	4770      	bx	lr
 8005166:	bf00      	nop
 8005168:	e000e100 	.word	0xe000e100

0800516c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(DT_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(DT_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
 800516c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
 800516e:	2b00      	cmp	r3, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005170:	bfa8      	it	ge
 8005172:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
 8005176:	f101 0101 	add.w	r1, r1, #1
 800517a:	ea4f 1101 	mov.w	r1, r1, lsl #4
 800517e:	bfae      	itee	ge
 8005180:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005184:	f000 000f 	andlt.w	r0, r0, #15
 8005188:	4b03      	ldrlt	r3, [pc, #12]	; (8005198 <z_arm_irq_priority_set+0x2c>)
 800518a:	b2c9      	uxtb	r1, r1
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800518c:	bfac      	ite	ge
 800518e:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005192:	5419      	strblt	r1, [r3, r0]
}
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	e000ed14 	.word	0xe000ed14

0800519c <arch_new_thread>:
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     size_t stackSize, k_thread_entry_t pEntry,
		     void *parameter1, void *parameter2, void *parameter3,
		     int priority, unsigned int options)
{
 800519c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800519e:	461e      	mov	r6, r3
#endif
	stackEnd = pStackMem + stackSize;

	struct __esf *pInitCtx;

	z_new_thread_init(thread, pStackMem, stackSize, priority,
 80051a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051a2:	9300      	str	r3, [sp, #0]
	stackEnd = pStackMem + stackSize;
 80051a4:	188c      	adds	r4, r1, r2
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 80051a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
 80051a8:	4605      	mov	r5, r0
	z_new_thread_init(thread, pStackMem, stackSize, priority,
 80051aa:	f002 f9bd 	bl	8007528 <z_new_thread_init>
	 *
	 * The initial carved stack frame only needs to contain the basic
	 * stack frame (state context), because no FP operations have been
	 * performed yet for this thread.
	 */
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 80051ae:	f1a4 0320 	sub.w	r3, r4, #32
	pInitCtx->basic.pc = (u32_t)z_thread_entry;
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	pInitCtx->basic.pc &= 0xfffffffe;
 80051b2:	4a0b      	ldr	r2, [pc, #44]	; (80051e0 <arch_new_thread+0x44>)
	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
 80051b4:	f023 0307 	bic.w	r3, r3, #7
	pInitCtx->basic.pc &= 0xfffffffe;
 80051b8:	f022 0201 	bic.w	r2, r2, #1
 80051bc:	619a      	str	r2, [r3, #24]
#endif

	pInitCtx->basic.a1 = (u32_t)pEntry;
	pInitCtx->basic.a2 = (u32_t)parameter1;
 80051be:	9a06      	ldr	r2, [sp, #24]
 80051c0:	605a      	str	r2, [r3, #4]
	pInitCtx->basic.a3 = (u32_t)parameter2;
 80051c2:	9a07      	ldr	r2, [sp, #28]
 80051c4:	609a      	str	r2, [r3, #8]
	pInitCtx->basic.a4 = (u32_t)parameter3;
 80051c6:	9a08      	ldr	r2, [sp, #32]
 80051c8:	60da      	str	r2, [r3, #12]
	pInitCtx->basic.xpsr =
 80051ca:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
	pInitCtx->basic.a1 = (u32_t)pEntry;
 80051ce:	601e      	str	r6, [r3, #0]
	pInitCtx->basic.xpsr =
 80051d0:	61da      	str	r2, [r3, #28]
		0x01000000UL; /* clear all, thumb bit is 1, even if RO */

	thread->callee_saved.psp = (u32_t)pInitCtx;
 80051d2:	64ab      	str	r3, [r5, #72]	; 0x48
#if defined(CONFIG_CPU_CORTEX_R)
	pInitCtx->basic.lr = (u32_t)pInitCtx->basic.pc;
	thread->callee_saved.spsr = A_BIT | T_BIT | MODE_SYS;
	thread->callee_saved.lr = (u32_t)pInitCtx->basic.pc;
#endif
	thread->arch.basepri = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	666b      	str	r3, [r5, #100]	; 0x64

#if defined(CONFIG_USERSPACE) || defined(CONFIG_FP_SHARING)
	thread->arch.mode = 0;
 80051d8:	f8c5 30ac 	str.w	r3, [r5, #172]	; 0xac

	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
 80051dc:	b002      	add	sp, #8
 80051de:	bd70      	pop	{r4, r5, r6, pc}
 80051e0:	08006a35 	.word	0x08006a35

080051e4 <arch_switch_to_main_thread>:

void arch_switch_to_main_thread(struct k_thread *main_thread,
				k_thread_stack_t *main_stack,
				size_t main_stack_size,
				k_thread_entry_t _main)
{
 80051e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80051e8:	461f      	mov	r7, r3
 80051ea:	4606      	mov	r6, r0
 80051ec:	460c      	mov	r4, r1
 80051ee:	4690      	mov	r8, r2
// Re-enable using built-in when GCC has been fixed
// || (__GNUC__ > 7) || (__GNUC__ == 7 && __GNUC_MINOR__ >= 2)
  /* see https://gcc.gnu.org/ml/gcc-patches/2017-04/msg00443.html */
  __builtin_arm_set_fpscr(fpscr);
#else
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 80051f0:	2300      	movs	r3, #0
 80051f2:	eee1 3a10 	vmsr	fpscr, r3
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 80051f6:	f3ef 8514 	mrs	r5, CONTROL
	 * initialized at thread creation for threads that make use of the FP).
	 */
	__set_FPSCR(0);
#if defined(CONFIG_FP_SHARING)
	/* In Sharing mode clearing FPSCR may set the CONTROL.FPCA flag. */
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
 80051fa:	f025 0504 	bic.w	r5, r5, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
 80051fe:	f385 8814 	msr	CONTROL, r5
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8005202:	f3bf 8f6f 	isb	sy
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
 8005206:	f000 f97d 	bl	8005504 <z_arm_configure_static_mpu_regions>
	start_of_main_stack =
		Z_THREAD_STACK_BUFFER(main_stack) + main_stack_size;

	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);

	_current = main_thread;
 800520a:	4b0a      	ldr	r3, [pc, #40]	; (8005234 <arch_switch_to_main_thread+0x50>)
	start_of_main_stack =
 800520c:	4444      	add	r4, r8
#ifdef CONFIG_ARM_MPU
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
 800520e:	4630      	mov	r0, r6
	_current = main_thread;
 8005210:	609e      	str	r6, [r3, #8]
	start_of_main_stack = (char *)STACK_ROUND_DOWN(start_of_main_stack);
 8005212:	f024 0407 	bic.w	r4, r4, #7
	z_arm_configure_dynamic_mpu_regions(main_thread);
 8005216:	f001 fe2f 	bl	8006e78 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
 800521a:	4638      	mov	r0, r7
 800521c:	f384 8809 	msr	PSP, r4
 8005220:	2100      	movs	r1, #0
 8005222:	b663      	cpsie	if
 8005224:	f381 8811 	msr	BASEPRI, r1
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	f001 fc00 	bl	8006a34 <z_thread_entry>
	:
	: "r" (_main), "r" (start_of_main_stack)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
 8005234:	200002b8 	.word	0x200002b8

08005238 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr r1, =_SCB_SCR
 8005238:	4901      	ldr	r1, [pc, #4]	; (8005240 <z_arm_cpu_idle_init+0x8>)
	movs.n r2, #_SCR_INIT_BITS
 800523a:	2210      	movs	r2, #16
	str r2, [r1]
 800523c:	600a      	str	r2, [r1, #0]
#endif
	bx lr
 800523e:	4770      	bx	lr
	ldr r1, =_SCB_SCR
 8005240:	e000ed10 	.word	0xe000ed10

08005244 <arch_cpu_idle>:
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	cpsie i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
 8005244:	4040      	eors	r0, r0
	msr BASEPRI, r0
 8005246:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	wfi
 800524a:	bf30      	wfi

	bx lr
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <z_arm_bus_fault>:
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_reserved)

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) || \
	defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	mrs r0, MSP
 8005250:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
 8005254:	f3ef 8109 	mrs	r1, PSP
	mov r2, lr /* EXC_RETURN */
 8005258:	4672      	mov	r2, lr

	push {r0, lr}
 800525a:	b501      	push	{r0, lr}
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE || CONFIG_ARMv7_M_ARMV8_M_MAINLINE */

	bl z_arm_fault
 800525c:	f000 f8a4 	bl	80053a8 <z_arm_fault>

#if defined(CONFIG_CPU_CORTEX_M)
	pop {r0, pc}
 8005260:	bd01      	pop	{r0, pc}
 8005262:	bf00      	nop

08005264 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
 8005264:	bf30      	wfi
    b z_SysNmiOnReset
 8005266:	f7ff bffd 	b.w	8005264 <z_SysNmiOnReset>
 800526a:	bf00      	nop

0800526c <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 800526c:	4a11      	ldr	r2, [pc, #68]	; (80052b4 <z_arm_prep_c+0x48>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
 800526e:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <z_arm_prep_c+0x4c>)
 8005272:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 8005276:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005278:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800527c:	f3bf 8f6f 	isb	sy
	SCB->CPACR |= CPACR_CP10_PRIV_ACCESS | CPACR_CP11_PRIV_ACCESS;
 8005280:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005284:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8005288:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	FPU->FPCCR = FPU_FPCCR_ASPEN_Msk | FPU_FPCCR_LSPEN_Msk;
 800528c:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 8005290:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  __ASM volatile ("dsb 0xF":::"memory");
 8005294:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8005298:	f3bf 8f6f 	isb	sy
  __ASM volatile ("VMSR fpscr, %0" : : "r" (fpscr) : "vfpcc", "memory");
 800529c:	2300      	movs	r3, #0
 800529e:	eee1 3a10 	vmsr	fpscr, r3
	relocate_vector_table();
	enable_floating_point();
	z_bss_zero();
 80052a2:	f000 ff27 	bl	80060f4 <z_bss_zero>
	z_data_copy();
 80052a6:	f000 ff2f 	bl	8006108 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_int_lib_init();
 80052aa:	f000 f8f9 	bl	80054a0 <z_arm_int_lib_init>
	z_cstart();
 80052ae:	f000 ff5d 	bl	800616c <z_cstart>
 80052b2:	bf00      	nop
 80052b4:	08000000 	.word	0x08000000
 80052b8:	e000ed00 	.word	0xe000ed00

080052bc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
 80052bc:	b501      	push	{r0, lr}

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
 80052be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
 80052c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
 80052c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 */
	mov r0, #0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldr r1, =_sw_isr_table
 80052ca:	4904      	ldr	r1, [pc, #16]	; (80052dc <_isr_wrapper+0x20>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
 80052cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
 80052ce:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	ldm sp!,{r0-r3} /* Restore r0 to r3 regs */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
	blx r3		/* call ISR */
 80052d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
 80052d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
 80052d6:	4902      	ldr	r1, [pc, #8]	; (80052e0 <_isr_wrapper+0x24>)
	bx r1
 80052d8:	4708      	bx	r1
 80052da:	0000      	.short	0x0000
	ldr r1, =_sw_isr_table
 80052dc:	08007630 	.word	0x08007630
	ldr r1, =z_arm_int_exit
 80052e0:	0800502d 	.word	0x0800502d

080052e4 <__start>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
 80052e4:	2010      	movs	r0, #16
    msr BASEPRI, r0
 80052e6:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during initialization.
     */
    ldr r0, =_interrupt_stack
 80052ea:	4808      	ldr	r0, [pc, #32]	; (800530c <__start+0x28>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
 80052ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
 80052f0:	1840      	adds	r0, r0, r1
    msr PSP, r0
 80052f2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
 80052f6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
 80052fa:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
 80052fc:	4308      	orrs	r0, r1
    msr CONTROL, r0
 80052fe:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
 8005302:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
 8005306:	f7ff ffb1 	bl	800526c <z_arm_prep_c>
 800530a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
 800530c:	20000840 	.word	0x20000840

08005310 <mem_manage_fault.isra.2>:
	u32_t reason = K_ERR_CPU_EXCEPTION;
	u32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
 8005310:	4b0c      	ldr	r3, [pc, #48]	; (8005344 <mem_manage_fault.isra.2+0x34>)
 8005312:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
 8005314:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
 8005316:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005318:	0792      	lsls	r2, r2, #30
 800531a:	d508      	bpl.n	800532e <mem_manage_fault.isra.2+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
 800531c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
 800531e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005320:	0612      	lsls	r2, r2, #24
 8005322:	d504      	bpl.n	800532e <mem_manage_fault.isra.2+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
 8005324:	b118      	cbz	r0, 800532e <mem_manage_fault.isra.2+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
 8005326:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005328:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800532c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
 800532e:	4b05      	ldr	r3, [pc, #20]	; (8005344 <mem_manage_fault.isra.2+0x34>)
 8005330:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
 8005332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
 8005334:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 8005336:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
 8005338:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
 800533a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 800533e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 8005340:	7008      	strb	r0, [r1, #0]

	return reason;
}
 8005342:	4770      	bx	lr
 8005344:	e000ed00 	.word	0xe000ed00

08005348 <bus_fault.isra.3>:
{
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
 8005348:	4b0d      	ldr	r3, [pc, #52]	; (8005380 <bus_fault.isra.3+0x38>)
 800534a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
 800534c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
 800534e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005350:	0592      	lsls	r2, r2, #22
 8005352:	d508      	bpl.n	8005366 <bus_fault.isra.3+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
 8005354:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
 8005356:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005358:	0412      	lsls	r2, r2, #16
 800535a:	d504      	bpl.n	8005366 <bus_fault.isra.3+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
 800535c:	b118      	cbz	r0, 8005366 <bus_fault.isra.3+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
 800535e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005360:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005364:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
 8005366:	4b06      	ldr	r3, [pc, #24]	; (8005380 <bus_fault.isra.3+0x38>)
 8005368:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
 800536a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800536c:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
 800536e:	bf58      	it	pl
 8005370:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8005372:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
 8005374:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
 8005376:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
 800537c:	7008      	strb	r0, [r1, #0]

	return reason;
}
 800537e:	4770      	bx	lr
 8005380:	e000ed00 	.word	0xe000ed00

08005384 <usage_fault.isra.4>:
	u32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
 8005384:	4b07      	ldr	r3, [pc, #28]	; (80053a4 <usage_fault.isra.4+0x20>)
 8005386:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
 8005388:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
 800538a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
 800538c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
 800538e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
 8005390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
 8005392:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005394:	ea6f 4202 	mvn.w	r2, r2, lsl #16
 8005398:	ea6f 4212 	mvn.w	r2, r2, lsr #16
 800539c:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
 800539e:	2000      	movs	r0, #0
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	e000ed00 	.word	0xe000ed00

080053a8 <z_arm_fault>:
 * @param psp PSP value immediately after the exception occurred
 * @param exc_return EXC_RETURN value present in LR after exception entry.
 *
 */
void z_arm_fault(u32_t msp, u32_t psp, u32_t exc_return)
{
 80053a8:	b570      	push	{r4, r5, r6, lr}
	u32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80053aa:	4b36      	ldr	r3, [pc, #216]	; (8005484 <z_arm_fault+0xdc>)
 80053ac:	685b      	ldr	r3, [r3, #4]
{
 80053ae:	b09c      	sub	sp, #112	; 0x70
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
 80053b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b4:	2500      	movs	r5, #0
 80053b6:	f385 8811 	msr	BASEPRI, r5
 80053ba:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
 80053be:	f002 447f 	and.w	r4, r2, #4278190080	; 0xff000000
 80053c2:	f1b4 4f7f 	cmp.w	r4, #4278190080	; 0xff000000
 80053c6:	d112      	bne.n	80053ee <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
 80053c8:	f002 040c 	and.w	r4, r2, #12
 80053cc:	2c08      	cmp	r4, #8
 80053ce:	d00e      	beq.n	80053ee <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
 80053d0:	0714      	lsls	r4, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
 80053d2:	bf4e      	itee	mi
 80053d4:	460e      	movmi	r6, r1
			ptr_esf = (z_arch_esf_t *)msp;
 80053d6:	4606      	movpl	r6, r0
			*nested_exc = true;
 80053d8:	2501      	movpl	r5, #1
	*recoverable = false;
 80053da:	2200      	movs	r2, #0
	switch (fault) {
 80053dc:	3b03      	subs	r3, #3
	*recoverable = false;
 80053de:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
 80053e2:	2b03      	cmp	r3, #3
 80053e4:	d847      	bhi.n	8005476 <z_arm_fault+0xce>
 80053e6:	e8df f003 	tbb	[pc, r3]
 80053ea:	3e04      	.short	0x3e04
 80053ec:	3b42      	.short	0x3b42
		return NULL;
 80053ee:	462e      	mov	r6, r5
 80053f0:	e7f3      	b.n	80053da <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
 80053f2:	4b24      	ldr	r3, [pc, #144]	; (8005484 <z_arm_fault+0xdc>)
 80053f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053f6:	0792      	lsls	r2, r2, #30
 80053f8:	d43d      	bmi.n	8005476 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
 80053fa:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80053fc:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
 8005400:	d008      	beq.n	8005414 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
 8005402:	3328      	adds	r3, #40	; 0x28
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	b1eb      	cbz	r3, 8005444 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
 8005408:	f10d 0107 	add.w	r1, sp, #7
 800540c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
 800540e:	f7ff ff7f 	bl	8005310 <mem_manage_fault.isra.2>
		reason = usage_fault(esf);
 8005412:	4604      	mov	r4, r0
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
		"ESF could not be retrieved successfully. Shall never occur.");

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
 8005414:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005418:	b993      	cbnz	r3, 8005440 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
 800541a:	2268      	movs	r2, #104	; 0x68
 800541c:	4631      	mov	r1, r6
 800541e:	a802      	add	r0, sp, #8
 8005420:	f7ff f92f 	bl	8004682 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
 8005424:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005426:	b345      	cbz	r5, 800547a <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
 8005428:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800542c:	b922      	cbnz	r2, 8005438 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
 800542e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
 8005432:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 8005436:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
 8005438:	a902      	add	r1, sp, #8
 800543a:	4620      	mov	r0, r4
 800543c:	f001 fd0f 	bl	8006e5e <z_arm_fatal_error>
}
 8005440:	b01c      	add	sp, #112	; 0x70
 8005442:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
 8005444:	4b10      	ldr	r3, [pc, #64]	; (8005488 <z_arm_fault+0xe0>)
 8005446:	781b      	ldrb	r3, [r3, #0]
 8005448:	b12b      	cbz	r3, 8005456 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
 800544a:	f10d 0107 	add.w	r1, sp, #7
 800544e:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
 8005450:	f7ff ff7a 	bl	8005348 <bus_fault.isra.3>
 8005454:	e7dd      	b.n	8005412 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <z_arm_fault+0xe4>)
 8005458:	881c      	ldrh	r4, [r3, #0]
 800545a:	b2a4      	uxth	r4, r4
 800545c:	2c00      	cmp	r4, #0
 800545e:	d0d9      	beq.n	8005414 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
 8005460:	f7ff ff90 	bl	8005384 <usage_fault.isra.4>
 8005464:	e7d5      	b.n	8005412 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
 8005466:	f10d 0107 	add.w	r1, sp, #7
 800546a:	2000      	movs	r0, #0
 800546c:	e7cf      	b.n	800540e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
 800546e:	f10d 0107 	add.w	r1, sp, #7
 8005472:	2000      	movs	r0, #0
 8005474:	e7ec      	b.n	8005450 <z_arm_fault+0xa8>
	u32_t reason = K_ERR_CPU_EXCEPTION;
 8005476:	2400      	movs	r4, #0
 8005478:	e7cc      	b.n	8005414 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
 800547a:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 800547e:	f023 0301 	bic.w	r3, r3, #1
 8005482:	e7d8      	b.n	8005436 <z_arm_fault+0x8e>
 8005484:	e000ed00 	.word	0xe000ed00
 8005488:	e000ed29 	.word	0xe000ed29
 800548c:	e000ed2a 	.word	0xe000ed2a

08005490 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
 8005490:	4a02      	ldr	r2, [pc, #8]	; (800549c <z_arm_fault_init+0xc>)
 8005492:	6953      	ldr	r3, [r2, #20]
 8005494:	f043 0310 	orr.w	r3, r3, #16
 8005498:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
 800549a:	4770      	bx	lr
 800549c:	e000ed00 	.word	0xe000ed00

080054a0 <z_arm_int_lib_init>:
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054a0:	4804      	ldr	r0, [pc, #16]	; (80054b4 <z_arm_int_lib_init+0x14>)
 * @return N/A
 */

void z_arm_int_lib_init(void)
{
	int irq = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	2110      	movs	r1, #16
 80054a6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
 80054a8:	3301      	adds	r3, #1
 80054aa:	2b61      	cmp	r3, #97	; 0x61
 80054ac:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
 80054b0:	d1f9      	bne.n	80054a6 <z_arm_int_lib_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
 80054b2:	4770      	bx	lr
 80054b4:	e000e100 	.word	0xe000e100

080054b8 <z_impl_k_thread_abort>:
#include <sys/__assert.h>

extern void z_thread_single_abort(struct k_thread *thread);

void z_impl_k_thread_abort(k_tid_t thread)
{
 80054b8:	b538      	push	{r3, r4, r5, lr}
 80054ba:	4605      	mov	r5, r0
	__asm__ volatile(
 80054bc:	f04f 0310 	mov.w	r3, #16
 80054c0:	f3ef 8411 	mrs	r4, BASEPRI
 80054c4:	f383 8811 	msr	BASEPRI, r3
 80054c8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	z_thread_single_abort(thread);
 80054cc:	f002 f83b 	bl	8007546 <z_thread_single_abort>
	z_thread_monitor_exit(thread);

	if (_current == thread) {
 80054d0:	4b0a      	ldr	r3, [pc, #40]	; (80054fc <z_impl_k_thread_abort+0x44>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	42ab      	cmp	r3, r5
 80054d6:	d10b      	bne.n	80054f0 <z_impl_k_thread_abort+0x38>
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
 80054d8:	4b09      	ldr	r3, [pc, #36]	; (8005500 <z_impl_k_thread_abort+0x48>)
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	b912      	cbnz	r2, 80054e8 <z_impl_k_thread_abort+0x30>
	z_check_stack_sentinel();

#ifndef CONFIG_ARM
	sys_trace_thread_switched_out();
#endif
	ret = arch_swap(key);
 80054e2:	4620      	mov	r0, r4
 80054e4:	f7ff fdb0 	bl	8005048 <arch_swap>
			(void)z_swap_irqlock(key);
			CODE_UNREACHABLE;
		} else {
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80054ee:	605a      	str	r2, [r3, #4]
		}
	}

	/* The abort handler might have altered the ready queue. */
	z_reschedule_irqlock(key);
 80054f0:	4620      	mov	r0, r4
}
 80054f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_irqlock(key);
 80054f6:	f001 bf94 	b.w	8007422 <z_reschedule_irqlock>
 80054fa:	bf00      	nop
 80054fc:	200002b8 	.word	0x200002b8
 8005500:	e000ed00 	.word	0xe000ed00

08005504 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
 8005504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (u32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
 8005506:	4b08      	ldr	r3, [pc, #32]	; (8005528 <z_arm_configure_static_mpu_regions+0x24>)
 8005508:	9301      	str	r3, [sp, #4]
 800550a:	4b08      	ldr	r3, [pc, #32]	; (800552c <z_arm_configure_static_mpu_regions+0x28>)
 800550c:	9302      	str	r3, [sp, #8]
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <z_arm_configure_static_mpu_regions+0x2c>)
 8005510:	9303      	str	r3, [sp, #12]

	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
 8005512:	ab01      	add	r3, sp, #4
 8005514:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
 8005516:	4a07      	ldr	r2, [pc, #28]	; (8005534 <z_arm_configure_static_mpu_regions+0x30>)
 8005518:	4b07      	ldr	r3, [pc, #28]	; (8005538 <z_arm_configure_static_mpu_regions+0x34>)
 800551a:	2101      	movs	r1, #1
 800551c:	4668      	mov	r0, sp
 800551e:	f000 f891 	bl	8005644 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
 8005522:	b005      	add	sp, #20
 8005524:	f85d fb04 	ldr.w	pc, [sp], #4
 8005528:	20000000 	.word	0x20000000
 800552c:	00000000 	.word	0x00000000
 8005530:	060b0000 	.word	0x060b0000
 8005534:	20000000 	.word	0x20000000
 8005538:	20020000 	.word	0x20020000

0800553c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], u8_t regions_num, u8_t start_reg_index,
	bool do_sanity_check)
{
 800553c:	b5f0      	push	{r4, r5, r6, r7, lr}
 */
static void region_init(const u32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
 800553e:	4f20      	ldr	r7, [pc, #128]	; (80055c0 <mpu_configure_regions+0x84>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
 8005540:	2600      	movs	r6, #0
 8005542:	428e      	cmp	r6, r1
 8005544:	db01      	blt.n	800554a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
 8005546:	4610      	mov	r0, r2
 8005548:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
 800554a:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
 800554e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005552:	b394      	cbz	r4, 80055ba <mpu_configure_regions+0x7e>
		if (do_sanity_check &&
 8005554:	b15b      	cbz	r3, 800556e <mpu_configure_regions+0x32>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1)) == 0U)
 8005556:	f104 3eff 	add.w	lr, r4, #4294967295	; 0xffffffff
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
 800555a:	ea14 0f0e 	tst.w	r4, lr
 800555e:	d11a      	bne.n	8005596 <mpu_configure_regions+0x5a>
		&&
 8005560:	2c1f      	cmp	r4, #31
 8005562:	d918      	bls.n	8005596 <mpu_configure_regions+0x5a>
		((part->start & (part->size - 1)) == 0U);
 8005564:	f8dc 5000 	ldr.w	r5, [ip]
		&&
 8005568:	ea1e 0f05 	tst.w	lr, r5
 800556c:	d113      	bne.n	8005596 <mpu_configure_regions+0x5a>
 * to that power-of-two value.
 */
static inline u32_t size_to_mpu_rasr_size(u32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
 800556e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
 8005570:	f8dc 5000 	ldr.w	r5, [ip]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
 8005574:	f8dc c008 	ldr.w	ip, [ip, #8]
		reg_index = mpu_configure_region(reg_index, regions[i]);
 8005578:	b2d2      	uxtb	r2, r2
 800557a:	d90f      	bls.n	800559c <mpu_configure_regions+0x60>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
 800557c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8005580:	d80e      	bhi.n	80055a0 <mpu_configure_regions+0x64>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1) - 2 + 1) << MPU_RASR_SIZE_Pos) &
 8005582:	3c01      	subs	r4, #1
 8005584:	fab4 f484 	clz	r4, r4
 8005588:	f1c4 041f 	rsb	r4, r4, #31
 800558c:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1)) {
 800558e:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
 8005590:	ea4c 0404 	orr.w	r4, ip, r4
 8005594:	d906      	bls.n	80055a4 <mpu_configure_regions+0x68>
			return -EINVAL;
 8005596:	f06f 0215 	mvn.w	r2, #21
 800559a:	e7d4      	b.n	8005546 <mpu_configure_regions+0xa>
		return REGION_32B;
 800559c:	2408      	movs	r4, #8
 800559e:	e7f6      	b.n	800558e <mpu_configure_regions+0x52>
		return REGION_4G;
 80055a0:	243e      	movs	r4, #62	; 0x3e
 80055a2:	e7f4      	b.n	800558e <mpu_configure_regions+0x52>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80055a4:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
 80055a8:	4315      	orrs	r5, r2
 80055aa:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80055ae:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
 80055b2:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 80055b4:	60fd      	str	r5, [r7, #12]
		reg_index++;
 80055b6:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 80055b8:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
 80055ba:	3601      	adds	r6, #1
 80055bc:	e7c1      	b.n	8005542 <mpu_configure_regions+0x6>
 80055be:	bf00      	nop
 80055c0:	e000ed90 	.word	0xe000ed90

080055c4 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
 80055c4:	4b03      	ldr	r3, [pc, #12]	; (80055d4 <arm_core_mpu_enable+0x10>)
 80055c6:	2205      	movs	r2, #5
 80055c8:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 80055ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80055ce:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
 80055d2:	4770      	bx	lr
 80055d4:	e000ed90 	.word	0xe000ed90

080055d8 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80055d8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
 80055dc:	4b01      	ldr	r3, [pc, #4]	; (80055e4 <arm_core_mpu_disable+0xc>)
 80055de:	2200      	movs	r2, #0
 80055e0:	605a      	str	r2, [r3, #4]
}
 80055e2:	4770      	bx	lr
 80055e4:	e000ed90 	.word	0xe000ed90

080055e8 <arm_mpu_init>:
 */
static int arm_mpu_init(struct device *arg)
{
	u32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
 80055e8:	4913      	ldr	r1, [pc, #76]	; (8005638 <arm_mpu_init+0x50>)
 80055ea:	6808      	ldr	r0, [r1, #0]
 80055ec:	2808      	cmp	r0, #8
{
 80055ee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
 80055f0:	d81e      	bhi.n	8005630 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
 80055f2:	f7ff fff1 	bl	80055d8 <arm_core_mpu_disable>
	MPU->RNR = index;
 80055f6:	4c11      	ldr	r4, [pc, #68]	; (800563c <arm_mpu_init+0x54>)
 80055f8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 80055fa:	2200      	movs	r2, #0
 80055fc:	4290      	cmp	r0, r2
 80055fe:	f101 010c 	add.w	r1, r1, #12
 8005602:	d105      	bne.n	8005610 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
 8005604:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <arm_mpu_init+0x58>)
 8005606:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
 8005608:	f7ff ffdc 	bl	80055c4 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		DT_NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
 800560c:	2000      	movs	r0, #0
}
 800560e:	bd10      	pop	{r4, pc}
 8005610:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005612:	f851 3c0c 	ldr.w	r3, [r1, #-12]
 8005616:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
 800561a:	4313      	orrs	r3, r2
 800561c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
 8005620:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
 8005622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005626:	f043 0301 	orr.w	r3, r3, #1
 800562a:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
 800562c:	3201      	adds	r2, #1
 800562e:	e7e5      	b.n	80055fc <arm_mpu_init+0x14>
		return -1;
 8005630:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005634:	e7eb      	b.n	800560e <arm_mpu_init+0x26>
 8005636:	bf00      	nop
 8005638:	08007df0 	.word	0x08007df0
 800563c:	e000ed90 	.word	0xe000ed90
 8005640:	200002f8 	.word	0x200002f8

08005644 <arm_core_mpu_configure_static_mpu_regions>:
{
 8005644:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const u8_t regions_num,
	const u32_t background_area_base,
	const u32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
 8005646:	4c03      	ldr	r4, [pc, #12]	; (8005654 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
 8005648:	2301      	movs	r3, #1
 800564a:	7822      	ldrb	r2, [r4, #0]
 800564c:	f7ff ff76 	bl	800553c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
 8005650:	7020      	strb	r0, [r4, #0]
}
 8005652:	bd10      	pop	{r4, pc}
 8005654:	200002f8 	.word	0x200002f8

08005658 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
 8005658:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
 800565a:	4a08      	ldr	r2, [pc, #32]	; (800567c <arm_core_mpu_configure_dynamic_mpu_regions+0x24>)
 800565c:	2300      	movs	r3, #0
 800565e:	7812      	ldrb	r2, [r2, #0]
 8005660:	f7ff ff6c 	bl	800553c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
 8005664:	f110 0f16 	cmn.w	r0, #22
 8005668:	d003      	beq.n	8005672 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
 800566a:	4b05      	ldr	r3, [pc, #20]	; (8005680 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
  MPU->RASR = 0U;
 800566c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
 800566e:	2807      	cmp	r0, #7
 8005670:	dd00      	ble.n	8005674 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
 8005672:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
 8005674:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
 8005676:	611a      	str	r2, [r3, #16]
 8005678:	3001      	adds	r0, #1
 800567a:	e7f8      	b.n	800566e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
 800567c:	200002f8 	.word	0x200002f8
 8005680:	e000ed90 	.word	0xe000ed90

08005684 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
 8005684:	4b01      	ldr	r3, [pc, #4]	; (800568c <__stdout_hook_install+0x8>)
 8005686:	6018      	str	r0, [r3, #0]
}
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20001474 	.word	0x20001474

08005690 <z_impl_zephyr_read_stdin>:
{
	_stdin_hook = hook;
}

int z_impl_zephyr_read_stdin(char *buf, int nbytes)
{
 8005690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int i = 0;

	for (i = 0; i < nbytes; i++) {
		*(buf + i) = _stdin_hook();
 8005692:	4f08      	ldr	r7, [pc, #32]	; (80056b4 <z_impl_zephyr_read_stdin+0x24>)
{
 8005694:	4606      	mov	r6, r0
 8005696:	460d      	mov	r5, r1
	for (i = 0; i < nbytes; i++) {
 8005698:	2400      	movs	r4, #0
 800569a:	42ac      	cmp	r4, r5
 800569c:	da08      	bge.n	80056b0 <z_impl_zephyr_read_stdin+0x20>
		*(buf + i) = _stdin_hook();
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	4798      	blx	r3
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80056a2:	280a      	cmp	r0, #10
		*(buf + i) = _stdin_hook();
 80056a4:	5530      	strb	r0, [r6, r4]
		if ((*(buf + i) == '\n') || (*(buf + i) == '\r')) {
 80056a6:	f104 0401 	add.w	r4, r4, #1
 80056aa:	d001      	beq.n	80056b0 <z_impl_zephyr_read_stdin+0x20>
 80056ac:	280d      	cmp	r0, #13
 80056ae:	d1f4      	bne.n	800569a <z_impl_zephyr_read_stdin+0xa>
			i++;
			break;
		}
	}
	return i;
}
 80056b0:	4620      	mov	r0, r4
 80056b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80056b4:	20001470 	.word	0x20001470

080056b8 <z_impl_zephyr_write_stdout>:
}
#include <syscalls/z_zephyr_read_stdin_mrsh.c>
#endif

int z_impl_zephyr_write_stdout(const void *buffer, int nbytes)
{
 80056b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ba:	4f0a      	ldr	r7, [pc, #40]	; (80056e4 <z_impl_zephyr_write_stdout+0x2c>)
 80056bc:	460e      	mov	r6, r1
 80056be:	1e44      	subs	r4, r0, #1
	const char *buf = buffer;
	int i;

	for (i = 0; i < nbytes; i++) {
 80056c0:	f1c0 0501 	rsb	r5, r0, #1
 80056c4:	192b      	adds	r3, r5, r4
 80056c6:	429e      	cmp	r6, r3
 80056c8:	dc01      	bgt.n	80056ce <z_impl_zephyr_write_stdout+0x16>
			_stdout_hook('\r');
		}
		_stdout_hook(*(buf + i));
	}
	return nbytes;
}
 80056ca:	4630      	mov	r0, r6
 80056cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (*(buf + i) == '\n') {
 80056ce:	7863      	ldrb	r3, [r4, #1]
 80056d0:	2b0a      	cmp	r3, #10
 80056d2:	d102      	bne.n	80056da <z_impl_zephyr_write_stdout+0x22>
			_stdout_hook('\r');
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	200d      	movs	r0, #13
 80056d8:	4798      	blx	r3
		_stdout_hook(*(buf + i));
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 80056e0:	4798      	blx	r3
 80056e2:	e7ef      	b.n	80056c4 <z_impl_zephyr_write_stdout+0xc>
 80056e4:	20001474 	.word	0x20001474

080056e8 <_sbrk>:
}

static LIBC_DATA SYS_SEM_DEFINE(heap_sem, 1, 1);

void *_sbrk(int count)
{
 80056e8:	b538      	push	{r3, r4, r5, lr}
	void *ret, *ptr;

	sys_sem_take(&heap_sem, K_FOREVER);
 80056ea:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
{
 80056ee:	4605      	mov	r5, r0
	sys_sem_take(&heap_sem, K_FOREVER);
 80056f0:	480a      	ldr	r0, [pc, #40]	; (800571c <_sbrk+0x34>)
 80056f2:	f001 f990 	bl	8006a16 <sys_sem_take>

#if CONFIG_NEWLIB_LIBC_ALIGNED_HEAP_SIZE
	ptr = heap_base + heap_sz;
#else
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80056f6:	4a0a      	ldr	r2, [pc, #40]	; (8005720 <_sbrk+0x38>)
#endif

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80056f8:	490a      	ldr	r1, [pc, #40]	; (8005724 <_sbrk+0x3c>)
	ptr = ((char *)HEAP_BASE) + heap_sz;
 80056fa:	6814      	ldr	r4, [r2, #0]
		ret = ptr;
	} else {
		ret = (void *)-1;
	}

	sys_sem_give(&heap_sem);
 80056fc:	4807      	ldr	r0, [pc, #28]	; (800571c <_sbrk+0x34>)
	if ((heap_sz + count) < MAX_HEAP_SIZE) {
 80056fe:	f1c1 5300 	rsb	r3, r1, #536870912	; 0x20000000
 8005702:	4425      	add	r5, r4
 8005704:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8005708:	429d      	cmp	r5, r3
	ptr = ((char *)HEAP_BASE) + heap_sz;
 800570a:	bf36      	itet	cc
 800570c:	1864      	addcc	r4, r4, r1
		ret = (void *)-1;
 800570e:	f04f 34ff 	movcs.w	r4, #4294967295	; 0xffffffff
		heap_sz += count;
 8005712:	6015      	strcc	r5, [r2, #0]
	sys_sem_give(&heap_sem);
 8005714:	f001 f97a 	bl	8006a0c <sys_sem_give>

	return ret;
}
 8005718:	4620      	mov	r0, r4
 800571a:	bd38      	pop	{r3, r4, r5, pc}
 800571c:	20001534 	.word	0x20001534
 8005720:	200000dc 	.word	0x200000dc
 8005724:	20001558 	.word	0x20001558

08005728 <pinmux_stm32_init>:
#endif 

};

static int pinmux_stm32_init(struct device *port)
{
 8005728:	b508      	push	{r3, lr}
	ARG_UNUSED(port);

	stm32_setup_pins(pinconf, ARRAY_SIZE(pinconf));
 800572a:	2103      	movs	r1, #3
 800572c:	4802      	ldr	r0, [pc, #8]	; (8005738 <pinmux_stm32_init+0x10>)
 800572e:	f7ff fb8b 	bl	8004e48 <stm32_setup_pins>

	return 0;
}
 8005732:	2000      	movs	r0, #0
 8005734:	bd08      	pop	{r3, pc}
 8005736:	bf00      	nop
 8005738:	08007e3c 	.word	0x08007e3c

0800573c <gpio_stm32_init>:
 *
 * @return 0
 */
static int gpio_stm32_init(struct device *device)
{
	const struct gpio_stm32_config *cfg = device->config->config_info;
 800573c:	6803      	ldr	r3, [r0, #0]
{
 800573e:	b510      	push	{r4, lr}
	const struct gpio_stm32_config *cfg = device->config->config_info;
 8005740:	689c      	ldr	r4, [r3, #8]
 8005742:	4806      	ldr	r0, [pc, #24]	; (800575c <gpio_stm32_init+0x20>)
 8005744:	f000 fcb0 	bl	80060a8 <z_impl_device_get_binding>
 8005748:	6843      	ldr	r3, [r0, #4]
 800574a:	f104 0108 	add.w	r1, r4, #8
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4798      	blx	r3

	/* enable clock for subsystem */
	struct device *clk =
		device_get_binding(STM32_CLOCK_CONTROL_NAME);

	if (clock_control_on(clk,
 8005752:	2800      	cmp	r0, #0
		}
	}
#endif  /* PWR_CR2_IOSV */

	return 0;
}
 8005754:	bf18      	it	ne
 8005756:	f06f 0004 	mvnne.w	r0, #4
 800575a:	bd10      	pop	{r4, pc}
 800575c:	08007f63 	.word	0x08007f63

08005760 <gpio_stm32_config>:
{
 8005760:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005764:	461d      	mov	r5, r3
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8005766:	6803      	ldr	r3, [r0, #0]
 8005768:	689f      	ldr	r7, [r3, #8]
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 800576a:	f005 0380 	and.w	r3, r5, #128	; 0x80
 800576e:	430b      	orrs	r3, r1
{
 8005770:	4680      	mov	r8, r0
 8005772:	4614      	mov	r4, r2
	if ((flags & GPIO_POL_MASK) == GPIO_POL_INV) {
 8005774:	d005      	beq.n	8005782 <gpio_stm32_config+0x22>
		return -ENOTSUP;
 8005776:	f06f 0685 	mvn.w	r6, #133	; 0x85
}
 800577a:	4630      	mov	r0, r6
 800577c:	b004      	add	sp, #16
 800577e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	map_res = gpio_stm32_flags_to_conf(flags, &pincfg);
 8005782:	a901      	add	r1, sp, #4
 8005784:	4628      	mov	r0, r5
 8005786:	f001 fc16 	bl	8006fb6 <gpio_stm32_flags_to_conf>
	if (map_res != 0) {
 800578a:	4606      	mov	r6, r0
 800578c:	2800      	cmp	r0, #0
 800578e:	d1f4      	bne.n	800577a <gpio_stm32_config+0x1a>
	if (gpio_stm32_configure(cfg->base, pin, pincfg, 0) != 0) {
 8005790:	4603      	mov	r3, r0
 8005792:	9a01      	ldr	r2, [sp, #4]
 8005794:	6838      	ldr	r0, [r7, #0]
 8005796:	4621      	mov	r1, r4
 8005798:	f001 fc2a 	bl	8006ff0 <gpio_stm32_configure>
 800579c:	b110      	cbz	r0, 80057a4 <gpio_stm32_config+0x44>
		err = -EIO;
 800579e:	f06f 0604 	mvn.w	r6, #4
 80057a2:	e7ea      	b.n	800577a <gpio_stm32_config+0x1a>
	if (flags & GPIO_INT) {
 80057a4:	f015 0602 	ands.w	r6, r5, #2
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	d051      	beq.n	8005850 <gpio_stm32_config+0xf0>
		if (stm32_exti_set_callback(pin, cfg->port,
 80057ac:	4643      	mov	r3, r8
 80057ae:	4a41      	ldr	r2, [pc, #260]	; (80058b4 <gpio_stm32_config+0x154>)
 80057b0:	4620      	mov	r0, r4
 80057b2:	f7ff fa37 	bl	8004c24 <stm32_exti_set_callback>
 80057b6:	2800      	cmp	r0, #0
 80057b8:	d178      	bne.n	80058ac <gpio_stm32_config+0x14c>
		gpio_stm32_enable_int(cfg->port, pin);
 80057ba:	687e      	ldr	r6, [r7, #4]
 80057bc:	483e      	ldr	r0, [pc, #248]	; (80058b8 <gpio_stm32_config+0x158>)
 80057be:	f000 fc73 	bl	80060a8 <z_impl_device_get_binding>
	struct stm32_pclken pclken = {
 80057c2:	493e      	ldr	r1, [pc, #248]	; (80058bc <gpio_stm32_config+0x15c>)
 80057c4:	4602      	mov	r2, r0
 80057c6:	c903      	ldmia	r1, {r0, r1}
 80057c8:	ab02      	add	r3, sp, #8
 80057ca:	e883 0003 	stmia.w	r3, {r0, r1}
 80057ce:	6851      	ldr	r1, [r2, #4]
 80057d0:	4610      	mov	r0, r2
 80057d2:	680f      	ldr	r7, [r1, #0]
 80057d4:	4619      	mov	r1, r3
 80057d6:	47b8      	blx	r7
	if (pin > 15) {
 80057d8:	2c0f      	cmp	r4, #15
 80057da:	dc24      	bgt.n	8005826 <gpio_stm32_config+0xc6>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 80057dc:	4262      	negs	r2, r4
 80057de:	f002 0203 	and.w	r2, r2, #3
 80057e2:	f004 0303 	and.w	r3, r4, #3
 80057e6:	bf58      	it	pl
 80057e8:	4253      	negpl	r3, r2
 80057ea:	3304      	adds	r3, #4
 80057ec:	009a      	lsls	r2, r3, #2
 80057ee:	2c00      	cmp	r4, #0
 80057f0:	f04f 030f 	mov.w	r3, #15
 80057f4:	fa03 f302 	lsl.w	r3, r3, r2
 80057f8:	4622      	mov	r2, r4
 80057fa:	bfb8      	it	lt
 80057fc:	1ce2      	addlt	r2, r4, #3
 80057fe:	ea43 03a2 	orr.w	r3, r3, r2, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16), Port << POSITION_VAL((Line >> 16)));
 8005802:	b2da      	uxtb	r2, r3
 8005804:	0092      	lsls	r2, r2, #2
 8005806:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800580a:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 800580e:	0c1b      	lsrs	r3, r3, #16
 8005810:	6891      	ldr	r1, [r2, #8]
 8005812:	ea21 0103 	bic.w	r1, r1, r3
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005816:	fa93 f3a3 	rbit	r3, r3
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 800581a:	fab3 f383 	clz	r3, r3
 800581e:	fa06 f303 	lsl.w	r3, r6, r3
 8005822:	430b      	orrs	r3, r1
 8005824:	6093      	str	r3, [r2, #8]
		if ((flags & GPIO_INT_EDGE) != 0) {
 8005826:	06aa      	lsls	r2, r5, #26
 8005828:	d5a5      	bpl.n	8005776 <gpio_stm32_config+0x16>
			if ((flags & GPIO_INT_DOUBLE_EDGE) != 0) {
 800582a:	066b      	lsls	r3, r5, #25
 800582c:	d40e      	bmi.n	800584c <gpio_stm32_config+0xec>
				edge = STM32_EXTI_TRIG_FALLING;
 800582e:	f015 0f04 	tst.w	r5, #4
 8005832:	bf14      	ite	ne
 8005834:	2101      	movne	r1, #1
 8005836:	2102      	moveq	r1, #2
			stm32_exti_trigger(pin, edge);
 8005838:	4620      	mov	r0, r4
 800583a:	f7ff f9db 	bl	8004bf4 <stm32_exti_trigger>
		if (stm32_exti_enable(pin) != 0) {
 800583e:	4620      	mov	r0, r4
 8005840:	f7ff f9b4 	bl	8004bac <stm32_exti_enable>
 8005844:	2800      	cmp	r0, #0
 8005846:	d1aa      	bne.n	800579e <gpio_stm32_config+0x3e>
	int err = 0;
 8005848:	2600      	movs	r6, #0
 800584a:	e796      	b.n	800577a <gpio_stm32_config+0x1a>
				edge = STM32_EXTI_TRIG_RISING |
 800584c:	2103      	movs	r1, #3
 800584e:	e7f3      	b.n	8005838 <gpio_stm32_config+0xd8>
	if (pin > 15) {
 8005850:	2c0f      	cmp	r4, #15
 8005852:	dc28      	bgt.n	80058a6 <gpio_stm32_config+0x146>
	return (0xF << ((pin % 4 * 4) + 16)) | (pin / 4);
 8005854:	4263      	negs	r3, r4
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	f004 0203 	and.w	r2, r4, #3
 800585e:	bf58      	it	pl
 8005860:	425a      	negpl	r2, r3
 8005862:	3204      	adds	r2, #4
 8005864:	0093      	lsls	r3, r2, #2
 8005866:	2c00      	cmp	r4, #0
 8005868:	f04f 020f 	mov.w	r2, #15
 800586c:	fa02 f203 	lsl.w	r2, r2, r3
 8005870:	4623      	mov	r3, r4
 8005872:	bfb8      	it	lt
 8005874:	1ce3      	addlt	r3, r4, #3
 8005876:	ea42 02a3 	orr.w	r2, r2, r3, asr #2
  *         @arg @ref LL_SYSCFG_EXTI_PORTH
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_SYSCFG_GetEXTISource(uint32_t Line)
{
  return (uint32_t)(READ_BIT(SYSCFG->EXTICR[Line & 0xFF], (Line >> 16)) >> POSITION_VAL(Line >> 16));
 800587a:	b2d3      	uxtb	r3, r2
 800587c:	4810      	ldr	r0, [pc, #64]	; (80058c0 <gpio_stm32_config+0x160>)
 800587e:	3302      	adds	r3, #2
 8005880:	0c12      	lsrs	r2, r2, #16
 8005882:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8005886:	4013      	ands	r3, r2
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005888:	fa92 f2a2 	rbit	r2, r2
  return __builtin_clz(value);
 800588c:	fab2 f282 	clz	r2, r2
 8005890:	fa23 f202 	lsr.w	r2, r3, r2
		if (gpio_stm32_int_enabled_port(pin) == cfg->port) {
 8005894:	4291      	cmp	r1, r2
 8005896:	d1d7      	bne.n	8005848 <gpio_stm32_config+0xe8>
			stm32_exti_disable(pin);
 8005898:	4620      	mov	r0, r4
 800589a:	f7ff f99f 	bl	8004bdc <stm32_exti_disable>
			stm32_exti_unset_callback(pin);
 800589e:	4620      	mov	r0, r4
 80058a0:	f7ff f9d2 	bl	8004c48 <stm32_exti_unset_callback>
 80058a4:	e769      	b.n	800577a <gpio_stm32_config+0x1a>
		return -EINVAL;
 80058a6:	f06f 0215 	mvn.w	r2, #21
 80058aa:	e7f3      	b.n	8005894 <gpio_stm32_config+0x134>
			err = -EBUSY;
 80058ac:	f06f 060f 	mvn.w	r6, #15
 80058b0:	e763      	b.n	800577a <gpio_stm32_config+0x1a>
 80058b2:	bf00      	nop
 80058b4:	08006ebb 	.word	0x08006ebb
 80058b8:	08007f63 	.word	0x08007f63
 80058bc:	08007b58 	.word	0x08007b58
 80058c0:	40013800 	.word	0x40013800

080058c4 <pwm_stm32_pin_set>:
 *
 * return 0, or negative errno code
 */
static int pwm_stm32_pin_set(struct device *dev, u32_t pwm,
			     u32_t period_cycles, u32_t pulse_cycles)
{
 80058c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80058c6:	461f      	mov	r7, r3
 80058c8:	b089      	sub	sp, #36	; 0x24
	struct pwm_stm32_data *data = DEV_DATA(dev);
 80058ca:	6886      	ldr	r6, [r0, #8]
	TIM_HandleTypeDef *TimerHandle = &data->hpwm;
	TIM_OC_InitTypeDef sConfig;
	u32_t channel;
	bool counter_32b;

	if (period_cycles == 0U || pulse_cycles > period_cycles) {
 80058cc:	b3a2      	cbz	r2, 8005938 <pwm_stm32_pin_set+0x74>
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d332      	bcc.n	8005938 <pwm_stm32_pin_set+0x74>
	}

	/* configure channel */
	channel = (pwm - 1)*CHANNEL_LENGTH;

	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80058d2:	6803      	ldr	r3, [r0, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80058d6:	f101 4480 	add.w	r4, r1, #1073741824	; 0x40000000
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80058da:	6819      	ldr	r1, [r3, #0]
 80058dc:	4b33      	ldr	r3, [pc, #204]	; (80059ac <pwm_stm32_pin_set+0xe8>)
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80058de:	3c01      	subs	r4, #1
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80058e0:	4299      	cmp	r1, r3
	channel = (pwm - 1)*CHANNEL_LENGTH;
 80058e2:	ea4f 0484 	mov.w	r4, r4, lsl #2
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80058e6:	d05e      	beq.n	80059a6 <pwm_stm32_pin_set+0xe2>
 80058e8:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80058ec:	d027      	beq.n	800593e <pwm_stm32_pin_set+0x7a>
 80058ee:	4830      	ldr	r0, [pc, #192]	; (80059b0 <pwm_stm32_pin_set+0xec>)
 80058f0:	f421 6300 	bic.w	r3, r1, #2048	; 0x800
 80058f4:	4283      	cmp	r3, r0
 80058f6:	d053      	beq.n	80059a0 <pwm_stm32_pin_set+0xdc>
 80058f8:	f421 5580 	bic.w	r5, r1, #4096	; 0x1000
 80058fc:	f500 6080 	add.w	r0, r0, #1024	; 0x400
 8005900:	4285      	cmp	r5, r0
 8005902:	d04d      	beq.n	80059a0 <pwm_stm32_pin_set+0xdc>
 8005904:	f421 6580 	bic.w	r5, r1, #1024	; 0x400
 8005908:	f500 6000 	add.w	r0, r0, #2048	; 0x800
 800590c:	4285      	cmp	r5, r0
 800590e:	d047      	beq.n	80059a0 <pwm_stm32_pin_set+0xdc>
 8005910:	f421 4580 	bic.w	r5, r1, #16384	; 0x4000
 8005914:	f500 4074 	add.w	r0, r0, #62464	; 0xf400
 8005918:	4285      	cmp	r5, r0
 800591a:	d041      	beq.n	80059a0 <pwm_stm32_pin_set+0xdc>
 800591c:	f500 5070 	add.w	r0, r0, #15360	; 0x3c00
 8005920:	4283      	cmp	r3, r0
 8005922:	d03d      	beq.n	80059a0 <pwm_stm32_pin_set+0xdc>
 8005924:	4b23      	ldr	r3, [pc, #140]	; (80059b4 <pwm_stm32_pin_set+0xf0>)
 8005926:	4299      	cmp	r1, r3
 8005928:	d03d      	beq.n	80059a6 <pwm_stm32_pin_set+0xe2>
 800592a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800592e:	4299      	cmp	r1, r3
 8005930:	d039      	beq.n	80059a6 <pwm_stm32_pin_set+0xe2>
		!IS_TIM_CHANNELS(channel)) {
		return -ENOTSUP;
 8005932:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005936:	e031      	b.n	800599c <pwm_stm32_pin_set+0xd8>
		return -EINVAL;
 8005938:	f06f 0015 	mvn.w	r0, #21
 800593c:	e02e      	b.n	800599c <pwm_stm32_pin_set+0xd8>
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 800593e:	b184      	cbz	r4, 8005962 <pwm_stm32_pin_set+0x9e>
		!IS_TIM_CHANNELS(channel)) {
 8005940:	f024 0308 	bic.w	r3, r4, #8
 8005944:	2b04      	cmp	r3, #4
 8005946:	d003      	beq.n	8005950 <pwm_stm32_pin_set+0x8c>
 8005948:	2c08      	cmp	r4, #8
 800594a:	d001      	beq.n	8005950 <pwm_stm32_pin_set+0x8c>
 800594c:	2c3c      	cmp	r4, #60	; 0x3c
 800594e:	d1f0      	bne.n	8005932 <pwm_stm32_pin_set+0x6e>
	/* FIXME: IS_TIM_32B_COUNTER_INSTANCE not available on
	 * SMT32F1 Cube HAL since all timer counters are 16 bits
	 */
	counter_32b = 0;
#else
	counter_32b = IS_TIM_32B_COUNTER_INSTANCE(PWM_STRUCT(dev));
 8005950:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8005954:	d005      	beq.n	8005962 <pwm_stm32_pin_set+0x9e>

	/*
	 * The timer counts from 0 up to the value in the ARR register (16-bit).
	 * Thus period_cycles cannot be greater than UINT16_MAX + 1.
	 */
	if (!counter_32b && (period_cycles > 0x10000)) {
 8005956:	4b18      	ldr	r3, [pc, #96]	; (80059b8 <pwm_stm32_pin_set+0xf4>)
 8005958:	4299      	cmp	r1, r3
 800595a:	d002      	beq.n	8005962 <pwm_stm32_pin_set+0x9e>
 800595c:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8005960:	d8e7      	bhi.n	8005932 <pwm_stm32_pin_set+0x6e>
	}

	/* Configure Timer IP */
	TimerHandle->Instance = PWM_STRUCT(dev);
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
	TimerHandle->Init.ClockDivision = 0;
 8005962:	2500      	movs	r5, #0
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 8005964:	6c33      	ldr	r3, [r6, #64]	; 0x40
	TimerHandle->Instance = PWM_STRUCT(dev);
 8005966:	6031      	str	r1, [r6, #0]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
	TimerHandle->Init.RepetitionCounter = 0;

	/* Set period value */
	TimerHandle->Init.Period = period_cycles - 1;
 8005968:	3a01      	subs	r2, #1
	TimerHandle->Init.Prescaler = data->pwm_prescaler;
 800596a:	6073      	str	r3, [r6, #4]
	TimerHandle->Init.Period = period_cycles - 1;
 800596c:	60f2      	str	r2, [r6, #12]
	TimerHandle->Init.ClockDivision = 0;
 800596e:	6135      	str	r5, [r6, #16]
	TimerHandle->Init.CounterMode = TIM_COUNTERMODE_UP;
 8005970:	60b5      	str	r5, [r6, #8]
	TimerHandle->Init.RepetitionCounter = 0;
 8005972:	6175      	str	r5, [r6, #20]

	HAL_TIM_PWM_Init(TimerHandle);
 8005974:	4630      	mov	r0, r6
 8005976:	f001 fc80 	bl	800727a <HAL_TIM_PWM_Init>

	/* Configure PWM channel */
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 800597a:	2360      	movs	r3, #96	; 0x60
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;

	/* Set the pulse value */
	sConfig.Pulse = pulse_cycles;

	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 800597c:	a901      	add	r1, sp, #4
 800597e:	4622      	mov	r2, r4
 8005980:	4630      	mov	r0, r6
	sConfig.OCMode       = TIM_OCMODE_PWM1;
 8005982:	9301      	str	r3, [sp, #4]
	sConfig.OCPolarity   = TIM_OCPOLARITY_HIGH;
 8005984:	9503      	str	r5, [sp, #12]
	sConfig.OCNPolarity  = TIM_OCNPOLARITY_HIGH;
 8005986:	e9cd 5504 	strd	r5, r5, [sp, #16]
	sConfig.OCIdleState  = TIM_OCIDLESTATE_RESET;
 800598a:	e9cd 5506 	strd	r5, r5, [sp, #24]
	sConfig.Pulse = pulse_cycles;
 800598e:	9702      	str	r7, [sp, #8]
	HAL_TIM_PWM_ConfigChannel(TimerHandle, &sConfig, channel);
 8005990:	f001 fc8d 	bl	80072ae <HAL_TIM_PWM_ConfigChannel>

	return HAL_TIM_PWM_Start(TimerHandle, channel);
 8005994:	4621      	mov	r1, r4
 8005996:	4630      	mov	r0, r6
 8005998:	f001 fcf9 	bl	800738e <HAL_TIM_PWM_Start>
}
 800599c:	b009      	add	sp, #36	; 0x24
 800599e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!IS_TIM_INSTANCE(PWM_STRUCT(dev)) ||
 80059a0:	2c00      	cmp	r4, #0
 80059a2:	d1cd      	bne.n	8005940 <pwm_stm32_pin_set+0x7c>
 80059a4:	e7d7      	b.n	8005956 <pwm_stm32_pin_set+0x92>
 80059a6:	2c00      	cmp	r4, #0
 80059a8:	d1ca      	bne.n	8005940 <pwm_stm32_pin_set+0x7c>
 80059aa:	e7d7      	b.n	800595c <pwm_stm32_pin_set+0x98>
 80059ac:	40010000 	.word	0x40010000
 80059b0:	40000400 	.word	0x40000400
 80059b4:	40001c00 	.word	0x40001c00
 80059b8:	40000c00 	.word	0x40000c00

080059bc <pwm_stm32_init>:
	data->clock = clk;
}


static int pwm_stm32_init(struct device *dev)
{
 80059bc:	b538      	push	{r3, r4, r5, lr}
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 80059be:	6803      	ldr	r3, [r0, #0]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 80059c0:	6885      	ldr	r5, [r0, #8]
	const struct pwm_stm32_config *config = DEV_CFG(dev);
 80059c2:	689c      	ldr	r4, [r3, #8]
 80059c4:	4806      	ldr	r0, [pc, #24]	; (80059e0 <pwm_stm32_init+0x24>)
 80059c6:	f000 fb6f 	bl	80060a8 <z_impl_device_get_binding>
 80059ca:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 80059cc:	6468      	str	r0, [r5, #68]	; 0x44
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	1d21      	adds	r1, r4, #4
 80059d2:	4798      	blx	r3

	__pwm_stm32_get_clock(dev);

	/* enable clock */
	if (clock_control_on(data->clock,
 80059d4:	2800      	cmp	r0, #0
			(clock_control_subsys_t *)&config->pclken) != 0) {
		return -EIO;
	}

	return 0;
}
 80059d6:	bf18      	it	ne
 80059d8:	f06f 0004 	mvnne.w	r0, #4
 80059dc:	bd38      	pop	{r3, r4, r5, pc}
 80059de:	bf00      	nop
 80059e0:	08007f63 	.word	0x08007f63

080059e4 <uart_stm32_configure>:
	return UART_CFG_PARITY_NONE;
}

static int uart_stm32_configure(struct device *dev,
				const struct uart_config *cfg)
{
 80059e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct uart_stm32_data *data = DEV_DATA(dev);
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80059e8:	6803      	ldr	r3, [r0, #0]
	const u32_t parity = uart_stm32_cfg2ll_parity(cfg->parity);
 80059ea:	790a      	ldrb	r2, [r1, #4]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80059ec:	689b      	ldr	r3, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 80059ee:	6886      	ldr	r6, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80059f0:	681c      	ldr	r4, [r3, #0]
	switch (parity) {
 80059f2:	2a01      	cmp	r2, #1
{
 80059f4:	460d      	mov	r5, r1
	switch (parity) {
 80059f6:	d075      	beq.n	8005ae4 <uart_stm32_configure+0x100>
		return LL_USART_PARITY_NONE;
 80059f8:	2a02      	cmp	r2, #2
 80059fa:	bf0c      	ite	eq
 80059fc:	f44f 6180 	moveq.w	r1, #1024	; 0x400
 8005a00:	2100      	movne	r1, #0
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8005a02:	f895 8005 	ldrb.w	r8, [r5, #5]
	const u32_t databits = uart_stm32_cfg2ll_databits(cfg->data_bits);
 8005a06:	f895 9006 	ldrb.w	r9, [r5, #6]
	const u32_t flowctrl = uart_stm32_cfg2ll_hwctrl(cfg->flow_ctrl);
 8005a0a:	79ef      	ldrb	r7, [r5, #7]
 8005a0c:	f1b8 0f02 	cmp.w	r8, #2
 8005a10:	bf96      	itet	ls
 8005a12:	4b37      	ldrls	r3, [pc, #220]	; (8005af0 <uart_stm32_configure+0x10c>)
	const u32_t stopbits = uart_stm32_cfg2ll_stopbits(cfg->stop_bits);
 8005a14:	f44f 5e00 	movhi.w	lr, #8192	; 0x2000
 8005a18:	f833 e018 	ldrhls.w	lr, [r3, r8, lsl #1]
		return LL_USART_DATAWIDTH_8B;
 8005a1c:	f1b9 0f04 	cmp.w	r9, #4
 8005a20:	bf0c      	ite	eq
 8005a22:	f44f 5380 	moveq.w	r3, #4096	; 0x1000
 8005a26:	2300      	movne	r3, #0

	/* Hardware doesn't support mark or space parity */
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8005a28:	3a03      	subs	r2, #3
		return LL_USART_HWCONTROL_RTS_CTS;
 8005a2a:	2f01      	cmp	r7, #1
 8005a2c:	bf14      	ite	ne
 8005a2e:	f04f 0c00 	movne.w	ip, #0
 8005a32:	f44f 7c40 	moveq.w	ip, #768	; 0x300
	if ((UART_CFG_PARITY_MARK == cfg->parity) ||
 8005a36:	2a01      	cmp	r2, #1
 8005a38:	d957      	bls.n	8005aea <uart_stm32_configure+0x106>
	if (IS_LPUART_INSTANCE(UartInstance) &&
	    UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
		return -ENOTSUP;
	}
#else
	if (UART_CFG_STOP_BITS_0_5 == cfg->stop_bits) {
 8005a3a:	f018 0ffd 	tst.w	r8, #253	; 0xfd
 8005a3e:	d054      	beq.n	8005aea <uart_stm32_configure+0x106>
		return -ENOTSUP;
	}
#endif

	/* Driver doesn't support 5 or 6 databits and potentially 7 or 9 */
	if ((UART_CFG_DATA_BITS_5 == cfg->data_bits) ||
 8005a40:	f1b9 0f02 	cmp.w	r9, #2
 8005a44:	d951      	bls.n	8005aea <uart_stm32_configure+0x106>
		) {
		return -ENOTSUP;
	}

	/* Driver supports only RTS CTS flow control */
	if (UART_CFG_FLOW_CTRL_NONE != cfg->flow_ctrl) {
 8005a46:	b187      	cbz	r7, 8005a6a <uart_stm32_configure+0x86>
		if (!IS_UART_HWFLOW_INSTANCE(UartInstance) ||
 8005a48:	4a2a      	ldr	r2, [pc, #168]	; (8005af4 <uart_stm32_configure+0x110>)
 8005a4a:	4294      	cmp	r4, r2
 8005a4c:	d00b      	beq.n	8005a66 <uart_stm32_configure+0x82>
 8005a4e:	f5a2 424c 	sub.w	r2, r2, #52224	; 0xcc00
 8005a52:	4294      	cmp	r4, r2
 8005a54:	d007      	beq.n	8005a66 <uart_stm32_configure+0x82>
 8005a56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005a5a:	4294      	cmp	r4, r2
 8005a5c:	d003      	beq.n	8005a66 <uart_stm32_configure+0x82>
 8005a5e:	f502 424c 	add.w	r2, r2, #52224	; 0xcc00
 8005a62:	4294      	cmp	r4, r2
 8005a64:	d141      	bne.n	8005aea <uart_stm32_configure+0x106>
 8005a66:	2f01      	cmp	r7, #1
 8005a68:	d13f      	bne.n	8005aea <uart_stm32_configure+0x106>
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005a6a:	68e2      	ldr	r2, [r4, #12]
 8005a6c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005a70:	60e2      	str	r2, [r4, #12]
  *         @arg @ref LL_USART_PARITY_EVEN
  *         @arg @ref LL_USART_PARITY_ODD
  */
__STATIC_INLINE uint32_t LL_USART_GetParity(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8005a72:	68e2      	ldr	r2, [r4, #12]
 8005a74:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
		}
	}

	LL_USART_Disable(UartInstance);

	if (parity != uart_stm32_get_parity(dev)) {
 8005a78:	4291      	cmp	r1, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE, Parity);
 8005a7a:	bf1f      	itttt	ne
 8005a7c:	68e7      	ldrne	r7, [r4, #12]
 8005a7e:	f427 67c0 	bicne.w	r7, r7, #1536	; 0x600
 8005a82:	430f      	orrne	r7, r1
 8005a84:	60e7      	strne	r7, [r4, #12]
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  */
__STATIC_INLINE uint32_t LL_USART_GetStopBitsLength(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 8005a86:	6922      	ldr	r2, [r4, #16]
 8005a88:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
		uart_stm32_set_parity(dev, parity);
	}

	if (stopbits != uart_stm32_get_stopbits(dev)) {
 8005a8c:	4596      	cmp	lr, r2
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005a8e:	bf1f      	itttt	ne
 8005a90:	6921      	ldrne	r1, [r4, #16]
 8005a92:	f421 5140 	bicne.w	r1, r1, #12288	; 0x3000
 8005a96:	ea41 010e 	orrne.w	r1, r1, lr
 8005a9a:	6121      	strne	r1, [r4, #16]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 8005a9c:	68e2      	ldr	r2, [r4, #12]

	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
		uart_stm32_set_hwctrl(dev, flowctrl);
	}

	if (cfg->baudrate != data->baud_rate) {
 8005a9e:	6829      	ldr	r1, [r5, #0]
 8005aa0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
	if (databits != uart_stm32_get_databits(dev)) {
 8005aa4:	4293      	cmp	r3, r2
  MODIFY_REG(USARTx->CR1, USART_CR1_M, DataWidth);
 8005aa6:	bf1f      	itttt	ne
 8005aa8:	68e2      	ldrne	r2, [r4, #12]
 8005aaa:	f422 5280 	bicne.w	r2, r2, #4096	; 0x1000
 8005aae:	431a      	orrne	r2, r3
 8005ab0:	60e2      	strne	r2, [r4, #12]
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  */
__STATIC_INLINE uint32_t LL_USART_GetHWFlowCtrl(USART_TypeDef *USARTx)
{
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8005ab2:	6963      	ldr	r3, [r4, #20]
 8005ab4:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (flowctrl != uart_stm32_get_hwctrl(dev)) {
 8005ab8:	459c      	cmp	ip, r3
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005aba:	bf1f      	itttt	ne
 8005abc:	6963      	ldrne	r3, [r4, #20]
 8005abe:	f423 7340 	bicne.w	r3, r3, #768	; 0x300
 8005ac2:	ea43 030c 	orrne.w	r3, r3, ip
 8005ac6:	6163      	strne	r3, [r4, #20]
	if (cfg->baudrate != data->baud_rate) {
 8005ac8:	6833      	ldr	r3, [r6, #0]
 8005aca:	4299      	cmp	r1, r3
 8005acc:	d003      	beq.n	8005ad6 <uart_stm32_configure+0xf2>
		uart_stm32_set_baudrate(dev, cfg->baudrate);
 8005ace:	f001 fb7c 	bl	80071ca <uart_stm32_set_baudrate>
		data->baud_rate = cfg->baudrate;
 8005ad2:	682b      	ldr	r3, [r5, #0]
 8005ad4:	6033      	str	r3, [r6, #0]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005ad6:	68e3      	ldr	r3, [r4, #12]
 8005ad8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005adc:	60e3      	str	r3, [r4, #12]
	}

	LL_USART_Enable(UartInstance);
	return 0;
 8005ade:	2000      	movs	r0, #0
};
 8005ae0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return LL_USART_PARITY_ODD;
 8005ae4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005ae8:	e78b      	b.n	8005a02 <uart_stm32_configure+0x1e>
		return -ENOTSUP;
 8005aea:	f06f 0085 	mvn.w	r0, #133	; 0x85
 8005aee:	e7f7      	b.n	8005ae0 <uart_stm32_configure+0xfc>
 8005af0:	08007f04 	.word	0x08007f04
 8005af4:	40011000 	.word	0x40011000

08005af8 <uart_stm32_init>:
 *
 * @return 0
 */
static int uart_stm32_init(struct device *dev)
{
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8005af8:	6803      	ldr	r3, [r0, #0]
{
 8005afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct uart_stm32_config *config = DEV_CFG(dev);
 8005afe:	f8d3 8008 	ldr.w	r8, [r3, #8]
	struct uart_stm32_data *data = DEV_DATA(dev);
 8005b02:	6887      	ldr	r7, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005b04:	4646      	mov	r6, r8
{
 8005b06:	4605      	mov	r5, r0
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005b08:	f856 4b08 	ldr.w	r4, [r6], #8
 8005b0c:	4818      	ldr	r0, [pc, #96]	; (8005b70 <uart_stm32_init+0x78>)
 8005b0e:	f000 facb 	bl	80060a8 <z_impl_device_get_binding>
 8005b12:	6843      	ldr	r3, [r0, #4]
	data->clock = clk;
 8005b14:	6078      	str	r0, [r7, #4]
 8005b16:	4631      	mov	r1, r6
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	4798      	blx	r3

	__uart_stm32_get_clock(dev);
	/* enable clock */
	if (clock_control_on(data->clock,
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	bb20      	cbnz	r0, 8005b6a <uart_stm32_init+0x72>
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 8005b20:	68e3      	ldr	r3, [r4, #12]
 8005b22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b26:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8005b28:	68e3      	ldr	r3, [r4, #12]
 8005b2a:	f043 030c 	orr.w	r3, r3, #12
 8005b2e:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 8005b30:	68e3      	ldr	r3, [r4, #12]
 8005b32:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005b36:	60e3      	str	r3, [r4, #12]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005b38:	6923      	ldr	r3, [r4, #16]
 8005b3a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b3e:	6123      	str	r3, [r4, #16]
	LL_USART_ConfigCharacter(UartInstance,
				 LL_USART_DATAWIDTH_8B,
				 LL_USART_PARITY_NONE,
				 LL_USART_STOPBITS_1);

	if (config->hw_flow_control) {
 8005b40:	f898 3010 	ldrb.w	r3, [r8, #16]
 8005b44:	b133      	cbz	r3, 8005b54 <uart_stm32_init+0x5c>
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8005b46:	682b      	ldr	r3, [r5, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	681a      	ldr	r2, [r3, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005b4c:	6953      	ldr	r3, [r2, #20]
 8005b4e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005b52:	6153      	str	r3, [r2, #20]
		uart_stm32_set_hwctrl(dev, LL_USART_HWCONTROL_RTS_CTS);
	}

	/* Set the default baudrate */
	uart_stm32_set_baudrate(dev, data->baud_rate);
 8005b54:	6839      	ldr	r1, [r7, #0]
 8005b56:	4628      	mov	r0, r5
 8005b58:	f001 fb37 	bl	80071ca <uart_stm32_set_baudrate>
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8005b5c:	68e3      	ldr	r3, [r4, #12]
 8005b5e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005b62:	60e3      	str	r3, [r4, #12]

#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	config->uconf.irq_config_func(dev);
#endif
	return 0;
}
 8005b64:	4630      	mov	r0, r6
 8005b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EIO;
 8005b6a:	f06f 0604 	mvn.w	r6, #4
 8005b6e:	e7f9      	b.n	8005b64 <uart_stm32_init+0x6c>
 8005b70:	08007f63 	.word	0x08007f63

08005b74 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b74:	6a03      	ldr	r3, [r0, #32]
 8005b76:	f023 0301 	bic.w	r3, r3, #1
 8005b7a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b7c:	6a03      	ldr	r3, [r0, #32]
{
 8005b7e:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b80:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b82:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b86:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005b8a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b8c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8005b8e:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8005b92:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b94:	4d0e      	ldr	r5, [pc, #56]	; (8005bd0 <TIM_OC1_SetConfig+0x5c>)
 8005b96:	42a8      	cmp	r0, r5
 8005b98:	d002      	beq.n	8005ba0 <TIM_OC1_SetConfig+0x2c>
 8005b9a:	4e0e      	ldr	r6, [pc, #56]	; (8005bd4 <TIM_OC1_SetConfig+0x60>)
 8005b9c:	42b0      	cmp	r0, r6
 8005b9e:	d110      	bne.n	8005bc2 <TIM_OC1_SetConfig+0x4e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ba0:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ba2:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005ba6:	4333      	orrs	r3, r6
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ba8:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8005baa:	f023 0304 	bic.w	r3, r3, #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	d002      	beq.n	8005bb6 <TIM_OC1_SetConfig+0x42>
 8005bb0:	4d08      	ldr	r5, [pc, #32]	; (8005bd4 <TIM_OC1_SetConfig+0x60>)
 8005bb2:	42a8      	cmp	r0, r5
 8005bb4:	d105      	bne.n	8005bc2 <TIM_OC1_SetConfig+0x4e>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bb6:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bba:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bbe:	4335      	orrs	r5, r6
 8005bc0:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bc2:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bc4:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bc6:	684a      	ldr	r2, [r1, #4]
 8005bc8:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bca:	6203      	str	r3, [r0, #32]
}
 8005bcc:	bd70      	pop	{r4, r5, r6, pc}
 8005bce:	bf00      	nop
 8005bd0:	40010000 	.word	0x40010000
 8005bd4:	40010400 	.word	0x40010400

08005bd8 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005bd8:	6a03      	ldr	r3, [r0, #32]
 8005bda:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bde:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005be0:	6a03      	ldr	r3, [r0, #32]
{
 8005be2:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005be6:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005be8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bea:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005bee:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8005bf2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bf6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bfa:	4d11      	ldr	r5, [pc, #68]	; (8005c40 <TIM_OC3_SetConfig+0x68>)
 8005bfc:	42a8      	cmp	r0, r5
 8005bfe:	d003      	beq.n	8005c08 <TIM_OC3_SetConfig+0x30>
 8005c00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c04:	42a8      	cmp	r0, r5
 8005c06:	d114      	bne.n	8005c32 <TIM_OC3_SetConfig+0x5a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c08:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c0e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c12:	4d0b      	ldr	r5, [pc, #44]	; (8005c40 <TIM_OC3_SetConfig+0x68>)
 8005c14:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1a:	d003      	beq.n	8005c24 <TIM_OC3_SetConfig+0x4c>
 8005c1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c20:	42a8      	cmp	r0, r5
 8005c22:	d106      	bne.n	8005c32 <TIM_OC3_SetConfig+0x5a>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c24:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c28:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c2c:	4335      	orrs	r5, r6
 8005c2e:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c34:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c36:	684a      	ldr	r2, [r1, #4]
 8005c38:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c3a:	6203      	str	r3, [r0, #32]
}
 8005c3c:	bd70      	pop	{r4, r5, r6, pc}
 8005c3e:	bf00      	nop
 8005c40:	40010000 	.word	0x40010000

08005c44 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c44:	6a03      	ldr	r3, [r0, #32]
 8005c46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c4a:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4c:	6a03      	ldr	r3, [r0, #32]
{
 8005c4e:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c50:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c52:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c54:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c56:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c5a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c5e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c64:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c68:	4d08      	ldr	r5, [pc, #32]	; (8005c8c <TIM_OC4_SetConfig+0x48>)
 8005c6a:	42a8      	cmp	r0, r5
 8005c6c:	d003      	beq.n	8005c76 <TIM_OC4_SetConfig+0x32>
 8005c6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005c72:	42a8      	cmp	r0, r5
 8005c74:	d104      	bne.n	8005c80 <TIM_OC4_SetConfig+0x3c>

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c76:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c78:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c7c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c80:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c82:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c84:	684a      	ldr	r2, [r1, #4]
 8005c86:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c88:	6203      	str	r3, [r0, #32]
}
 8005c8a:	bd30      	pop	{r4, r5, pc}
 8005c8c:	40010000 	.word	0x40010000

08005c90 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c90:	4a30      	ldr	r2, [pc, #192]	; (8005d54 <TIM_Base_SetConfig+0xc4>)
  tmpcr1 = TIMx->CR1;
 8005c92:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005c94:	4290      	cmp	r0, r2
 8005c96:	d012      	beq.n	8005cbe <TIM_Base_SetConfig+0x2e>
 8005c98:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005c9c:	d00f      	beq.n	8005cbe <TIM_Base_SetConfig+0x2e>
 8005c9e:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005ca2:	4290      	cmp	r0, r2
 8005ca4:	d00b      	beq.n	8005cbe <TIM_Base_SetConfig+0x2e>
 8005ca6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005caa:	4290      	cmp	r0, r2
 8005cac:	d007      	beq.n	8005cbe <TIM_Base_SetConfig+0x2e>
 8005cae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cb2:	4290      	cmp	r0, r2
 8005cb4:	d003      	beq.n	8005cbe <TIM_Base_SetConfig+0x2e>
 8005cb6:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005cba:	4290      	cmp	r0, r2
 8005cbc:	d119      	bne.n	8005cf2 <TIM_Base_SetConfig+0x62>
    tmpcr1 |= Structure->CounterMode;
 8005cbe:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005cc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005cc4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005cc6:	4a23      	ldr	r2, [pc, #140]	; (8005d54 <TIM_Base_SetConfig+0xc4>)
 8005cc8:	4290      	cmp	r0, r2
 8005cca:	d029      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005ccc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8005cd0:	d026      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005cd2:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005cd6:	4290      	cmp	r0, r2
 8005cd8:	d022      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005cda:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cde:	4290      	cmp	r0, r2
 8005ce0:	d01e      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005ce2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005ce6:	4290      	cmp	r0, r2
 8005ce8:	d01a      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005cea:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 8005cee:	4290      	cmp	r0, r2
 8005cf0:	d016      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005cf2:	4a19      	ldr	r2, [pc, #100]	; (8005d58 <TIM_Base_SetConfig+0xc8>)
 8005cf4:	4290      	cmp	r0, r2
 8005cf6:	d013      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005cf8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005cfc:	4290      	cmp	r0, r2
 8005cfe:	d00f      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005d00:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d04:	4290      	cmp	r0, r2
 8005d06:	d00b      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005d08:	f5a2 3298 	sub.w	r2, r2, #77824	; 0x13000
 8005d0c:	4290      	cmp	r0, r2
 8005d0e:	d007      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005d10:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d14:	4290      	cmp	r0, r2
 8005d16:	d003      	beq.n	8005d20 <TIM_Base_SetConfig+0x90>
 8005d18:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005d1c:	4290      	cmp	r0, r2
 8005d1e:	d103      	bne.n	8005d28 <TIM_Base_SetConfig+0x98>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d20:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d26:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d28:	694a      	ldr	r2, [r1, #20]
 8005d2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d2e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8005d30:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d32:	688b      	ldr	r3, [r1, #8]
 8005d34:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005d36:	680b      	ldr	r3, [r1, #0]
 8005d38:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005d3a:	4b06      	ldr	r3, [pc, #24]	; (8005d54 <TIM_Base_SetConfig+0xc4>)
 8005d3c:	4298      	cmp	r0, r3
 8005d3e:	d003      	beq.n	8005d48 <TIM_Base_SetConfig+0xb8>
 8005d40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d44:	4298      	cmp	r0, r3
 8005d46:	d101      	bne.n	8005d4c <TIM_Base_SetConfig+0xbc>
    TIMx->RCR = Structure->RepetitionCounter;
 8005d48:	690b      	ldr	r3, [r1, #16]
 8005d4a:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	6143      	str	r3, [r0, #20]
}
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	40010000 	.word	0x40010000
 8005d58:	40014000 	.word	0x40014000

08005d5c <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d5c:	6a03      	ldr	r3, [r0, #32]
 8005d5e:	f023 0310 	bic.w	r3, r3, #16
 8005d62:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8005d64:	6a03      	ldr	r3, [r0, #32]
{
 8005d66:	b570      	push	{r4, r5, r6, lr}
  tmpcr2 =  TIMx->CR2;
 8005d68:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8005d6a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d6e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d72:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d76:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005d78:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d7c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d80:	4d10      	ldr	r5, [pc, #64]	; (8005dc4 <TIM_OC2_SetConfig+0x68>)
 8005d82:	42a8      	cmp	r0, r5
 8005d84:	d003      	beq.n	8005d8e <TIM_OC2_SetConfig+0x32>
 8005d86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005d8a:	42a8      	cmp	r0, r5
 8005d8c:	d114      	bne.n	8005db8 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d8e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d98:	4d0a      	ldr	r5, [pc, #40]	; (8005dc4 <TIM_OC2_SetConfig+0x68>)
 8005d9a:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da0:	d003      	beq.n	8005daa <TIM_OC2_SetConfig+0x4e>
 8005da2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005da6:	42a8      	cmp	r0, r5
 8005da8:	d106      	bne.n	8005db8 <TIM_OC2_SetConfig+0x5c>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005daa:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dae:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005db2:	4335      	orrs	r5, r6
 8005db4:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8005db8:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005dba:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005dbc:	684a      	ldr	r2, [r1, #4]
 8005dbe:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005dc0:	6203      	str	r3, [r0, #32]
}
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}
 8005dc4:	40010000 	.word	0x40010000

08005dc8 <HAL_TIM_OC_Start>:
{
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005dcc:	2201      	movs	r2, #1
 8005dce:	6800      	ldr	r0, [r0, #0]
 8005dd0:	f001 facf 	bl	8007372 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005dd4:	6823      	ldr	r3, [r4, #0]
 8005dd6:	4a0b      	ldr	r2, [pc, #44]	; (8005e04 <HAL_TIM_OC_Start+0x3c>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d003      	beq.n	8005de4 <HAL_TIM_OC_Start+0x1c>
 8005ddc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d103      	bne.n	8005dec <HAL_TIM_OC_Start+0x24>
    __HAL_TIM_MOE_ENABLE(htim);
 8005de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005de6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005dea:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005dec:	689a      	ldr	r2, [r3, #8]
 8005dee:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005df2:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8005df4:	bf1e      	ittt	ne
 8005df6:	681a      	ldrne	r2, [r3, #0]
 8005df8:	f042 0201 	orrne.w	r2, r2, #1
 8005dfc:	601a      	strne	r2, [r3, #0]
}
 8005dfe:	2000      	movs	r0, #0
 8005e00:	bd10      	pop	{r4, pc}
 8005e02:	bf00      	nop
 8005e04:	40010000 	.word	0x40010000

08005e08 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8005e08:	b530      	push	{r4, r5, lr}
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8005e0a:	4c0a      	ldr	r4, [pc, #40]	; (8005e34 <LL_RCC_PLL_ConfigDomain_SYS+0x2c>)
 8005e0c:	ea41 1282 	orr.w	r2, r1, r2, lsl #6
 8005e10:	6865      	ldr	r5, [r4, #4]
 8005e12:	4909      	ldr	r1, [pc, #36]	; (8005e38 <LL_RCC_PLL_ConfigDomain_SYS+0x30>)
 8005e14:	4029      	ands	r1, r5
 8005e16:	430a      	orrs	r2, r1
 8005e18:	4302      	orrs	r2, r0
 8005e1a:	6062      	str	r2, [r4, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8005e1c:	6862      	ldr	r2, [r4, #4]
 8005e1e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6062      	str	r2, [r4, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 8005e26:	6862      	ldr	r2, [r4, #4]
 8005e28:	f022 42e0 	bic.w	r2, r2, #1879048192	; 0x70000000
 8005e2c:	431a      	orrs	r2, r3
 8005e2e:	6062      	str	r2, [r4, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 8005e30:	bd30      	pop	{r4, r5, pc}
 8005e32:	bf00      	nop
 8005e34:	40023800 	.word	0x40023800
 8005e38:	ffbf8000 	.word	0xffbf8000

08005e3c <UTILS_PLL_IsBusy>:
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8005e3c:	4b08      	ldr	r3, [pc, #32]	; (8005e60 <UTILS_PLL_IsBusy+0x24>)
 8005e3e:	6819      	ldr	r1, [r3, #0]
  * @rmtoll CR           PLLSAIRDY    LL_RCC_PLLSAI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLLSAI_IsReady(void)
{
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8005e40:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) == (RCC_CR_PLLI2SRDY));
 8005e42:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8005e44:	f001 7100 	and.w	r1, r1, #33554432	; 0x2000000
  return (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) == (RCC_CR_PLLSAIRDY));
 8005e48:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
static ErrorStatus UTILS_PLL_IsBusy(void)
{
  ErrorStatus status = SUCCESS;

  /* Check if PLL is busy*/
  if(LL_RCC_PLL_IsReady() != 0U)
 8005e4c:	430a      	orrs	r2, r1
 8005e4e:	bf14      	ite	ne
 8005e50:	2001      	movne	r0, #1
 8005e52:	2000      	moveq	r0, #0
    status = ERROR;
  }
#endif /*RCC_PLLSAI_SUPPORT*/
#if defined(RCC_PLLI2S_SUPPORT)
  /* Check if PLLI2S is busy*/
  if(LL_RCC_PLLI2S_IsReady() != 0U)
 8005e54:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
    /* PLLI2S configuration cannot be modified */
    status = ERROR;
  }
#endif /*RCC_PLLI2S_SUPPORT*/
  return status;
}
 8005e58:	bf18      	it	ne
 8005e5a:	2001      	movne	r0, #1
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	40023800 	.word	0x40023800

08005e64 <UTILS_SetFlashLatency.part.0>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  */
__STATIC_INLINE uint32_t LL_PWR_GetRegulVoltageScaling(void)
{
  return (uint32_t)(READ_BIT(PWR->CR, PWR_CR_VOS));
 8005e64:	4b39      	ldr	r3, [pc, #228]	; (8005f4c <UTILS_SetFlashLatency.part.0+0xe8>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE1)
 8005e6c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005e70:	d145      	bne.n	8005efe <UTILS_SetFlashLatency.part.0+0x9a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005e72:	f103 630f 	add.w	r3, r3, #149946368	; 0x8f00000
 8005e76:	f503 538c 	add.w	r3, r3, #4480	; 0x1180
 8005e7a:	4298      	cmp	r0, r3
 8005e7c:	d80c      	bhi.n	8005e98 <UTILS_SetFlashLatency.part.0+0x34>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005e7e:	4b34      	ldr	r3, [pc, #208]	; (8005f50 <UTILS_SetFlashLatency.part.0+0xec>)
 8005e80:	4298      	cmp	r0, r3
 8005e82:	d901      	bls.n	8005e88 <UTILS_SetFlashLatency.part.0+0x24>
        latency = LL_FLASH_LATENCY_4;
 8005e84:	2304      	movs	r3, #4
 8005e86:	e008      	b.n	8005e9a <UTILS_SetFlashLatency.part.0+0x36>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005e88:	4b32      	ldr	r3, [pc, #200]	; (8005f54 <UTILS_SetFlashLatency.part.0+0xf0>)
 8005e8a:	4298      	cmp	r0, r3
 8005e8c:	d82f      	bhi.n	8005eee <UTILS_SetFlashLatency.part.0+0x8a>
      if((HCLK_Frequency > UTILS_SCALE1_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005e8e:	4b32      	ldr	r3, [pc, #200]	; (8005f58 <UTILS_SetFlashLatency.part.0+0xf4>)
 8005e90:	4298      	cmp	r0, r3
 8005e92:	d92e      	bls.n	8005ef2 <UTILS_SetFlashLatency.part.0+0x8e>
        latency = LL_FLASH_LATENCY_2;
 8005e94:	2302      	movs	r3, #2
 8005e96:	e000      	b.n	8005e9a <UTILS_SetFlashLatency.part.0+0x36>
        latency = LL_FLASH_LATENCY_5;
 8005e98:	2305      	movs	r3, #5
 8005e9a:	4a2c      	ldr	r2, [pc, #176]	; (8005f4c <UTILS_SetFlashLatency.part.0+0xe8>)
 8005e9c:	6812      	ldr	r2, [r2, #0]
 8005e9e:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE2)
 8005ea2:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005ea6:	d108      	bne.n	8005eba <UTILS_SetFlashLatency.part.0+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY5_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005ea8:	f102 620f 	add.w	r2, r2, #149946368	; 0x8f00000
 8005eac:	f502 42a3 	add.w	r2, r2, #20864	; 0x5180
 8005eb0:	4290      	cmp	r0, r2
 8005eb2:	d926      	bls.n	8005f02 <UTILS_SetFlashLatency.part.0+0x9e>
 8005eb4:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_5;
 8005eb6:	bf08      	it	eq
 8005eb8:	2305      	moveq	r3, #5
 8005eba:	4a24      	ldr	r2, [pc, #144]	; (8005f4c <UTILS_SetFlashLatency.part.0+0xe8>)
 8005ebc:	6812      	ldr	r2, [r2, #0]
 8005ebe:	f402 4240 	and.w	r2, r2, #49152	; 0xc000
    if(LL_PWR_GetRegulVoltageScaling() == LL_PWR_REGU_VOLTAGE_SCALE3)
 8005ec2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8005ec6:	d105      	bne.n	8005ed4 <UTILS_SetFlashLatency.part.0+0x70>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005ec8:	4a22      	ldr	r2, [pc, #136]	; (8005f54 <UTILS_SetFlashLatency.part.0+0xf0>)
 8005eca:	4290      	cmp	r0, r2
 8005ecc:	d930      	bls.n	8005f30 <UTILS_SetFlashLatency.part.0+0xcc>
 8005ece:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_3;
 8005ed0:	bf08      	it	eq
 8005ed2:	2303      	moveq	r3, #3
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8005ed4:	4921      	ldr	r1, [pc, #132]	; (8005f5c <UTILS_SetFlashLatency.part.0+0xf8>)
 8005ed6:	680a      	ldr	r2, [r1, #0]
 8005ed8:	f022 020f 	bic.w	r2, r2, #15
 8005edc:	431a      	orrs	r2, r3
 8005ede:	600a      	str	r2, [r1, #0]
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8005ee0:	6808      	ldr	r0, [r1, #0]
 8005ee2:	f000 000f 	and.w	r0, r0, #15
  return status;
 8005ee6:	1ac0      	subs	r0, r0, r3
 8005ee8:	bf18      	it	ne
 8005eea:	2001      	movne	r0, #1
}
 8005eec:	4770      	bx	lr
        latency = LL_FLASH_LATENCY_3;
 8005eee:	2303      	movs	r3, #3
 8005ef0:	e7d3      	b.n	8005e9a <UTILS_SetFlashLatency.part.0+0x36>
        if((HCLK_Frequency > UTILS_SCALE1_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005ef2:	4b1b      	ldr	r3, [pc, #108]	; (8005f60 <UTILS_SetFlashLatency.part.0+0xfc>)
 8005ef4:	4298      	cmp	r0, r3
 8005ef6:	bf94      	ite	ls
 8005ef8:	2300      	movls	r3, #0
 8005efa:	2301      	movhi	r3, #1
 8005efc:	e7cd      	b.n	8005e9a <UTILS_SetFlashLatency.part.0+0x36>
  uint32_t latency = LL_FLASH_LATENCY_0;  /* default value 0WS */
 8005efe:	2300      	movs	r3, #0
 8005f00:	e7cb      	b.n	8005e9a <UTILS_SetFlashLatency.part.0+0x36>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f02:	4a18      	ldr	r2, [pc, #96]	; (8005f64 <UTILS_SetFlashLatency.part.0+0x100>)
 8005f04:	4290      	cmp	r0, r2
 8005f06:	d905      	bls.n	8005f14 <UTILS_SetFlashLatency.part.0+0xb0>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f08:	4a12      	ldr	r2, [pc, #72]	; (8005f54 <UTILS_SetFlashLatency.part.0+0xf0>)
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY4_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f0a:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_4;
 8005f0c:	bf08      	it	eq
 8005f0e:	2304      	moveq	r3, #4
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY3_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f10:	4290      	cmp	r0, r2
 8005f12:	d8d2      	bhi.n	8005eba <UTILS_SetFlashLatency.part.0+0x56>
      if((HCLK_Frequency > UTILS_SCALE2_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f14:	4a10      	ldr	r2, [pc, #64]	; (8005f58 <UTILS_SetFlashLatency.part.0+0xf4>)
 8005f16:	4290      	cmp	r0, r2
 8005f18:	d903      	bls.n	8005f22 <UTILS_SetFlashLatency.part.0+0xbe>
 8005f1a:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_2;
 8005f1c:	bf08      	it	eq
 8005f1e:	2302      	moveq	r3, #2
 8005f20:	e7cb      	b.n	8005eba <UTILS_SetFlashLatency.part.0+0x56>
        if((HCLK_Frequency > UTILS_SCALE2_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f22:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <UTILS_SetFlashLatency.part.0+0xfc>)
 8005f24:	4290      	cmp	r0, r2
 8005f26:	d9c8      	bls.n	8005eba <UTILS_SetFlashLatency.part.0+0x56>
 8005f28:	2b00      	cmp	r3, #0
          latency = LL_FLASH_LATENCY_1;
 8005f2a:	bf08      	it	eq
 8005f2c:	2301      	moveq	r3, #1
 8005f2e:	e7c4      	b.n	8005eba <UTILS_SetFlashLatency.part.0+0x56>
      if((HCLK_Frequency > UTILS_SCALE3_LATENCY2_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f30:	4a09      	ldr	r2, [pc, #36]	; (8005f58 <UTILS_SetFlashLatency.part.0+0xf4>)
 8005f32:	4290      	cmp	r0, r2
 8005f34:	d903      	bls.n	8005f3e <UTILS_SetFlashLatency.part.0+0xda>
 8005f36:	2b00      	cmp	r3, #0
        latency = LL_FLASH_LATENCY_2;
 8005f38:	bf08      	it	eq
 8005f3a:	2302      	moveq	r3, #2
 8005f3c:	e7ca      	b.n	8005ed4 <UTILS_SetFlashLatency.part.0+0x70>
        if((HCLK_Frequency > UTILS_SCALE3_LATENCY1_FREQ)&&(latency == LL_FLASH_LATENCY_0))
 8005f3e:	4a08      	ldr	r2, [pc, #32]	; (8005f60 <UTILS_SetFlashLatency.part.0+0xfc>)
 8005f40:	4290      	cmp	r0, r2
 8005f42:	d9c7      	bls.n	8005ed4 <UTILS_SetFlashLatency.part.0+0x70>
 8005f44:	2b00      	cmp	r3, #0
          latency = LL_FLASH_LATENCY_1;
 8005f46:	bf08      	it	eq
 8005f48:	2301      	moveq	r3, #1
 8005f4a:	e7c3      	b.n	8005ed4 <UTILS_SetFlashLatency.part.0+0x70>
 8005f4c:	40007000 	.word	0x40007000
 8005f50:	07270e00 	.word	0x07270e00
 8005f54:	055d4a80 	.word	0x055d4a80
 8005f58:	03938700 	.word	0x03938700
 8005f5c:	40023c00 	.word	0x40023c00
 8005f60:	01c9c380 	.word	0x01c9c380
 8005f64:	00b71b00 	.word	0x00b71b00

08005f68 <UTILS_EnablePLLAndSwitchSystem>:
  assert_param(IS_LL_UTILS_SYSCLK_DIV(UTILS_ClkInitStruct->AHBCLKDivider));
  assert_param(IS_LL_UTILS_APB1_DIV(UTILS_ClkInitStruct->APB1CLKDivider));
  assert_param(IS_LL_UTILS_APB2_DIV(UTILS_ClkInitStruct->APB2CLKDivider));

  /* Calculate HCLK frequency */
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005f68:	680b      	ldr	r3, [r1, #0]
 8005f6a:	4a24      	ldr	r2, [pc, #144]	; (8005ffc <UTILS_EnablePLLAndSwitchSystem+0x94>)
 8005f6c:	f3c3 1303 	ubfx	r3, r3, #4, #4
{
 8005f70:	b570      	push	{r4, r5, r6, lr}

  /* Increasing the number of wait states because of higher CPU frequency */
  if(SystemCoreClock < hclk_frequency)
 8005f72:	4d23      	ldr	r5, [pc, #140]	; (8006000 <UTILS_EnablePLLAndSwitchSystem+0x98>)
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005f74:	5cd4      	ldrb	r4, [r2, r3]
  if(SystemCoreClock < hclk_frequency)
 8005f76:	682b      	ldr	r3, [r5, #0]
  hclk_frequency = __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, UTILS_ClkInitStruct->AHBCLKDivider);
 8005f78:	fa20 f404 	lsr.w	r4, r0, r4
  if(SystemCoreClock < hclk_frequency)
 8005f7c:	42a3      	cmp	r3, r4
{
 8005f7e:	460e      	mov	r6, r1
  if(SystemCoreClock < hclk_frequency)
 8005f80:	d327      	bcc.n	8005fd2 <UTILS_EnablePLLAndSwitchSystem+0x6a>
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005f82:	4b20      	ldr	r3, [pc, #128]	; (8006004 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8005f8a:	601a      	str	r2, [r3, #0]
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8005f8c:	681a      	ldr	r2, [r3, #0]
  /* Update system clock configuration */
  if(status == SUCCESS)
  {
    /* Enable PLL */
    LL_RCC_PLL_Enable();
    while (LL_RCC_PLL_IsReady() != 1U)
 8005f8e:	0192      	lsls	r2, r2, #6
 8005f90:	d5fc      	bpl.n	8005f8c <UTILS_EnablePLLAndSwitchSystem+0x24>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	6831      	ldr	r1, [r6, #0]
 8005f96:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f9e:	689a      	ldr	r2, [r3, #8]
 8005fa0:	f022 0203 	bic.w	r2, r2, #3
 8005fa4:	f042 0202 	orr.w	r2, r2, #2
 8005fa8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005faa:	4b16      	ldr	r3, [pc, #88]	; (8006004 <UTILS_EnablePLLAndSwitchSystem+0x9c>)
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	f002 020c 	and.w	r2, r2, #12
    }

    /* Sysclk activation on the main PLL */
    LL_RCC_SetAHBPrescaler(UTILS_ClkInitStruct->AHBCLKDivider);
    LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
    while (LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8005fb2:	2a08      	cmp	r2, #8
 8005fb4:	d1fa      	bne.n	8005fac <UTILS_EnablePLLAndSwitchSystem+0x44>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	6871      	ldr	r1, [r6, #4]
 8005fba:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005fc2:	689a      	ldr	r2, [r3, #8]
 8005fc4:	68b1      	ldr	r1, [r6, #8]
 8005fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005fca:	430a      	orrs	r2, r1
 8005fcc:	609a      	str	r2, [r3, #8]
 8005fce:	2000      	movs	r0, #0
 8005fd0:	e005      	b.n	8005fde <UTILS_EnablePLLAndSwitchSystem+0x76>
  if(HCLK_Frequency == 0U)
 8005fd2:	b174      	cbz	r4, 8005ff2 <UTILS_EnablePLLAndSwitchSystem+0x8a>
 8005fd4:	4620      	mov	r0, r4
 8005fd6:	f7ff ff45 	bl	8005e64 <UTILS_SetFlashLatency.part.0>
  if(status == SUCCESS)
 8005fda:	2800      	cmp	r0, #0
 8005fdc:	d0d1      	beq.n	8005f82 <UTILS_EnablePLLAndSwitchSystem+0x1a>
    LL_RCC_SetAPB1Prescaler(UTILS_ClkInitStruct->APB1CLKDivider);
    LL_RCC_SetAPB2Prescaler(UTILS_ClkInitStruct->APB2CLKDivider);
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(SystemCoreClock > hclk_frequency)
 8005fde:	682b      	ldr	r3, [r5, #0]
 8005fe0:	42a3      	cmp	r3, r4
 8005fe2:	d903      	bls.n	8005fec <UTILS_EnablePLLAndSwitchSystem+0x84>
  if(HCLK_Frequency == 0U)
 8005fe4:	b13c      	cbz	r4, 8005ff6 <UTILS_EnablePLLAndSwitchSystem+0x8e>
 8005fe6:	4620      	mov	r0, r4
 8005fe8:	f7ff ff3c 	bl	8005e64 <UTILS_SetFlashLatency.part.0>
    /* Set FLASH latency to lowest latency */
    status = UTILS_SetFlashLatency(hclk_frequency);
  }

  /* Update SystemCoreClock variable */
  if(status == SUCCESS)
 8005fec:	b900      	cbnz	r0, 8005ff0 <UTILS_EnablePLLAndSwitchSystem+0x88>
  SystemCoreClock = HCLKFrequency;
 8005fee:	602c      	str	r4, [r5, #0]
  {
    LL_SetSystemCoreClock(hclk_frequency);
  }

  return status;
}
 8005ff0:	bd70      	pop	{r4, r5, r6, pc}
    status = ERROR;
 8005ff2:	2001      	movs	r0, #1
 8005ff4:	e7f3      	b.n	8005fde <UTILS_EnablePLLAndSwitchSystem+0x76>
 8005ff6:	2001      	movs	r0, #1
 8005ff8:	e7fa      	b.n	8005ff0 <UTILS_EnablePLLAndSwitchSystem+0x88>
 8005ffa:	bf00      	nop
 8005ffc:	08007f94 	.word	0x08007f94
 8006000:	20001480 	.word	0x20001480
 8006004:	40023800 	.word	0x40023800

08006008 <LL_PLL_ConfigSystemClock_HSE>:
{
 8006008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800600a:	4605      	mov	r5, r0
 800600c:	460f      	mov	r7, r1
 800600e:	4614      	mov	r4, r2
 8006010:	461e      	mov	r6, r3
  if(UTILS_PLL_IsBusy() == SUCCESS)
 8006012:	f7ff ff13 	bl	8005e3c <UTILS_PLL_IsBusy>
 8006016:	bb60      	cbnz	r0, 8006072 <LL_PLL_ConfigSystemClock_HSE+0x6a>
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 8006018:	6821      	ldr	r1, [r4, #0]
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 800601a:	6862      	ldr	r2, [r4, #4]
  pllfreq = PLL_InputFrequency / (UTILS_PLLInitStruct->PLLM & (RCC_PLLCFGR_PLLM >> RCC_PLLCFGR_PLLM_Pos));
 800601c:	f001 033f 	and.w	r3, r1, #63	; 0x3f
 8006020:	fbb5 f5f3 	udiv	r5, r5, r3
  pllfreq = pllfreq * (UTILS_PLLInitStruct->PLLN & (RCC_PLLCFGR_PLLN >> RCC_PLLCFGR_PLLN_Pos));
 8006024:	f3c2 0308 	ubfx	r3, r2, #0, #9
 8006028:	435d      	muls	r5, r3
  pllfreq = pllfreq / (((UTILS_PLLInitStruct->PLLP >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800602a:	68a3      	ldr	r3, [r4, #8]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 800602c:	4c12      	ldr	r4, [pc, #72]	; (8006078 <LL_PLL_ConfigSystemClock_HSE+0x70>)
 800602e:	0c18      	lsrs	r0, r3, #16
 8006030:	3001      	adds	r0, #1
 8006032:	0040      	lsls	r0, r0, #1
 8006034:	fbb5 f5f0 	udiv	r5, r5, r0
 8006038:	6820      	ldr	r0, [r4, #0]
    if(LL_RCC_HSE_IsReady() != 1U)
 800603a:	0380      	lsls	r0, r0, #14
 800603c:	d40f      	bmi.n	800605e <LL_PLL_ConfigSystemClock_HSE+0x56>
  SET_BIT(RCC->CR, RCC_CR_HSEBYP);
 800603e:	6820      	ldr	r0, [r4, #0]
      if(HSEBypass == LL_UTILS_HSEBYPASS_ON)
 8006040:	2f01      	cmp	r7, #1
 8006042:	bf0c      	ite	eq
 8006044:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 8006048:	f420 2080 	bicne.w	r0, r0, #262144	; 0x40000
 800604c:	6020      	str	r0, [r4, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800604e:	6820      	ldr	r0, [r4, #0]
 8006050:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8006054:	6020      	str	r0, [r4, #0]
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 8006056:	4c08      	ldr	r4, [pc, #32]	; (8006078 <LL_PLL_ConfigSystemClock_HSE+0x70>)
 8006058:	6820      	ldr	r0, [r4, #0]
      while (LL_RCC_HSE_IsReady() != 1U)
 800605a:	0380      	lsls	r0, r0, #14
 800605c:	d5fc      	bpl.n	8006058 <LL_PLL_ConfigSystemClock_HSE+0x50>
    LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, UTILS_PLLInitStruct->PLLM, UTILS_PLLInitStruct->PLLN,
 800605e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8006062:	f7ff fed1 	bl	8005e08 <LL_RCC_PLL_ConfigDomain_SYS>
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 8006066:	4631      	mov	r1, r6
 8006068:	4628      	mov	r0, r5
}
 800606a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    status = UTILS_EnablePLLAndSwitchSystem(pllfreq, UTILS_ClkInitStruct);
 800606e:	f7ff bf7b 	b.w	8005f68 <UTILS_EnablePLLAndSwitchSystem>
}
 8006072:	2001      	movs	r0, #1
 8006074:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006076:	bf00      	nop
 8006078:	40023800 	.word	0x40023800

0800607c <z_sys_device_do_config_level>:
		__device_APPLICATION_start,
		/* End marker */
		__device_init_end,
	};

	for (info = config_levels[level]; info < config_levels[level+1];
 800607c:	4b09      	ldr	r3, [pc, #36]	; (80060a4 <z_sys_device_do_config_level+0x28>)
{
 800607e:	b570      	push	{r4, r5, r6, lr}
	for (info = config_levels[level]; info < config_levels[level+1];
 8006080:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 8006084:	3001      	adds	r0, #1
		retval = device_conf->init(info);
		if (retval != 0) {
			/* Initialization failed. Clear the API struct so that
			 * device_get_binding() will not succeed for it.
			 */
			info->driver_api = NULL;
 8006086:	2600      	movs	r6, #0
	for (info = config_levels[level]; info < config_levels[level+1];
 8006088:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
 800608c:	42a5      	cmp	r5, r4
 800608e:	d800      	bhi.n	8006092 <z_sys_device_do_config_level+0x16>
		} else {
			z_object_init(info);
		}
	}
}
 8006090:	bd70      	pop	{r4, r5, r6, pc}
		retval = device_conf->init(info);
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	4620      	mov	r0, r4
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	4798      	blx	r3
		if (retval != 0) {
 800609a:	b100      	cbz	r0, 800609e <z_sys_device_do_config_level+0x22>
			info->driver_api = NULL;
 800609c:	6066      	str	r6, [r4, #4]
								info++) {
 800609e:	340c      	adds	r4, #12
 80060a0:	e7f4      	b.n	800608c <z_sys_device_do_config_level+0x10>
 80060a2:	bf00      	nop
 80060a4:	08007eec 	.word	0x08007eec

080060a8 <z_impl_device_get_binding>:
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed.  Reserve string comparisons for a fallback.
	 */
	for (info = __device_init_start; info != __device_init_end; info++) {
 80060a8:	4b10      	ldr	r3, [pc, #64]	; (80060ec <z_impl_device_get_binding+0x44>)
{
 80060aa:	b570      	push	{r4, r5, r6, lr}
	for (info = __device_init_start; info != __device_init_end; info++) {
 80060ac:	4c10      	ldr	r4, [pc, #64]	; (80060f0 <z_impl_device_get_binding+0x48>)
{
 80060ae:	4605      	mov	r5, r0
 80060b0:	461e      	mov	r6, r3
	for (info = __device_init_start; info != __device_init_end; info++) {
 80060b2:	429c      	cmp	r4, r3
 80060b4:	d104      	bne.n	80060c0 <z_impl_device_get_binding+0x18>
		    (info->config->name == name)) {
			return info;
		}
	}

	for (info = __device_init_start; info != __device_init_end; info++) {
 80060b6:	4c0e      	ldr	r4, [pc, #56]	; (80060f0 <z_impl_device_get_binding+0x48>)
 80060b8:	42b4      	cmp	r4, r6
 80060ba:	d109      	bne.n	80060d0 <z_impl_device_get_binding+0x28>
		if (strcmp(name, info->config->name) == 0) {
			return info;
		}
	}

	return NULL;
 80060bc:	2400      	movs	r4, #0
 80060be:	e012      	b.n	80060e6 <z_impl_device_get_binding+0x3e>
		if ((info->driver_api != NULL) &&
 80060c0:	6862      	ldr	r2, [r4, #4]
 80060c2:	b11a      	cbz	r2, 80060cc <z_impl_device_get_binding+0x24>
		    (info->config->name == name)) {
 80060c4:	6822      	ldr	r2, [r4, #0]
		if ((info->driver_api != NULL) &&
 80060c6:	6812      	ldr	r2, [r2, #0]
 80060c8:	42aa      	cmp	r2, r5
 80060ca:	d00c      	beq.n	80060e6 <z_impl_device_get_binding+0x3e>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80060cc:	340c      	adds	r4, #12
 80060ce:	e7f0      	b.n	80060b2 <z_impl_device_get_binding+0xa>
		if (info->driver_api == NULL) {
 80060d0:	6863      	ldr	r3, [r4, #4]
 80060d2:	b90b      	cbnz	r3, 80060d8 <z_impl_device_get_binding+0x30>
	for (info = __device_init_start; info != __device_init_end; info++) {
 80060d4:	340c      	adds	r4, #12
 80060d6:	e7ef      	b.n	80060b8 <z_impl_device_get_binding+0x10>
		if (strcmp(name, info->config->name) == 0) {
 80060d8:	6823      	ldr	r3, [r4, #0]
 80060da:	4628      	mov	r0, r5
 80060dc:	6819      	ldr	r1, [r3, #0]
 80060de:	f7fe fae6 	bl	80046ae <strcmp>
 80060e2:	2800      	cmp	r0, #0
 80060e4:	d1f6      	bne.n	80060d4 <z_impl_device_get_binding+0x2c>
}
 80060e6:	4620      	mov	r0, r4
 80060e8:	bd70      	pop	{r4, r5, r6, pc}
 80060ea:	bf00      	nop
 80060ec:	20001534 	.word	0x20001534
 80060f0:	2000148c 	.word	0x2000148c

080060f4 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
 80060f4:	4802      	ldr	r0, [pc, #8]	; (8006100 <z_bss_zero+0xc>)

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
__ssp_bos_icheck3(memmove, void *, const void *)
__ssp_bos_icheck3_restrict(mempcpy, void *, const void *)
__ssp_bos_icheck3(memset, void *, int)
 80060f6:	4a03      	ldr	r2, [pc, #12]	; (8006104 <z_bss_zero+0x10>)
 80060f8:	2100      	movs	r1, #0
 80060fa:	1a12      	subs	r2, r2, r0
 80060fc:	f7fe bacf 	b.w	800469e <memset>
 8006100:	20000000 	.word	0x20000000
 8006104:	20000300 	.word	0x20000300

08006108 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
 8006108:	b508      	push	{r3, lr}
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
 800610a:	4806      	ldr	r0, [pc, #24]	; (8006124 <z_data_copy+0x1c>)
 800610c:	4a06      	ldr	r2, [pc, #24]	; (8006128 <z_data_copy+0x20>)
 800610e:	4907      	ldr	r1, [pc, #28]	; (800612c <z_data_copy+0x24>)
 8006110:	1a12      	subs	r2, r2, r0
 8006112:	f7fe fab6 	bl	8004682 <memcpy>
 8006116:	4a06      	ldr	r2, [pc, #24]	; (8006130 <z_data_copy+0x28>)
 8006118:	4906      	ldr	r1, [pc, #24]	; (8006134 <z_data_copy+0x2c>)
 800611a:	4807      	ldr	r0, [pc, #28]	; (8006138 <z_data_copy+0x30>)
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
 800611c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006120:	f7fe baaf 	b.w	8004682 <memcpy>
 8006124:	20001040 	.word	0x20001040
 8006128:	20001558 	.word	0x20001558
 800612c:	08008048 	.word	0x08008048
 8006130:	00000000 	.word	0x00000000
 8006134:	08008048 	.word	0x08008048
 8006138:	20000000 	.word	0x20000000

0800613c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
 800613c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
 800613e:	2002      	movs	r0, #2
 8006140:	f7ff ff9c 	bl	800607c <z_sys_device_do_config_level>
	if (boot_delay > 0 && IS_ENABLED(CONFIG_MULTITHREADING)) {
		printk("***** delaying boot " STRINGIFY(CONFIG_BOOT_DELAY)
		       "ms (per build configuration) *****\n");
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}
	PRINT_BOOT_BANNER();
 8006144:	4807      	ldr	r0, [pc, #28]	; (8006164 <bg_thread_main+0x28>)
 8006146:	f000 fdff 	bl	8006d48 <printk>

	/* Final init level before app starts */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
 800614a:	2003      	movs	r0, #3
 800614c:	f7ff ff96 	bl	800607c <z_sys_device_do_config_level>
	extern void __do_init_array_aux(void);
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	z_init_static_threads();
 8006150:	f000 fafc 	bl	800674c <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
 8006154:	f7fe fc28 	bl	80049a8 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
 8006158:	4a03      	ldr	r2, [pc, #12]	; (8006168 <bg_thread_main+0x2c>)
 800615a:	7b13      	ldrb	r3, [r2, #12]
 800615c:	f023 0301 	bic.w	r3, r3, #1
 8006160:	7313      	strb	r3, [r2, #12]

	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
 8006162:	bd08      	pop	{r3, pc}
 8006164:	08007fa4 	.word	0x08007fa4
 8006168:	20000208 	.word	0x20000208

0800616c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
 800616c:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	u32_t msp = (u32_t)(Z_THREAD_STACK_BUFFER(_interrupt_stack)) +
 800616e:	4b36      	ldr	r3, [pc, #216]	; (8006248 <z_cstart+0xdc>)
 8006170:	b0b2      	sub	sp, #200	; 0xc8
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8006172:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
 8006176:	4c35      	ldr	r4, [pc, #212]	; (800624c <z_cstart+0xe0>)
	_kernel.ready_q.cache = &z_main_thread;
 8006178:	4e35      	ldr	r6, [pc, #212]	; (8006250 <z_cstart+0xe4>)
 800617a:	6963      	ldr	r3, [r4, #20]
 800617c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006180:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006182:	2500      	movs	r5, #0
 8006184:	23f0      	movs	r3, #240	; 0xf0
 8006186:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 800618a:	77e5      	strb	r5, [r4, #31]
 800618c:	7625      	strb	r5, [r4, #24]
 800618e:	7665      	strb	r5, [r4, #25]
 8006190:	76a5      	strb	r5, [r4, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
 8006192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006194:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8006198:	6263      	str	r3, [r4, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
 800619a:	f7ff f979 	bl	8005490 <z_arm_fault_init>
	z_arm_cpu_idle_init();
 800619e:	f7ff f84b 	bl	8005238 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
 80061a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061a6:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
 80061a8:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* perform any architecture-specific initialization */
	arch_kernel_init();

#ifdef CONFIG_MULTITHREADING
	struct k_thread dummy_thread = {
 80061aa:	ab06      	add	r3, sp, #24
 80061ac:	22b0      	movs	r2, #176	; 0xb0
 80061ae:	4629      	mov	r1, r5
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe fa74 	bl	800469e <memset>
# ifdef CONFIG_SCHED_CPU_MASK
		 .base.cpu_mask = -1,
# endif
	};

	_current = &dummy_thread;
 80061b6:	4c27      	ldr	r4, [pc, #156]	; (8006254 <z_cstart+0xe8>)
	struct k_thread dummy_thread = {
 80061b8:	2701      	movs	r7, #1
	_current = &dummy_thread;
 80061ba:	60a0      	str	r0, [r4, #8]
#ifdef CONFIG_USERSPACE
	z_app_shmem_bss_zero();
#endif

	/* perform basic hardware initialization */
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80061bc:	4628      	mov	r0, r5
	struct k_thread dummy_thread = {
 80061be:	f88d 7025 	strb.w	r7, [sp, #37]	; 0x25
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
 80061c2:	f7ff ff5b 	bl	800607c <z_sys_device_do_config_level>
	z_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
 80061c6:	4638      	mov	r0, r7
 80061c8:	f7ff ff58 	bl	800607c <z_sys_device_do_config_level>
	z_sched_init();
 80061cc:	f000 fa24 	bl	8006618 <z_sched_init>
	z_setup_new_thread(&z_main_thread, z_main_stack,
 80061d0:	4b21      	ldr	r3, [pc, #132]	; (8006258 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
 80061d2:	6226      	str	r6, [r4, #32]
	z_setup_new_thread(&z_main_thread, z_main_stack,
 80061d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061d8:	e9cd 7304 	strd	r7, r3, [sp, #16]
 80061dc:	e9cd 5502 	strd	r5, r5, [sp, #8]
 80061e0:	4b1e      	ldr	r3, [pc, #120]	; (800625c <z_cstart+0xf0>)
 80061e2:	491f      	ldr	r1, [pc, #124]	; (8006260 <z_cstart+0xf4>)
 80061e4:	e9cd 5500 	strd	r5, r5, [sp]
 80061e8:	4630      	mov	r0, r6
 80061ea:	f000 fa97 	bl	800671c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80061ee:	7b73      	ldrb	r3, [r6, #13]
 80061f0:	f023 0204 	bic.w	r2, r3, #4
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80061f4:	f013 0f1b 	tst.w	r3, #27
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80061f8:	7372      	strb	r2, [r6, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80061fa:	d104      	bne.n	8006206 <z_cstart+0x9a>
	return true;
}

static ALWAYS_INLINE void z_ready_thread(struct k_thread *thread)
{
	if (z_is_thread_ready(thread)) {
 80061fc:	69b3      	ldr	r3, [r6, #24]
 80061fe:	b913      	cbnz	r3, 8006206 <z_cstart+0x9a>
		z_add_thread_to_ready_q(thread);
 8006200:	4630      	mov	r0, r6
 8006202:	f000 f8e7 	bl	80063d4 <z_add_thread_to_ready_q>
	z_setup_new_thread(thr, stack,
 8006206:	4b17      	ldr	r3, [pc, #92]	; (8006264 <z_cstart+0xf8>)
 8006208:	4d17      	ldr	r5, [pc, #92]	; (8006268 <z_cstart+0xfc>)
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	2201      	movs	r2, #1
 800620e:	230f      	movs	r3, #15
 8006210:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8006214:	2300      	movs	r3, #0
 8006216:	e9cd 3301 	strd	r3, r3, [sp, #4]
 800621a:	9300      	str	r3, [sp, #0]
 800621c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006220:	4b12      	ldr	r3, [pc, #72]	; (800626c <z_cstart+0x100>)
 8006222:	4913      	ldr	r1, [pc, #76]	; (8006270 <z_cstart+0x104>)
 8006224:	4628      	mov	r0, r5
 8006226:	f000 fa79 	bl	800671c <z_setup_new_thread>
	thread->base.thread_state &= ~_THREAD_PRESTART;
 800622a:	7b6b      	ldrb	r3, [r5, #13]
	_kernel.cpus[0].idle_thread = &z_idle_thread;
 800622c:	60e5      	str	r5, [r4, #12]
 800622e:	f023 0304 	bic.w	r3, r3, #4
 8006232:	736b      	strb	r3, [r5, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
 8006234:	4b0f      	ldr	r3, [pc, #60]	; (8006274 <z_cstart+0x108>)
	arch_switch_to_main_thread(&z_main_thread, z_main_stack,
 8006236:	490a      	ldr	r1, [pc, #40]	; (8006260 <z_cstart+0xf4>)
 8006238:	4805      	ldr	r0, [pc, #20]	; (8006250 <z_cstart+0xe4>)
	list->tail = (sys_dnode_t *)list;
 800623a:	e9c4 3306 	strd	r3, r3, [r4, #24]
 800623e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006242:	4b06      	ldr	r3, [pc, #24]	; (800625c <z_cstart+0xf0>)
 8006244:	f7fe ffce 	bl	80051e4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
 8006248:	20001040 	.word	0x20001040
 800624c:	e000ed00 	.word	0xe000ed00
 8006250:	20000208 	.word	0x20000208
 8006254:	200002b8 	.word	0x200002b8
 8006258:	08007fe6 	.word	0x08007fe6
 800625c:	0800613d 	.word	0x0800613d
 8006260:	20000300 	.word	0x20000300
 8006264:	08007feb 	.word	0x08007feb
 8006268:	20000158 	.word	0x20000158
 800626c:	08007605 	.word	0x08007605
 8006270:	20000700 	.word	0x20000700
 8006274:	200002d0 	.word	0x200002d0

08006278 <init_static_pools>:
	z_waitq_init(&p->wait_q);
	z_sys_mem_pool_base_init(&p->base);
}

int init_static_pools(struct device *unused)
{
 8006278:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);

	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 800627a:	4c07      	ldr	r4, [pc, #28]	; (8006298 <init_static_pools+0x20>)
 800627c:	4d07      	ldr	r5, [pc, #28]	; (800629c <init_static_pools+0x24>)
 800627e:	42ac      	cmp	r4, r5
 8006280:	d301      	bcc.n	8006286 <init_static_pools+0xe>
		k_mem_pool_init(p);
	}

	return 0;
}
 8006282:	2000      	movs	r0, #0
 8006284:	bd38      	pop	{r3, r4, r5, pc}
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
 8006286:	f104 0314 	add.w	r3, r4, #20
	z_sys_mem_pool_base_init(&p->base);
 800628a:	4620      	mov	r0, r4
 800628c:	e9c4 3305 	strd	r3, r3, [r4, #20]
 8006290:	f000 fb76 	bl	8006980 <z_sys_mem_pool_base_init>
	Z_STRUCT_SECTION_FOREACH(k_mem_pool, p) {
 8006294:	341c      	adds	r4, #28
 8006296:	e7f2      	b.n	800627e <init_static_pools+0x6>
 8006298:	20001534 	.word	0x20001534
 800629c:	20001534 	.word	0x20001534

080062a0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
 80062a0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
 80062a2:	4c08      	ldr	r4, [pc, #32]	; (80062c4 <z_reset_time_slice+0x24>)
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	b15b      	cbz	r3, 80062c0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
 80062a8:	f7fe fea2 	bl	8004ff0 <z_clock_elapsed>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	4a06      	ldr	r2, [pc, #24]	; (80062c8 <z_reset_time_slice+0x28>)
 80062b0:	4418      	add	r0, r3
 80062b2:	6110      	str	r0, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
 80062b4:	2100      	movs	r1, #0
 80062b6:	4618      	mov	r0, r3
	}
}
 80062b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_set_timeout_expiry(slice_time, false);
 80062bc:	f001 b988 	b.w	80075d0 <z_set_timeout_expiry>
}
 80062c0:	bd10      	pop	{r4, pc}
 80062c2:	bf00      	nop
 80062c4:	200002f0 	.word	0x200002f0
 80062c8:	200002b8 	.word	0x200002b8

080062cc <k_sched_time_slice_set>:

void k_sched_time_slice_set(s32_t slice, int prio)
{
 80062cc:	b510      	push	{r4, lr}
 80062ce:	f04f 0310 	mov.w	r3, #16
 80062d2:	f3ef 8411 	mrs	r4, BASEPRI
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
 80062de:	4b08      	ldr	r3, [pc, #32]	; (8006300 <k_sched_time_slice_set+0x34>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	611a      	str	r2, [r3, #16]
		slice_time = k_ms_to_ticks_ceil32(slice);
 80062e4:	4a07      	ldr	r2, [pc, #28]	; (8006304 <k_sched_time_slice_set+0x38>)
		} else {
			return t / (from_hz / to_hz);
		}
	} else if (mul_ratio) {
		if (result32) {
			return ((u32_t)t) * (to_hz / from_hz);
 80062e6:	230a      	movs	r3, #10
 80062e8:	4343      	muls	r3, r0
 80062ea:	6013      	str	r3, [r2, #0]
		slice_max_prio = prio;
 80062ec:	4b06      	ldr	r3, [pc, #24]	; (8006308 <k_sched_time_slice_set+0x3c>)
 80062ee:	6019      	str	r1, [r3, #0]
		z_reset_time_slice();
 80062f0:	f7ff ffd6 	bl	80062a0 <z_reset_time_slice>
	__asm__ volatile(
 80062f4:	f384 8811 	msr	BASEPRI, r4
 80062f8:	f3bf 8f6f 	isb	sy
	}
}
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	bf00      	nop
 8006300:	200002b8 	.word	0x200002b8
 8006304:	200002f0 	.word	0x200002f0
 8006308:	200002ec 	.word	0x200002ec

0800630c <k_sched_lock>:
	__asm__ volatile(
 800630c:	f04f 0310 	mov.w	r3, #16
 8006310:	f3ef 8111 	mrs	r1, BASEPRI
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
 800631c:	4b04      	ldr	r3, [pc, #16]	; (8006330 <k_sched_lock+0x24>)
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	7bd3      	ldrb	r3, [r2, #15]
 8006322:	3b01      	subs	r3, #1
 8006324:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
 8006326:	f381 8811 	msr	BASEPRI, r1
 800632a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
 800632e:	4770      	bx	lr
 8006330:	200002b8 	.word	0x200002b8

08006334 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
 8006334:	4b09      	ldr	r3, [pc, #36]	; (800635c <z_priq_dumb_remove+0x28>)
 8006336:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800633a:	4282      	cmp	r2, r0
 800633c:	d105      	bne.n	800634a <z_priq_dumb_remove+0x16>
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	428b      	cmp	r3, r1
 8006342:	d102      	bne.n	800634a <z_priq_dumb_remove+0x16>
 8006344:	7b4b      	ldrb	r3, [r1, #13]
 8006346:	06db      	lsls	r3, r3, #27
 8006348:	d106      	bne.n	8006358 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
 800634a:	e9d1 3200 	ldrd	r3, r2, [r1]
 800634e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 8006350:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 8006352:	2300      	movs	r3, #0
	node->prev = NULL;
 8006354:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	200002b8 	.word	0x200002b8

08006360 <update_cache>:
{
 8006360:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8006362:	4c0d      	ldr	r4, [pc, #52]	; (8006398 <update_cache+0x38>)
{
 8006364:	4602      	mov	r2, r0
	struct k_thread *th = _priq_run_best(&_kernel.ready_q.runq);
 8006366:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800636a:	f001 f870 	bl	800744e <z_priq_dumb_best>
	return th ? th : _current_cpu->idle_thread;
 800636e:	4605      	mov	r5, r0
 8006370:	b900      	cbnz	r0, 8006374 <update_cache+0x14>
 8006372:	68e5      	ldr	r5, [r4, #12]
	if (preempt_ok != 0) {
 8006374:	68a3      	ldr	r3, [r4, #8]
 8006376:	b94a      	cbnz	r2, 800638c <update_cache+0x2c>
	if (z_is_thread_prevented_from_running(_current)) {
 8006378:	7b5a      	ldrb	r2, [r3, #13]
 800637a:	06d2      	lsls	r2, r2, #27
 800637c:	d106      	bne.n	800638c <update_cache+0x2c>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
 800637e:	69aa      	ldr	r2, [r5, #24]
 8006380:	b922      	cbnz	r2, 800638c <update_cache+0x2c>
	if (is_preempt(_current) || is_metairq(th)) {
 8006382:	89da      	ldrh	r2, [r3, #14]
 8006384:	2a7f      	cmp	r2, #127	; 0x7f
 8006386:	d901      	bls.n	800638c <update_cache+0x2c>
		_kernel.ready_q.cache = _current;
 8006388:	6223      	str	r3, [r4, #32]
}
 800638a:	bd38      	pop	{r3, r4, r5, pc}
		if (th != _current) {
 800638c:	429d      	cmp	r5, r3
 800638e:	d001      	beq.n	8006394 <update_cache+0x34>
			z_reset_time_slice();
 8006390:	f7ff ff86 	bl	80062a0 <z_reset_time_slice>
		_kernel.ready_q.cache = th;
 8006394:	6225      	str	r5, [r4, #32]
}
 8006396:	e7f8      	b.n	800638a <update_cache+0x2a>
 8006398:	200002b8 	.word	0x200002b8

0800639c <k_sched_unlock>:
{
 800639c:	b510      	push	{r4, lr}
	__asm__ volatile(
 800639e:	f04f 0310 	mov.w	r3, #16
 80063a2:	f3ef 8411 	mrs	r4, BASEPRI
 80063a6:	f383 8811 	msr	BASEPRI, r3
 80063aa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
 80063ae:	4b08      	ldr	r3, [pc, #32]	; (80063d0 <k_sched_unlock+0x34>)
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	7bd3      	ldrb	r3, [r2, #15]
 80063b4:	3301      	adds	r3, #1
 80063b6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
 80063b8:	2000      	movs	r0, #0
 80063ba:	f7ff ffd1 	bl	8006360 <update_cache>
	__asm__ volatile(
 80063be:	f384 8811 	msr	BASEPRI, r4
 80063c2:	f3bf 8f6f 	isb	sy
}
 80063c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
 80063ca:	f001 b836 	b.w	800743a <z_reschedule_unlocked>
 80063ce:	bf00      	nop
 80063d0:	200002b8 	.word	0x200002b8

080063d4 <z_add_thread_to_ready_q>:
{
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
 80063d6:	f04f 0310 	mov.w	r3, #16
 80063da:	f3ef 8411 	mrs	r4, BASEPRI
 80063de:	f383 8811 	msr	BASEPRI, r3
 80063e2:	f3bf 8f6f 	isb	sy
	return list->head == list;
 80063e6:	4a15      	ldr	r2, [pc, #84]	; (800643c <z_add_thread_to_ready_q+0x68>)
 80063e8:	4611      	mov	r1, r2
 80063ea:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80063ee:	428b      	cmp	r3, r1
 80063f0:	d01d      	beq.n	800642e <z_add_thread_to_ready_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80063f2:	b1e3      	cbz	r3, 800642e <z_add_thread_to_ready_q+0x5a>
 80063f4:	6a96      	ldr	r6, [r2, #40]	; 0x28
	if (t1->base.prio < t2->base.prio) {
 80063f6:	f990 500e 	ldrsb.w	r5, [r0, #14]
 80063fa:	f993 700e 	ldrsb.w	r7, [r3, #14]
 80063fe:	42af      	cmp	r7, r5
 8006400:	dd10      	ble.n	8006424 <z_add_thread_to_ready_q+0x50>
	node->prev = successor->prev;
 8006402:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 8006404:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
 8006408:	6010      	str	r0, [r2, #0]
	successor->prev = node;
 800640a:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
 800640c:	7b43      	ldrb	r3, [r0, #13]
 800640e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006412:	7343      	strb	r3, [r0, #13]
		update_cache(0);
 8006414:	2000      	movs	r0, #0
 8006416:	f7ff ffa3 	bl	8006360 <update_cache>
	__asm__ volatile(
 800641a:	f384 8811 	msr	BASEPRI, r4
 800641e:	f3bf 8f6f 	isb	sy
}
 8006422:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 8006424:	42b3      	cmp	r3, r6
 8006426:	d002      	beq.n	800642e <z_add_thread_to_ready_q+0x5a>
 8006428:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800642a:	2b00      	cmp	r3, #0
 800642c:	d1e5      	bne.n	80063fa <z_add_thread_to_ready_q+0x26>
	node->prev = list->tail;
 800642e:	6a93      	ldr	r3, [r2, #40]	; 0x28
 8006430:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
 8006432:	6a93      	ldr	r3, [r2, #40]	; 0x28
	node->next = list;
 8006434:	6001      	str	r1, [r0, #0]
	list->tail->next = node;
 8006436:	6018      	str	r0, [r3, #0]
	list->tail = node;
 8006438:	6290      	str	r0, [r2, #40]	; 0x28
 800643a:	e7e7      	b.n	800640c <z_add_thread_to_ready_q+0x38>
 800643c:	200002b8 	.word	0x200002b8

08006440 <z_move_thread_to_end_of_prio_q>:
{
 8006440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006442:	4604      	mov	r4, r0
	__asm__ volatile(
 8006444:	f04f 0310 	mov.w	r3, #16
 8006448:	f3ef 8511 	mrs	r5, BASEPRI
 800644c:	f383 8811 	msr	BASEPRI, r3
 8006450:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8006454:	7b43      	ldrb	r3, [r0, #13]
 8006456:	065a      	lsls	r2, r3, #25
 8006458:	d503      	bpl.n	8006462 <z_move_thread_to_end_of_prio_q+0x22>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 800645a:	4601      	mov	r1, r0
 800645c:	4817      	ldr	r0, [pc, #92]	; (80064bc <z_move_thread_to_end_of_prio_q+0x7c>)
 800645e:	f7ff ff69 	bl	8006334 <z_priq_dumb_remove>
	return list->head == list;
 8006462:	4a17      	ldr	r2, [pc, #92]	; (80064c0 <z_move_thread_to_end_of_prio_q+0x80>)
 8006464:	e9d2 3009 	ldrd	r3, r0, [r2, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006468:	f102 0124 	add.w	r1, r2, #36	; 0x24
 800646c:	428b      	cmp	r3, r1
 800646e:	d01f      	beq.n	80064b0 <z_move_thread_to_end_of_prio_q+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 8006470:	b1f3      	cbz	r3, 80064b0 <z_move_thread_to_end_of_prio_q+0x70>
	if (t1->base.prio < t2->base.prio) {
 8006472:	f994 600e 	ldrsb.w	r6, [r4, #14]
 8006476:	f993 700e 	ldrsb.w	r7, [r3, #14]
 800647a:	42b7      	cmp	r7, r6
 800647c:	dd13      	ble.n	80064a6 <z_move_thread_to_end_of_prio_q+0x66>
	node->prev = successor->prev;
 800647e:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
 8006480:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
 8006484:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 8006486:	605c      	str	r4, [r3, #4]
 8006488:	7b63      	ldrb	r3, [r4, #13]
		update_cache(thread == _current);
 800648a:	6890      	ldr	r0, [r2, #8]
 800648c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006490:	7363      	strb	r3, [r4, #13]
 8006492:	1b03      	subs	r3, r0, r4
 8006494:	4258      	negs	r0, r3
 8006496:	4158      	adcs	r0, r3
 8006498:	f7ff ff62 	bl	8006360 <update_cache>
	__asm__ volatile(
 800649c:	f385 8811 	msr	BASEPRI, r5
 80064a0:	f3bf 8f6f 	isb	sy
}
 80064a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
 80064a6:	4283      	cmp	r3, r0
 80064a8:	d002      	beq.n	80064b0 <z_move_thread_to_end_of_prio_q+0x70>
 80064aa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d1e2      	bne.n	8006476 <z_move_thread_to_end_of_prio_q+0x36>
	node->prev = list->tail;
 80064b0:	e9c4 1000 	strd	r1, r0, [r4]
	list->tail->next = node;
 80064b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80064b6:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80064b8:	6294      	str	r4, [r2, #40]	; 0x28
 80064ba:	e7e5      	b.n	8006488 <z_move_thread_to_end_of_prio_q+0x48>
 80064bc:	200002dc 	.word	0x200002dc
 80064c0:	200002b8 	.word	0x200002b8

080064c4 <z_time_slice>:
	if (pending_current == _current) {
 80064c4:	4a15      	ldr	r2, [pc, #84]	; (800651c <z_time_slice+0x58>)
 80064c6:	4916      	ldr	r1, [pc, #88]	; (8006520 <z_time_slice+0x5c>)
{
 80064c8:	b538      	push	{r3, r4, r5, lr}
	if (pending_current == _current) {
 80064ca:	680c      	ldr	r4, [r1, #0]
 80064cc:	6893      	ldr	r3, [r2, #8]
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	4614      	mov	r4, r2
 80064d2:	d103      	bne.n	80064dc <z_time_slice+0x18>
}
 80064d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			z_reset_time_slice();
 80064d8:	f7ff bee2 	b.w	80062a0 <z_reset_time_slice>
	pending_current = NULL;
 80064dc:	2500      	movs	r5, #0
 80064de:	600d      	str	r5, [r1, #0]
	if (slice_time && sliceable(_current)) {
 80064e0:	4910      	ldr	r1, [pc, #64]	; (8006524 <z_time_slice+0x60>)
 80064e2:	6809      	ldr	r1, [r1, #0]
 80064e4:	b1b9      	cbz	r1, 8006516 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
 80064e6:	89d9      	ldrh	r1, [r3, #14]
 80064e8:	297f      	cmp	r1, #127	; 0x7f
 80064ea:	d814      	bhi.n	8006516 <z_time_slice+0x52>
		&& !z_is_prio_higher(t->base.prio, slice_max_prio)
 80064ec:	490e      	ldr	r1, [pc, #56]	; (8006528 <z_time_slice+0x64>)
 80064ee:	f993 500e 	ldrsb.w	r5, [r3, #14]
 80064f2:	6809      	ldr	r1, [r1, #0]
 80064f4:	428d      	cmp	r5, r1
 80064f6:	db0e      	blt.n	8006516 <z_time_slice+0x52>
		&& !z_is_idle_thread_object(t)
 80064f8:	490c      	ldr	r1, [pc, #48]	; (800652c <z_time_slice+0x68>)
 80064fa:	428b      	cmp	r3, r1
 80064fc:	d00b      	beq.n	8006516 <z_time_slice+0x52>
		&& !z_is_thread_timeout_active(t);
 80064fe:	6999      	ldr	r1, [r3, #24]
 8006500:	b949      	cbnz	r1, 8006516 <z_time_slice+0x52>
		if (ticks >= _current_cpu->slice_ticks) {
 8006502:	6911      	ldr	r1, [r2, #16]
 8006504:	4281      	cmp	r1, r0
 8006506:	dc03      	bgt.n	8006510 <z_time_slice+0x4c>
			z_move_thread_to_end_of_prio_q(_current);
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff ff99 	bl	8006440 <z_move_thread_to_end_of_prio_q>
 800650e:	e7e1      	b.n	80064d4 <z_time_slice+0x10>
			_current_cpu->slice_ticks -= ticks;
 8006510:	1a09      	subs	r1, r1, r0
 8006512:	6111      	str	r1, [r2, #16]
}
 8006514:	bd38      	pop	{r3, r4, r5, pc}
		_current_cpu->slice_ticks = 0;
 8006516:	2300      	movs	r3, #0
 8006518:	6123      	str	r3, [r4, #16]
 800651a:	e7fb      	b.n	8006514 <z_time_slice+0x50>
 800651c:	200002b8 	.word	0x200002b8
 8006520:	200002e8 	.word	0x200002e8
 8006524:	200002f0 	.word	0x200002f0
 8006528:	200002ec 	.word	0x200002ec
 800652c:	20000158 	.word	0x20000158

08006530 <z_remove_thread_from_ready_q>:
{
 8006530:	b538      	push	{r3, r4, r5, lr}
 8006532:	4604      	mov	r4, r0
	__asm__ volatile(
 8006534:	f04f 0310 	mov.w	r3, #16
 8006538:	f3ef 8511 	mrs	r5, BASEPRI
 800653c:	f383 8811 	msr	BASEPRI, r3
 8006540:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
 8006544:	7b43      	ldrb	r3, [r0, #13]
 8006546:	065a      	lsls	r2, r3, #25
 8006548:	d507      	bpl.n	800655a <z_remove_thread_from_ready_q+0x2a>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
 800654a:	4601      	mov	r1, r0
 800654c:	4809      	ldr	r0, [pc, #36]	; (8006574 <z_remove_thread_from_ready_q+0x44>)
 800654e:	f7ff fef1 	bl	8006334 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
 8006552:	7b63      	ldrb	r3, [r4, #13]
 8006554:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006558:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
 800655a:	4b07      	ldr	r3, [pc, #28]	; (8006578 <z_remove_thread_from_ready_q+0x48>)
 800655c:	6898      	ldr	r0, [r3, #8]
 800655e:	1b03      	subs	r3, r0, r4
 8006560:	4258      	negs	r0, r3
 8006562:	4158      	adcs	r0, r3
 8006564:	f7ff fefc 	bl	8006360 <update_cache>
	__asm__ volatile(
 8006568:	f385 8811 	msr	BASEPRI, r5
 800656c:	f3bf 8f6f 	isb	sy
}
 8006570:	bd38      	pop	{r3, r4, r5, pc}
 8006572:	bf00      	nop
 8006574:	200002dc 	.word	0x200002dc
 8006578:	200002b8 	.word	0x200002b8

0800657c <pend>:
{
 800657c:	b570      	push	{r4, r5, r6, lr}
 800657e:	4604      	mov	r4, r0
 8006580:	460d      	mov	r5, r1
 8006582:	4616      	mov	r6, r2
	z_remove_thread_from_ready_q(thread);
 8006584:	f7ff ffd4 	bl	8006530 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_PENDING;
 8006588:	7b63      	ldrb	r3, [r4, #13]
 800658a:	f043 0302 	orr.w	r3, r3, #2
 800658e:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
 8006590:	b17d      	cbz	r5, 80065b2 <pend+0x36>
	return list->head == list;
 8006592:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
 8006594:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006596:	429d      	cmp	r5, r3
 8006598:	d01f      	beq.n	80065da <pend+0x5e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 800659a:	b1f3      	cbz	r3, 80065da <pend+0x5e>
	if (t1->base.prio < t2->base.prio) {
 800659c:	f994 200e 	ldrsb.w	r2, [r4, #14]
 80065a0:	f993 100e 	ldrsb.w	r1, [r3, #14]
 80065a4:	4291      	cmp	r1, r2
 80065a6:	dd12      	ble.n	80065ce <pend+0x52>
	node->prev = successor->prev;
 80065a8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
 80065aa:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
 80065ae:	6014      	str	r4, [r2, #0]
	successor->prev = node;
 80065b0:	605c      	str	r4, [r3, #4]
	if (timeout != K_FOREVER) {
 80065b2:	1c73      	adds	r3, r6, #1
 80065b4:	d018      	beq.n	80065e8 <pend+0x6c>
		ticks = _TICK_ALIGN + k_ms_to_ticks_ceil32(timeout);
 80065b6:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 80065ba:	220a      	movs	r2, #10
 80065bc:	4372      	muls	r2, r6

extern void z_thread_timeout(struct _timeout *to);

static inline void z_add_thread_timeout(struct k_thread *th, s32_t ticks)
{
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
 80065be:	f104 0018 	add.w	r0, r4, #24
 80065c2:	3201      	adds	r2, #1
 80065c4:	4909      	ldr	r1, [pc, #36]	; (80065ec <pend+0x70>)
}
 80065c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80065ca:	f000 b941 	b.w	8006850 <z_add_timeout>
	return (node == list->tail) ? NULL : node->next;
 80065ce:	6869      	ldr	r1, [r5, #4]
 80065d0:	428b      	cmp	r3, r1
 80065d2:	d002      	beq.n	80065da <pend+0x5e>
 80065d4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e2      	bne.n	80065a0 <pend+0x24>
	node->prev = list->tail;
 80065da:	686b      	ldr	r3, [r5, #4]
 80065dc:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
 80065de:	686b      	ldr	r3, [r5, #4]
	node->next = list;
 80065e0:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
 80065e2:	601c      	str	r4, [r3, #0]
	list->tail = node;
 80065e4:	606c      	str	r4, [r5, #4]
 80065e6:	e7e4      	b.n	80065b2 <pend+0x36>
}
 80065e8:	bd70      	pop	{r4, r5, r6, pc}
 80065ea:	bf00      	nop
 80065ec:	0800745b 	.word	0x0800745b

080065f0 <z_pend_curr>:
{
 80065f0:	b510      	push	{r4, lr}
 80065f2:	460c      	mov	r4, r1
 80065f4:	4611      	mov	r1, r2
	pending_current = _current;
 80065f6:	4a06      	ldr	r2, [pc, #24]	; (8006610 <z_pend_curr+0x20>)
 80065f8:	6890      	ldr	r0, [r2, #8]
 80065fa:	4a06      	ldr	r2, [pc, #24]	; (8006614 <z_pend_curr+0x24>)
 80065fc:	6010      	str	r0, [r2, #0]
	pend(_current, wait_q, timeout);
 80065fe:	461a      	mov	r2, r3
 8006600:	f7ff ffbc 	bl	800657c <pend>
 8006604:	4620      	mov	r0, r4
}
 8006606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800660a:	f7fe bd1d 	b.w	8005048 <arch_swap>
 800660e:	bf00      	nop
 8006610:	200002b8 	.word	0x200002b8
 8006614:	200002e8 	.word	0x200002e8

08006618 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
 8006618:	4b04      	ldr	r3, [pc, #16]	; (800662c <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
 800661a:	2100      	movs	r1, #0
 800661c:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
 8006620:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
 8006624:	4608      	mov	r0, r1
 8006626:	f7ff be51 	b.w	80062cc <k_sched_time_slice_set>
 800662a:	bf00      	nop
 800662c:	200002b8 	.word	0x200002b8

08006630 <z_impl_k_current_get>:
#endif

k_tid_t z_impl_k_current_get(void)
{
	return _current;
}
 8006630:	4b01      	ldr	r3, [pc, #4]	; (8006638 <z_impl_k_current_get+0x8>)
 8006632:	6898      	ldr	r0, [r3, #8]
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	200002b8 	.word	0x200002b8

0800663c <z_impl_k_sem_give>:
		handle_poll_events(sem);
	}
}

void z_impl_k_sem_give(struct k_sem *sem)
{
 800663c:	b570      	push	{r4, r5, r6, lr}
 800663e:	4604      	mov	r4, r0
	__asm__ volatile(
 8006640:	f04f 0310 	mov.w	r3, #16
 8006644:	f3ef 8611 	mrs	r6, BASEPRI
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = z_unpend_first_thread(&sem->wait_q);
 8006650:	f000 ff34 	bl	80074bc <z_unpend_first_thread>
	if (thread != NULL) {
 8006654:	4605      	mov	r5, r0
 8006656:	b170      	cbz	r0, 8006676 <z_impl_k_sem_give+0x3a>
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8006658:	7b43      	ldrb	r3, [r0, #13]
 800665a:	06db      	lsls	r3, r3, #27
 800665c:	d103      	bne.n	8006666 <z_impl_k_sem_give+0x2a>
	if (z_is_thread_ready(thread)) {
 800665e:	6983      	ldr	r3, [r0, #24]
 8006660:	b90b      	cbnz	r3, 8006666 <z_impl_k_sem_give+0x2a>
		z_add_thread_to_ready_q(thread);
 8006662:	f7ff feb7 	bl	80063d4 <z_add_thread_to_ready_q>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
 8006666:	2300      	movs	r3, #0
 8006668:	66ab      	str	r3, [r5, #104]	; 0x68
	k_spinlock_key_t key = k_spin_lock(&lock);

	sys_trace_void(SYS_TRACE_ID_SEMA_GIVE);
	do_sem_give(sem);
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
	z_reschedule(&lock, key);
 800666a:	4631      	mov	r1, r6
 800666c:	4805      	ldr	r0, [pc, #20]	; (8006684 <z_impl_k_sem_give+0x48>)
}
 800666e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
 8006672:	f000 becb 	b.w	800740c <z_reschedule>
	sem->count += (sem->count != sem->limit) ? 1U : 0U;
 8006676:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
 800667a:	429a      	cmp	r2, r3
 800667c:	bf18      	it	ne
 800667e:	3301      	addne	r3, #1
 8006680:	60a3      	str	r3, [r4, #8]
 8006682:	e7f2      	b.n	800666a <z_impl_k_sem_give+0x2e>
 8006684:	200002f9 	.word	0x200002f9

08006688 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
 8006688:	b410      	push	{r4}
 800668a:	4602      	mov	r2, r0
 800668c:	460b      	mov	r3, r1
 800668e:	f04f 0010 	mov.w	r0, #16
 8006692:	f3ef 8111 	mrs	r1, BASEPRI
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	f3bf 8f6f 	isb	sy
	__ASSERT(((arch_is_in_isr() == false) || (timeout == K_NO_WAIT)), "");

	sys_trace_void(SYS_TRACE_ID_SEMA_TAKE);
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (likely(sem->count > 0U)) {
 800669e:	6894      	ldr	r4, [r2, #8]
 80066a0:	b14c      	cbz	r4, 80066b6 <z_impl_k_sem_take+0x2e>
		sem->count--;
 80066a2:	3c01      	subs	r4, #1
 80066a4:	6094      	str	r4, [r2, #8]
	__asm__ volatile(
 80066a6:	f381 8811 	msr	BASEPRI, r1
 80066aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
		return 0;
 80066ae:	2000      	movs	r0, #0

	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);

	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
	return ret;
}
 80066b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80066b4:	4770      	bx	lr
	if (timeout == K_NO_WAIT) {
 80066b6:	b933      	cbnz	r3, 80066c6 <z_impl_k_sem_take+0x3e>
 80066b8:	f381 8811 	msr	BASEPRI, r1
 80066bc:	f3bf 8f6f 	isb	sy
		return -EBUSY;
 80066c0:	f06f 000f 	mvn.w	r0, #15
 80066c4:	e7f4      	b.n	80066b0 <z_impl_k_sem_take+0x28>
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80066c6:	4802      	ldr	r0, [pc, #8]	; (80066d0 <z_impl_k_sem_take+0x48>)
}
 80066c8:	f85d 4b04 	ldr.w	r4, [sp], #4
	int ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
 80066cc:	f7ff bf90 	b.w	80065f0 <z_pend_curr>
 80066d0:	200002f9 	.word	0x200002f9

080066d4 <z_impl_k_thread_start>:
}
#endif

#ifdef CONFIG_MULTITHREADING
void z_impl_k_thread_start(struct k_thread *thread)
{
 80066d4:	b510      	push	{r4, lr}
 80066d6:	4602      	mov	r2, r0
	__asm__ volatile(
 80066d8:	f04f 0310 	mov.w	r3, #16
 80066dc:	f3ef 8411 	mrs	r4, BASEPRI
 80066e0:	f383 8811 	msr	BASEPRI, r3
 80066e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock); /* protect kernel queues */

	if (z_has_thread_started(thread)) {
 80066e8:	7b43      	ldrb	r3, [r0, #13]
 80066ea:	0759      	lsls	r1, r3, #29
 80066ec:	d404      	bmi.n	80066f8 <z_impl_k_thread_start+0x24>
	__asm__ volatile(
 80066ee:	f384 8811 	msr	BASEPRI, r4
 80066f2:	f3bf 8f6f 	isb	sy
	}

	z_mark_thread_as_started(thread);
	z_ready_thread(thread);
	z_reschedule(&lock, key);
}
 80066f6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
 80066f8:	f023 0304 	bic.w	r3, r3, #4
 80066fc:	7343      	strb	r3, [r0, #13]
	if (z_is_thread_ready(thread)) {
 80066fe:	f000 ff0a 	bl	8007516 <z_is_thread_ready>
 8006702:	b110      	cbz	r0, 800670a <z_impl_k_thread_start+0x36>
		z_add_thread_to_ready_q(thread);
 8006704:	4610      	mov	r0, r2
 8006706:	f7ff fe65 	bl	80063d4 <z_add_thread_to_ready_q>
	z_reschedule(&lock, key);
 800670a:	4621      	mov	r1, r4
 800670c:	4802      	ldr	r0, [pc, #8]	; (8006718 <z_impl_k_thread_start+0x44>)
}
 800670e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&lock, key);
 8006712:	f000 be7b 	b.w	800740c <z_reschedule>
 8006716:	bf00      	nop
 8006718:	200002f9 	.word	0x200002f9

0800671c <z_setup_new_thread>:
void z_setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options, const char *name)
{
 800671c:	b530      	push	{r4, r5, lr}
 800671e:	b087      	sub	sp, #28
 8006720:	4604      	mov	r4, r0
	stack_size = STACK_ROUND_DOWN(stack_size
			- sizeof(*new_thread->userspace_local_data));
#endif
#endif

	arch_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
 8006722:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006724:	9504      	str	r5, [sp, #16]
 8006726:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006728:	9503      	str	r5, [sp, #12]
 800672a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800672c:	9502      	str	r5, [sp, #8]
 800672e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006730:	9501      	str	r5, [sp, #4]
 8006732:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8006734:	9500      	str	r5, [sp, #0]
 8006736:	f7fe fd31 	bl	800519c <arch_new_thread>
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
 800673a:	4b03      	ldr	r3, [pc, #12]	; (8006748 <z_setup_new_thread+0x2c>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	b103      	cbz	r3, 8006742 <z_setup_new_thread+0x26>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
 8006740:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006742:	6623      	str	r3, [r4, #96]	; 0x60
	sys_trace_thread_create(new_thread);
}
 8006744:	b007      	add	sp, #28
 8006746:	bd30      	pop	{r4, r5, pc}
 8006748:	200002b8 	.word	0x200002b8

0800674c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
 800674c:	b5f0      	push	{r4, r5, r6, r7, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
 800674e:	4e20      	ldr	r6, [pc, #128]	; (80067d0 <z_init_static_threads+0x84>)
 8006750:	4d20      	ldr	r5, [pc, #128]	; (80067d4 <z_init_static_threads+0x88>)
{
 8006752:	b087      	sub	sp, #28
 8006754:	4637      	mov	r7, r6
	_FOREACH_STATIC_THREAD(thread_data) {
 8006756:	42b5      	cmp	r5, r6
 8006758:	f105 0430 	add.w	r4, r5, #48	; 0x30
 800675c:	d30b      	bcc.n	8006776 <z_init_static_threads+0x2a>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
 800675e:	f7ff fdd5 	bl	800630c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
 8006762:	4c1c      	ldr	r4, [pc, #112]	; (80067d4 <z_init_static_threads+0x88>)
 8006764:	4e1c      	ldr	r6, [pc, #112]	; (80067d8 <z_init_static_threads+0x8c>)
 8006766:	250a      	movs	r5, #10
 8006768:	42bc      	cmp	r4, r7
 800676a:	d321      	bcc.n	80067b0 <z_init_static_threads+0x64>
			schedule_new_thread(thread_data->init_thread,
					    thread_data->init_delay);
		}
	}
	k_sched_unlock();
}
 800676c:	b007      	add	sp, #28
 800676e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	k_sched_unlock();
 8006772:	f7ff be13 	b.w	800639c <k_sched_unlock>
		z_setup_new_thread(
 8006776:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800677a:	9305      	str	r3, [sp, #20]
 800677c:	f854 3c10 	ldr.w	r3, [r4, #-16]
 8006780:	9304      	str	r3, [sp, #16]
 8006782:	f854 3c14 	ldr.w	r3, [r4, #-20]
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	f854 3c18 	ldr.w	r3, [r4, #-24]
 800678c:	9302      	str	r3, [sp, #8]
 800678e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
 8006792:	9301      	str	r3, [sp, #4]
 8006794:	f854 3c20 	ldr.w	r3, [r4, #-32]
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
 800679e:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
 80067a2:	f7ff ffbb 	bl	800671c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
 80067a6:	f854 3c30 	ldr.w	r3, [r4, #-48]
 80067aa:	64dd      	str	r5, [r3, #76]	; 0x4c
 80067ac:	4625      	mov	r5, r4
 80067ae:	e7d2      	b.n	8006756 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_FOREVER) {
 80067b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80067b2:	1c53      	adds	r3, r2, #1
 80067b4:	d003      	beq.n	80067be <z_init_static_threads+0x72>
			schedule_new_thread(thread_data->init_thread,
 80067b6:	6820      	ldr	r0, [r4, #0]
	if (delay == 0) {
 80067b8:	b91a      	cbnz	r2, 80067c2 <z_init_static_threads+0x76>
		arch_syscall_invoke1(*(uintptr_t *)&thread, K_SYSCALL_K_THREAD_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_thread_start(thread);
 80067ba:	f7ff ff8b 	bl	80066d4 <z_impl_k_thread_start>
	_FOREACH_STATIC_THREAD(thread_data) {
 80067be:	3430      	adds	r4, #48	; 0x30
 80067c0:	e7d2      	b.n	8006768 <z_init_static_threads+0x1c>
 80067c2:	436a      	muls	r2, r5
 80067c4:	3201      	adds	r2, #1
 80067c6:	4631      	mov	r1, r6
 80067c8:	3018      	adds	r0, #24
 80067ca:	f000 f841 	bl	8006850 <z_add_timeout>
 80067ce:	e7f6      	b.n	80067be <z_init_static_threads+0x72>
 80067d0:	20001534 	.word	0x20001534
 80067d4:	20001534 	.word	0x20001534
 80067d8:	0800745b 	.word	0x0800745b

080067dc <elapsed>:
	sys_dlist_remove(&t->node);
}

static s32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0;
 80067dc:	4b03      	ldr	r3, [pc, #12]	; (80067ec <elapsed+0x10>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	b90b      	cbnz	r3, 80067e6 <elapsed+0xa>
 80067e2:	f7fe bc05 	b.w	8004ff0 <z_clock_elapsed>
}
 80067e6:	2000      	movs	r0, #0
 80067e8:	4770      	bx	lr
 80067ea:	bf00      	nop
 80067ec:	200002f4 	.word	0x200002f4

080067f0 <remove_timeout>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 80067f0:	6803      	ldr	r3, [r0, #0]
 80067f2:	b140      	cbz	r0, 8006806 <remove_timeout+0x16>
 80067f4:	4a07      	ldr	r2, [pc, #28]	; (8006814 <remove_timeout+0x24>)
	return (node == list->tail) ? NULL : node->next;
 80067f6:	6852      	ldr	r2, [r2, #4]
 80067f8:	4290      	cmp	r0, r2
 80067fa:	d004      	beq.n	8006806 <remove_timeout+0x16>
	if (next(t) != NULL) {
 80067fc:	b11b      	cbz	r3, 8006806 <remove_timeout+0x16>
		next(t)->dticks += t->dticks;
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	6881      	ldr	r1, [r0, #8]
 8006802:	440a      	add	r2, r1
 8006804:	609a      	str	r2, [r3, #8]
	node->prev->next = node->next;
 8006806:	6842      	ldr	r2, [r0, #4]
 8006808:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
 800680a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
 800680c:	2300      	movs	r3, #0
	node->prev = NULL;
 800680e:	e9c0 3300 	strd	r3, r3, [r0]
}
 8006812:	4770      	bx	lr
 8006814:	20001484 	.word	0x20001484

08006818 <next_timeout>:
	return list->head == list;
 8006818:	4b0b      	ldr	r3, [pc, #44]	; (8006848 <next_timeout+0x30>)

static s32_t next_timeout(void)
{
 800681a:	b510      	push	{r4, lr}
 800681c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 800681e:	429c      	cmp	r4, r3
 8006820:	bf08      	it	eq
 8006822:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	s32_t ticks_elapsed = elapsed();
 8006824:	f7ff ffda 	bl	80067dc <elapsed>
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8006828:	b154      	cbz	r4, 8006840 <next_timeout+0x28>
 800682a:	68a3      	ldr	r3, [r4, #8]
 800682c:	1a18      	subs	r0, r3, r0
 800682e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
 8006832:	4b06      	ldr	r3, [pc, #24]	; (800684c <next_timeout+0x34>)
 8006834:	691b      	ldr	r3, [r3, #16]
 8006836:	b113      	cbz	r3, 800683e <next_timeout+0x26>
 8006838:	4298      	cmp	r0, r3
 800683a:	bfa8      	it	ge
 800683c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
 800683e:	bd10      	pop	{r4, pc}
	s32_t ret = to == NULL ? MAX_WAIT : MAX(0, to->dticks - ticks_elapsed);
 8006840:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8006844:	e7f5      	b.n	8006832 <next_timeout+0x1a>
 8006846:	bf00      	nop
 8006848:	20001484 	.word	0x20001484
 800684c:	200002b8 	.word	0x200002b8

08006850 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn, s32_t ticks)
{
 8006850:	b570      	push	{r4, r5, r6, lr}
 8006852:	4604      	mov	r4, r0
 8006854:	4616      	mov	r6, r2
	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
 8006856:	60c1      	str	r1, [r0, #12]
	__asm__ volatile(
 8006858:	f04f 0310 	mov.w	r3, #16
 800685c:	f3ef 8511 	mrs	r5, BASEPRI
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
 8006868:	f7ff ffb8 	bl	80067dc <elapsed>
	return list->head == list;
 800686c:	4b18      	ldr	r3, [pc, #96]	; (80068d0 <z_add_timeout+0x80>)
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	2e01      	cmp	r6, #1
 8006872:	bfac      	ite	ge
 8006874:	1980      	addge	r0, r0, r6
 8006876:	3001      	addlt	r0, #1
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006878:	429a      	cmp	r2, r3
 800687a:	60a0      	str	r0, [r4, #8]
 800687c:	d001      	beq.n	8006882 <z_add_timeout+0x32>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
 800687e:	685e      	ldr	r6, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
 8006880:	b932      	cbnz	r2, 8006890 <z_add_timeout+0x40>
	node->prev = list->tail;
 8006882:	685a      	ldr	r2, [r3, #4]
 8006884:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
 8006886:	685a      	ldr	r2, [r3, #4]
	node->next = list;
 8006888:	6023      	str	r3, [r4, #0]
	list->tail->next = node;
 800688a:	6014      	str	r4, [r2, #0]
	list->tail = node;
 800688c:	605c      	str	r4, [r3, #4]
 800688e:	e00a      	b.n	80068a6 <z_add_timeout+0x56>
			__ASSERT(t->dticks >= 0, "");

			if (t->dticks > to->dticks) {
 8006890:	6890      	ldr	r0, [r2, #8]
 8006892:	68a1      	ldr	r1, [r4, #8]
 8006894:	4288      	cmp	r0, r1
 8006896:	dd15      	ble.n	80068c4 <z_add_timeout+0x74>
				t->dticks -= to->dticks;
 8006898:	1a41      	subs	r1, r0, r1
 800689a:	6091      	str	r1, [r2, #8]
	node->prev = successor->prev;
 800689c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
 800689e:	e9c4 2100 	strd	r2, r1, [r4]
	successor->prev->next = node;
 80068a2:	600c      	str	r4, [r1, #0]
	successor->prev = node;
 80068a4:	6054      	str	r4, [r2, #4]
	return list->head == list;
 80068a6:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d006      	beq.n	80068ba <z_add_timeout+0x6a>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
 80068ac:	4294      	cmp	r4, r2
 80068ae:	d104      	bne.n	80068ba <z_add_timeout+0x6a>
			z_clock_set_timeout(next_timeout(), false);
 80068b0:	f7ff ffb2 	bl	8006818 <next_timeout>
 80068b4:	2100      	movs	r1, #0
 80068b6:	f7fe fb49 	bl	8004f4c <z_clock_set_timeout>
	__asm__ volatile(
 80068ba:	f385 8811 	msr	BASEPRI, r5
 80068be:	f3bf 8f6f 	isb	sy
		}
	}
}
 80068c2:	bd70      	pop	{r4, r5, r6, pc}
			to->dticks -= t->dticks;
 80068c4:	1a09      	subs	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
 80068c6:	42b2      	cmp	r2, r6
 80068c8:	60a1      	str	r1, [r4, #8]
 80068ca:	d0da      	beq.n	8006882 <z_add_timeout+0x32>
 80068cc:	6812      	ldr	r2, [r2, #0]
 80068ce:	e7d7      	b.n	8006880 <z_add_timeout+0x30>
 80068d0:	20001484 	.word	0x20001484

080068d4 <z_clock_announce>:
		}
	}
}

void z_clock_announce(s32_t ticks)
{
 80068d4:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 80068d8:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
 80068da:	f7ff fdf3 	bl	80064c4 <z_time_slice>
	__asm__ volatile(
 80068de:	f04f 0310 	mov.w	r3, #16
 80068e2:	f3ef 8511 	mrs	r5, BASEPRI
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
 80068ee:	4e21      	ldr	r6, [pc, #132]	; (8006974 <z_clock_announce+0xa0>)
 80068f0:	4f21      	ldr	r7, [pc, #132]	; (8006978 <z_clock_announce+0xa4>)
	return list->head == list;
 80068f2:	f8df 9088 	ldr.w	r9, [pc, #136]	; 800697c <z_clock_announce+0xa8>
 80068f6:	6034      	str	r4, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
 80068f8:	46b8      	mov	r8, r7
 80068fa:	f8d9 4000 	ldr.w	r4, [r9]
 80068fe:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
 8006900:	454c      	cmp	r4, r9
 8006902:	e9d7 bc00 	ldrd	fp, ip, [r7]
 8006906:	d005      	beq.n	8006914 <z_clock_announce+0x40>
 8006908:	b124      	cbz	r4, 8006914 <z_clock_announce+0x40>
 800690a:	68a3      	ldr	r3, [r4, #8]
 800690c:	4293      	cmp	r3, r2
 800690e:	dd14      	ble.n	800693a <z_clock_announce+0x66>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	60a3      	str	r3, [r4, #8]
	}

	curr_tick += announce_remaining;
 8006914:	eb1b 0002 	adds.w	r0, fp, r2
 8006918:	eb4c 71e2 	adc.w	r1, ip, r2, asr #31
	announce_remaining = 0;
 800691c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
 800691e:	e9c8 0100 	strd	r0, r1, [r8]
	announce_remaining = 0;
 8006922:	6034      	str	r4, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
 8006924:	f7ff ff78 	bl	8006818 <next_timeout>
 8006928:	4621      	mov	r1, r4
 800692a:	f7fe fb0f 	bl	8004f4c <z_clock_set_timeout>
	__asm__ volatile(
 800692e:	f385 8811 	msr	BASEPRI, r5
 8006932:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
 8006936:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
		curr_tick += dt;
 800693a:	eb1b 0003 	adds.w	r0, fp, r3
 800693e:	eb4c 71e3 	adc.w	r1, ip, r3, asr #31
		announce_remaining -= dt;
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
 8006946:	2300      	movs	r3, #0
		curr_tick += dt;
 8006948:	e9c7 0100 	strd	r0, r1, [r7]
		t->dticks = 0;
 800694c:	60a3      	str	r3, [r4, #8]
		remove_timeout(t);
 800694e:	4620      	mov	r0, r4
 8006950:	f7ff ff4e 	bl	80067f0 <remove_timeout>
 8006954:	f385 8811 	msr	BASEPRI, r5
 8006958:	f3bf 8f6f 	isb	sy
		t->fn(t);
 800695c:	68e3      	ldr	r3, [r4, #12]
 800695e:	4798      	blx	r3
	__asm__ volatile(
 8006960:	f04f 0310 	mov.w	r3, #16
 8006964:	f3ef 8511 	mrs	r5, BASEPRI
 8006968:	f383 8811 	msr	BASEPRI, r3
 800696c:	f3bf 8f6f 	isb	sy
#endif

#ifdef SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
 8006970:	e7c3      	b.n	80068fa <z_clock_announce+0x26>
 8006972:	bf00      	nop
 8006974:	200002f4 	.word	0x200002f4
 8006978:	20000008 	.word	0x20000008
 800697c:	20001484 	.word	0x20001484

08006980 <z_sys_mem_pool_base_init>:

	return (*word >> (4*(bit / 4))) & 0xf;
}

void z_sys_mem_pool_base_init(struct sys_mem_pool_base *p)
{
 8006980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8006984:	6846      	ldr	r6, [r0, #4]
 8006986:	8907      	ldrh	r7, [r0, #8]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8006988:	6801      	ldr	r1, [r0, #0]

	p->max_inline_level = -1;

	for (i = 0; i < p->n_levels; i++) {
 800698a:	f890 800a 	ldrb.w	r8, [r0, #10]
	p->max_inline_level = -1;
 800698e:	23ff      	movs	r3, #255	; 0xff
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8006990:	fb06 fc07 	mul.w	ip, r6, r7
	p->max_inline_level = -1;
 8006994:	72c3      	strb	r3, [r0, #11]
	u32_t *bits = (u32_t *)((u8_t *)p->buf + buflen);
 8006996:	4461      	add	r1, ip
	size_t buflen = p->n_max * p->max_sz, sz = p->max_sz;
 8006998:	4632      	mov	r2, r6
	for (i = 0; i < p->n_levels; i++) {
 800699a:	2300      	movs	r3, #0
		int nblocks = buflen / sz;

		sys_dlist_init(&p->levels[i].free_list);
 800699c:	f04f 090c 	mov.w	r9, #12
	for (i = 0; i < p->n_levels; i++) {
 80069a0:	4598      	cmp	r8, r3
 80069a2:	dc05      	bgt.n	80069b0 <z_sys_mem_pool_base_init+0x30>
 80069a4:	2300      	movs	r3, #0
		}

		sz = WB_DN(sz / 4);
	}

	for (i = 0; i < p->n_max; i++) {
 80069a6:	4619      	mov	r1, r3
 80069a8:	428f      	cmp	r7, r1
 80069aa:	dc20      	bgt.n	80069ee <z_sys_mem_pool_base_init+0x6e>
		void *block = block_ptr(p, p->max_sz, i);

		sys_dlist_append(&p->levels[0].free_list, block);
	}
}
 80069ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		sys_dlist_init(&p->levels[i].free_list);
 80069b0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
		int nblocks = buflen / sz;
 80069b4:	fbbc f5f2 	udiv	r5, ip, r2
		sys_dlist_init(&p->levels[i].free_list);
 80069b8:	fb09 fe03 	mul.w	lr, r9, r3
 80069bc:	eb0a 040e 	add.w	r4, sl, lr
 80069c0:	f104 0b04 	add.w	fp, r4, #4
		if (nblocks <= sizeof(p->levels[i].bits)*8) {
 80069c4:	2d20      	cmp	r5, #32
	list->tail = (sys_dnode_t *)list;
 80069c6:	e9c4 bb01 	strd	fp, fp, [r4, #4]
 80069ca:	d805      	bhi.n	80069d8 <z_sys_mem_pool_base_init+0x58>
			p->max_inline_level = i;
 80069cc:	72c3      	strb	r3, [r0, #11]
		sz = WB_DN(sz / 4);
 80069ce:	0892      	lsrs	r2, r2, #2
 80069d0:	f022 0203 	bic.w	r2, r2, #3
	for (i = 0; i < p->n_levels; i++) {
 80069d4:	3301      	adds	r3, #1
 80069d6:	e7e3      	b.n	80069a0 <z_sys_mem_pool_base_init+0x20>
			bits += (nblocks + 31)/32;
 80069d8:	f115 041f 	adds.w	r4, r5, #31
 80069dc:	bf48      	it	mi
 80069de:	f105 043e 	addmi.w	r4, r5, #62	; 0x3e
 80069e2:	1164      	asrs	r4, r4, #5
			p->levels[i].bits_p = bits;
 80069e4:	f84a 100e 	str.w	r1, [sl, lr]
			bits += (nblocks + 31)/32;
 80069e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80069ec:	e7ef      	b.n	80069ce <z_sys_mem_pool_base_init+0x4e>
		sys_dlist_append(&p->levels[0].free_list, block);
 80069ee:	68c2      	ldr	r2, [r0, #12]
	return (u8_t *)p->buf + lsz * block;
 80069f0:	6805      	ldr	r5, [r0, #0]
		sys_dlist_append(&p->levels[0].free_list, block);
 80069f2:	f102 0c04 	add.w	ip, r2, #4
	return (u8_t *)p->buf + lsz * block;
 80069f6:	18ec      	adds	r4, r5, r3
	node->next = list;
 80069f8:	f845 c003 	str.w	ip, [r5, r3]
	node->prev = list->tail;
 80069fc:	6895      	ldr	r5, [r2, #8]
 80069fe:	6065      	str	r5, [r4, #4]
	list->tail->next = node;
 8006a00:	6895      	ldr	r5, [r2, #8]
	for (i = 0; i < p->n_max; i++) {
 8006a02:	3101      	adds	r1, #1
 8006a04:	602c      	str	r4, [r5, #0]
	list->tail = node;
 8006a06:	4433      	add	r3, r6
 8006a08:	6094      	str	r4, [r2, #8]
 8006a0a:	e7cd      	b.n	80069a8 <z_sys_mem_pool_base_init+0x28>

08006a0c <sys_sem_give>:

	return 0;
}

int sys_sem_give(struct sys_sem *sem)
{
 8006a0c:	b508      	push	{r3, lr}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
 8006a0e:	f7ff fe15 	bl	800663c <z_impl_k_sem_give>
	k_sem_give(&sem->kernel_sem);

	return 0;
}
 8006a12:	2000      	movs	r0, #0
 8006a14:	bd08      	pop	{r3, pc}

08006a16 <sys_sem_take>:

int sys_sem_take(struct sys_sem *sem, s32_t timeout)
{
 8006a16:	b508      	push	{r3, lr}
	return z_impl_k_sem_take(sem, timeout);
 8006a18:	f7ff fe36 	bl	8006688 <z_impl_k_sem_take>
	int ret_value = 0;

	ret_value = k_sem_take(&sem->kernel_sem, timeout);
	if (ret_value == -EAGAIN || ret_value == -EBUSY) {
 8006a1c:	f110 0f0b 	cmn.w	r0, #11
 8006a20:	d005      	beq.n	8006a2e <sys_sem_take+0x18>
 8006a22:	f110 0f10 	cmn.w	r0, #16
		ret_value = -ETIMEDOUT;
 8006a26:	bf08      	it	eq
 8006a28:	f06f 0073 	mvneq.w	r0, #115	; 0x73
	}

	return ret_value;
}
 8006a2c:	bd08      	pop	{r3, pc}
		ret_value = -ETIMEDOUT;
 8006a2e:	f06f 0073 	mvn.w	r0, #115	; 0x73
	return ret_value;
 8006a32:	e7fb      	b.n	8006a2c <sys_sem_take+0x16>

08006a34 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
 8006a34:	4604      	mov	r4, r0
 8006a36:	b508      	push	{r3, lr}
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	47a0      	blx	r4
	return z_impl_k_current_get();
 8006a40:	f7ff fdf6 	bl	8006630 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
 8006a44:	f7fe fd38 	bl	80054b8 <z_impl_k_thread_abort>

08006a48 <arch_printk_char_out>:
}
 8006a48:	2000      	movs	r0, #0
 8006a4a:	4770      	bx	lr

08006a4c <print_err>:
{
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	4604      	mov	r4, r0
 8006a50:	460d      	mov	r5, r1
	out('E', ctx);
 8006a52:	2045      	movs	r0, #69	; 0x45
 8006a54:	47a0      	blx	r4
	out('R', ctx);
 8006a56:	4629      	mov	r1, r5
 8006a58:	2052      	movs	r0, #82	; 0x52
 8006a5a:	47a0      	blx	r4
	out('R', ctx);
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	4623      	mov	r3, r4
 8006a60:	2052      	movs	r0, #82	; 0x52
}
 8006a62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	out('R', ctx);
 8006a66:	4718      	bx	r3

08006a68 <z_vprintk>:
{
 8006a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a6c:	b08b      	sub	sp, #44	; 0x2c
 8006a6e:	461c      	mov	r4, r3
	char length_mod = 0;
 8006a70:	f04f 0800 	mov.w	r8, #0
 8006a74:	1e53      	subs	r3, r2, #1
{
 8006a76:	4606      	mov	r6, r0
 8006a78:	460f      	mov	r7, r1
 8006a7a:	9302      	str	r3, [sp, #8]
	int min_width = -1;
 8006a7c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
 8006a80:	46c1      	mov	r9, r8
			might_format = 0;
 8006a82:	2500      	movs	r5, #0
					break;
 8006a84:	e005      	b.n	8006a92 <z_vprintk+0x2a>
		if (!might_format) {
 8006a86:	b96d      	cbnz	r5, 8006aa4 <z_vprintk+0x3c>
			if (*fmt != '%') {
 8006a88:	2825      	cmp	r0, #37	; 0x25
 8006a8a:	f000 814f 	beq.w	8006d2c <z_vprintk+0x2c4>
				out((int)*fmt, ctx);
 8006a8e:	4639      	mov	r1, r7
 8006a90:	47b0      	blx	r6
	while (*fmt) {
 8006a92:	9b02      	ldr	r3, [sp, #8]
 8006a94:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8006a98:	9302      	str	r3, [sp, #8]
 8006a9a:	2800      	cmp	r0, #0
 8006a9c:	d1f3      	bne.n	8006a86 <z_vprintk+0x1e>
}
 8006a9e:	b00b      	add	sp, #44	; 0x2c
 8006aa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
 8006aa4:	2864      	cmp	r0, #100	; 0x64
 8006aa6:	d06e      	beq.n	8006b86 <z_vprintk+0x11e>
 8006aa8:	d81a      	bhi.n	8006ae0 <z_vprintk+0x78>
 8006aaa:	2839      	cmp	r0, #57	; 0x39
 8006aac:	d80a      	bhi.n	8006ac4 <z_vprintk+0x5c>
 8006aae:	2831      	cmp	r0, #49	; 0x31
 8006ab0:	d260      	bcs.n	8006b74 <z_vprintk+0x10c>
 8006ab2:	282d      	cmp	r0, #45	; 0x2d
 8006ab4:	f000 8140 	beq.w	8006d38 <z_vprintk+0x2d0>
 8006ab8:	2830      	cmp	r0, #48	; 0x30
 8006aba:	d04c      	beq.n	8006b56 <z_vprintk+0xee>
 8006abc:	2825      	cmp	r0, #37	; 0x25
 8006abe:	d107      	bne.n	8006ad0 <z_vprintk+0x68>
				out((int)'%', ctx);
 8006ac0:	4639      	mov	r1, r7
 8006ac2:	e00b      	b.n	8006adc <z_vprintk+0x74>
			switch (*fmt) {
 8006ac4:	2858      	cmp	r0, #88	; 0x58
 8006ac6:	f000 80bb 	beq.w	8006c40 <z_vprintk+0x1d8>
 8006aca:	2863      	cmp	r0, #99	; 0x63
 8006acc:	f000 812a 	beq.w	8006d24 <z_vprintk+0x2bc>
					out((int)'%', ctx);
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	2025      	movs	r0, #37	; 0x25
 8006ad4:	47b0      	blx	r6
					out((int)*fmt, ctx);
 8006ad6:	9b02      	ldr	r3, [sp, #8]
 8006ad8:	7818      	ldrb	r0, [r3, #0]
 8006ada:	4639      	mov	r1, r7
 8006adc:	47b0      	blx	r6
 8006ade:	e7d0      	b.n	8006a82 <z_vprintk+0x1a>
			switch (*fmt) {
 8006ae0:	2870      	cmp	r0, #112	; 0x70
 8006ae2:	f000 80a3 	beq.w	8006c2c <z_vprintk+0x1c4>
 8006ae6:	d811      	bhi.n	8006b0c <z_vprintk+0xa4>
 8006ae8:	2869      	cmp	r0, #105	; 0x69
 8006aea:	d04c      	beq.n	8006b86 <z_vprintk+0x11e>
 8006aec:	286c      	cmp	r0, #108	; 0x6c
 8006aee:	d105      	bne.n	8006afc <z_vprintk+0x94>
				} else if (*fmt == 'l' && length_mod == 'l') {
 8006af0:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006af4:	d12a      	bne.n	8006b4c <z_vprintk+0xe4>
					length_mod = 'L';
 8006af6:	f04f 084c 	mov.w	r8, #76	; 0x4c
 8006afa:	e7ca      	b.n	8006a92 <z_vprintk+0x2a>
			switch (*fmt) {
 8006afc:	2868      	cmp	r0, #104	; 0x68
 8006afe:	d1e7      	bne.n	8006ad0 <z_vprintk+0x68>
				if (*fmt == 'h' && length_mod == 'h') {
 8006b00:	f1b8 0f68 	cmp.w	r8, #104	; 0x68
 8006b04:	d122      	bne.n	8006b4c <z_vprintk+0xe4>
					length_mod = 'H';
 8006b06:	f04f 0848 	mov.w	r8, #72	; 0x48
 8006b0a:	e7c2      	b.n	8006a92 <z_vprintk+0x2a>
			switch (*fmt) {
 8006b0c:	2875      	cmp	r0, #117	; 0x75
 8006b0e:	d071      	beq.n	8006bf4 <z_vprintk+0x18c>
 8006b10:	d818      	bhi.n	8006b44 <z_vprintk+0xdc>
 8006b12:	2873      	cmp	r0, #115	; 0x73
 8006b14:	d1dc      	bne.n	8006ad0 <z_vprintk+0x68>
				char *s = va_arg(ap, char *);
 8006b16:	f854 5b04 	ldr.w	r5, [r4], #4
				while (*s) {
 8006b1a:	46ab      	mov	fp, r5
 8006b1c:	465b      	mov	r3, fp
 8006b1e:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f040 80fb 	bne.w	8006d1e <z_vprintk+0x2b6>
				if (padding == PAD_SPACE_AFTER) {
 8006b28:	f1b9 0f03 	cmp.w	r9, #3
 8006b2c:	f040 810a 	bne.w	8006d44 <z_vprintk+0x2dc>
					int remaining = min_width - (s - start);
 8006b30:	1b5d      	subs	r5, r3, r5
 8006b32:	ebaa 0505 	sub.w	r5, sl, r5
					while (remaining-- > 0) {
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	dda3      	ble.n	8006a82 <z_vprintk+0x1a>
						out(' ', ctx);
 8006b3a:	4639      	mov	r1, r7
 8006b3c:	2020      	movs	r0, #32
 8006b3e:	47b0      	blx	r6
 8006b40:	3d01      	subs	r5, #1
 8006b42:	e7f8      	b.n	8006b36 <z_vprintk+0xce>
			switch (*fmt) {
 8006b44:	2878      	cmp	r0, #120	; 0x78
 8006b46:	d07b      	beq.n	8006c40 <z_vprintk+0x1d8>
 8006b48:	287a      	cmp	r0, #122	; 0x7a
 8006b4a:	d1c1      	bne.n	8006ad0 <z_vprintk+0x68>
				} else if (length_mod == 0) {
 8006b4c:	f1b8 0f00 	cmp.w	r8, #0
 8006b50:	d1be      	bne.n	8006ad0 <z_vprintk+0x68>
 8006b52:	4680      	mov	r8, r0
 8006b54:	e79d      	b.n	8006a92 <z_vprintk+0x2a>
				if (min_width < 0 && padding == PAD_NONE) {
 8006b56:	f1ba 0f00 	cmp.w	sl, #0
 8006b5a:	da0e      	bge.n	8006b7a <z_vprintk+0x112>
 8006b5c:	f1b9 0f00 	cmp.w	r9, #0
 8006b60:	f000 80ed 	beq.w	8006d3e <z_vprintk+0x2d6>
					min_width = *fmt - '0';
 8006b64:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
 8006b68:	f1b9 0f00 	cmp.w	r9, #0
 8006b6c:	bf08      	it	eq
 8006b6e:	f04f 0902 	moveq.w	r9, #2
 8006b72:	e78e      	b.n	8006a92 <z_vprintk+0x2a>
				if (min_width < 0) {
 8006b74:	f1ba 0f00 	cmp.w	sl, #0
 8006b78:	dbf4      	blt.n	8006b64 <z_vprintk+0xfc>
					min_width = 10 * min_width + *fmt - '0';
 8006b7a:	230a      	movs	r3, #10
 8006b7c:	fb03 0a0a 	mla	sl, r3, sl, r0
 8006b80:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
 8006b84:	e7f0      	b.n	8006b68 <z_vprintk+0x100>
				if (length_mod == 'z') {
 8006b86:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8006b8a:	d102      	bne.n	8006b92 <z_vprintk+0x12a>
					d = va_arg(ap, int);
 8006b8c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006b90:	e01f      	b.n	8006bd2 <z_vprintk+0x16a>
				} else if (length_mod == 'l') {
 8006b92:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006b96:	d0f9      	beq.n	8006b8c <z_vprintk+0x124>
				} else if (length_mod == 'L') {
 8006b98:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8006b9c:	d1f6      	bne.n	8006b8c <z_vprintk+0x124>
					long long lld = va_arg(ap, long long);
 8006b9e:	3407      	adds	r4, #7
 8006ba0:	f024 0407 	bic.w	r4, r4, #7
 8006ba4:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (lld > __LONG_MAX__ ||
 8006ba8:	f112 4100 	adds.w	r1, r2, #2147483648	; 0x80000000
 8006bac:	9106      	str	r1, [sp, #24]
 8006bae:	f143 0100 	adc.w	r1, r3, #0
 8006bb2:	9107      	str	r1, [sp, #28]
 8006bb4:	e9dd bc06 	ldrd	fp, ip, [sp, #24]
 8006bb8:	2100      	movs	r1, #0
 8006bba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bbe:	4561      	cmp	r1, ip
 8006bc0:	bf08      	it	eq
 8006bc2:	4558      	cmpeq	r0, fp
 8006bc4:	d204      	bcs.n	8006bd0 <z_vprintk+0x168>
						print_err(out, ctx);
 8006bc6:	4639      	mov	r1, r7
 8006bc8:	4630      	mov	r0, r6
 8006bca:	f7ff ff3f 	bl	8006a4c <print_err>
						break;
 8006bce:	e758      	b.n	8006a82 <z_vprintk+0x1a>
					d = lld;
 8006bd0:	4615      	mov	r5, r2
				if (d < 0) {
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	da05      	bge.n	8006be2 <z_vprintk+0x17a>
					out((int)'-', ctx);
 8006bd6:	4639      	mov	r1, r7
 8006bd8:	202d      	movs	r0, #45	; 0x2d
 8006bda:	47b0      	blx	r6
					d = -d;
 8006bdc:	426d      	negs	r5, r5
					min_width--;
 8006bde:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
				_printk_dec_ulong(out, ctx, d, padding,
 8006be2:	f8cd a000 	str.w	sl, [sp]
 8006be6:	464b      	mov	r3, r9
 8006be8:	462a      	mov	r2, r5
				_printk_dec_ulong(out, ctx, u, padding,
 8006bea:	4639      	mov	r1, r7
 8006bec:	4630      	mov	r0, r6
 8006bee:	f7fd ff19 	bl	8004a24 <_printk_dec_ulong>
				break;
 8006bf2:	e746      	b.n	8006a82 <z_vprintk+0x1a>
				if (length_mod == 'z') {
 8006bf4:	f1b8 0f7a 	cmp.w	r8, #122	; 0x7a
 8006bf8:	d102      	bne.n	8006c00 <z_vprintk+0x198>
					u = va_arg(ap, unsigned int);
 8006bfa:	f854 2b04 	ldr.w	r2, [r4], #4
 8006bfe:	e011      	b.n	8006c24 <z_vprintk+0x1bc>
				} else if (length_mod == 'l') {
 8006c00:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006c04:	d0f9      	beq.n	8006bfa <z_vprintk+0x192>
				} else if (length_mod == 'L') {
 8006c06:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8006c0a:	d1f6      	bne.n	8006bfa <z_vprintk+0x192>
					unsigned long long llu =
 8006c0c:	3407      	adds	r4, #7
 8006c0e:	f024 0407 	bic.w	r4, r4, #7
 8006c12:	e8f4 2302 	ldrd	r2, r3, [r4], #8
					if (llu > ~0UL) {
 8006c16:	2100      	movs	r1, #0
 8006c18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c1c:	4299      	cmp	r1, r3
 8006c1e:	bf08      	it	eq
 8006c20:	4290      	cmpeq	r0, r2
 8006c22:	d3d0      	bcc.n	8006bc6 <z_vprintk+0x15e>
				_printk_dec_ulong(out, ctx, u, padding,
 8006c24:	f8cd a000 	str.w	sl, [sp]
 8006c28:	464b      	mov	r3, r9
 8006c2a:	e7de      	b.n	8006bea <z_vprintk+0x182>
				out('0', ctx);
 8006c2c:	4639      	mov	r1, r7
 8006c2e:	2030      	movs	r0, #48	; 0x30
 8006c30:	47b0      	blx	r6
				out('x', ctx);
 8006c32:	4639      	mov	r1, r7
 8006c34:	2078      	movs	r0, #120	; 0x78
 8006c36:	47b0      	blx	r6
					min_width = 8;
 8006c38:	f04f 0a08 	mov.w	sl, #8
				padding = PAD_ZERO_BEFORE;
 8006c3c:	f04f 0901 	mov.w	r9, #1
				if (*fmt == 'p') {
 8006c40:	9b02      	ldr	r3, [sp, #8]
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b70      	cmp	r3, #112	; 0x70
 8006c46:	d104      	bne.n	8006c52 <z_vprintk+0x1ea>
					x = va_arg(ap, unsigned int);
 8006c48:	f854 3b04 	ldr.w	r3, [r4], #4
 8006c4c:	9304      	str	r3, [sp, #16]
 8006c4e:	2300      	movs	r3, #0
 8006c50:	e00d      	b.n	8006c6e <z_vprintk+0x206>
				} else if (length_mod == 'l') {
 8006c52:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
 8006c56:	d0f7      	beq.n	8006c48 <z_vprintk+0x1e0>
				} else if (length_mod == 'L') {
 8006c58:	f1b8 0f4c 	cmp.w	r8, #76	; 0x4c
 8006c5c:	d1f4      	bne.n	8006c48 <z_vprintk+0x1e0>
					x = va_arg(ap, unsigned long long);
 8006c5e:	3407      	adds	r4, #7
 8006c60:	f024 0307 	bic.w	r3, r4, #7
 8006c64:	461c      	mov	r4, r3
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f854 2b08 	ldr.w	r2, [r4], #8
 8006c6c:	9204      	str	r2, [sp, #16]
	int digits = 0;
 8006c6e:	2100      	movs	r1, #0
	int remaining = 16; /* 16 digits max */
 8006c70:	2210      	movs	r2, #16
	int digits = 0;
 8006c72:	9103      	str	r1, [sp, #12]
	int found_largest_digit = 0;
 8006c74:	9105      	str	r1, [sp, #20]
	int shift = sizeof(num) * 8;
 8006c76:	f04f 0b40 	mov.w	fp, #64	; 0x40
		shift -= 4;
 8006c7a:	f1ab 0b04 	sub.w	fp, fp, #4
		nibble = (num >> shift) & 0xf;
 8006c7e:	9804      	ldr	r0, [sp, #16]
 8006c80:	f1cb 0c20 	rsb	ip, fp, #32
 8006c84:	f1ab 0120 	sub.w	r1, fp, #32
 8006c88:	fa20 f00b 	lsr.w	r0, r0, fp
 8006c8c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8006c90:	ea40 000c 	orr.w	r0, r0, ip
 8006c94:	fa23 f101 	lsr.w	r1, r3, r1
 8006c98:	4308      	orrs	r0, r1
		if (nibble != 0 || found_largest_digit != 0 || shift == 0) {
 8006c9a:	f010 000f 	ands.w	r0, r0, #15
 8006c9e:	d108      	bne.n	8006cb2 <z_vprintk+0x24a>
 8006ca0:	9905      	ldr	r1, [sp, #20]
 8006ca2:	b911      	cbnz	r1, 8006caa <z_vprintk+0x242>
 8006ca4:	f1bb 0f00 	cmp.w	fp, #0
 8006ca8:	d124      	bne.n	8006cf4 <z_vprintk+0x28c>
			nibble += nibble > 9 ? 87 : 48;
 8006caa:	2130      	movs	r1, #48	; 0x30
 8006cac:	e005      	b.n	8006cba <z_vprintk+0x252>
			found_largest_digit = 1;
 8006cae:	9505      	str	r5, [sp, #20]
 8006cb0:	e7e3      	b.n	8006c7a <z_vprintk+0x212>
			nibble += nibble > 9 ? 87 : 48;
 8006cb2:	2809      	cmp	r0, #9
 8006cb4:	bf8c      	ite	hi
 8006cb6:	2157      	movhi	r1, #87	; 0x57
 8006cb8:	2130      	movls	r1, #48	; 0x30
 8006cba:	4408      	add	r0, r1
			out((int)nibble, ctx);
 8006cbc:	b240      	sxtb	r0, r0
 8006cbe:	4639      	mov	r1, r7
 8006cc0:	9308      	str	r3, [sp, #32]
 8006cc2:	9205      	str	r2, [sp, #20]
 8006cc4:	47b0      	blx	r6
			digits++;
 8006cc6:	9b03      	ldr	r3, [sp, #12]
	while (shift >= 4) {
 8006cc8:	9a05      	ldr	r2, [sp, #20]
			digits++;
 8006cca:	3301      	adds	r3, #1
 8006ccc:	9303      	str	r3, [sp, #12]
	while (shift >= 4) {
 8006cce:	9b08      	ldr	r3, [sp, #32]
 8006cd0:	f1bb 0f00 	cmp.w	fp, #0
 8006cd4:	d1eb      	bne.n	8006cae <z_vprintk+0x246>
	if (padding == PAD_SPACE_AFTER) {
 8006cd6:	f1b9 0f03 	cmp.w	r9, #3
 8006cda:	f47f aed2 	bne.w	8006a82 <z_vprintk+0x1a>
		remaining = min_width * 2 - digits;
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	ebc3 054a 	rsb	r5, r3, sl, lsl #1
		while (remaining-- > 0) {
 8006ce4:	2d00      	cmp	r5, #0
 8006ce6:	f77f aecc 	ble.w	8006a82 <z_vprintk+0x1a>
			out(' ', ctx);
 8006cea:	4639      	mov	r1, r7
 8006cec:	2020      	movs	r0, #32
 8006cee:	47b0      	blx	r6
 8006cf0:	3d01      	subs	r5, #1
 8006cf2:	e7f7      	b.n	8006ce4 <z_vprintk+0x27c>
		if (remaining-- <= min_width) {
 8006cf4:	1e51      	subs	r1, r2, #1
 8006cf6:	4592      	cmp	sl, r2
 8006cf8:	9108      	str	r1, [sp, #32]
 8006cfa:	db07      	blt.n	8006d0c <z_vprintk+0x2a4>
			if (padding == PAD_ZERO_BEFORE) {
 8006cfc:	f1b9 0f01 	cmp.w	r9, #1
 8006d00:	d106      	bne.n	8006d10 <z_vprintk+0x2a8>
 8006d02:	9309      	str	r3, [sp, #36]	; 0x24
				out('0', ctx);
 8006d04:	4639      	mov	r1, r7
 8006d06:	2030      	movs	r0, #48	; 0x30
				out(' ', ctx);
 8006d08:	47b0      	blx	r6
 8006d0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
					x = va_arg(ap, unsigned int);
 8006d0c:	9a08      	ldr	r2, [sp, #32]
 8006d0e:	e7b4      	b.n	8006c7a <z_vprintk+0x212>
			} else if (padding == PAD_SPACE_BEFORE) {
 8006d10:	f1b9 0f02 	cmp.w	r9, #2
 8006d14:	d1fa      	bne.n	8006d0c <z_vprintk+0x2a4>
 8006d16:	9309      	str	r3, [sp, #36]	; 0x24
				out(' ', ctx);
 8006d18:	4639      	mov	r1, r7
 8006d1a:	2020      	movs	r0, #32
 8006d1c:	e7f4      	b.n	8006d08 <z_vprintk+0x2a0>
					out((int)(*s++), ctx);
 8006d1e:	4639      	mov	r1, r7
 8006d20:	47b0      	blx	r6
 8006d22:	e6fb      	b.n	8006b1c <z_vprintk+0xb4>
				out(c, ctx);
 8006d24:	4639      	mov	r1, r7
 8006d26:	f854 0b04 	ldr.w	r0, [r4], #4
 8006d2a:	e6d7      	b.n	8006adc <z_vprintk+0x74>
				length_mod = 0;
 8006d2c:	46a8      	mov	r8, r5
				padding = PAD_NONE;
 8006d2e:	46a9      	mov	r9, r5
				min_width = -1;
 8006d30:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				might_format = 1;
 8006d34:	2501      	movs	r5, #1
 8006d36:	e6ac      	b.n	8006a92 <z_vprintk+0x2a>
				padding = PAD_SPACE_AFTER;
 8006d38:	f04f 0903 	mov.w	r9, #3
 8006d3c:	e6a9      	b.n	8006a92 <z_vprintk+0x2a>
					padding = PAD_ZERO_BEFORE;
 8006d3e:	f04f 0901 	mov.w	r9, #1
 8006d42:	e6a6      	b.n	8006a92 <z_vprintk+0x2a>
			might_format = 0;
 8006d44:	4605      	mov	r5, r0
		++fmt;
 8006d46:	e6a4      	b.n	8006a92 <z_vprintk+0x2a>

08006d48 <printk>:
{
 8006d48:	b40f      	push	{r0, r1, r2, r3}
 8006d4a:	b507      	push	{r0, r1, r2, lr}
 8006d4c:	a904      	add	r1, sp, #16
 8006d4e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
 8006d52:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
 8006d54:	f7fd feb8 	bl	8004ac8 <vprintk>
}
 8006d58:	b003      	add	sp, #12
 8006d5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8006d5e:	b004      	add	sp, #16
 8006d60:	4770      	bx	lr

08006d62 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
 8006d62:	4770      	bx	lr

08006d64 <__stm32_exti_isr_0>:
	__stm32_exti_isr(0, 1, arg);
 8006d64:	4602      	mov	r2, r0
 8006d66:	2101      	movs	r1, #1
 8006d68:	2000      	movs	r0, #0
 8006d6a:	f7fd beff 	b.w	8004b6c <__stm32_exti_isr>

08006d6e <__stm32_exti_isr_1>:
	__stm32_exti_isr(1, 2, arg);
 8006d6e:	4602      	mov	r2, r0
 8006d70:	2102      	movs	r1, #2
 8006d72:	2001      	movs	r0, #1
 8006d74:	f7fd befa 	b.w	8004b6c <__stm32_exti_isr>

08006d78 <__stm32_exti_isr_2>:
	__stm32_exti_isr(2, 3, arg);
 8006d78:	4602      	mov	r2, r0
 8006d7a:	2103      	movs	r1, #3
 8006d7c:	2002      	movs	r0, #2
 8006d7e:	f7fd bef5 	b.w	8004b6c <__stm32_exti_isr>

08006d82 <__stm32_exti_isr_3>:
	__stm32_exti_isr(3, 4, arg);
 8006d82:	4602      	mov	r2, r0
 8006d84:	2104      	movs	r1, #4
 8006d86:	2003      	movs	r0, #3
 8006d88:	f7fd bef0 	b.w	8004b6c <__stm32_exti_isr>

08006d8c <__stm32_exti_isr_4>:
	__stm32_exti_isr(4, 5, arg);
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	2105      	movs	r1, #5
 8006d90:	2004      	movs	r0, #4
 8006d92:	f7fd beeb 	b.w	8004b6c <__stm32_exti_isr>

08006d96 <__stm32_exti_isr_9_5>:
	__stm32_exti_isr(5, 10, arg);
 8006d96:	4602      	mov	r2, r0
 8006d98:	210a      	movs	r1, #10
 8006d9a:	2005      	movs	r0, #5
 8006d9c:	f7fd bee6 	b.w	8004b6c <__stm32_exti_isr>

08006da0 <__stm32_exti_isr_15_10>:
	__stm32_exti_isr(10, 16, arg);
 8006da0:	4602      	mov	r2, r0
 8006da2:	2110      	movs	r1, #16
 8006da4:	200a      	movs	r0, #10
 8006da6:	f7fd bee1 	b.w	8004b6c <__stm32_exti_isr>

08006daa <__stm32_exti_isr_16>:
	__stm32_exti_isr(16, 17, arg);
 8006daa:	4602      	mov	r2, r0
 8006dac:	2111      	movs	r1, #17
 8006dae:	2010      	movs	r0, #16
 8006db0:	f7fd bedc 	b.w	8004b6c <__stm32_exti_isr>

08006db4 <__stm32_exti_isr_18>:
	__stm32_exti_isr(18, 19, arg);
 8006db4:	4602      	mov	r2, r0
 8006db6:	2113      	movs	r1, #19
 8006db8:	2012      	movs	r0, #18
 8006dba:	f7fd bed7 	b.w	8004b6c <__stm32_exti_isr>

08006dbe <__stm32_exti_isr_21>:
	__stm32_exti_isr(21, 22, arg);
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	2116      	movs	r1, #22
 8006dc2:	2015      	movs	r0, #21
 8006dc4:	f7fd bed2 	b.w	8004b6c <__stm32_exti_isr>

08006dc8 <__stm32_exti_isr_22>:
	__stm32_exti_isr(22, 23, arg);
 8006dc8:	4602      	mov	r2, r0
 8006dca:	2117      	movs	r1, #23
 8006dcc:	2016      	movs	r0, #22
 8006dce:	f7fd becd 	b.w	8004b6c <__stm32_exti_isr>

08006dd2 <stm32_exti_init>:
	defined(CONFIG_SOC_SERIES_STM32L1X) || \
	defined(CONFIG_SOC_SERIES_STM32L4X) || \
	defined(CONFIG_SOC_SERIES_STM32MP1X) || \
	defined(CONFIG_SOC_SERIES_STM32WBX) || \
	defined(CONFIG_SOC_SERIES_STM32G4X)
	IRQ_CONNECT(EXTI0_IRQn,
 8006dd2:	2200      	movs	r2, #0
{
 8006dd4:	b508      	push	{r3, lr}
	IRQ_CONNECT(EXTI0_IRQn,
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	2006      	movs	r0, #6
 8006dda:	f7fe f9c7 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI0_IRQ_PRI,
		__stm32_exti_isr_0, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI1_IRQn,
 8006dde:	2200      	movs	r2, #0
 8006de0:	4611      	mov	r1, r2
 8006de2:	2007      	movs	r0, #7
 8006de4:	f7fe f9c2 	bl	800516c <z_arm_irq_priority_set>
	IRQ_CONNECT(EXTI2_TSC_IRQn,
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#else
	IRQ_CONNECT(EXTI2_IRQn,
 8006de8:	2200      	movs	r2, #0
 8006dea:	4611      	mov	r1, r2
 8006dec:	2008      	movs	r0, #8
 8006dee:	f7fe f9bd 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI2_IRQ_PRI,
		__stm32_exti_isr_2, DEVICE_GET(exti_stm32),
		0);
#endif /* CONFIG_SOC_SERIES_STM32F3X */
	IRQ_CONNECT(EXTI3_IRQn,
 8006df2:	2200      	movs	r2, #0
 8006df4:	4611      	mov	r1, r2
 8006df6:	2009      	movs	r0, #9
 8006df8:	f7fe f9b8 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI3_IRQ_PRI,
		__stm32_exti_isr_3, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI4_IRQn,
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	4611      	mov	r1, r2
 8006e00:	200a      	movs	r0, #10
 8006e02:	f7fe f9b3 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI4_IRQ_PRI,
		__stm32_exti_isr_4, DEVICE_GET(exti_stm32),
		0);
#ifndef CONFIG_SOC_SERIES_STM32MP1X
	IRQ_CONNECT(EXTI9_5_IRQn,
 8006e06:	2200      	movs	r2, #0
 8006e08:	4611      	mov	r1, r2
 8006e0a:	2017      	movs	r0, #23
 8006e0c:	f7fe f9ae 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_EXTI9_5_IRQ_PRI,
		__stm32_exti_isr_9_5, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(EXTI15_10_IRQn,
 8006e10:	2200      	movs	r2, #0
 8006e12:	4611      	mov	r1, r2
 8006e14:	2028      	movs	r0, #40	; 0x28
 8006e16:	f7fe f9a9 	bl	800516c <z_arm_irq_priority_set>
#endif /* CONFIG_SOC_SERIES_STM32MP1X */

#if defined(CONFIG_SOC_SERIES_STM32F2X) || \
	defined(CONFIG_SOC_SERIES_STM32F4X) || \
	defined(CONFIG_SOC_SERIES_STM32F7X)
	IRQ_CONNECT(PVD_IRQn,
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	4611      	mov	r1, r2
 8006e1e:	2001      	movs	r0, #1
 8006e20:	f7fe f9a4 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_PVD_IRQ_PRI,
		__stm32_exti_isr_16, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(OTG_FS_WKUP_IRQn,
 8006e24:	2200      	movs	r2, #0
 8006e26:	4611      	mov	r1, r2
 8006e28:	202a      	movs	r0, #42	; 0x2a
 8006e2a:	f7fe f99f 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_OTG_FS_WKUP_IRQ_PRI,
		__stm32_exti_isr_18, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(TAMP_STAMP_IRQn,
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4611      	mov	r1, r2
 8006e32:	2002      	movs	r0, #2
 8006e34:	f7fe f99a 	bl	800516c <z_arm_irq_priority_set>
		CONFIG_EXTI_STM32_TAMP_STAMP_IRQ_PRI,
		__stm32_exti_isr_21, DEVICE_GET(exti_stm32),
		0);
	IRQ_CONNECT(RTC_WKUP_IRQn,
 8006e38:	2200      	movs	r2, #0
 8006e3a:	4611      	mov	r1, r2
 8006e3c:	2003      	movs	r0, #3
 8006e3e:	f7fe f995 	bl	800516c <z_arm_irq_priority_set>
}
 8006e42:	2000      	movs	r0, #0
 8006e44:	bd08      	pop	{r3, pc}

08006e46 <config_pll_init>:
	pllinit->PLLN = CONFIG_CLOCK_STM32_PLL_N_MULTIPLIER;
 8006e46:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8006e4a:	2208      	movs	r2, #8
 8006e4c:	e9c0 2300 	strd	r2, r3, [r0]
	pllinit->PLLP = pllp(CONFIG_CLOCK_STM32_PLL_P_DIVISOR);
 8006e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006e54:	6083      	str	r3, [r0, #8]
}
 8006e56:	4770      	bx	lr

08006e58 <LL_RCC_MSI_Disable>:
 * @brief Function kept for driver genericity
 */
void LL_RCC_MSI_Disable(void)
{
	/* Do nothing */
}
 8006e58:	4770      	bx	lr

08006e5a <z_irq_spurious>:
 * @return N/A
 */
void z_irq_spurious(void *unused)
{
	ARG_UNUSED(unused);
	z_arm_reserved();
 8006e5a:	f7fe b9f9 	b.w	8005250 <z_arm_bus_fault>

08006e5e <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
 8006e5e:	f000 baa4 	b.w	80073aa <z_fatal_error>

08006e62 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
 8006e62:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
 8006e64:	6800      	ldr	r0, [r0, #0]
 8006e66:	f000 baa0 	b.w	80073aa <z_fatal_error>

08006e6a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
 8006e6a:	b508      	push	{r3, lr}
	handler();
 8006e6c:	f7fe f9fa 	bl	8005264 <z_SysNmiOnReset>
	z_arm_exc_exit();
}
 8006e70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_exc_exit();
 8006e74:	f7fe b8da 	b.w	800502c <z_arm_exc_exit>

08006e78 <z_arm_configure_dynamic_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
 8006e78:	b507      	push	{r0, r1, r2, lr}

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	a801      	add	r0, sp, #4
 8006e7e:	f7fe fbeb 	bl	8005658 <arm_core_mpu_configure_dynamic_mpu_regions>
		(const struct k_mem_partition **)dynamic_regions,
		region_num);
}
 8006e82:	b003      	add	sp, #12
 8006e84:	f85d fb04 	ldr.w	pc, [sp], #4

08006e88 <_stdout_hook_default>:
}
 8006e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e8c:	4770      	bx	lr

08006e8e <_stdin_hook_default>:
}
 8006e8e:	2000      	movs	r0, #0
 8006e90:	4770      	bx	lr

08006e92 <_read>:
{
 8006e92:	4608      	mov	r0, r1
	return z_impl_zephyr_read_stdin(buf, nbytes);
 8006e94:	4611      	mov	r1, r2
 8006e96:	f7fe bbfb 	b.w	8005690 <z_impl_zephyr_read_stdin>

08006e9a <_write>:
{
 8006e9a:	4608      	mov	r0, r1
	return z_impl_zephyr_write_stdout(buf, nbytes);
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	f7fe bc0b 	b.w	80056b8 <z_impl_zephyr_write_stdout>

08006ea2 <_close>:
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ea6:	4770      	bx	lr

08006ea8 <_lseek>:
}
 8006ea8:	2000      	movs	r0, #0
 8006eaa:	4770      	bx	lr

08006eac <_isatty>:
}
 8006eac:	2001      	movs	r0, #1
 8006eae:	4770      	bx	lr

08006eb0 <_fstat>:
	st->st_mode = S_IFCHR;
 8006eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006eb4:	604b      	str	r3, [r1, #4]
}
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	4770      	bx	lr

08006eba <gpio_stm32_isr>:
	struct gpio_stm32_data *data = dev->driver_data;
 8006eba:	688a      	ldr	r2, [r1, #8]
	if ((BIT(line) & data->cb_pins) != 0) {
 8006ebc:	6813      	ldr	r3, [r2, #0]
 8006ebe:	40c3      	lsrs	r3, r0
 8006ec0:	07db      	lsls	r3, r3, #31
{
 8006ec2:	b570      	push	{r4, r5, r6, lr}
 8006ec4:	460e      	mov	r6, r1
	if ((BIT(line) & data->cb_pins) != 0) {
 8006ec6:	d50f      	bpl.n	8006ee8 <gpio_stm32_isr+0x2e>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8006ec8:	6851      	ldr	r1, [r2, #4]
 8006eca:	b169      	cbz	r1, 8006ee8 <gpio_stm32_isr+0x2e>
		gpio_fire_callbacks(&data->cb, dev, BIT(line));
 8006ecc:	2501      	movs	r5, #1
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006ece:	680c      	ldr	r4, [r1, #0]
 8006ed0:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
 8006ed2:	688b      	ldr	r3, [r1, #8]
 8006ed4:	421d      	tst	r5, r3
 8006ed6:	d003      	beq.n	8006ee0 <gpio_stm32_isr+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
 8006ed8:	684b      	ldr	r3, [r1, #4]
 8006eda:	462a      	mov	r2, r5
 8006edc:	4630      	mov	r0, r6
 8006ede:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
 8006ee0:	b114      	cbz	r4, 8006ee8 <gpio_stm32_isr+0x2e>
 8006ee2:	4621      	mov	r1, r4
 8006ee4:	6824      	ldr	r4, [r4, #0]
 8006ee6:	e7f4      	b.n	8006ed2 <gpio_stm32_isr+0x18>
}
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}

08006eea <gpio_stm32_write>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8006eea:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006eec:	6880      	ldr	r0, [r0, #8]
{
 8006eee:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006ef0:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8006ef2:	b941      	cbnz	r1, 8006f06 <gpio_stm32_write+0x1c>
	pinval = 1 << pin;
 8006ef4:	2401      	movs	r4, #1
 8006ef6:	fa04 f202 	lsl.w	r2, r4, r2
	if (value != 0U) {
 8006efa:	b113      	cbz	r3, 8006f02 <gpio_stm32_write+0x18>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006efc:	6182      	str	r2, [r0, #24]
}
 8006efe:	4608      	mov	r0, r1
 8006f00:	bd10      	pop	{r4, pc}
 8006f02:	0412      	lsls	r2, r2, #16
 8006f04:	e7fa      	b.n	8006efc <gpio_stm32_write+0x12>
		return -ENOTSUP;
 8006f06:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8006f0a:	e7f8      	b.n	8006efe <gpio_stm32_write+0x14>

08006f0c <gpio_stm32_read>:
	const struct gpio_stm32_config *cfg = dev->config->config_info;
 8006f0c:	6800      	ldr	r0, [r0, #0]
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006f0e:	6880      	ldr	r0, [r0, #8]
{
 8006f10:	b510      	push	{r4, lr}
	GPIO_TypeDef *gpio = (GPIO_TypeDef *)cfg->base;
 8006f12:	6800      	ldr	r0, [r0, #0]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8006f14:	b931      	cbnz	r1, 8006f24 <gpio_stm32_read+0x18>
  return (uint32_t)(READ_REG(GPIOx->IDR));
 8006f16:	6904      	ldr	r4, [r0, #16]
	*value = (LL_GPIO_ReadInputPort(gpio) >> pin) & 0x1;
 8006f18:	40d4      	lsrs	r4, r2
 8006f1a:	f004 0401 	and.w	r4, r4, #1
 8006f1e:	601c      	str	r4, [r3, #0]
}
 8006f20:	4608      	mov	r0, r1
 8006f22:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
 8006f24:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8006f28:	e7fa      	b.n	8006f20 <gpio_stm32_read+0x14>

08006f2a <gpio_stm32_manage_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8006f2a:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_IS_EMPTY(slist)
 8006f2c:	6858      	ldr	r0, [r3, #4]
{
 8006f2e:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
 8006f30:	b158      	cbz	r0, 8006f4a <gpio_stm32_manage_callback+0x20>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006f32:	2400      	movs	r4, #0
 8006f34:	4281      	cmp	r1, r0
 8006f36:	d113      	bne.n	8006f60 <gpio_stm32_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
 8006f38:	6808      	ldr	r0, [r1, #0]
 8006f3a:	b95c      	cbnz	r4, 8006f54 <gpio_stm32_manage_callback+0x2a>
 8006f3c:	689c      	ldr	r4, [r3, #8]
	list->head = node;
 8006f3e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
 8006f40:	42a1      	cmp	r1, r4
 8006f42:	d100      	bne.n	8006f46 <gpio_stm32_manage_callback+0x1c>
	list->tail = node;
 8006f44:	6098      	str	r0, [r3, #8]
	parent->next = child;
 8006f46:	2000      	movs	r0, #0
 8006f48:	6008      	str	r0, [r1, #0]
	if (set) {
 8006f4a:	b972      	cbnz	r2, 8006f6a <gpio_stm32_manage_callback+0x40>
	return 0;
 8006f4c:	2000      	movs	r0, #0
}
 8006f4e:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006f50:	4628      	mov	r0, r5
 8006f52:	e7ef      	b.n	8006f34 <gpio_stm32_manage_callback+0xa>
	parent->next = child;
 8006f54:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
 8006f56:	6898      	ldr	r0, [r3, #8]
 8006f58:	4281      	cmp	r1, r0
	list->tail = node;
 8006f5a:	bf08      	it	eq
 8006f5c:	609c      	streq	r4, [r3, #8]
 8006f5e:	e7f2      	b.n	8006f46 <gpio_stm32_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
 8006f60:	6805      	ldr	r5, [r0, #0]
	return node->next;
 8006f62:	4604      	mov	r4, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
 8006f64:	2d00      	cmp	r5, #0
 8006f66:	d1f3      	bne.n	8006f50 <gpio_stm32_manage_callback+0x26>
			if (!set) {
 8006f68:	b13a      	cbz	r2, 8006f7a <gpio_stm32_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
 8006f6a:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
 8006f6c:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
 8006f6e:	6898      	ldr	r0, [r3, #8]
	list->head = node;
 8006f70:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
 8006f72:	2800      	cmp	r0, #0
 8006f74:	d1ea      	bne.n	8006f4c <gpio_stm32_manage_callback+0x22>
	list->tail = node;
 8006f76:	6099      	str	r1, [r3, #8]
 8006f78:	e7e9      	b.n	8006f4e <gpio_stm32_manage_callback+0x24>
				return -EINVAL;
 8006f7a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&data->cb, callback, set);
 8006f7e:	e7e6      	b.n	8006f4e <gpio_stm32_manage_callback+0x24>

08006f80 <gpio_stm32_enable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8006f80:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8006f82:	b939      	cbnz	r1, 8006f94 <gpio_stm32_enable_callback+0x14>
	data->cb_pins |= BIT(pin);
 8006f84:	2301      	movs	r3, #1
 8006f86:	fa03 f202 	lsl.w	r2, r3, r2
 8006f8a:	6803      	ldr	r3, [r0, #0]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	6003      	str	r3, [r0, #0]
}
 8006f90:	4608      	mov	r0, r1
 8006f92:	4770      	bx	lr
		return -ENOTSUP;
 8006f94:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8006f98:	e7fa      	b.n	8006f90 <gpio_stm32_enable_callback+0x10>

08006f9a <gpio_stm32_disable_callback>:
	struct gpio_stm32_data *data = dev->driver_data;
 8006f9a:	6880      	ldr	r0, [r0, #8]
	if (access_op != GPIO_ACCESS_BY_PIN) {
 8006f9c:	b941      	cbnz	r1, 8006fb0 <gpio_stm32_disable_callback+0x16>
	data->cb_pins &= ~BIT(pin);
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	fa03 f202 	lsl.w	r2, r3, r2
 8006fa4:	6803      	ldr	r3, [r0, #0]
 8006fa6:	ea23 0302 	bic.w	r3, r3, r2
 8006faa:	6003      	str	r3, [r0, #0]
}
 8006fac:	4608      	mov	r0, r1
 8006fae:	4770      	bx	lr
		return -ENOTSUP;
 8006fb0:	f06f 0185 	mvn.w	r1, #133	; 0x85
 8006fb4:	e7fa      	b.n	8006fac <gpio_stm32_disable_callback+0x12>

08006fb6 <gpio_stm32_flags_to_conf>:
	int direction = flags & GPIO_DIR_MASK;
 8006fb6:	f000 0301 	and.w	r3, r0, #1
	if (pincfg == NULL) {
 8006fba:	b1b1      	cbz	r1, 8006fea <gpio_stm32_flags_to_conf+0x34>
	if (direction == GPIO_DIR_OUT) {
 8006fbc:	b123      	cbz	r3, 8006fc8 <gpio_stm32_flags_to_conf+0x12>
		*pincfg = STM32_PINCFG_MODE_OUTPUT;
 8006fbe:	2310      	movs	r3, #16
 8006fc0:	600b      	str	r3, [r1, #0]
	return 0;
 8006fc2:	2300      	movs	r3, #0
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	4770      	bx	lr
	int pud = flags & GPIO_PUD_MASK;
 8006fc8:	f400 7040 	and.w	r0, r0, #768	; 0x300
		if (pud == GPIO_PUD_PULL_UP) {
 8006fcc:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
 8006fd0:	d103      	bne.n	8006fda <gpio_stm32_flags_to_conf+0x24>
			*pincfg |= STM32_PINCFG_PULL_UP;
 8006fd2:	f44f 7200 	mov.w	r2, #512	; 0x200
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8006fd6:	600a      	str	r2, [r1, #0]
 8006fd8:	e7f4      	b.n	8006fc4 <gpio_stm32_flags_to_conf+0xe>
		} else if (pud == GPIO_PUD_PULL_DOWN) {
 8006fda:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006fde:	d001      	beq.n	8006fe4 <gpio_stm32_flags_to_conf+0x2e>
		*pincfg = STM32_PINCFG_MODE_INPUT;
 8006fe0:	600b      	str	r3, [r1, #0]
 8006fe2:	e7ef      	b.n	8006fc4 <gpio_stm32_flags_to_conf+0xe>
			*pincfg |= STM32_PINCFG_PULL_DOWN;
 8006fe4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fe8:	e7f5      	b.n	8006fd6 <gpio_stm32_flags_to_conf+0x20>
		return -EINVAL;
 8006fea:	f06f 0315 	mvn.w	r3, #21
 8006fee:	e7e9      	b.n	8006fc4 <gpio_stm32_flags_to_conf+0xe>

08006ff0 <gpio_stm32_configure>:
{
 8006ff0:	b5f0      	push	{r4, r5, r6, r7, lr}
	mode = conf & (STM32_MODER_MASK << STM32_MODER_SHIFT);
 8006ff2:	f002 0530 	and.w	r5, r2, #48	; 0x30
	pinval = 1 << pin;
 8006ff6:	2401      	movs	r4, #1
 8006ff8:	408c      	lsls	r4, r1
	LL_GPIO_SetPinMode(gpio, pin_ll, mode >> STM32_MODER_SHIFT);
 8006ffa:	092e      	lsrs	r6, r5, #4
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8006ffc:	f8d0 c000 	ldr.w	ip, [r0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007000:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 8007004:	fab7 f787 	clz	r7, r7
 8007008:	f04f 0e03 	mov.w	lr, #3
 800700c:	007f      	lsls	r7, r7, #1
 800700e:	fa0e f707 	lsl.w	r7, lr, r7
 8007012:	ea2c 0c07 	bic.w	ip, ip, r7
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007016:	fa94 f7a4 	rbit	r7, r4
  return __builtin_clz(value);
 800701a:	fab7 f787 	clz	r7, r7
 800701e:	007f      	lsls	r7, r7, #1
 8007020:	40be      	lsls	r6, r7
 8007022:	ea46 060c 	orr.w	r6, r6, ip
	if (STM32_MODER_ALT_MODE == mode) {
 8007026:	2d20      	cmp	r5, #32
 8007028:	6006      	str	r6, [r0, #0]
 800702a:	d116      	bne.n	800705a <gpio_stm32_configure+0x6a>
		if (pin < 8) {
 800702c:	2907      	cmp	r1, #7
 800702e:	dc49      	bgt.n	80070c4 <gpio_stm32_configure+0xd4>
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007030:	6a07      	ldr	r7, [r0, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007032:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8007036:	b10e      	cbz	r6, 800703c <gpio_stm32_configure+0x4c>
  return __builtin_clz(value);
 8007038:	fab6 f586 	clz	r5, r6
 800703c:	260f      	movs	r6, #15
 800703e:	00ad      	lsls	r5, r5, #2
 8007040:	fa06 f505 	lsl.w	r5, r6, r5
 8007044:	ea27 0605 	bic.w	r6, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007048:	fa94 f5a4 	rbit	r5, r4
  return __builtin_clz(value);
 800704c:	fab5 f585 	clz	r5, r5
 8007050:	00ad      	lsls	r5, r5, #2
 8007052:	fa03 f505 	lsl.w	r5, r3, r5
 8007056:	4335      	orrs	r5, r6
 8007058:	6205      	str	r5, [r0, #32]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800705a:	6845      	ldr	r5, [r0, #4]
	LL_GPIO_SetPinOutputType(gpio, pin_ll, otype >> STM32_OTYPER_SHIFT);
 800705c:	f3c2 1380 	ubfx	r3, r2, #6, #1
 8007060:	ea25 0504 	bic.w	r5, r5, r4
 8007064:	fa03 f101 	lsl.w	r1, r3, r1
 8007068:	4329      	orrs	r1, r5
 800706a:	6041      	str	r1, [r0, #4]
	LL_GPIO_SetPinSpeed(gpio, pin_ll, ospeed >> STM32_OSPEEDR_SHIFT);
 800706c:	f3c2 13c1 	ubfx	r3, r2, #7, #2
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8007070:	6885      	ldr	r5, [r0, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007072:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 8007076:	fab1 f181 	clz	r1, r1
 800707a:	2603      	movs	r6, #3
 800707c:	0049      	lsls	r1, r1, #1
 800707e:	fa06 f101 	lsl.w	r1, r6, r1
 8007082:	ea25 0501 	bic.w	r5, r5, r1
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007086:	fa94 f1a4 	rbit	r1, r4
  return __builtin_clz(value);
 800708a:	fab1 f181 	clz	r1, r1
 800708e:	0049      	lsls	r1, r1, #1
 8007090:	408b      	lsls	r3, r1
 8007092:	432b      	orrs	r3, r5
 8007094:	6083      	str	r3, [r0, #8]
	LL_GPIO_SetPinPull(gpio, pin_ll, pupd >> STM32_PUPDR_SHIFT);
 8007096:	f3c2 2241 	ubfx	r2, r2, #9, #2
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800709a:	68c1      	ldr	r1, [r0, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800709c:	fa94 f3a4 	rbit	r3, r4
  return __builtin_clz(value);
 80070a0:	fab3 f383 	clz	r3, r3
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	fa06 f303 	lsl.w	r3, r6, r3
 80070aa:	ea21 0303 	bic.w	r3, r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070ae:	fa94 f4a4 	rbit	r4, r4
  return __builtin_clz(value);
 80070b2:	fab4 f484 	clz	r4, r4
 80070b6:	0064      	lsls	r4, r4, #1
 80070b8:	fa02 f404 	lsl.w	r4, r2, r4
 80070bc:	431c      	orrs	r4, r3
 80070be:	60c4      	str	r4, [r0, #12]
}
 80070c0:	2000      	movs	r0, #0
 80070c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80070c4:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80070c6:	0a26      	lsrs	r6, r4, #8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070c8:	fa96 fca6 	rbit	ip, r6
  if (value == 0U)
 80070cc:	f1bc 0f00 	cmp.w	ip, #0
 80070d0:	d001      	beq.n	80070d6 <gpio_stm32_configure+0xe6>
  return __builtin_clz(value);
 80070d2:	fabc f58c 	clz	r5, ip
 80070d6:	f04f 0c0f 	mov.w	ip, #15
 80070da:	00ad      	lsls	r5, r5, #2
 80070dc:	fa0c f505 	lsl.w	r5, ip, r5
 80070e0:	ea27 0505 	bic.w	r5, r7, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e4:	fa96 f6a6 	rbit	r6, r6
  return __builtin_clz(value);
 80070e8:	fab6 f686 	clz	r6, r6
 80070ec:	00b6      	lsls	r6, r6, #2
 80070ee:	40b3      	lsls	r3, r6
 80070f0:	432b      	orrs	r3, r5
 80070f2:	6243      	str	r3, [r0, #36]	; 0x24
 80070f4:	e7b1      	b.n	800705a <gpio_stm32_configure+0x6a>

080070f6 <pwm_stm32_get_cycles_per_sec>:
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 80070f6:	6803      	ldr	r3, [r0, #0]
{
 80070f8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	const struct pwm_stm32_config *cfg = DEV_CFG(dev);
 80070fa:	689e      	ldr	r6, [r3, #8]
	struct pwm_stm32_data *data = DEV_DATA(dev);
 80070fc:	6885      	ldr	r5, [r0, #8]
	if (cycles == NULL) {
 80070fe:	4614      	mov	r4, r2
 8007100:	b1a2      	cbz	r2, 800712c <pwm_stm32_get_cycles_per_sec+0x36>
	clock_control_get_rate(data->clock,
 8007102:	6c68      	ldr	r0, [r5, #68]	; 0x44
		(const struct clock_control_driver_api *)dev->driver_api;

	__ASSERT(api->get_rate != NULL, "%s not implemented for device %s",
		__func__, dev->config->name);

	return api->get_rate(dev, sys, rate);
 8007104:	6843      	ldr	r3, [r0, #4]
 8007106:	aa01      	add	r2, sp, #4
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	1d31      	adds	r1, r6, #4
 800710c:	4798      	blx	r3
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 800710e:	6872      	ldr	r2, [r6, #4]
	tim_clk = __get_tim_clk(bus_clk,
 8007110:	9b01      	ldr	r3, [sp, #4]
	if (pclken->bus == STM32_CLOCK_BUS_APB1) {
 8007112:	2a02      	cmp	r2, #2
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 8007114:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8007116:	f04f 0000 	mov.w	r0, #0
		tim_clk = bus_clk * 2U;
 800711a:	bf08      	it	eq
 800711c:	005b      	lsleq	r3, r3, #1
	*cycles = (u64_t)(tim_clk / (data->pwm_prescaler + 1));
 800711e:	3201      	adds	r2, #1
 8007120:	fbb3 f3f2 	udiv	r3, r3, r2
 8007124:	e9c4 3000 	strd	r3, r0, [r4]
}
 8007128:	b002      	add	sp, #8
 800712a:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
 800712c:	f06f 0015 	mvn.w	r0, #21
 8007130:	e7fa      	b.n	8007128 <pwm_stm32_get_cycles_per_sec+0x32>

08007132 <LL_USART_ClearFlag_FE>:
  * @rmtoll SR           PE            LL_USART_ClearFlag_PE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_PE(USART_TypeDef *USARTx)
{
 8007132:	b082      	sub	sp, #8
  __IO uint32_t tmpreg;
  tmpreg = USARTx->SR;
 8007134:	6803      	ldr	r3, [r0, #0]
 8007136:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8007138:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 800713a:	6843      	ldr	r3, [r0, #4]
 800713c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800713e:	9b01      	ldr	r3, [sp, #4]
}
 8007140:	b002      	add	sp, #8
 8007142:	4770      	bx	lr

08007144 <uart_stm32_poll_in>:
{
 8007144:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007146:	6803      	ldr	r3, [r0, #0]
 8007148:	689b      	ldr	r3, [r3, #8]
 800714a:	681a      	ldr	r2, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 800714c:	6813      	ldr	r3, [r2, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 800714e:	0718      	lsls	r0, r3, #28
 8007150:	d502      	bpl.n	8007158 <uart_stm32_poll_in+0x14>
		LL_USART_ClearFlag_ORE(UartInstance);
 8007152:	4610      	mov	r0, r2
 8007154:	f7ff ffed 	bl	8007132 <LL_USART_ClearFlag_FE>
  return (READ_BIT(USARTx->SR, USART_SR_RXNE) == (USART_SR_RXNE));
 8007158:	6813      	ldr	r3, [r2, #0]
	if (!LL_USART_IsActiveFlag_RXNE(UartInstance)) {
 800715a:	069b      	lsls	r3, r3, #26
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 800715c:	bf43      	ittte	mi
 800715e:	6853      	ldrmi	r3, [r2, #4]
 8007160:	700b      	strbmi	r3, [r1, #0]
	return 0;
 8007162:	2000      	movmi	r0, #0
		return -1;
 8007164:	f04f 30ff 	movpl.w	r0, #4294967295	; 0xffffffff
}
 8007168:	bd08      	pop	{r3, pc}

0800716a <uart_stm32_poll_out>:
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 800716a:	6803      	ldr	r3, [r0, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	681b      	ldr	r3, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8007170:	681a      	ldr	r2, [r3, #0]
	while (!LL_USART_IsActiveFlag_TXE(UartInstance)) {
 8007172:	0612      	lsls	r2, r2, #24
 8007174:	d5fc      	bpl.n	8007170 <uart_stm32_poll_out+0x6>
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8007176:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800717a:	601a      	str	r2, [r3, #0]
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
  USARTx->DR = Value;
 800717c:	6059      	str	r1, [r3, #4]
}
 800717e:	4770      	bx	lr

08007180 <uart_stm32_err_check>:
{
 8007180:	b508      	push	{r3, lr}
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007182:	6803      	ldr	r3, [r0, #0]
 8007184:	689b      	ldr	r3, [r3, #8]
 8007186:	6819      	ldr	r1, [r3, #0]
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8007188:	680a      	ldr	r2, [r1, #0]
  return (READ_BIT(USARTx->SR, USART_SR_PE) == (USART_SR_PE));
 800718a:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_PE(UartInstance)) {
 800718c:	07db      	lsls	r3, r3, #31
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 800718e:	680b      	ldr	r3, [r1, #0]
	if (LL_USART_IsActiveFlag_ORE(UartInstance)) {
 8007190:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		err |= UART_ERROR_PARITY;
 8007194:	bf48      	it	mi
 8007196:	f042 0202 	orrmi.w	r2, r2, #2
	if (LL_USART_IsActiveFlag_FE(UartInstance)) {
 800719a:	0798      	lsls	r0, r3, #30
		err |= UART_ERROR_FRAMING;
 800719c:	bf48      	it	mi
 800719e:	f042 0204 	orrmi.w	r2, r2, #4
	if (err & UART_ERROR_OVERRUN) {
 80071a2:	07d3      	lsls	r3, r2, #31
 80071a4:	d502      	bpl.n	80071ac <uart_stm32_err_check+0x2c>
		LL_USART_ClearFlag_ORE(UartInstance);
 80071a6:	4608      	mov	r0, r1
 80071a8:	f7ff ffc3 	bl	8007132 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_PARITY) {
 80071ac:	0790      	lsls	r0, r2, #30
 80071ae:	d502      	bpl.n	80071b6 <uart_stm32_err_check+0x36>
		LL_USART_ClearFlag_PE(UartInstance);
 80071b0:	4608      	mov	r0, r1
 80071b2:	f7ff ffbe 	bl	8007132 <LL_USART_ClearFlag_FE>
	if (err & UART_ERROR_FRAMING) {
 80071b6:	0753      	lsls	r3, r2, #29
 80071b8:	d502      	bpl.n	80071c0 <uart_stm32_err_check+0x40>
		LL_USART_ClearFlag_FE(UartInstance);
 80071ba:	4608      	mov	r0, r1
 80071bc:	f7ff ffb9 	bl	8007132 <LL_USART_ClearFlag_FE>
	LL_USART_ClearFlag_NE(UartInstance);
 80071c0:	4608      	mov	r0, r1
 80071c2:	f7ff ffb6 	bl	8007132 <LL_USART_ClearFlag_FE>
}
 80071c6:	4610      	mov	r0, r2
 80071c8:	bd08      	pop	{r3, pc}

080071ca <uart_stm32_set_baudrate>:
	const struct uart_stm32_config *config = DEV_CFG(dev);
 80071ca:	6803      	ldr	r3, [r0, #0]
{
 80071cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80071ce:	460d      	mov	r5, r1
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80071d0:	6899      	ldr	r1, [r3, #8]
	clock_control_get_rate(data->clock,
 80071d2:	6883      	ldr	r3, [r0, #8]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 80071d4:	f851 4b08 	ldr.w	r4, [r1], #8
	clock_control_get_rate(data->clock,
 80071d8:	6858      	ldr	r0, [r3, #4]
 80071da:	6843      	ldr	r3, [r0, #4]
 80071dc:	aa01      	add	r2, sp, #4
 80071de:	68db      	ldr	r3, [r3, #12]
 80071e0:	4798      	blx	r3
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80071e2:	9b01      	ldr	r3, [sp, #4]
 80071e4:	2264      	movs	r2, #100	; 0x64
 80071e6:	2119      	movs	r1, #25
 80071e8:	4359      	muls	r1, r3
 80071ea:	00ad      	lsls	r5, r5, #2
 80071ec:	fbb1 f1f5 	udiv	r1, r1, r5
 80071f0:	fbb1 f0f2 	udiv	r0, r1, r2
 80071f4:	fb02 1310 	mls	r3, r2, r0, r1
 80071f8:	011b      	lsls	r3, r3, #4
 80071fa:	3332      	adds	r3, #50	; 0x32
 80071fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007200:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8007204:	b29b      	uxth	r3, r3
 8007206:	60a3      	str	r3, [r4, #8]
}
 8007208:	b003      	add	sp, #12
 800720a:	bd30      	pop	{r4, r5, pc}

0800720c <uart_stm32_config_get>:
	cfg->baudrate = data->baud_rate;
 800720c:	6883      	ldr	r3, [r0, #8]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	600b      	str	r3, [r1, #0]
	USART_TypeDef *UartInstance = UART_STRUCT(dev);
 8007212:	6803      	ldr	r3, [r0, #0]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	681a      	ldr	r2, [r3, #0]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE));
 8007218:	68d3      	ldr	r3, [r2, #12]
 800721a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
	switch (parity) {
 800721e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007222:	d023      	beq.n	800726c <uart_stm32_config_get+0x60>
		return UART_CFG_PARITY_NONE;
 8007224:	f5a3 60c0 	sub.w	r0, r3, #1536	; 0x600
 8007228:	4243      	negs	r3, r0
 800722a:	4143      	adcs	r3, r0
	cfg->parity = uart_stm32_ll2cfg_parity(uart_stm32_get_parity(dev));
 800722c:	710b      	strb	r3, [r1, #4]
  return (uint32_t)(READ_BIT(USARTx->CR2, USART_CR2_STOP));
 800722e:	6913      	ldr	r3, [r2, #16]
 8007230:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
	switch (sb) {
 8007234:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007238:	d01a      	beq.n	8007270 <uart_stm32_config_get+0x64>
 800723a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800723e:	d019      	beq.n	8007274 <uart_stm32_config_get+0x68>
 8007240:	2b00      	cmp	r3, #0
		return UART_CFG_STOP_BITS_2;
 8007242:	bf0c      	ite	eq
 8007244:	2301      	moveq	r3, #1
 8007246:	2303      	movne	r3, #3
	cfg->stop_bits = uart_stm32_ll2cfg_stopbits(
 8007248:	714b      	strb	r3, [r1, #5]
  return (uint32_t)(READ_BIT(USARTx->CR1, USART_CR1_M));
 800724a:	68d3      	ldr	r3, [r2, #12]
	switch (db) {
 800724c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
		return UART_CFG_DATA_BITS_8;
 8007250:	bf14      	ite	ne
 8007252:	2304      	movne	r3, #4
 8007254:	2303      	moveq	r3, #3
	cfg->data_bits = uart_stm32_ll2cfg_databits(
 8007256:	718b      	strb	r3, [r1, #6]
  return (uint32_t)(READ_BIT(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE));
 8007258:	6953      	ldr	r3, [r2, #20]
 800725a:	f403 7340 	and.w	r3, r3, #768	; 0x300
	if (fc == LL_USART_HWCONTROL_RTS_CTS) {
 800725e:	f5a3 7240 	sub.w	r2, r3, #768	; 0x300
 8007262:	4253      	negs	r3, r2
 8007264:	4153      	adcs	r3, r2
 8007266:	71cb      	strb	r3, [r1, #7]
}
 8007268:	2000      	movs	r0, #0
 800726a:	4770      	bx	lr
		return UART_CFG_PARITY_EVEN;
 800726c:	2302      	movs	r3, #2
 800726e:	e7dd      	b.n	800722c <uart_stm32_config_get+0x20>
		return UART_CFG_STOP_BITS_0_5;
 8007270:	2300      	movs	r3, #0
 8007272:	e7e9      	b.n	8007248 <uart_stm32_config_get+0x3c>
		return UART_CFG_STOP_BITS_1_5;
 8007274:	2302      	movs	r3, #2
 8007276:	e7e7      	b.n	8007248 <uart_stm32_config_get+0x3c>

08007278 <HAL_TIM_PWM_MspInit>:
 8007278:	4770      	bx	lr

0800727a <HAL_TIM_PWM_Init>:
{
 800727a:	b510      	push	{r4, lr}
  if (htim == NULL)
 800727c:	4604      	mov	r4, r0
 800727e:	b1a0      	cbz	r0, 80072aa <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007280:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007284:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007288:	b91b      	cbnz	r3, 8007292 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800728a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800728e:	f7ff fff3 	bl	8007278 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007292:	2302      	movs	r3, #2
 8007294:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	1d21      	adds	r1, r4, #4
 800729c:	f7fe fcf8 	bl	8005c90 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80072a0:	2301      	movs	r3, #1
 80072a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80072a6:	2000      	movs	r0, #0
}
 80072a8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072aa:	2001      	movs	r0, #1
 80072ac:	e7fc      	b.n	80072a8 <HAL_TIM_PWM_Init+0x2e>

080072ae <HAL_TIM_PWM_ConfigChannel>:
{
 80072ae:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80072b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80072b4:	2b01      	cmp	r3, #1
{
 80072b6:	4604      	mov	r4, r0
 80072b8:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80072bc:	d025      	beq.n	800730a <HAL_TIM_PWM_ConfigChannel+0x5c>
 80072be:	2301      	movs	r3, #1
 80072c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80072c4:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80072c8:	2a0c      	cmp	r2, #12
 80072ca:	d818      	bhi.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x50>
 80072cc:	e8df f002 	tbb	[pc, r2]
 80072d0:	17171707 	.word	0x17171707
 80072d4:	1717171e 	.word	0x1717171e
 80072d8:	1717172f 	.word	0x1717172f
 80072dc:	40          	.byte	0x40
 80072dd:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80072de:	6820      	ldr	r0, [r4, #0]
 80072e0:	f7fe fc48 	bl	8005b74 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072e4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072e6:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80072e8:	699a      	ldr	r2, [r3, #24]
 80072ea:	f042 0208 	orr.w	r2, r2, #8
 80072ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80072f0:	699a      	ldr	r2, [r3, #24]
 80072f2:	f022 0204 	bic.w	r2, r2, #4
 80072f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80072f8:	699a      	ldr	r2, [r3, #24]
 80072fa:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072fc:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80072fe:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007300:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007302:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007306:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800730a:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	f7fe fd25 	bl	8005d5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007312:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007314:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007316:	699a      	ldr	r2, [r3, #24]
 8007318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800731c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800731e:	699a      	ldr	r2, [r3, #24]
 8007320:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007324:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007326:	699a      	ldr	r2, [r3, #24]
 8007328:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800732c:	e7e6      	b.n	80072fc <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800732e:	6820      	ldr	r0, [r4, #0]
 8007330:	f7fe fc52 	bl	8005bd8 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007334:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007336:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007338:	69da      	ldr	r2, [r3, #28]
 800733a:	f042 0208 	orr.w	r2, r2, #8
 800733e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007340:	69da      	ldr	r2, [r3, #28]
 8007342:	f022 0204 	bic.w	r2, r2, #4
 8007346:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007348:	69da      	ldr	r2, [r3, #28]
 800734a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800734c:	61da      	str	r2, [r3, #28]
      break;
 800734e:	e7d6      	b.n	80072fe <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	f7fe fc77 	bl	8005c44 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007356:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007358:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800735a:	69da      	ldr	r2, [r3, #28]
 800735c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007362:	69da      	ldr	r2, [r3, #28]
 8007364:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800736a:	69da      	ldr	r2, [r3, #28]
 800736c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007370:	e7ec      	b.n	800734c <HAL_TIM_PWM_ConfigChannel+0x9e>

08007372 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007372:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007374:	f001 011f 	and.w	r1, r1, #31
{
 8007378:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800737a:	2401      	movs	r4, #1
 800737c:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800737e:	ea23 0304 	bic.w	r3, r3, r4
 8007382:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007384:	6a03      	ldr	r3, [r0, #32]
 8007386:	408a      	lsls	r2, r1
 8007388:	431a      	orrs	r2, r3
 800738a:	6202      	str	r2, [r0, #32]
}
 800738c:	bd10      	pop	{r4, pc}

0800738e <HAL_TIM_PWM_Start>:
 800738e:	f7fe bd1b 	b.w	8005dc8 <HAL_TIM_OC_Start>

08007392 <arch_system_halt>:
 8007392:	f04f 0210 	mov.w	r2, #16
 8007396:	f3ef 8311 	mrs	r3, BASEPRI
 800739a:	f382 8811 	msr	BASEPRI, r2
 800739e:	f3bf 8f6f 	isb	sy
	 */

	(void)arch_irq_lock();
	for (;;) {
		/* Spin endlessly */
	}
 80073a2:	e7fe      	b.n	80073a2 <arch_system_halt+0x10>

080073a4 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
 80073a4:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
 80073a6:	f7ff fff4 	bl	8007392 <arch_system_halt>

080073aa <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
 80073aa:	b570      	push	{r4, r5, r6, lr}
 80073ac:	4605      	mov	r5, r0
 80073ae:	460e      	mov	r6, r1
	return z_impl_k_current_get();
 80073b0:	f7ff f93e 	bl	8006630 <z_impl_k_current_get>
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	k_sys_fatal_error_handler(reason, esf);
 80073b4:	4631      	mov	r1, r6
 80073b6:	4604      	mov	r4, r0
 80073b8:	4628      	mov	r0, r5
 80073ba:	f7ff fff3 	bl	80073a4 <k_sys_fatal_error_handler>
	z_impl_k_thread_abort(thread);
 80073be:	4620      	mov	r0, r4
			}
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	k_thread_abort(thread);
}
 80073c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80073c4:	f7fe b878 	b.w	80054b8 <z_impl_k_thread_abort>

080073c8 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 80073c8:	7b43      	ldrb	r3, [r0, #13]
 80073ca:	06db      	lsls	r3, r3, #27
 80073cc:	bf03      	ittte	eq
 80073ce:	6980      	ldreq	r0, [r0, #24]
 80073d0:	fab0 f080 	clzeq	r0, r0
 80073d4:	0940      	lsreq	r0, r0, #5
 80073d6:	2000      	movne	r0, #0
}
 80073d8:	4770      	bx	lr

080073da <z_unpend_thread_no_timeout>:
{
 80073da:	b538      	push	{r3, r4, r5, lr}
 80073dc:	4604      	mov	r4, r0
 80073de:	f04f 0310 	mov.w	r3, #16
 80073e2:	f3ef 8511 	mrs	r5, BASEPRI
 80073e6:	f383 8811 	msr	BASEPRI, r3
 80073ea:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80073ee:	4601      	mov	r1, r0
 80073f0:	6880      	ldr	r0, [r0, #8]
 80073f2:	f7fe ff9f 	bl	8006334 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80073f6:	7b63      	ldrb	r3, [r4, #13]
 80073f8:	f023 0302 	bic.w	r3, r3, #2
 80073fc:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 80073fe:	f385 8811 	msr	BASEPRI, r5
 8007402:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8007406:	2300      	movs	r3, #0
 8007408:	60a3      	str	r3, [r4, #8]
}
 800740a:	bd38      	pop	{r3, r4, r5, pc}

0800740c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 800740c:	b921      	cbnz	r1, 8007418 <z_reschedule+0xc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800740e:	f3ef 8005 	mrs	r0, IPSR
 8007412:	b908      	cbnz	r0, 8007418 <z_reschedule+0xc>
 8007414:	f7fd be18 	b.w	8005048 <arch_swap>
 8007418:	f381 8811 	msr	BASEPRI, r1
 800741c:	f3bf 8f6f 	isb	sy
}
 8007420:	4770      	bx	lr

08007422 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
 8007422:	4603      	mov	r3, r0
 8007424:	b920      	cbnz	r0, 8007430 <z_reschedule_irqlock+0xe>
 8007426:	f3ef 8205 	mrs	r2, IPSR
 800742a:	b90a      	cbnz	r2, 8007430 <z_reschedule_irqlock+0xe>
 800742c:	f7fd be0c 	b.w	8005048 <arch_swap>
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
}
 8007438:	4770      	bx	lr

0800743a <z_reschedule_unlocked>:
	__asm__ volatile(
 800743a:	f04f 0310 	mov.w	r3, #16
 800743e:	f3ef 8011 	mrs	r0, BASEPRI
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
 800744a:	f7ff bfea 	b.w	8007422 <z_reschedule_irqlock>

0800744e <z_priq_dumb_best>:
	return list->head == list;
 800744e:	6803      	ldr	r3, [r0, #0]
}
 8007450:	4298      	cmp	r0, r3
 8007452:	bf14      	ite	ne
 8007454:	4618      	movne	r0, r3
 8007456:	2000      	moveq	r0, #0
 8007458:	4770      	bx	lr

0800745a <z_thread_timeout>:
	if (th->base.pended_on != NULL) {
 800745a:	f850 3c10 	ldr.w	r3, [r0, #-16]
{
 800745e:	b570      	push	{r4, r5, r6, lr}
 8007460:	4604      	mov	r4, r0
	struct k_thread *th = CONTAINER_OF(to, struct k_thread, base.timeout);
 8007462:	f1a0 0518 	sub.w	r5, r0, #24
	if (th->base.pended_on != NULL) {
 8007466:	b1cb      	cbz	r3, 800749c <z_thread_timeout+0x42>
 8007468:	f04f 0310 	mov.w	r3, #16
 800746c:	f3ef 8611 	mrs	r6, BASEPRI
 8007470:	f383 8811 	msr	BASEPRI, r3
 8007474:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 8007478:	4629      	mov	r1, r5
 800747a:	f850 0c10 	ldr.w	r0, [r0, #-16]
 800747e:	f7fe ff59 	bl	8006334 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 8007482:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 8007486:	f023 0302 	bic.w	r3, r3, #2
 800748a:	f804 3c0b 	strb.w	r3, [r4, #-11]
	__asm__ volatile(
 800748e:	f386 8811 	msr	BASEPRI, r6
 8007492:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8007496:	2300      	movs	r3, #0
 8007498:	f844 3c10 	str.w	r3, [r4, #-16]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
 800749c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
 80074a0:	f023 0314 	bic.w	r3, r3, #20
 80074a4:	f804 3c0b 	strb.w	r3, [r4, #-11]
	if (z_is_thread_ready(thread)) {
 80074a8:	4628      	mov	r0, r5
 80074aa:	f7ff ff8d 	bl	80073c8 <z_is_thread_ready>
 80074ae:	b120      	cbz	r0, 80074ba <z_thread_timeout+0x60>
		z_add_thread_to_ready_q(thread);
 80074b0:	4628      	mov	r0, r5
}
 80074b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80074b6:	f7fe bf8d 	b.w	80063d4 <z_add_thread_to_ready_q>
 80074ba:	bd70      	pop	{r4, r5, r6, pc}

080074bc <z_unpend_first_thread>:
{
 80074bc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
 80074be:	f04f 0310 	mov.w	r3, #16
 80074c2:	f3ef 8211 	mrs	r2, BASEPRI
 80074c6:	f383 8811 	msr	BASEPRI, r3
 80074ca:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
 80074ce:	f7ff ffbe 	bl	800744e <z_priq_dumb_best>
 80074d2:	4604      	mov	r4, r0
	__asm__ volatile(
 80074d4:	f382 8811 	msr	BASEPRI, r2
 80074d8:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
 80074dc:	b1c8      	cbz	r0, 8007512 <z_unpend_first_thread+0x56>
	__asm__ volatile(
 80074de:	f04f 0310 	mov.w	r3, #16
 80074e2:	f3ef 8511 	mrs	r5, BASEPRI
 80074e6:	f383 8811 	msr	BASEPRI, r3
 80074ea:	f3bf 8f6f 	isb	sy
		_priq_wait_remove(&pended_on(thread)->waitq, thread);
 80074ee:	4601      	mov	r1, r0
 80074f0:	6880      	ldr	r0, [r0, #8]
 80074f2:	f7fe ff1f 	bl	8006334 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
 80074f6:	7b63      	ldrb	r3, [r4, #13]
 80074f8:	f023 0302 	bic.w	r3, r3, #2
 80074fc:	7363      	strb	r3, [r4, #13]
	__asm__ volatile(
 80074fe:	f385 8811 	msr	BASEPRI, r5
 8007502:	f3bf 8f6f 	isb	sy
	thread->base.pended_on = NULL;
 8007506:	2300      	movs	r3, #0
 8007508:	60a3      	str	r3, [r4, #8]
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
 800750a:	f104 0018 	add.w	r0, r4, #24
 800750e:	f000 f839 	bl	8007584 <z_abort_timeout>
}
 8007512:	4620      	mov	r0, r4
 8007514:	bd38      	pop	{r3, r4, r5, pc}

08007516 <z_is_thread_ready>:
	return !((z_is_thread_prevented_from_running(thread)) != 0 ||
 8007516:	7b43      	ldrb	r3, [r0, #13]
 8007518:	06db      	lsls	r3, r3, #27
 800751a:	bf03      	ittte	eq
 800751c:	6980      	ldreq	r0, [r0, #24]
 800751e:	fab0 f080 	clzeq	r0, r0
 8007522:	0940      	lsreq	r0, r0, #5
 8007524:	2000      	movne	r0, #0
}
 8007526:	4770      	bx	lr

08007528 <z_new_thread_init>:
{
 8007528:	b510      	push	{r4, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
 800752a:	9c02      	ldr	r4, [sp, #8]
 800752c:	7304      	strb	r4, [r0, #12]
	thread_base->thread_state = (u8_t)initial_state;

	thread_base->prio = priority;
 800752e:	7383      	strb	r3, [r0, #14]
	thread_base->thread_state = (u8_t)initial_state;
 8007530:	2404      	movs	r4, #4

	thread_base->sched_locked = 0U;
 8007532:	2300      	movs	r3, #0
	thread_base->thread_state = (u8_t)initial_state;
 8007534:	7344      	strb	r4, [r0, #13]
	thread_base->sched_locked = 0U;
 8007536:	73c3      	strb	r3, [r0, #15]
	node->prev = NULL;
 8007538:	e9c0 3306 	strd	r3, r3, [r0, #24]
	thread->fn_abort = NULL;
 800753c:	e9c0 3313 	strd	r3, r3, [r0, #76]	; 0x4c
	thread->stack_info.size = (u32_t)stackSize;
 8007540:	e9c0 1216 	strd	r1, r2, [r0, #88]	; 0x58
}
 8007544:	bd10      	pop	{r4, pc}

08007546 <z_thread_single_abort>:
	if (thread->fn_abort != NULL) {
 8007546:	6d03      	ldr	r3, [r0, #80]	; 0x50
{
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
 800754c:	b103      	cbz	r3, 8007550 <z_thread_single_abort+0xa>
		thread->fn_abort();
 800754e:	4798      	blx	r3
	if (z_is_thread_ready(thread)) {
 8007550:	4620      	mov	r0, r4
 8007552:	f7ff ffe0 	bl	8007516 <z_is_thread_ready>
 8007556:	b138      	cbz	r0, 8007568 <z_thread_single_abort+0x22>
		z_remove_thread_from_ready_q(thread);
 8007558:	4620      	mov	r0, r4
 800755a:	f7fe ffe9 	bl	8006530 <z_remove_thread_from_ready_q>
	thread->base.thread_state |= _THREAD_DEAD;
 800755e:	7b63      	ldrb	r3, [r4, #13]
 8007560:	f043 0308 	orr.w	r3, r3, #8
 8007564:	7363      	strb	r3, [r4, #13]
}
 8007566:	bd10      	pop	{r4, pc}
		if (z_is_thread_pending(thread)) {
 8007568:	7b63      	ldrb	r3, [r4, #13]
 800756a:	079b      	lsls	r3, r3, #30
 800756c:	d502      	bpl.n	8007574 <z_thread_single_abort+0x2e>
			z_unpend_thread_no_timeout(thread);
 800756e:	4620      	mov	r0, r4
 8007570:	f7ff ff33 	bl	80073da <z_unpend_thread_no_timeout>
		if (z_is_thread_timeout_active(thread)) {
 8007574:	69a3      	ldr	r3, [r4, #24]
 8007576:	2b00      	cmp	r3, #0
 8007578:	d0f1      	beq.n	800755e <z_thread_single_abort+0x18>
 800757a:	f104 0018 	add.w	r0, r4, #24
 800757e:	f000 f801 	bl	8007584 <z_abort_timeout>
 8007582:	e7ec      	b.n	800755e <z_thread_single_abort+0x18>

08007584 <z_abort_timeout>:
{
 8007584:	b510      	push	{r4, lr}
	__asm__ volatile(
 8007586:	f04f 0210 	mov.w	r2, #16
 800758a:	f3ef 8411 	mrs	r4, BASEPRI
 800758e:	f382 8811 	msr	BASEPRI, r2
 8007592:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
 8007596:	6803      	ldr	r3, [r0, #0]
 8007598:	b13b      	cbz	r3, 80075aa <z_abort_timeout+0x26>
			remove_timeout(to);
 800759a:	f7ff f929 	bl	80067f0 <remove_timeout>
			ret = 0;
 800759e:	2000      	movs	r0, #0
	__asm__ volatile(
 80075a0:	f384 8811 	msr	BASEPRI, r4
 80075a4:	f3bf 8f6f 	isb	sy
}
 80075a8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
 80075aa:	f06f 0015 	mvn.w	r0, #21
 80075ae:	e7f7      	b.n	80075a0 <z_abort_timeout+0x1c>

080075b0 <z_get_next_timeout_expiry>:
{
 80075b0:	b510      	push	{r4, lr}
	__asm__ volatile(
 80075b2:	f04f 0310 	mov.w	r3, #16
 80075b6:	f3ef 8411 	mrs	r4, BASEPRI
 80075ba:	f383 8811 	msr	BASEPRI, r3
 80075be:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
 80075c2:	f7ff f929 	bl	8006818 <next_timeout>
	__asm__ volatile(
 80075c6:	f384 8811 	msr	BASEPRI, r4
 80075ca:	f3bf 8f6f 	isb	sy
}
 80075ce:	bd10      	pop	{r4, pc}

080075d0 <z_set_timeout_expiry>:
{
 80075d0:	b570      	push	{r4, r5, r6, lr}
 80075d2:	4604      	mov	r4, r0
 80075d4:	460e      	mov	r6, r1
	__asm__ volatile(
 80075d6:	f04f 0310 	mov.w	r3, #16
 80075da:	f3ef 8511 	mrs	r5, BASEPRI
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
		int next = next_timeout();
 80075e6:	f7ff f917 	bl	8006818 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
 80075ea:	2801      	cmp	r0, #1
 80075ec:	dd05      	ble.n	80075fa <z_set_timeout_expiry+0x2a>
 80075ee:	42a0      	cmp	r0, r4
 80075f0:	dd03      	ble.n	80075fa <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, idle);
 80075f2:	4631      	mov	r1, r6
 80075f4:	4620      	mov	r0, r4
 80075f6:	f7fd fca9 	bl	8004f4c <z_clock_set_timeout>
	__asm__ volatile(
 80075fa:	f385 8811 	msr	BASEPRI, r5
 80075fe:	f3bf 8f6f 	isb	sy
}
 8007602:	bd70      	pop	{r4, r5, r6, pc}

08007604 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
 8007604:	b508      	push	{r3, lr}
	__asm__ volatile(
 8007606:	f04f 0210 	mov.w	r2, #16
 800760a:	f3ef 8311 	mrs	r3, BASEPRI
 800760e:	f382 8811 	msr	BASEPRI, r2
 8007612:	f3bf 8f6f 	isb	sy
	s32_t ticks = z_get_next_timeout_expiry();
 8007616:	f7ff ffcb 	bl	80075b0 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
 800761a:	2101      	movs	r1, #1
 800761c:	2802      	cmp	r0, #2
 800761e:	bfd8      	it	le
 8007620:	4608      	movle	r0, r1
 8007622:	f7ff ffd5 	bl	80075d0 <z_set_timeout_expiry>
 * @return N/A
 * @req K-CPU-IDLE-001
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
 8007626:	f7fd fe0d 	bl	8005244 <arch_cpu_idle>
 800762a:	e7ec      	b.n	8007606 <idle+0x2>

0800762c <_OffsetAbsSyms>:
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
#endif

GEN_ABS_SYM_END
 800762c:	4770      	bx	lr
